   1               		.file	"action.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.action_exec,"ax",@progbits
  11               	.global	action_exec
  13               	action_exec:
  14               	.LFB103:
  15               		.file 1 "../../tmk_core/common/action.c"
   1:../../tmk_core/common/action.c **** /*
   2:../../tmk_core/common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/action.c **** 
   4:../../tmk_core/common/action.c **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/action.c **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/action.c **** (at your option) any later version.
   8:../../tmk_core/common/action.c **** 
   9:../../tmk_core/common/action.c **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/action.c **** GNU General Public License for more details.
  13:../../tmk_core/common/action.c **** 
  14:../../tmk_core/common/action.c **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/action.c **** */
  17:../../tmk_core/common/action.c **** #include "host.h"
  18:../../tmk_core/common/action.c **** #include "keycode.h"
  19:../../tmk_core/common/action.c **** #include "keyboard.h"
  20:../../tmk_core/common/action.c **** #include "mousekey.h"
  21:../../tmk_core/common/action.c **** #include "command.h"
  22:../../tmk_core/common/action.c **** #include "led.h"
  23:../../tmk_core/common/action.c **** #include "backlight.h"
  24:../../tmk_core/common/action.c **** #include "action_layer.h"
  25:../../tmk_core/common/action.c **** #include "action_tapping.h"
  26:../../tmk_core/common/action.c **** #include "action_macro.h"
  27:../../tmk_core/common/action.c **** #include "action_util.h"
  28:../../tmk_core/common/action.c **** #include "action.h"
  29:../../tmk_core/common/action.c **** 
  30:../../tmk_core/common/action.c **** #ifdef DEBUG_ACTION
  31:../../tmk_core/common/action.c **** #include "debug.h"
  32:../../tmk_core/common/action.c **** #else
  33:../../tmk_core/common/action.c **** #include "nodebug.h"
  34:../../tmk_core/common/action.c **** #endif
  35:../../tmk_core/common/action.c **** 
  36:../../tmk_core/common/action.c **** 
  37:../../tmk_core/common/action.c **** void action_exec(keyevent_t event)
  38:../../tmk_core/common/action.c **** {
  16               		.loc 1 38 0
  17               		.cfi_startproc
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26 0004 CDB7      		in r28,__SP_L__
  27 0006 DEB7      		in r29,__SP_H__
  28               	.LCFI2:
  29               		.cfi_def_cfa_register 28
  30 0008 2B97      		sbiw r28,11
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 15
  33 000a 0FB6      		in __tmp_reg__,__SREG__
  34 000c F894      		cli
  35 000e DEBF      		out __SP_H__,r29
  36 0010 0FBE      		out __SREG__,__tmp_reg__
  37 0012 CDBF      		out __SP_L__,r28
  38               	/* prologue: function */
  39               	/* frame size = 11 */
  40               	/* stack size = 13 */
  41               	.L__stack_usage = 13
  42 0014 4F83      		std Y+7,r20
  43 0016 5887      		std Y+8,r21
  44 0018 6987      		std Y+9,r22
  45 001a 7A87      		std Y+10,r23
  46 001c 8B87      		std Y+11,r24
  47               	.LVL0:
  39:../../tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  40:../../tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
  41:../../tmk_core/common/action.c ****         dprint("EVENT: "); debug_event(event); dprintln();
  42:../../tmk_core/common/action.c ****     }
  43:../../tmk_core/common/action.c **** 
  44:../../tmk_core/common/action.c ****     keyrecord_t record = { .event = event };
  48               		.loc 1 44 0
  49 001e DE01      		movw r26,r28
  50 0020 1196      		adiw r26,1
  51 0022 86E0      		ldi r24,lo8(6)
  52 0024 FD01      		movw r30,r26
  53               		0:
  54 0026 1192      		st Z+,__zero_reg__
  55 0028 8A95      		dec r24
  56 002a 01F4      		brne 0b
  57 002c 85E0      		ldi r24,lo8(5)
  58 002e FE01      		movw r30,r28
  59 0030 3796      		adiw r30,7
  60               		0:
  61 0032 0190      		ld r0,Z+
  62 0034 0D92      		st X+,r0
  63 0036 8A95      		dec r24
  64 0038 01F4      		brne 0b
  45:../../tmk_core/common/action.c **** 
  46:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  47:../../tmk_core/common/action.c ****     action_tapping_process(record);
  65               		.loc 1 47 0
  66 003a 4981      		ldd r20,Y+1
  67               	.LVL1:
  68 003c 5A81      		ldd r21,Y+2
  69               	.LVL2:
  70 003e 6B81      		ldd r22,Y+3
  71 0040 7C81      		ldd r23,Y+4
  72 0042 8D81      		ldd r24,Y+5
  73 0044 9E81      		ldd r25,Y+6
  74 0046 0E94 0000 		call action_tapping_process
  75               	.LVL3:
  76               	/* epilogue start */
  48:../../tmk_core/common/action.c **** #else
  49:../../tmk_core/common/action.c ****     process_action(&record);
  50:../../tmk_core/common/action.c ****     if (!IS_NOEVENT(record.event)) {
  51:../../tmk_core/common/action.c ****         dprint("processed: "); debug_record(record); dprintln();
  52:../../tmk_core/common/action.c ****     }
  53:../../tmk_core/common/action.c **** #endif
  54:../../tmk_core/common/action.c **** }
  77               		.loc 1 54 0
  78 004a 2B96      		adiw r28,11
  79 004c 0FB6      		in __tmp_reg__,__SREG__
  80 004e F894      		cli
  81 0050 DEBF      		out __SP_H__,r29
  82 0052 0FBE      		out __SREG__,__tmp_reg__
  83 0054 CDBF      		out __SP_L__,r28
  84 0056 DF91      		pop r29
  85 0058 CF91      		pop r28
  86 005a 0895      		ret
  87               		.cfi_endproc
  88               	.LFE103:
  90               		.section	.text.register_code,"ax",@progbits
  91               	.global	register_code
  93               	register_code:
  94               	.LFB105:
  55:../../tmk_core/common/action.c **** 
  56:../../tmk_core/common/action.c **** void process_action(keyrecord_t *record)
  57:../../tmk_core/common/action.c **** {
  58:../../tmk_core/common/action.c ****     keyevent_t event = record->event;
  59:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  60:../../tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
  61:../../tmk_core/common/action.c **** #endif
  62:../../tmk_core/common/action.c **** 
  63:../../tmk_core/common/action.c ****     if (IS_NOEVENT(event)) { return; }
  64:../../tmk_core/common/action.c **** 
  65:../../tmk_core/common/action.c ****     action_t action = layer_switch_get_action(event.key);
  66:../../tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
  67:../../tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
  68:../../tmk_core/common/action.c ****     dprint(" layer_state: "); layer_debug();
  69:../../tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
  70:../../tmk_core/common/action.c **** #endif
  71:../../tmk_core/common/action.c ****     dprintln();
  72:../../tmk_core/common/action.c **** 
  73:../../tmk_core/common/action.c ****     switch (action.kind.id) {
  74:../../tmk_core/common/action.c ****         /* Key and Mods */
  75:../../tmk_core/common/action.c ****         case ACT_LMODS:
  76:../../tmk_core/common/action.c ****         case ACT_RMODS:
  77:../../tmk_core/common/action.c ****             {
  78:../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
  79:../../tmk_core/common/action.c ****                                                                 action.key.mods<<4;
  80:../../tmk_core/common/action.c ****                 if (event.pressed) {
  81:../../tmk_core/common/action.c ****                     if (mods) {
  82:../../tmk_core/common/action.c ****                         add_weak_mods(mods);
  83:../../tmk_core/common/action.c ****                         send_keyboard_report();
  84:../../tmk_core/common/action.c ****                     }
  85:../../tmk_core/common/action.c ****                     register_code(action.key.code);
  86:../../tmk_core/common/action.c ****                 } else {
  87:../../tmk_core/common/action.c ****                     unregister_code(action.key.code);
  88:../../tmk_core/common/action.c ****                     if (mods) {
  89:../../tmk_core/common/action.c ****                         del_weak_mods(mods);
  90:../../tmk_core/common/action.c ****                         send_keyboard_report();
  91:../../tmk_core/common/action.c ****                     }
  92:../../tmk_core/common/action.c ****                 }
  93:../../tmk_core/common/action.c ****             }
  94:../../tmk_core/common/action.c ****             break;
  95:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  96:../../tmk_core/common/action.c ****         case ACT_LMODS_TAP:
  97:../../tmk_core/common/action.c ****         case ACT_RMODS_TAP:
  98:../../tmk_core/common/action.c ****             {
  99:../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 100:../../tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 101:../../tmk_core/common/action.c ****                 switch (action.layer_tap.code) {
 102:../../tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 103:../../tmk_core/common/action.c ****                     case MODS_ONESHOT:
 104:../../tmk_core/common/action.c ****                         // Oneshot modifier
 105:../../tmk_core/common/action.c ****                         if (event.pressed) {
 106:../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 107:../../tmk_core/common/action.c ****                                 register_mods(mods);
 108:../../tmk_core/common/action.c ****                             }
 109:../../tmk_core/common/action.c ****                             else if (tap_count == 1) {
 110:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 111:../../tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 112:../../tmk_core/common/action.c ****                             }
 113:../../tmk_core/common/action.c ****                             else {
 114:../../tmk_core/common/action.c ****                                 register_mods(mods);
 115:../../tmk_core/common/action.c ****                             }
 116:../../tmk_core/common/action.c ****                         } else {
 117:../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 118:../../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 119:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 120:../../tmk_core/common/action.c ****                             }
 121:../../tmk_core/common/action.c ****                             else if (tap_count == 1) {
 122:../../tmk_core/common/action.c ****                                 // Retain Oneshot mods
 123:../../tmk_core/common/action.c ****                             }
 124:../../tmk_core/common/action.c ****                             else {
 125:../../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 126:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 127:../../tmk_core/common/action.c ****                             }
 128:../../tmk_core/common/action.c ****                         }
 129:../../tmk_core/common/action.c ****                         break;
 130:../../tmk_core/common/action.c ****     #endif
 131:../../tmk_core/common/action.c ****                     case MODS_TAP_TOGGLE:
 132:../../tmk_core/common/action.c ****                         if (event.pressed) {
 133:../../tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 134:../../tmk_core/common/action.c ****                                 register_mods(mods);
 135:../../tmk_core/common/action.c ****                             }
 136:../../tmk_core/common/action.c ****                         } else {
 137:../../tmk_core/common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 138:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 139:../../tmk_core/common/action.c ****                             }
 140:../../tmk_core/common/action.c ****                         }
 141:../../tmk_core/common/action.c ****                         break;
 142:../../tmk_core/common/action.c ****                     default:
 143:../../tmk_core/common/action.c ****                         if (event.pressed) {
 144:../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 145:../../tmk_core/common/action.c **** #ifndef IGNORE_MOD_TAP_INTERRUPT
 146:../../tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 147:../../tmk_core/common/action.c ****                                     dprint("mods_tap: tap: cancel: add_mods\n");
 148:../../tmk_core/common/action.c ****                                     // ad hoc: set 0 to cancel tap
 149:../../tmk_core/common/action.c ****                                     record->tap.count = 0;
 150:../../tmk_core/common/action.c ****                                     register_mods(mods);
 151:../../tmk_core/common/action.c ****                                 } else
 152:../../tmk_core/common/action.c **** #endif
 153:../../tmk_core/common/action.c ****                                 {
 154:../../tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: register_code\n");
 155:../../tmk_core/common/action.c ****                                     register_code(action.key.code);
 156:../../tmk_core/common/action.c ****                                 }
 157:../../tmk_core/common/action.c ****                             } else {
 158:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 159:../../tmk_core/common/action.c ****                                 register_mods(mods);
 160:../../tmk_core/common/action.c ****                             }
 161:../../tmk_core/common/action.c ****                         } else {
 162:../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 163:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 164:../../tmk_core/common/action.c ****                                 unregister_code(action.key.code);
 165:../../tmk_core/common/action.c ****                             } else {
 166:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 167:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 168:../../tmk_core/common/action.c ****                             }
 169:../../tmk_core/common/action.c ****                         }
 170:../../tmk_core/common/action.c ****                         break;
 171:../../tmk_core/common/action.c ****                 }
 172:../../tmk_core/common/action.c ****             }
 173:../../tmk_core/common/action.c ****             break;
 174:../../tmk_core/common/action.c **** #endif
 175:../../tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 176:../../tmk_core/common/action.c ****         /* other HID usage */
 177:../../tmk_core/common/action.c ****         case ACT_USAGE:
 178:../../tmk_core/common/action.c ****             switch (action.usage.page) {
 179:../../tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 180:../../tmk_core/common/action.c ****                     if (event.pressed) {
 181:../../tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 182:../../tmk_core/common/action.c ****                     } else {
 183:../../tmk_core/common/action.c ****                         host_system_send(0);
 184:../../tmk_core/common/action.c ****                     }
 185:../../tmk_core/common/action.c ****                     break;
 186:../../tmk_core/common/action.c ****                 case PAGE_CONSUMER:
 187:../../tmk_core/common/action.c ****                     if (event.pressed) {
 188:../../tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 189:../../tmk_core/common/action.c ****                     } else {
 190:../../tmk_core/common/action.c ****                         host_consumer_send(0);
 191:../../tmk_core/common/action.c ****                     }
 192:../../tmk_core/common/action.c ****                     break;
 193:../../tmk_core/common/action.c ****             }
 194:../../tmk_core/common/action.c ****             break;
 195:../../tmk_core/common/action.c **** #endif
 196:../../tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 197:../../tmk_core/common/action.c ****         /* Mouse key */
 198:../../tmk_core/common/action.c ****         case ACT_MOUSEKEY:
 199:../../tmk_core/common/action.c ****             if (event.pressed) {
 200:../../tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 201:../../tmk_core/common/action.c ****                 mousekey_send();
 202:../../tmk_core/common/action.c ****             } else {
 203:../../tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 204:../../tmk_core/common/action.c ****                 mousekey_send();
 205:../../tmk_core/common/action.c ****             }
 206:../../tmk_core/common/action.c ****             break;
 207:../../tmk_core/common/action.c **** #endif
 208:../../tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 209:../../tmk_core/common/action.c ****         case ACT_LAYER:
 210:../../tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 211:../../tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 212:../../tmk_core/common/action.c ****                 if (!event.pressed) {
 213:../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 214:../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 215:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 216:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 217:../../tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 218:../../tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 219:../../tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 220:../../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 221:../../tmk_core/common/action.c ****                     }
 222:../../tmk_core/common/action.c ****                 }
 223:../../tmk_core/common/action.c ****             } else {
 224:../../tmk_core/common/action.c ****                 /* Layer Bitwise Operation */
 225:../../tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 226:../../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 227:../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 228:../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 229:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 230:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 231:../../tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 232:../../tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 233:../../tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 234:../../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 235:../../tmk_core/common/action.c ****                     }
 236:../../tmk_core/common/action.c ****                 }
 237:../../tmk_core/common/action.c ****             }
 238:../../tmk_core/common/action.c ****             break;
 239:../../tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 240:../../tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 241:../../tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 242:../../tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 243:../../tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 244:../../tmk_core/common/action.c ****                     /* layer On/Off with modifiers(left only) */
 245:../../tmk_core/common/action.c ****                     if (event.pressed) {
 246:../../tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 247:../../tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 248:../../tmk_core/common/action.c ****                     } else {
 249:../../tmk_core/common/action.c ****                         layer_off(action.layer_tap.val);
 250:../../tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 251:../../tmk_core/common/action.c ****                     }
 252:../../tmk_core/common/action.c ****                     break;
 253:../../tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 254:../../tmk_core/common/action.c ****                     /* tap toggle */
 255:../../tmk_core/common/action.c ****                     if (event.pressed) {
 256:../../tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 257:../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 258:../../tmk_core/common/action.c ****                         }
 259:../../tmk_core/common/action.c ****                     } else {
 260:../../tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 261:../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 262:../../tmk_core/common/action.c ****                         }
 263:../../tmk_core/common/action.c ****                     }
 264:../../tmk_core/common/action.c ****                     break;
 265:../../tmk_core/common/action.c ****                 case OP_ON_OFF:
 266:../../tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 267:../../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 268:../../tmk_core/common/action.c ****                     break;
 269:../../tmk_core/common/action.c ****                 case OP_OFF_ON:
 270:../../tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 271:../../tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 272:../../tmk_core/common/action.c ****                     break;
 273:../../tmk_core/common/action.c ****                 case OP_SET_CLEAR:
 274:../../tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 275:../../tmk_core/common/action.c ****                                     layer_clear();
 276:../../tmk_core/common/action.c ****                     break;
 277:../../tmk_core/common/action.c ****                 default:
 278:../../tmk_core/common/action.c ****                     /* tap key */
 279:../../tmk_core/common/action.c ****                     if (event.pressed) {
 280:../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 281:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 282:../../tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 283:../../tmk_core/common/action.c ****                         } else {
 284:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 285:../../tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 286:../../tmk_core/common/action.c ****                         }
 287:../../tmk_core/common/action.c ****                     } else {
 288:../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 289:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 290:../../tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 291:../../tmk_core/common/action.c ****                         } else {
 292:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 293:../../tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 294:../../tmk_core/common/action.c ****                         }
 295:../../tmk_core/common/action.c ****                     }
 296:../../tmk_core/common/action.c ****                     break;
 297:../../tmk_core/common/action.c ****             }
 298:../../tmk_core/common/action.c ****             break;
 299:../../tmk_core/common/action.c ****     #endif
 300:../../tmk_core/common/action.c **** #endif
 301:../../tmk_core/common/action.c ****         /* Extentions */
 302:../../tmk_core/common/action.c **** #ifndef NO_ACTION_MACRO
 303:../../tmk_core/common/action.c ****         case ACT_MACRO:
 304:../../tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 305:../../tmk_core/common/action.c ****             break;
 306:../../tmk_core/common/action.c **** #endif
 307:../../tmk_core/common/action.c **** #ifdef BACKLIGHT_ENABLE
 308:../../tmk_core/common/action.c ****         case ACT_BACKLIGHT:
 309:../../tmk_core/common/action.c ****             if (!event.pressed) {
 310:../../tmk_core/common/action.c ****                 switch (action.backlight.opt) {
 311:../../tmk_core/common/action.c ****                     case BACKLIGHT_INCREASE:
 312:../../tmk_core/common/action.c ****                         backlight_increase();
 313:../../tmk_core/common/action.c ****                         break;
 314:../../tmk_core/common/action.c ****                     case BACKLIGHT_DECREASE:
 315:../../tmk_core/common/action.c ****                         backlight_decrease();
 316:../../tmk_core/common/action.c ****                         break;
 317:../../tmk_core/common/action.c ****                     case BACKLIGHT_TOGGLE:
 318:../../tmk_core/common/action.c ****                         backlight_toggle();
 319:../../tmk_core/common/action.c ****                         break;
 320:../../tmk_core/common/action.c ****                     case BACKLIGHT_STEP:
 321:../../tmk_core/common/action.c ****                         backlight_step();
 322:../../tmk_core/common/action.c ****                         break;
 323:../../tmk_core/common/action.c ****                     case BACKLIGHT_LEVEL:
 324:../../tmk_core/common/action.c ****                         backlight_level(action.backlight.level);
 325:../../tmk_core/common/action.c ****                         break;
 326:../../tmk_core/common/action.c ****                 }
 327:../../tmk_core/common/action.c ****             }
 328:../../tmk_core/common/action.c ****             break;
 329:../../tmk_core/common/action.c **** #endif
 330:../../tmk_core/common/action.c ****         case ACT_COMMAND:
 331:../../tmk_core/common/action.c ****             break;
 332:../../tmk_core/common/action.c **** #ifndef NO_ACTION_FUNCTION
 333:../../tmk_core/common/action.c ****         case ACT_FUNCTION:
 334:../../tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 335:../../tmk_core/common/action.c ****             break;
 336:../../tmk_core/common/action.c **** #endif
 337:../../tmk_core/common/action.c ****         default:
 338:../../tmk_core/common/action.c ****             break;
 339:../../tmk_core/common/action.c ****     }
 340:../../tmk_core/common/action.c **** }
 341:../../tmk_core/common/action.c **** 
 342:../../tmk_core/common/action.c **** 
 343:../../tmk_core/common/action.c **** 
 344:../../tmk_core/common/action.c **** 
 345:../../tmk_core/common/action.c **** /*
 346:../../tmk_core/common/action.c ****  * Utilities for actions.
 347:../../tmk_core/common/action.c ****  */
 348:../../tmk_core/common/action.c **** void register_code(uint8_t code)
 349:../../tmk_core/common/action.c **** {
  95               		.loc 1 349 0
  96               		.cfi_startproc
  97               	.LVL4:
  98 0000 CF93      		push r28
  99               	.LCFI4:
 100               		.cfi_def_cfa_offset 3
 101               		.cfi_offset 28, -2
 102               	/* prologue: function */
 103               	/* frame size = 0 */
 104               	/* stack size = 1 */
 105               	.L__stack_usage = 1
 106 0002 C82F      		mov r28,r24
 350:../../tmk_core/common/action.c ****     if (code == KC_NO) {
 107               		.loc 1 350 0
 108 0004 8823      		tst r24
 109 0006 01F4      		brne .+2
 110 0008 00C0      		rjmp .L2
 351:../../tmk_core/common/action.c ****         return;
 352:../../tmk_core/common/action.c ****     }
 353:../../tmk_core/common/action.c **** 
 354:../../tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 355:../../tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 111               		.loc 1 355 0
 112 000a 8238      		cpi r24,lo8(-126)
 113 000c 01F4      		brne .L5
 356:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 357:../../tmk_core/common/action.c ****         // Resync: ignore if caps lock already is on
 358:../../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
 114               		.loc 1 358 0
 115 000e 0E94 0000 		call host_keyboard_leds
 116               	.LVL5:
 117 0012 81FD      		sbrc r24,1
 118 0014 00C0      		rjmp .L2
 359:../../tmk_core/common/action.c **** #endif
 360:../../tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 119               		.loc 1 360 0
 120 0016 89E3      		ldi r24,lo8(57)
 121 0018 0E94 0000 		call add_key
 122               	.LVL6:
 361:../../tmk_core/common/action.c ****         send_keyboard_report();
 123               		.loc 1 361 0
 124 001c 0E94 0000 		call send_keyboard_report
 125               	.LVL7:
 362:../../tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 126               		.loc 1 362 0
 127 0020 89E3      		ldi r24,lo8(57)
 128 0022 00C0      		rjmp .L35
 129               	.LVL8:
 130               	.L5:
 363:../../tmk_core/common/action.c ****         send_keyboard_report();
 364:../../tmk_core/common/action.c ****     }
 365:../../tmk_core/common/action.c **** 
 366:../../tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 131               		.loc 1 366 0
 132 0024 8338      		cpi r24,lo8(-125)
 133 0026 01F4      		brne .L7
 367:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 368:../../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
 134               		.loc 1 368 0
 135 0028 0E94 0000 		call host_keyboard_leds
 136               	.LVL9:
 137 002c 80FD      		sbrc r24,0
 138 002e 00C0      		rjmp .L2
 369:../../tmk_core/common/action.c **** #endif
 370:../../tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 139               		.loc 1 370 0
 140 0030 83E5      		ldi r24,lo8(83)
 141 0032 0E94 0000 		call add_key
 142               	.LVL10:
 371:../../tmk_core/common/action.c ****         send_keyboard_report();
 143               		.loc 1 371 0
 144 0036 0E94 0000 		call send_keyboard_report
 145               	.LVL11:
 372:../../tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 146               		.loc 1 372 0
 147 003a 83E5      		ldi r24,lo8(83)
 148               	.L35:
 149 003c 0E94 0000 		call del_key
 150               	.LVL12:
 151               	.L36:
 152               	/* epilogue start */
 373:../../tmk_core/common/action.c ****         send_keyboard_report();
 374:../../tmk_core/common/action.c ****     }
 375:../../tmk_core/common/action.c **** 
 376:../../tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 377:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 378:../../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
 379:../../tmk_core/common/action.c **** #endif
 380:../../tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 381:../../tmk_core/common/action.c ****         send_keyboard_report();
 382:../../tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 383:../../tmk_core/common/action.c ****         send_keyboard_report();
 384:../../tmk_core/common/action.c ****     }
 385:../../tmk_core/common/action.c **** #endif
 386:../../tmk_core/common/action.c **** 
 387:../../tmk_core/common/action.c ****     else if IS_KEY(code) {
 388:../../tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 389:../../tmk_core/common/action.c ****         if (command_proc(code)) return;
 390:../../tmk_core/common/action.c **** 
 391:../../tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 392:../../tmk_core/common/action.c **** /* TODO: remove
 393:../../tmk_core/common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 394:../../tmk_core/common/action.c ****             uint8_t tmp_mods = get_mods();
 395:../../tmk_core/common/action.c ****             add_mods(oneshot_state.mods);
 396:../../tmk_core/common/action.c **** 
 397:../../tmk_core/common/action.c ****             add_key(code);
 398:../../tmk_core/common/action.c ****             send_keyboard_report();
 399:../../tmk_core/common/action.c **** 
 400:../../tmk_core/common/action.c ****             set_mods(tmp_mods);
 401:../../tmk_core/common/action.c ****             send_keyboard_report();
 402:../../tmk_core/common/action.c ****             oneshot_cancel();
 403:../../tmk_core/common/action.c ****         } else
 404:../../tmk_core/common/action.c **** */
 405:../../tmk_core/common/action.c **** #endif
 406:../../tmk_core/common/action.c ****         {
 407:../../tmk_core/common/action.c ****             add_key(code);
 408:../../tmk_core/common/action.c ****             send_keyboard_report();
 409:../../tmk_core/common/action.c ****         }
 410:../../tmk_core/common/action.c ****     }
 411:../../tmk_core/common/action.c ****     else if IS_MOD(code) {
 412:../../tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 413:../../tmk_core/common/action.c ****         send_keyboard_report();
 414:../../tmk_core/common/action.c ****     }
 415:../../tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 416:../../tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 417:../../tmk_core/common/action.c ****     }
 418:../../tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 419:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 420:../../tmk_core/common/action.c ****     }
 421:../../tmk_core/common/action.c **** }
 153               		.loc 1 421 0
 154 0040 CF91      		pop r28
 373:../../tmk_core/common/action.c ****         send_keyboard_report();
 155               		.loc 1 373 0
 156 0042 0C94 0000 		jmp send_keyboard_report
 157               	.LVL13:
 158               	.L7:
 376:../../tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 159               		.loc 1 376 0
 160 0046 8438      		cpi r24,lo8(-124)
 161 0048 01F4      		brne .L8
 378:../../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
 162               		.loc 1 378 0
 163 004a 0E94 0000 		call host_keyboard_leds
 164               	.LVL14:
 165 004e 82FD      		sbrc r24,2
 166 0050 00C0      		rjmp .L2
 380:../../tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 167               		.loc 1 380 0
 168 0052 87E4      		ldi r24,lo8(71)
 169 0054 0E94 0000 		call add_key
 170               	.LVL15:
 381:../../tmk_core/common/action.c ****         send_keyboard_report();
 171               		.loc 1 381 0
 172 0058 0E94 0000 		call send_keyboard_report
 173               	.LVL16:
 382:../../tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 174               		.loc 1 382 0
 175 005c 87E4      		ldi r24,lo8(71)
 176 005e 00C0      		rjmp .L35
 177               	.LVL17:
 178               	.L8:
 387:../../tmk_core/common/action.c ****     else if IS_KEY(code) {
 179               		.loc 1 387 0
 180 0060 8CEF      		ldi r24,lo8(-4)
 181               	.LVL18:
 182 0062 8C0F      		add r24,r28
 183 0064 813A      		cpi r24,lo8(-95)
 184 0066 00F4      		brsh .L9
 389:../../tmk_core/common/action.c ****         if (command_proc(code)) return;
 185               		.loc 1 389 0
 186 0068 8C2F      		mov r24,r28
 187 006a 0E94 0000 		call command_proc
 188               	.LVL19:
 189 006e 8111      		cpse r24,__zero_reg__
 190 0070 00C0      		rjmp .L2
 407:../../tmk_core/common/action.c ****             add_key(code);
 191               		.loc 1 407 0
 192 0072 8C2F      		mov r24,r28
 193 0074 0E94 0000 		call add_key
 194               	.LVL20:
 195 0078 00C0      		rjmp .L36
 196               	.L9:
 411:../../tmk_core/common/action.c ****     else if IS_MOD(code) {
 197               		.loc 1 411 0
 198 007a 80E2      		ldi r24,lo8(32)
 199 007c 8C0F      		add r24,r28
 200 007e 8830      		cpi r24,lo8(8)
 201 0080 00F4      		brsh .L10
 412:../../tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 202               		.loc 1 412 0
 203 0082 C770      		andi r28,lo8(7)
 204               	.LVL21:
 205 0084 81E0      		ldi r24,lo8(1)
 206 0086 00C0      		rjmp 2f
 207               		1:
 208 0088 880F      		lsl r24
 209               		2:
 210 008a CA95      		dec r28
 211 008c 02F4      		brpl 1b
 212 008e 0E94 0000 		call add_mods
 213               	.LVL22:
 214 0092 00C0      		rjmp .L36
 215               	.LVL23:
 216               	.L10:
 415:../../tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 217               		.loc 1 415 0
 218 0094 8BE5      		ldi r24,lo8(91)
 219 0096 8C0F      		add r24,r28
 220 0098 8330      		cpi r24,lo8(3)
 221 009a 00F4      		brsh .L11
 416:../../tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 222               		.loc 1 416 0
 223 009c C53A      		cpi r28,lo8(-91)
 224 009e 01F0      		breq .L14
 416:../../tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 225               		.loc 1 416 0 is_stmt 0 discriminator 1
 226 00a0 C63A      		cpi r28,lo8(-90)
 227 00a2 01F4      		brne .L15
 416:../../tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 228               		.loc 1 416 0
 229 00a4 82E8      		ldi r24,lo8(-126)
 230 00a6 90E0      		ldi r25,0
 231 00a8 00C0      		rjmp .L12
 232               	.L14:
 233 00aa 81E8      		ldi r24,lo8(-127)
 234 00ac 90E0      		ldi r25,0
 235 00ae 00C0      		rjmp .L12
 236               	.L15:
 237 00b0 83E8      		ldi r24,lo8(-125)
 238 00b2 90E0      		ldi r25,0
 239               	.L12:
 240               	/* epilogue start */
 241               		.loc 1 421 0 is_stmt 1 discriminator 4
 242 00b4 CF91      		pop r28
 243               	.LVL24:
 416:../../tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 244               		.loc 1 416 0 discriminator 4
 245 00b6 0C94 0000 		jmp host_system_send
 246               	.LVL25:
 247               	.L11:
 418:../../tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 248               		.loc 1 418 0
 249 00ba 88E5      		ldi r24,lo8(88)
 250 00bc 8C0F      		add r24,r28
 251 00be 8331      		cpi r24,lo8(19)
 252 00c0 00F0      		brlo .+2
 253 00c2 00C0      		rjmp .L2
 419:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 254               		.loc 1 419 0
 255 00c4 C83A      		cpi r28,lo8(-88)
 256 00c6 01F0      		breq .L16
 419:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 257               		.loc 1 419 0 is_stmt 0 discriminator 1
 258 00c8 C93A      		cpi r28,lo8(-87)
 259 00ca 01F0      		breq .L17
 419:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 260               		.loc 1 419 0 discriminator 3
 261 00cc CA3A      		cpi r28,lo8(-86)
 262 00ce 01F0      		breq .L18
 419:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 263               		.loc 1 419 0 discriminator 5
 264 00d0 CB3A      		cpi r28,lo8(-85)
 265 00d2 01F0      		breq .L19
 419:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 266               		.loc 1 419 0 discriminator 7
 267 00d4 CC3A      		cpi r28,lo8(-84)
 268 00d6 01F0      		breq .L20
 419:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 269               		.loc 1 419 0 discriminator 13
 270 00d8 CD3A      		cpi r28,lo8(-83)
 271 00da 01F0      		breq .L21
 419:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 272               		.loc 1 419 0 discriminator 15
 273 00dc C03B      		cpi r28,lo8(-80)
 274 00de 01F0      		breq .L22
 419:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 275               		.loc 1 419 0 discriminator 17
 276 00e0 CE3A      		cpi r28,lo8(-82)
 277 00e2 01F0      		breq .L23
 419:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 278               		.loc 1 419 0 discriminator 19
 279 00e4 CF3A      		cpi r28,lo8(-81)
 280 00e6 01F0      		breq .L24
 419:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 281               		.loc 1 419 0 discriminator 21
 282 00e8 C13B      		cpi r28,lo8(-79)
 283 00ea 01F0      		breq .L25
 419:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 284               		.loc 1 419 0 discriminator 23
 285 00ec C23B      		cpi r28,lo8(-78)
 286 00ee 01F0      		breq .L26
 419:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 287               		.loc 1 419 0 discriminator 25
 288 00f0 C33B      		cpi r28,lo8(-77)
 289 00f2 01F0      		breq .L27
 419:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 290               		.loc 1 419 0 discriminator 27
 291 00f4 C43B      		cpi r28,lo8(-76)
 292 00f6 01F0      		breq .L28
 419:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 293               		.loc 1 419 0 discriminator 29
 294 00f8 C53B      		cpi r28,lo8(-75)
 295 00fa 01F0      		breq .L29
 419:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 296               		.loc 1 419 0 discriminator 31
 297 00fc C63B      		cpi r28,lo8(-74)
 298 00fe 01F0      		breq .L30
 419:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 299               		.loc 1 419 0 discriminator 33
 300 0100 C73B      		cpi r28,lo8(-73)
 301 0102 01F0      		breq .L31
 419:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 302               		.loc 1 419 0 discriminator 35
 303 0104 C83B      		cpi r28,lo8(-72)
 304 0106 01F0      		breq .L32
 419:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 305               		.loc 1 419 0 discriminator 37
 306 0108 C93B      		cpi r28,lo8(-71)
 307 010a 01F0      		breq .L33
 419:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 308               		.loc 1 419 0 discriminator 39
 309 010c CA3B      		cpi r28,lo8(-70)
 310 010e 01F4      		brne .L34
 419:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 311               		.loc 1 419 0
 312 0110 8AE2      		ldi r24,lo8(42)
 313 0112 92E0      		ldi r25,lo8(2)
 314 0114 00C0      		rjmp .L13
 315               	.L16:
 316 0116 82EE      		ldi r24,lo8(-30)
 317 0118 90E0      		ldi r25,0
 318 011a 00C0      		rjmp .L13
 319               	.L17:
 320 011c 89EE      		ldi r24,lo8(-23)
 321 011e 90E0      		ldi r25,0
 322 0120 00C0      		rjmp .L13
 323               	.L18:
 324 0122 8AEE      		ldi r24,lo8(-22)
 325 0124 90E0      		ldi r25,0
 326 0126 00C0      		rjmp .L13
 327               	.L19:
 328 0128 85EB      		ldi r24,lo8(-75)
 329 012a 90E0      		ldi r25,0
 330 012c 00C0      		rjmp .L13
 331               	.L20:
 332 012e 86EB      		ldi r24,lo8(-74)
 333 0130 90E0      		ldi r25,0
 334 0132 00C0      		rjmp .L13
 335               	.L21:
 336 0134 87EB      		ldi r24,lo8(-73)
 337 0136 90E0      		ldi r25,0
 338 0138 00C0      		rjmp .L13
 339               	.L22:
 340 013a 8CEC      		ldi r24,lo8(-52)
 341 013c 90E0      		ldi r25,0
 342 013e 00C0      		rjmp .L13
 343               	.L23:
 344 0140 8DEC      		ldi r24,lo8(-51)
 345 0142 90E0      		ldi r25,0
 346 0144 00C0      		rjmp .L13
 347               	.L24:
 348 0146 83E8      		ldi r24,lo8(-125)
 349 0148 91E0      		ldi r25,lo8(1)
 350 014a 00C0      		rjmp .L13
 351               	.L25:
 352 014c 8AE8      		ldi r24,lo8(-118)
 353 014e 91E0      		ldi r25,lo8(1)
 354 0150 00C0      		rjmp .L13
 355               	.L26:
 356 0152 82E9      		ldi r24,lo8(-110)
 357 0154 91E0      		ldi r25,lo8(1)
 358 0156 00C0      		rjmp .L13
 359               	.L27:
 360 0158 84E9      		ldi r24,lo8(-108)
 361 015a 91E0      		ldi r25,lo8(1)
 362 015c 00C0      		rjmp .L13
 363               	.L28:
 364 015e 81E2      		ldi r24,lo8(33)
 365 0160 92E0      		ldi r25,lo8(2)
 366 0162 00C0      		rjmp .L13
 367               	.L29:
 368 0164 83E2      		ldi r24,lo8(35)
 369 0166 92E0      		ldi r25,lo8(2)
 370 0168 00C0      		rjmp .L13
 371               	.L30:
 372 016a 84E2      		ldi r24,lo8(36)
 373 016c 92E0      		ldi r25,lo8(2)
 374 016e 00C0      		rjmp .L13
 375               	.L31:
 376 0170 85E2      		ldi r24,lo8(37)
 377 0172 92E0      		ldi r25,lo8(2)
 378 0174 00C0      		rjmp .L13
 379               	.L32:
 380 0176 86E2      		ldi r24,lo8(38)
 381 0178 92E0      		ldi r25,lo8(2)
 382 017a 00C0      		rjmp .L13
 383               	.L33:
 384 017c 87E2      		ldi r24,lo8(39)
 385 017e 92E0      		ldi r25,lo8(2)
 386 0180 00C0      		rjmp .L13
 387               	.L34:
 388 0182 80E0      		ldi r24,0
 389 0184 90E0      		ldi r25,0
 390               	.L13:
 391               	/* epilogue start */
 392               		.loc 1 421 0 is_stmt 1 discriminator 43
 393 0186 CF91      		pop r28
 394               	.LVL26:
 419:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 395               		.loc 1 419 0 discriminator 43
 396 0188 0C94 0000 		jmp host_consumer_send
 397               	.LVL27:
 398               	.L2:
 399               	/* epilogue start */
 400               		.loc 1 421 0
 401 018c CF91      		pop r28
 402               	.LVL28:
 403 018e 0895      		ret
 404               		.cfi_endproc
 405               	.LFE105:
 407               		.section	.text.unregister_code,"ax",@progbits
 408               	.global	unregister_code
 410               	unregister_code:
 411               	.LFB106:
 422:../../tmk_core/common/action.c **** 
 423:../../tmk_core/common/action.c **** void unregister_code(uint8_t code)
 424:../../tmk_core/common/action.c **** {
 412               		.loc 1 424 0
 413               		.cfi_startproc
 414               	.LVL29:
 415               	/* prologue: function */
 416               	/* frame size = 0 */
 417               	/* stack size = 0 */
 418               	.L__stack_usage = 0
 425:../../tmk_core/common/action.c ****     if (code == KC_NO) {
 419               		.loc 1 425 0
 420 0000 8823      		tst r24
 421 0002 01F4      		brne .+2
 422 0004 00C0      		rjmp .L38
 426:../../tmk_core/common/action.c ****         return;
 427:../../tmk_core/common/action.c ****     }
 428:../../tmk_core/common/action.c **** 
 429:../../tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 430:../../tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 423               		.loc 1 430 0
 424 0006 8238      		cpi r24,lo8(-126)
 425 0008 01F4      		brne .L41
 431:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 432:../../tmk_core/common/action.c ****         // Resync: ignore if caps lock already is off
 433:../../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
 426               		.loc 1 433 0
 427 000a 0E94 0000 		call host_keyboard_leds
 428               	.LVL30:
 429 000e 81FF      		sbrs r24,1
 430 0010 00C0      		rjmp .L38
 434:../../tmk_core/common/action.c **** #endif
 435:../../tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 431               		.loc 1 435 0
 432 0012 89E3      		ldi r24,lo8(57)
 433 0014 0E94 0000 		call add_key
 434               	.LVL31:
 436:../../tmk_core/common/action.c ****         send_keyboard_report();
 435               		.loc 1 436 0
 436 0018 0E94 0000 		call send_keyboard_report
 437               	.LVL32:
 437:../../tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 438               		.loc 1 437 0
 439 001c 89E3      		ldi r24,lo8(57)
 440 001e 00C0      		rjmp .L57
 441               	.LVL33:
 442               	.L41:
 438:../../tmk_core/common/action.c ****         send_keyboard_report();
 439:../../tmk_core/common/action.c ****     }
 440:../../tmk_core/common/action.c **** 
 441:../../tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 443               		.loc 1 441 0
 444 0020 8338      		cpi r24,lo8(-125)
 445 0022 01F4      		brne .L43
 442:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 443:../../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
 446               		.loc 1 443 0
 447 0024 0E94 0000 		call host_keyboard_leds
 448               	.LVL34:
 449 0028 80FF      		sbrs r24,0
 450 002a 00C0      		rjmp .L38
 444:../../tmk_core/common/action.c **** #endif
 445:../../tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 451               		.loc 1 445 0
 452 002c 83E5      		ldi r24,lo8(83)
 453 002e 0E94 0000 		call add_key
 454               	.LVL35:
 446:../../tmk_core/common/action.c ****         send_keyboard_report();
 455               		.loc 1 446 0
 456 0032 0E94 0000 		call send_keyboard_report
 457               	.LVL36:
 447:../../tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 458               		.loc 1 447 0
 459 0036 83E5      		ldi r24,lo8(83)
 460               	.L57:
 461 0038 0E94 0000 		call del_key
 462               	.LVL37:
 463               	.L58:
 448:../../tmk_core/common/action.c ****         send_keyboard_report();
 464               		.loc 1 448 0
 465 003c 0C94 0000 		jmp send_keyboard_report
 466               	.LVL38:
 467               	.L43:
 449:../../tmk_core/common/action.c ****     }
 450:../../tmk_core/common/action.c **** 
 451:../../tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 468               		.loc 1 451 0
 469 0040 8438      		cpi r24,lo8(-124)
 470 0042 01F4      		brne .L44
 452:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 453:../../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
 471               		.loc 1 453 0
 472 0044 0E94 0000 		call host_keyboard_leds
 473               	.LVL39:
 474 0048 82FF      		sbrs r24,2
 475 004a 00C0      		rjmp .L38
 454:../../tmk_core/common/action.c **** #endif
 455:../../tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 476               		.loc 1 455 0
 477 004c 87E4      		ldi r24,lo8(71)
 478 004e 0E94 0000 		call add_key
 479               	.LVL40:
 456:../../tmk_core/common/action.c ****         send_keyboard_report();
 480               		.loc 1 456 0
 481 0052 0E94 0000 		call send_keyboard_report
 482               	.LVL41:
 457:../../tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 483               		.loc 1 457 0
 484 0056 87E4      		ldi r24,lo8(71)
 485 0058 00C0      		rjmp .L57
 486               	.LVL42:
 487               	.L44:
 458:../../tmk_core/common/action.c ****         send_keyboard_report();
 459:../../tmk_core/common/action.c ****     }
 460:../../tmk_core/common/action.c **** #endif
 461:../../tmk_core/common/action.c **** 
 462:../../tmk_core/common/action.c ****     else if IS_KEY(code) {
 488               		.loc 1 462 0
 489 005a 9CEF      		ldi r25,lo8(-4)
 490 005c 980F      		add r25,r24
 491 005e 913A      		cpi r25,lo8(-95)
 492 0060 00F0      		brlo .L57
 463:../../tmk_core/common/action.c ****         del_key(code);
 464:../../tmk_core/common/action.c ****         send_keyboard_report();
 465:../../tmk_core/common/action.c ****     }
 466:../../tmk_core/common/action.c ****     else if IS_MOD(code) {
 493               		.loc 1 466 0
 494 0062 90E2      		ldi r25,lo8(32)
 495 0064 980F      		add r25,r24
 496 0066 9830      		cpi r25,lo8(8)
 497 0068 00F4      		brsh .L46
 467:../../tmk_core/common/action.c ****         del_mods(MOD_BIT(code));
 498               		.loc 1 467 0
 499 006a 8770      		andi r24,lo8(7)
 500               	.LVL43:
 501 006c 91E0      		ldi r25,lo8(1)
 502 006e 00C0      		rjmp 2f
 503               		1:
 504 0070 990F      		lsl r25
 505               		2:
 506 0072 8A95      		dec r24
 507 0074 02F4      		brpl 1b
 508 0076 892F      		mov r24,r25
 509 0078 0E94 0000 		call del_mods
 510               	.LVL44:
 511 007c 00C0      		rjmp .L58
 512               	.LVL45:
 513               	.L46:
 468:../../tmk_core/common/action.c ****         send_keyboard_report();
 469:../../tmk_core/common/action.c ****     }
 470:../../tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 514               		.loc 1 470 0
 515 007e 9BE5      		ldi r25,lo8(91)
 516 0080 980F      		add r25,r24
 517 0082 9330      		cpi r25,lo8(3)
 518 0084 00F4      		brsh .L47
 471:../../tmk_core/common/action.c ****         host_system_send(0);
 519               		.loc 1 471 0
 520 0086 80E0      		ldi r24,0
 521 0088 90E0      		ldi r25,0
 522               	.LVL46:
 523 008a 0C94 0000 		jmp host_system_send
 524               	.LVL47:
 525               	.L47:
 472:../../tmk_core/common/action.c ****     }
 473:../../tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 526               		.loc 1 473 0
 527 008e 885A      		subi r24,lo8(-(88))
 528               	.LVL48:
 529 0090 8331      		cpi r24,lo8(19)
 530 0092 00F4      		brsh .L38
 474:../../tmk_core/common/action.c ****         host_consumer_send(0);
 531               		.loc 1 474 0
 532 0094 80E0      		ldi r24,0
 533 0096 90E0      		ldi r25,0
 534               	.LVL49:
 535 0098 0C94 0000 		jmp host_consumer_send
 536               	.LVL50:
 537               	.L38:
 538 009c 0895      		ret
 539               		.cfi_endproc
 540               	.LFE106:
 542               		.section	.text.register_mods,"ax",@progbits
 543               	.global	register_mods
 545               	register_mods:
 546               	.LFB107:
 475:../../tmk_core/common/action.c ****     }
 476:../../tmk_core/common/action.c **** }
 477:../../tmk_core/common/action.c **** 
 478:../../tmk_core/common/action.c **** void register_mods(uint8_t mods)
 479:../../tmk_core/common/action.c **** {
 547               		.loc 1 479 0
 548               		.cfi_startproc
 549               	.LVL51:
 550               	/* prologue: function */
 551               	/* frame size = 0 */
 552               	/* stack size = 0 */
 553               	.L__stack_usage = 0
 480:../../tmk_core/common/action.c ****     if (mods) {
 554               		.loc 1 480 0
 555 0000 8823      		tst r24
 556 0002 01F0      		breq .L59
 481:../../tmk_core/common/action.c ****         add_mods(mods);
 557               		.loc 1 481 0
 558 0004 0E94 0000 		call add_mods
 559               	.LVL52:
 482:../../tmk_core/common/action.c ****         send_keyboard_report();
 560               		.loc 1 482 0
 561 0008 0C94 0000 		jmp send_keyboard_report
 562               	.LVL53:
 563               	.L59:
 564 000c 0895      		ret
 565               		.cfi_endproc
 566               	.LFE107:
 568               		.section	.text.unregister_mods,"ax",@progbits
 569               	.global	unregister_mods
 571               	unregister_mods:
 572               	.LFB108:
 483:../../tmk_core/common/action.c ****     }
 484:../../tmk_core/common/action.c **** }
 485:../../tmk_core/common/action.c **** 
 486:../../tmk_core/common/action.c **** void unregister_mods(uint8_t mods)
 487:../../tmk_core/common/action.c **** {
 573               		.loc 1 487 0
 574               		.cfi_startproc
 575               	.LVL54:
 576               	/* prologue: function */
 577               	/* frame size = 0 */
 578               	/* stack size = 0 */
 579               	.L__stack_usage = 0
 488:../../tmk_core/common/action.c ****     if (mods) {
 580               		.loc 1 488 0
 581 0000 8823      		tst r24
 582 0002 01F0      		breq .L61
 489:../../tmk_core/common/action.c ****         del_mods(mods);
 583               		.loc 1 489 0
 584 0004 0E94 0000 		call del_mods
 585               	.LVL55:
 490:../../tmk_core/common/action.c ****         send_keyboard_report();
 586               		.loc 1 490 0
 587 0008 0C94 0000 		jmp send_keyboard_report
 588               	.LVL56:
 589               	.L61:
 590 000c 0895      		ret
 591               		.cfi_endproc
 592               	.LFE108:
 594               		.section	.text.process_action,"ax",@progbits
 595               	.global	process_action
 597               	process_action:
 598               	.LFB104:
  57:../../tmk_core/common/action.c **** {
 599               		.loc 1 57 0
 600               		.cfi_startproc
 601               	.LVL57:
 602 0000 CF92      		push r12
 603               	.LCFI5:
 604               		.cfi_def_cfa_offset 3
 605               		.cfi_offset 12, -2
 606 0002 DF92      		push r13
 607               	.LCFI6:
 608               		.cfi_def_cfa_offset 4
 609               		.cfi_offset 13, -3
 610 0004 EF92      		push r14
 611               	.LCFI7:
 612               		.cfi_def_cfa_offset 5
 613               		.cfi_offset 14, -4
 614 0006 FF92      		push r15
 615               	.LCFI8:
 616               		.cfi_def_cfa_offset 6
 617               		.cfi_offset 15, -5
 618 0008 0F93      		push r16
 619               	.LCFI9:
 620               		.cfi_def_cfa_offset 7
 621               		.cfi_offset 16, -6
 622 000a 1F93      		push r17
 623               	.LCFI10:
 624               		.cfi_def_cfa_offset 8
 625               		.cfi_offset 17, -7
 626 000c CF93      		push r28
 627               	.LCFI11:
 628               		.cfi_def_cfa_offset 9
 629               		.cfi_offset 28, -8
 630 000e DF93      		push r29
 631               	.LCFI12:
 632               		.cfi_def_cfa_offset 10
 633               		.cfi_offset 29, -9
 634 0010 CDB7      		in r28,__SP_L__
 635 0012 DEB7      		in r29,__SP_H__
 636               	.LCFI13:
 637               		.cfi_def_cfa_register 28
 638 0014 2897      		sbiw r28,8
 639               	.LCFI14:
 640               		.cfi_def_cfa_offset 18
 641 0016 0FB6      		in __tmp_reg__,__SREG__
 642 0018 F894      		cli
 643 001a DEBF      		out __SP_H__,r29
 644 001c 0FBE      		out __SREG__,__tmp_reg__
 645 001e CDBF      		out __SP_L__,r28
 646               	/* prologue: function */
 647               	/* frame size = 8 */
 648               	/* stack size = 16 */
 649               	.L__stack_usage = 16
 650 0020 8C01      		movw r16,r24
  58:../../tmk_core/common/action.c ****     keyevent_t event = record->event;
 651               		.loc 1 58 0
 652 0022 85E0      		ldi r24,lo8(5)
 653               	.LVL58:
 654 0024 F801      		movw r30,r16
 655 0026 DE01      		movw r26,r28
 656 0028 1196      		adiw r26,1
 657               		0:
 658 002a 0190      		ld r0,Z+
 659 002c 0D92      		st X+,r0
 660 002e 8A95      		dec r24
 661 0030 01F4      		brne 0b
 662 0032 F801      		movw r30,r16
 663 0034 4081      		ld r20,Z
 664               	.LVL59:
 665 0036 3181      		ldd r19,Z+1
 666               	.LVL60:
 667 0038 F280      		ldd r15,Z+2
 668               	.LVL61:
  60:../../tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
 669               		.loc 1 60 0
 670 003a 2581      		ldd r18,Z+5
 671 003c 2295      		swap r18
 672 003e 2F70      		andi r18,lo8(15)
 673               	.LVL62:
 674               	.LBB8:
 675               	.LBB9:
 676               		.file 2 "../../tmk_core/common/keyboard.h"
   1:../../tmk_core/common/keyboard.h **** /*
   2:../../tmk_core/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/keyboard.h **** 
   4:../../tmk_core/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/keyboard.h **** (at your option) any later version.
   8:../../tmk_core/common/keyboard.h **** 
   9:../../tmk_core/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/keyboard.h **** GNU General Public License for more details.
  13:../../tmk_core/common/keyboard.h **** 
  14:../../tmk_core/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/keyboard.h **** */
  17:../../tmk_core/common/keyboard.h **** 
  18:../../tmk_core/common/keyboard.h **** #ifndef KEYBOARD_H
  19:../../tmk_core/common/keyboard.h **** #define KEYBOARD_H
  20:../../tmk_core/common/keyboard.h **** 
  21:../../tmk_core/common/keyboard.h **** #include <stdbool.h>
  22:../../tmk_core/common/keyboard.h **** #include <stdint.h>
  23:../../tmk_core/common/keyboard.h **** 
  24:../../tmk_core/common/keyboard.h **** 
  25:../../tmk_core/common/keyboard.h **** #ifdef __cplusplus
  26:../../tmk_core/common/keyboard.h **** extern "C" {
  27:../../tmk_core/common/keyboard.h **** #endif
  28:../../tmk_core/common/keyboard.h **** 
  29:../../tmk_core/common/keyboard.h **** /* key matrix position */
  30:../../tmk_core/common/keyboard.h **** typedef struct {
  31:../../tmk_core/common/keyboard.h ****     uint8_t col;
  32:../../tmk_core/common/keyboard.h ****     uint8_t row;
  33:../../tmk_core/common/keyboard.h **** } keypos_t;
  34:../../tmk_core/common/keyboard.h **** 
  35:../../tmk_core/common/keyboard.h **** /* key event */
  36:../../tmk_core/common/keyboard.h **** typedef struct {
  37:../../tmk_core/common/keyboard.h ****     keypos_t key;
  38:../../tmk_core/common/keyboard.h ****     bool     pressed;
  39:../../tmk_core/common/keyboard.h ****     uint16_t time;
  40:../../tmk_core/common/keyboard.h **** } keyevent_t;
  41:../../tmk_core/common/keyboard.h **** 
  42:../../tmk_core/common/keyboard.h **** /* equivalent test of keypos_t */
  43:../../tmk_core/common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:../../tmk_core/common/keyboard.h **** 
  45:../../tmk_core/common/keyboard.h **** /* Rules for No Event:
  46:../../tmk_core/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:../../tmk_core/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:../../tmk_core/common/keyboard.h ****  */
  49:../../tmk_core/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
 677               		.loc 2 49 0
 678 0040 8381      		ldd r24,Z+3
 679 0042 9481      		ldd r25,Z+4
 680 0044 892B      		or r24,r25
 681 0046 01F0      		breq .L129
 682 0048 3F3F      		cpi r19,lo8(-1)
 683 004a 01F4      		brne .L130
 684 004c 81E0      		ldi r24,lo8(1)
 685 004e 4F3F      		cpi r20,lo8(-1)
 686 0050 01F4      		brne .L130
 687 0052 00C0      		rjmp .L64
 688               	.LVL63:
 689               	.L129:
 690 0054 81E0      		ldi r24,lo8(1)
 691               	.LVL64:
 692 0056 00C0      		rjmp .L64
 693               	.L130:
 694 0058 80E0      		ldi r24,0
 695               	.L64:
 696               	.LBE9:
 697               	.LBE8:
  63:../../tmk_core/common/action.c ****     if (IS_NOEVENT(event)) { return; }
 698               		.loc 1 63 0
 699 005a 80FD      		sbrc r24,0
 700 005c 00C0      		rjmp .L63
  65:../../tmk_core/common/action.c ****     action_t action = layer_switch_get_action(event.key);
 701               		.loc 1 65 0
 702 005e 4983      		std Y+1,r20
 703 0060 3A83      		std Y+2,r19
 704 0062 8981      		ldd r24,Y+1
 705 0064 9A81      		ldd r25,Y+2
 706 0066 2F83      		std Y+7,r18
 707               	.LVL65:
 708 0068 0E94 0000 		call layer_switch_get_action
 709               	.LVL66:
  68:../../tmk_core/common/action.c ****     dprint(" layer_state: "); layer_debug();
 710               		.loc 1 68 0
 711 006c 9E83      		std Y+6,r25
 712 006e 8887      		std Y+8,r24
 713 0070 0E94 0000 		call layer_debug
 714               	.LVL67:
  69:../../tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 715               		.loc 1 69 0
 716 0074 0E94 0000 		call default_layer_debug
 717               	.LVL68:
  73:../../tmk_core/common/action.c ****     switch (action.kind.id) {
 718               		.loc 1 73 0
 719 0078 4E81      		ldd r20,Y+6
 720 007a E42F      		mov r30,r20
 721               	.LVL69:
 722 007c E295      		swap r30
 723 007e EF70      		andi r30,lo8(15)
 724 0080 F0E0      		ldi r31,0
 725 0082 E050      		subi r30,lo8(-(gs(.L69)))
 726 0084 F040      		sbci r31,hi8(-(gs(.L69)))
 727 0086 2F81      		ldd r18,Y+7
 728 0088 6885      		ldd r22,Y+8
 729 008a 0C94 0000 		jmp __tablejump2__
 730               		.section	.progmem.gcc_sw_table.process_action,"a",@progbits
 731               		.p2align	1
 732               	.L69:
 733 0000 0000      		.word gs(.L68)
 734 0002 0000      		.word gs(.L68)
 735 0004 0000      		.word gs(.L70)
 736 0006 0000      		.word gs(.L70)
 737 0008 0000      		.word gs(.L71)
 738 000a 0000      		.word gs(.L72)
 739 000c 0000      		.word gs(.L63)
 740 000e 0000      		.word gs(.L63)
 741 0010 0000      		.word gs(.L73)
 742 0012 0000      		.word gs(.L63)
 743 0014 0000      		.word gs(.L74)
 744 0016 0000      		.word gs(.L74)
 745 0018 0000      		.word gs(.L75)
 746 001a 0000      		.word gs(.L63)
 747 001c 0000      		.word gs(.L63)
 748 001e 0000      		.word gs(.L76)
 749               		.section	.text.process_action
 750               	.L68:
 751               	.LBB10:
  78:../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
 752               		.loc 1 78 0
 753 008e 842F      		mov r24,r20
 754 0090 807F      		andi r24,lo8(-16)
 755 0092 142F      		mov r17,r20
 756 0094 1F70      		andi r17,lo8(15)
 757 0096 8823      		tst r24
 758 0098 01F0      		breq .L78
  78:../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
 759               		.loc 1 78 0 is_stmt 0 discriminator 2
 760 009a 1295      		swap r17
 761 009c 107F      		andi r17,lo8(-16)
 762               	.L78:
 763               	.LVL70:
  80:../../tmk_core/common/action.c ****                 if (event.pressed) {
 764               		.loc 1 80 0 is_stmt 1 discriminator 3
 765 009e FF20      		tst r15
 766 00a0 01F0      		breq .L79
  81:../../tmk_core/common/action.c ****                     if (mods) {
 767               		.loc 1 81 0
 768 00a2 1123      		tst r17
 769 00a4 01F4      		brne .+2
 770 00a6 00C0      		rjmp .L160
  82:../../tmk_core/common/action.c ****                         add_weak_mods(mods);
 771               		.loc 1 82 0
 772 00a8 812F      		mov r24,r17
 773 00aa 6887      		std Y+8,r22
 774 00ac 0E94 0000 		call add_weak_mods
 775               	.LVL71:
  83:../../tmk_core/common/action.c ****                         send_keyboard_report();
 776               		.loc 1 83 0
 777 00b0 0E94 0000 		call send_keyboard_report
 778               	.LVL72:
 779 00b4 6885      		ldd r22,Y+8
 780 00b6 00C0      		rjmp .L160
 781               	.L79:
 782               	.LVL73:
  87:../../tmk_core/common/action.c ****                     unregister_code(action.key.code);
 783               		.loc 1 87 0
 784 00b8 862F      		mov r24,r22
 785 00ba 0E94 0000 		call unregister_code
 786               	.LVL74:
  88:../../tmk_core/common/action.c ****                     if (mods) {
 787               		.loc 1 88 0
 788 00be 1123      		tst r17
 789 00c0 01F4      		brne .+2
 790 00c2 00C0      		rjmp .L63
  89:../../tmk_core/common/action.c ****                         del_weak_mods(mods);
 791               		.loc 1 89 0
 792 00c4 812F      		mov r24,r17
 793 00c6 0E94 0000 		call del_weak_mods
 794               	.LVL75:
 795               	/* epilogue start */
 796               	.LBE10:
 340:../../tmk_core/common/action.c **** }
 797               		.loc 1 340 0
 798 00ca 2896      		adiw r28,8
 799 00cc 0FB6      		in __tmp_reg__,__SREG__
 800 00ce F894      		cli
 801 00d0 DEBF      		out __SP_H__,r29
 802 00d2 0FBE      		out __SREG__,__tmp_reg__
 803 00d4 CDBF      		out __SP_L__,r28
 804 00d6 DF91      		pop r29
 805 00d8 CF91      		pop r28
 806 00da 1F91      		pop r17
 807               	.LVL76:
 808 00dc 0F91      		pop r16
 809               	.LVL77:
 810 00de FF90      		pop r15
 811               	.LVL78:
 812 00e0 EF90      		pop r14
 813 00e2 DF90      		pop r13
 814 00e4 CF90      		pop r12
 815               	.LBB11:
  90:../../tmk_core/common/action.c ****                         send_keyboard_report();
 816               		.loc 1 90 0
 817 00e6 0C94 0000 		jmp send_keyboard_report
 818               	.LVL79:
 819               	.L70:
 820               	.LBE11:
 821               	.LBB12:
  99:../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 822               		.loc 1 99 0
 823 00ea 342F      		mov r19,r20
 824 00ec 307F      		andi r19,lo8(-16)
 825 00ee 842F      		mov r24,r20
 826 00f0 8F70      		andi r24,lo8(15)
 827 00f2 3032      		cpi r19,lo8(32)
 828 00f4 01F0      		breq .L83
  99:../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 829               		.loc 1 99 0 is_stmt 0 discriminator 2
 830 00f6 8295      		swap r24
 831 00f8 807F      		andi r24,lo8(-16)
 832               	.L83:
 833               	.LVL80:
 101:../../tmk_core/common/action.c ****                 switch (action.layer_tap.code) {
 834               		.loc 1 101 0 is_stmt 1 discriminator 3
 835 00fa 6623      		tst r22
 836               	.LVL81:
 837 00fc 01F0      		breq .L85
 838 00fe 6130      		cpi r22,lo8(1)
 839 0100 01F0      		breq .L86
 840 0102 00C0      		rjmp .L169
 841               	.L85:
 105:../../tmk_core/common/action.c ****                         if (event.pressed) {
 842               		.loc 1 105 0
 843 0104 FF20      		tst r15
 844 0106 01F0      		breq .L87
 106:../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 845               		.loc 1 106 0
 846 0108 2223      		tst r18
 847 010a 01F4      		brne .+2
 848 010c 00C0      		rjmp .L161
 109:../../tmk_core/common/action.c ****                             else if (tap_count == 1) {
 849               		.loc 1 109 0
 850 010e 2130      		cpi r18,lo8(1)
 851 0110 01F0      		breq .+2
 852 0112 00C0      		rjmp .L161
 853               	/* epilogue start */
 854               	.LBE12:
 340:../../tmk_core/common/action.c **** }
 855               		.loc 1 340 0
 856 0114 2896      		adiw r28,8
 857 0116 0FB6      		in __tmp_reg__,__SREG__
 858 0118 F894      		cli
 859 011a DEBF      		out __SP_H__,r29
 860 011c 0FBE      		out __SREG__,__tmp_reg__
 861 011e CDBF      		out __SP_L__,r28
 862 0120 DF91      		pop r29
 863 0122 CF91      		pop r28
 864 0124 1F91      		pop r17
 865 0126 0F91      		pop r16
 866               	.LVL82:
 867 0128 FF90      		pop r15
 868               	.LVL83:
 869 012a EF90      		pop r14
 870 012c DF90      		pop r13
 871 012e CF90      		pop r12
 872               	.LBB13:
 111:../../tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 873               		.loc 1 111 0
 874 0130 0C94 0000 		jmp set_oneshot_mods
 875               	.LVL84:
 876               	.L87:
 117:../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 877               		.loc 1 117 0
 878 0134 2223      		tst r18
 879 0136 01F0      		breq .L158
 121:../../tmk_core/common/action.c ****                             else if (tap_count == 1) {
 880               		.loc 1 121 0
 881 0138 2130      		cpi r18,lo8(1)
 882 013a 01F4      		brne .+2
 883 013c 00C0      		rjmp .L63
 884               	.L158:
 125:../../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 885               		.loc 1 125 0
 886 013e 8E83      		std Y+6,r24
 887 0140 0E94 0000 		call clear_oneshot_mods
 888               	.LVL85:
 126:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 889               		.loc 1 126 0
 890 0144 8E81      		ldd r24,Y+6
 891 0146 00C0      		rjmp .L163
 892               	.LVL86:
 893               	.L86:
 132:../../tmk_core/common/action.c ****                         if (event.pressed) {
 894               		.loc 1 132 0
 895 0148 FF20      		tst r15
 896 014a 01F0      		breq .L92
 133:../../tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 897               		.loc 1 133 0
 898 014c 2630      		cpi r18,lo8(6)
 899 014e 00F0      		brlo .+2
 900 0150 00C0      		rjmp .L63
 901 0152 00C0      		rjmp .L161
 902               	.L92:
 137:../../tmk_core/common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 903               		.loc 1 137 0
 904 0154 2530      		cpi r18,lo8(5)
 905 0156 00F0      		brlo .+2
 906 0158 00C0      		rjmp .L63
 907 015a 00C0      		rjmp .L163
 908               	.L169:
 143:../../tmk_core/common/action.c ****                         if (event.pressed) {
 909               		.loc 1 143 0
 910 015c FF20      		tst r15
 911 015e 01F0      		breq .L93
 144:../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 912               		.loc 1 144 0
 913 0160 2223      		tst r18
 914 0162 01F4      		brne .+2
 915 0164 00C0      		rjmp .L161
 916 0166 00C0      		rjmp .L160
 917               	.L93:
 162:../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 918               		.loc 1 162 0
 919 0168 2223      		tst r18
 920 016a 01F4      		brne .+2
 921 016c 00C0      		rjmp .L163
 922 016e 00C0      		rjmp .L162
 923               	.LVL87:
 924               	.L71:
 925               	.LBE13:
 178:../../tmk_core/common/action.c ****             switch (action.usage.page) {
 926               		.loc 1 178 0
 927 0170 242F      		mov r18,r20
 928 0172 2695      		lsr r18
 929 0174 2695      		lsr r18
 930 0176 2370      		andi r18,lo8(3)
 931 0178 30E0      		ldi r19,0
 932 017a 2115      		cp r18,__zero_reg__
 933 017c 3105      		cpc r19,__zero_reg__
 934 017e 01F0      		breq .L96
 935 0180 2130      		cpi r18,1
 936 0182 3105      		cpc r19,__zero_reg__
 937 0184 01F0      		breq .L97
 938 0186 00C0      		rjmp .L63
 939               	.L96:
 180:../../tmk_core/common/action.c ****                     if (event.pressed) {
 940               		.loc 1 180 0
 941 0188 FF20      		tst r15
 942 018a 01F0      		breq .L98
 943               	.LVL88:
 181:../../tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 944               		.loc 1 181 0
 945 018c 862F      		mov r24,r22
 946 018e 942F      		mov r25,r20
 947 0190 9370      		andi r25,lo8(3)
 948 0192 00C0      		rjmp .L164
 949               	.LVL89:
 950               	.L98:
 183:../../tmk_core/common/action.c ****                         host_system_send(0);
 951               		.loc 1 183 0
 952 0194 80E0      		ldi r24,0
 953 0196 90E0      		ldi r25,0
 954               	.LVL90:
 955               	.L164:
 956               	/* epilogue start */
 340:../../tmk_core/common/action.c **** }
 957               		.loc 1 340 0
 958 0198 2896      		adiw r28,8
 959 019a 0FB6      		in __tmp_reg__,__SREG__
 960 019c F894      		cli
 961 019e DEBF      		out __SP_H__,r29
 962 01a0 0FBE      		out __SREG__,__tmp_reg__
 963 01a2 CDBF      		out __SP_L__,r28
 964 01a4 DF91      		pop r29
 965 01a6 CF91      		pop r28
 966 01a8 1F91      		pop r17
 967 01aa 0F91      		pop r16
 968               	.LVL91:
 969 01ac FF90      		pop r15
 970               	.LVL92:
 971 01ae EF90      		pop r14
 972 01b0 DF90      		pop r13
 973 01b2 CF90      		pop r12
 183:../../tmk_core/common/action.c ****                         host_system_send(0);
 974               		.loc 1 183 0
 975 01b4 0C94 0000 		jmp host_system_send
 976               	.LVL93:
 977               	.L97:
 187:../../tmk_core/common/action.c ****                     if (event.pressed) {
 978               		.loc 1 187 0
 979 01b8 FF20      		tst r15
 980 01ba 01F0      		breq .L99
 981               	.LVL94:
 188:../../tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 982               		.loc 1 188 0
 983 01bc 862F      		mov r24,r22
 984 01be 942F      		mov r25,r20
 985 01c0 9370      		andi r25,lo8(3)
 986 01c2 00C0      		rjmp .L165
 987               	.LVL95:
 988               	.L99:
 190:../../tmk_core/common/action.c ****                         host_consumer_send(0);
 989               		.loc 1 190 0
 990 01c4 80E0      		ldi r24,0
 991 01c6 90E0      		ldi r25,0
 992               	.LVL96:
 993               	.L165:
 994               	/* epilogue start */
 340:../../tmk_core/common/action.c **** }
 995               		.loc 1 340 0
 996 01c8 2896      		adiw r28,8
 997 01ca 0FB6      		in __tmp_reg__,__SREG__
 998 01cc F894      		cli
 999 01ce DEBF      		out __SP_H__,r29
 1000 01d0 0FBE      		out __SREG__,__tmp_reg__
 1001 01d2 CDBF      		out __SP_L__,r28
 1002 01d4 DF91      		pop r29
 1003 01d6 CF91      		pop r28
 1004 01d8 1F91      		pop r17
 1005 01da 0F91      		pop r16
 1006               	.LVL97:
 1007 01dc FF90      		pop r15
 1008               	.LVL98:
 1009 01de EF90      		pop r14
 1010 01e0 DF90      		pop r13
 1011 01e2 CF90      		pop r12
 190:../../tmk_core/common/action.c ****                         host_consumer_send(0);
 1012               		.loc 1 190 0
 1013 01e4 0C94 0000 		jmp host_consumer_send
 1014               	.LVL99:
 1015               	.L72:
 200:../../tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 1016               		.loc 1 200 0
 1017 01e8 862F      		mov r24,r22
 199:../../tmk_core/common/action.c ****             if (event.pressed) {
 1018               		.loc 1 199 0
 1019 01ea FF20      		tst r15
 1020 01ec 01F0      		breq .L100
 200:../../tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 1021               		.loc 1 200 0
 1022 01ee 0E94 0000 		call mousekey_on
 1023               	.LVL100:
 1024 01f2 00C0      		rjmp .L166
 1025               	.LVL101:
 1026               	.L100:
 203:../../tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 1027               		.loc 1 203 0
 1028 01f4 0E94 0000 		call mousekey_off
 1029               	.LVL102:
 1030               	.L166:
 1031               	/* epilogue start */
 340:../../tmk_core/common/action.c **** }
 1032               		.loc 1 340 0
 1033 01f8 2896      		adiw r28,8
 1034 01fa 0FB6      		in __tmp_reg__,__SREG__
 1035 01fc F894      		cli
 1036 01fe DEBF      		out __SP_H__,r29
 1037 0200 0FBE      		out __SREG__,__tmp_reg__
 1038 0202 CDBF      		out __SP_L__,r28
 1039 0204 DF91      		pop r29
 1040 0206 CF91      		pop r28
 1041 0208 1F91      		pop r17
 1042 020a 0F91      		pop r16
 1043               	.LVL103:
 1044 020c FF90      		pop r15
 1045               	.LVL104:
 1046 020e EF90      		pop r14
 1047 0210 DF90      		pop r13
 1048 0212 CF90      		pop r12
 204:../../tmk_core/common/action.c ****                 mousekey_send();
 1049               		.loc 1 204 0
 1050 0214 0C94 0000 		jmp mousekey_send
 1051               	.LVL105:
 1052               	.L73:
 210:../../tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 1053               		.loc 1 210 0
 1054 0218 842F      		mov r24,r20
 1055 021a 8370      		andi r24,lo8(3)
 1056 021c 01F0      		breq .+2
 1057 021e 00C0      		rjmp .L101
 212:../../tmk_core/common/action.c ****                 if (!event.pressed) {
 1058               		.loc 1 212 0
 1059 0220 F110      		cpse r15,__zero_reg__
 1060 0222 00C0      		rjmp .L63
 1061               	.LVL106:
 1062               	.LBB14:
 213:../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1063               		.loc 1 213 0
 1064 0224 262F      		mov r18,r22
 1065 0226 2295      		swap r18
 1066 0228 2695      		lsr r18
 1067 022a 2770      		andi r18,lo8(7)
 1068 022c 220F      		lsl r18
 1069 022e 220F      		lsl r18
 214:../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1070               		.loc 1 214 0
 1071 0230 862F      		mov r24,r22
 1072 0232 8F70      		andi r24,lo8(15)
 1073 0234 C82E      		mov r12,r24
 1074 0236 D12C      		mov r13,__zero_reg__
 1075 0238 E12C      		mov r14,__zero_reg__
 1076 023a F12C      		mov r15,__zero_reg__
 1077 023c 022E      		mov r0,r18
 1078 023e 00C0      		rjmp 2f
 1079               		1:
 1080 0240 CC0C      		lsl r12
 1081 0242 DD1C      		rol r13
 1082 0244 EE1C      		rol r14
 1083 0246 FF1C      		rol r15
 1084               		2:
 1085 0248 0A94      		dec r0
 1086 024a 02F4      		brpl 1b
 1087               	.LVL107:
 215:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1088               		.loc 1 215 0
 1089 024c 64FF      		sbrs r22,4
 1090 024e 00C0      		rjmp .L131
 215:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1091               		.loc 1 215 0 is_stmt 0 discriminator 1
 1092 0250 6FE0      		ldi r22,lo8(15)
 1093 0252 70E0      		ldi r23,0
 1094 0254 80E0      		ldi r24,0
 1095 0256 90E0      		ldi r25,0
 1096               	.LVL108:
 1097 0258 00C0      		rjmp 2f
 1098               		1:
 1099 025a 660F      		lsl r22
 1100 025c 771F      		rol r23
 1101 025e 881F      		rol r24
 1102 0260 991F      		rol r25
 1103               		2:
 1104 0262 2A95      		dec r18
 1105 0264 02F4      		brpl 1b
 1106 0266 6095      		com r22
 1107 0268 7095      		com r23
 1108 026a 8095      		com r24
 1109 026c 9095      		com r25
 1110 026e 00C0      		rjmp .L102
 1111               	.LVL109:
 1112               	.L131:
 215:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1113               		.loc 1 215 0
 1114 0270 60E0      		ldi r22,0
 1115 0272 70E0      		ldi r23,0
 1116 0274 CB01      		movw r24,r22
 1117               	.LVL110:
 1118               	.L102:
 216:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1119               		.loc 1 216 0 is_stmt 1 discriminator 3
 1120 0276 242F      		mov r18,r20
 1121 0278 2695      		lsr r18
 1122 027a 2695      		lsr r18
 1123 027c 2370      		andi r18,lo8(3)
 1124 027e 422F      		mov r20,r18
 1125               	.LVL111:
 1126 0280 50E0      		ldi r21,0
 1127 0282 4230      		cpi r20,2
 1128 0284 5105      		cpc r21,__zero_reg__
 1129 0286 01F0      		breq .L104
 1130 0288 4330      		cpi r20,3
 1131 028a 5105      		cpc r21,__zero_reg__
 1132 028c 01F0      		breq .L105
 1133 028e 6C29      		or r22,r12
 1134 0290 7D29      		or r23,r13
 1135 0292 8E29      		or r24,r14
 1136 0294 9F29      		or r25,r15
 1137               	.LVL112:
 1138 0296 4130      		cpi r20,1
 1139 0298 5105      		cpc r21,__zero_reg__
 1140 029a 01F0      		breq .L168
 1141               	/* epilogue start */
 1142               	.LBE14:
 340:../../tmk_core/common/action.c **** }
 1143               		.loc 1 340 0 discriminator 3
 1144 029c 2896      		adiw r28,8
 1145               	.LVL113:
 1146 029e 0FB6      		in __tmp_reg__,__SREG__
 1147 02a0 F894      		cli
 1148 02a2 DEBF      		out __SP_H__,r29
 1149 02a4 0FBE      		out __SREG__,__tmp_reg__
 1150 02a6 CDBF      		out __SP_L__,r28
 1151 02a8 DF91      		pop r29
 1152 02aa CF91      		pop r28
 1153               	.LVL114:
 1154 02ac 1F91      		pop r17
 1155 02ae 0F91      		pop r16
 1156               	.LVL115:
 1157 02b0 FF90      		pop r15
 1158               	.LVL116:
 1159 02b2 EF90      		pop r14
 1160 02b4 DF90      		pop r13
 1161 02b6 CF90      		pop r12
 1162               	.LVL117:
 1163               	.LBB15:
 217:../../tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1164               		.loc 1 217 0 discriminator 3
 1165 02b8 0C94 0000 		jmp default_layer_and
 1166               	.LVL118:
 1167               	.L104:
 219:../../tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 1168               		.loc 1 219 0
 1169 02bc 6C29      		or r22,r12
 1170 02be 7D29      		or r23,r13
 1171 02c0 8E29      		or r24,r14
 1172 02c2 9F29      		or r25,r15
 1173               	.LVL119:
 1174               	/* epilogue start */
 1175               	.LBE15:
 340:../../tmk_core/common/action.c **** }
 1176               		.loc 1 340 0
 1177 02c4 2896      		adiw r28,8
 1178               	.LVL120:
 1179 02c6 0FB6      		in __tmp_reg__,__SREG__
 1180 02c8 F894      		cli
 1181 02ca DEBF      		out __SP_H__,r29
 1182 02cc 0FBE      		out __SREG__,__tmp_reg__
 1183 02ce CDBF      		out __SP_L__,r28
 1184 02d0 DF91      		pop r29
 1185 02d2 CF91      		pop r28
 1186               	.LVL121:
 1187 02d4 1F91      		pop r17
 1188 02d6 0F91      		pop r16
 1189               	.LVL122:
 1190 02d8 FF90      		pop r15
 1191               	.LVL123:
 1192 02da EF90      		pop r14
 1193 02dc DF90      		pop r13
 1194 02de CF90      		pop r12
 1195               	.LVL124:
 1196               	.LBB16:
 219:../../tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 1197               		.loc 1 219 0
 1198 02e0 0C94 0000 		jmp default_layer_xor
 1199               	.LVL125:
 1200               	.L105:
 220:../../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1201               		.loc 1 220 0
 1202 02e4 0E94 0000 		call default_layer_and
 1203               	.LVL126:
 1204 02e8 C701      		movw r24,r14
 1205 02ea B601      		movw r22,r12
 1206               	.L168:
 1207               	/* epilogue start */
 1208               	.LBE16:
 340:../../tmk_core/common/action.c **** }
 1209               		.loc 1 340 0
 1210 02ec 2896      		adiw r28,8
 1211 02ee 0FB6      		in __tmp_reg__,__SREG__
 1212 02f0 F894      		cli
 1213 02f2 DEBF      		out __SP_H__,r29
 1214 02f4 0FBE      		out __SREG__,__tmp_reg__
 1215 02f6 CDBF      		out __SP_L__,r28
 1216 02f8 DF91      		pop r29
 1217 02fa CF91      		pop r28
 1218 02fc 1F91      		pop r17
 1219 02fe 0F91      		pop r16
 1220               	.LVL127:
 1221 0300 FF90      		pop r15
 1222               	.LVL128:
 1223 0302 EF90      		pop r14
 1224 0304 DF90      		pop r13
 1225 0306 CF90      		pop r12
 1226               	.LVL129:
 1227               	.LBB17:
 220:../../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1228               		.loc 1 220 0
 1229 0308 0C94 0000 		jmp default_layer_or
 1230               	.LVL130:
 1231               	.L101:
 1232               	.LBE17:
 225:../../tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 1233               		.loc 1 225 0
 1234 030c FF20      		tst r15
 1235 030e 01F0      		breq .L107
 225:../../tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 1236               		.loc 1 225 0 is_stmt 0 discriminator 1
 1237 0310 842F      		mov r24,r20
 1238 0312 8170      		andi r24,lo8(1)
 1239 0314 00C0      		rjmp .L108
 1240               	.L107:
 225:../../tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 1241               		.loc 1 225 0 discriminator 2
 1242 0316 8695      		lsr r24
 1243               	.L108:
 225:../../tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 1244               		.loc 1 225 0 discriminator 3
 1245 0318 8823      		tst r24
 1246 031a 01F4      		brne .+2
 1247 031c 00C0      		rjmp .L63
 1248               	.LVL131:
 1249               	.LBB18:
 227:../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1250               		.loc 1 227 0 is_stmt 1
 1251 031e 262F      		mov r18,r22
 1252 0320 2295      		swap r18
 1253 0322 2695      		lsr r18
 1254 0324 2770      		andi r18,lo8(7)
 1255 0326 220F      		lsl r18
 1256 0328 220F      		lsl r18
 228:../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1257               		.loc 1 228 0
 1258 032a 862F      		mov r24,r22
 1259 032c 8F70      		andi r24,lo8(15)
 1260 032e C82E      		mov r12,r24
 1261 0330 D12C      		mov r13,__zero_reg__
 1262 0332 E12C      		mov r14,__zero_reg__
 1263 0334 F12C      		mov r15,__zero_reg__
 1264 0336 022E      		mov r0,r18
 1265 0338 00C0      		rjmp 2f
 1266               		1:
 1267 033a CC0C      		lsl r12
 1268 033c DD1C      		rol r13
 1269 033e EE1C      		rol r14
 1270 0340 FF1C      		rol r15
 1271               		2:
 1272 0342 0A94      		dec r0
 1273 0344 02F4      		brpl 1b
 1274               	.LVL132:
 229:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1275               		.loc 1 229 0
 1276 0346 64FF      		sbrs r22,4
 1277 0348 00C0      		rjmp .L132
 229:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1278               		.loc 1 229 0 is_stmt 0 discriminator 1
 1279 034a 6FE0      		ldi r22,lo8(15)
 1280 034c 70E0      		ldi r23,0
 1281 034e 80E0      		ldi r24,0
 1282 0350 90E0      		ldi r25,0
 1283               	.LVL133:
 1284 0352 00C0      		rjmp 2f
 1285               		1:
 1286 0354 660F      		lsl r22
 1287 0356 771F      		rol r23
 1288 0358 881F      		rol r24
 1289 035a 991F      		rol r25
 1290               		2:
 1291 035c 2A95      		dec r18
 1292 035e 02F4      		brpl 1b
 1293 0360 6095      		com r22
 1294 0362 7095      		com r23
 1295 0364 8095      		com r24
 1296 0366 9095      		com r25
 1297 0368 00C0      		rjmp .L109
 1298               	.LVL134:
 1299               	.L132:
 229:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1300               		.loc 1 229 0
 1301 036a 60E0      		ldi r22,0
 1302 036c 70E0      		ldi r23,0
 1303 036e CB01      		movw r24,r22
 1304               	.LVL135:
 1305               	.L109:
 230:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1306               		.loc 1 230 0 is_stmt 1 discriminator 3
 1307 0370 242F      		mov r18,r20
 1308 0372 2695      		lsr r18
 1309 0374 2695      		lsr r18
 1310 0376 2370      		andi r18,lo8(3)
 1311 0378 422F      		mov r20,r18
 1312               	.LVL136:
 1313 037a 50E0      		ldi r21,0
 1314 037c 4230      		cpi r20,2
 1315 037e 5105      		cpc r21,__zero_reg__
 1316 0380 01F0      		breq .L111
 1317 0382 4330      		cpi r20,3
 1318 0384 5105      		cpc r21,__zero_reg__
 1319 0386 01F0      		breq .L112
 1320 0388 6C29      		or r22,r12
 1321 038a 7D29      		or r23,r13
 1322 038c 8E29      		or r24,r14
 1323 038e 9F29      		or r25,r15
 1324               	.LVL137:
 1325 0390 4130      		cpi r20,1
 1326 0392 5105      		cpc r21,__zero_reg__
 1327 0394 01F0      		breq .L167
 1328               	/* epilogue start */
 1329               	.LBE18:
 340:../../tmk_core/common/action.c **** }
 1330               		.loc 1 340 0 discriminator 3
 1331 0396 2896      		adiw r28,8
 1332               	.LVL138:
 1333 0398 0FB6      		in __tmp_reg__,__SREG__
 1334 039a F894      		cli
 1335 039c DEBF      		out __SP_H__,r29
 1336 039e 0FBE      		out __SREG__,__tmp_reg__
 1337 03a0 CDBF      		out __SP_L__,r28
 1338 03a2 DF91      		pop r29
 1339 03a4 CF91      		pop r28
 1340               	.LVL139:
 1341 03a6 1F91      		pop r17
 1342 03a8 0F91      		pop r16
 1343               	.LVL140:
 1344 03aa FF90      		pop r15
 1345               	.LVL141:
 1346 03ac EF90      		pop r14
 1347 03ae DF90      		pop r13
 1348 03b0 CF90      		pop r12
 1349               	.LVL142:
 1350               	.LBB19:
 231:../../tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1351               		.loc 1 231 0 discriminator 3
 1352 03b2 0C94 0000 		jmp layer_and
 1353               	.LVL143:
 1354               	.L111:
 233:../../tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 1355               		.loc 1 233 0
 1356 03b6 6C29      		or r22,r12
 1357 03b8 7D29      		or r23,r13
 1358 03ba 8E29      		or r24,r14
 1359 03bc 9F29      		or r25,r15
 1360               	.LVL144:
 1361               	/* epilogue start */
 1362               	.LBE19:
 340:../../tmk_core/common/action.c **** }
 1363               		.loc 1 340 0
 1364 03be 2896      		adiw r28,8
 1365               	.LVL145:
 1366 03c0 0FB6      		in __tmp_reg__,__SREG__
 1367 03c2 F894      		cli
 1368 03c4 DEBF      		out __SP_H__,r29
 1369 03c6 0FBE      		out __SREG__,__tmp_reg__
 1370 03c8 CDBF      		out __SP_L__,r28
 1371 03ca DF91      		pop r29
 1372 03cc CF91      		pop r28
 1373               	.LVL146:
 1374 03ce 1F91      		pop r17
 1375 03d0 0F91      		pop r16
 1376               	.LVL147:
 1377 03d2 FF90      		pop r15
 1378               	.LVL148:
 1379 03d4 EF90      		pop r14
 1380 03d6 DF90      		pop r13
 1381 03d8 CF90      		pop r12
 1382               	.LVL149:
 1383               	.LBB20:
 233:../../tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 1384               		.loc 1 233 0
 1385 03da 0C94 0000 		jmp layer_xor
 1386               	.LVL150:
 1387               	.L112:
 234:../../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1388               		.loc 1 234 0
 1389 03de 0E94 0000 		call layer_and
 1390               	.LVL151:
 1391 03e2 C701      		movw r24,r14
 1392 03e4 B601      		movw r22,r12
 1393               	.L167:
 1394               	/* epilogue start */
 1395               	.LBE20:
 340:../../tmk_core/common/action.c **** }
 1396               		.loc 1 340 0
 1397 03e6 2896      		adiw r28,8
 1398 03e8 0FB6      		in __tmp_reg__,__SREG__
 1399 03ea F894      		cli
 1400 03ec DEBF      		out __SP_H__,r29
 1401 03ee 0FBE      		out __SREG__,__tmp_reg__
 1402 03f0 CDBF      		out __SP_L__,r28
 1403 03f2 DF91      		pop r29
 1404 03f4 CF91      		pop r28
 1405 03f6 1F91      		pop r17
 1406 03f8 0F91      		pop r16
 1407               	.LVL152:
 1408 03fa FF90      		pop r15
 1409               	.LVL153:
 1410 03fc EF90      		pop r14
 1411 03fe DF90      		pop r13
 1412 0400 CF90      		pop r12
 1413               	.LVL154:
 1414               	.LBB21:
 234:../../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1415               		.loc 1 234 0
 1416 0402 0C94 0000 		jmp layer_or
 1417               	.LVL155:
 1418               	.L74:
 1419               	.LBE21:
 242:../../tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1420               		.loc 1 242 0
 1421 0406 603F      		cpi r22,lo8(-16)
 1422 0408 01F0      		breq .L115
 1423               	.LVL156:
 1424 040a 00F4      		brsh .L116
 1425 040c 603E      		cpi r22,lo8(-32)
 1426 040e 00F4      		brsh .L155
 1427 0410 00C0      		rjmp .L114
 1428               	.L116:
 1429 0412 623F      		cpi r22,lo8(-14)
 1430 0414 01F4      		brne .+2
 1431 0416 00C0      		rjmp .L118
 1432 0418 00F4      		brsh .+2
 1433 041a 00C0      		rjmp .L119
 1434 041c 633F      		cpi r22,lo8(-13)
 1435 041e 01F4      		brne .+2
 1436 0420 00C0      		rjmp .L120
 1437 0422 00C0      		rjmp .L114
 1438               	.L155:
 1439 0424 162F      		mov r17,r22
 1440 0426 1F70      		andi r17,lo8(15)
 1441 0428 842F      		mov r24,r20
 1442 042a 8F71      		andi r24,lo8(31)
 245:../../tmk_core/common/action.c ****                     if (event.pressed) {
 1443               		.loc 1 245 0
 1444 042c FF20      		tst r15
 1445 042e 01F0      		breq .L121
 246:../../tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1446               		.loc 1 246 0
 1447 0430 0E94 0000 		call layer_on
 1448               	.LVL157:
 247:../../tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1449               		.loc 1 247 0
 1450 0434 812F      		mov r24,r17
 1451               	.LVL158:
 1452               	.L161:
 1453               	/* epilogue start */
 340:../../tmk_core/common/action.c **** }
 1454               		.loc 1 340 0
 1455 0436 2896      		adiw r28,8
 1456 0438 0FB6      		in __tmp_reg__,__SREG__
 1457 043a F894      		cli
 1458 043c DEBF      		out __SP_H__,r29
 1459 043e 0FBE      		out __SREG__,__tmp_reg__
 1460 0440 CDBF      		out __SP_L__,r28
 1461 0442 DF91      		pop r29
 1462 0444 CF91      		pop r28
 1463 0446 1F91      		pop r17
 1464 0448 0F91      		pop r16
 1465               	.LVL159:
 1466 044a FF90      		pop r15
 1467               	.LVL160:
 1468 044c EF90      		pop r14
 1469 044e DF90      		pop r13
 1470 0450 CF90      		pop r12
 247:../../tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1471               		.loc 1 247 0
 1472 0452 0C94 0000 		jmp register_mods
 1473               	.LVL161:
 1474               	.L121:
 249:../../tmk_core/common/action.c ****                         layer_off(action.layer_tap.val);
 1475               		.loc 1 249 0
 1476 0456 0E94 0000 		call layer_off
 1477               	.LVL162:
 250:../../tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 1478               		.loc 1 250 0
 1479 045a 812F      		mov r24,r17
 1480               	.LVL163:
 1481               	.L163:
 1482               	/* epilogue start */
 340:../../tmk_core/common/action.c **** }
 1483               		.loc 1 340 0
 1484 045c 2896      		adiw r28,8
 1485 045e 0FB6      		in __tmp_reg__,__SREG__
 1486 0460 F894      		cli
 1487 0462 DEBF      		out __SP_H__,r29
 1488 0464 0FBE      		out __SREG__,__tmp_reg__
 1489 0466 CDBF      		out __SP_L__,r28
 1490 0468 DF91      		pop r29
 1491 046a CF91      		pop r28
 1492 046c 1F91      		pop r17
 1493 046e 0F91      		pop r16
 1494               	.LVL164:
 1495 0470 FF90      		pop r15
 1496               	.LVL165:
 1497 0472 EF90      		pop r14
 1498 0474 DF90      		pop r13
 1499 0476 CF90      		pop r12
 250:../../tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 1500               		.loc 1 250 0
 1501 0478 0C94 0000 		jmp unregister_mods
 1502               	.LVL166:
 1503               	.L115:
 255:../../tmk_core/common/action.c ****                     if (event.pressed) {
 1504               		.loc 1 255 0
 1505 047c FF20      		tst r15
 1506 047e 01F0      		breq .L122
 256:../../tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1507               		.loc 1 256 0
 1508 0480 2530      		cpi r18,lo8(5)
 1509 0482 00F0      		brlo .+2
 1510 0484 00C0      		rjmp .L63
 1511               	.L123:
 257:../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1512               		.loc 1 257 0
 1513 0486 842F      		mov r24,r20
 1514 0488 8F71      		andi r24,lo8(31)
 1515               	/* epilogue start */
 340:../../tmk_core/common/action.c **** }
 1516               		.loc 1 340 0
 1517 048a 2896      		adiw r28,8
 1518 048c 0FB6      		in __tmp_reg__,__SREG__
 1519 048e F894      		cli
 1520 0490 DEBF      		out __SP_H__,r29
 1521 0492 0FBE      		out __SREG__,__tmp_reg__
 1522 0494 CDBF      		out __SP_L__,r28
 1523 0496 DF91      		pop r29
 1524 0498 CF91      		pop r28
 1525 049a 1F91      		pop r17
 1526 049c 0F91      		pop r16
 1527               	.LVL167:
 1528 049e FF90      		pop r15
 1529               	.LVL168:
 1530 04a0 EF90      		pop r14
 1531 04a2 DF90      		pop r13
 1532 04a4 CF90      		pop r12
 257:../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1533               		.loc 1 257 0
 1534 04a6 0C94 0000 		jmp layer_invert
 1535               	.LVL169:
 1536               	.L122:
 260:../../tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 1537               		.loc 1 260 0
 1538 04aa 2630      		cpi r18,lo8(6)
 1539 04ac 00F0      		brlo .+2
 1540 04ae 00C0      		rjmp .L63
 1541 04b0 00C0      		rjmp .L123
 1542               	.L119:
 266:../../tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 1543               		.loc 1 266 0
 1544 04b2 FF20      		tst r15
 1545 04b4 01F0      		breq .L124
 1546               	.L125:
 266:../../tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 1547               		.loc 1 266 0 is_stmt 0 discriminator 1
 1548 04b6 842F      		mov r24,r20
 1549 04b8 8F71      		andi r24,lo8(31)
 1550               	/* epilogue start */
 340:../../tmk_core/common/action.c **** }
 1551               		.loc 1 340 0 is_stmt 1 discriminator 1
 1552 04ba 2896      		adiw r28,8
 1553 04bc 0FB6      		in __tmp_reg__,__SREG__
 1554 04be F894      		cli
 1555 04c0 DEBF      		out __SP_H__,r29
 1556 04c2 0FBE      		out __SREG__,__tmp_reg__
 1557 04c4 CDBF      		out __SP_L__,r28
 1558 04c6 DF91      		pop r29
 1559 04c8 CF91      		pop r28
 1560 04ca 1F91      		pop r17
 1561 04cc 0F91      		pop r16
 1562               	.LVL170:
 1563 04ce FF90      		pop r15
 1564               	.LVL171:
 1565 04d0 EF90      		pop r14
 1566 04d2 DF90      		pop r13
 1567 04d4 CF90      		pop r12
 266:../../tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 1568               		.loc 1 266 0 discriminator 1
 1569 04d6 0C94 0000 		jmp layer_on
 1570               	.LVL172:
 1571               	.L118:
 270:../../tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 1572               		.loc 1 270 0
 1573 04da FF20      		tst r15
 1574 04dc 01F0      		breq .L125
 1575               	.L124:
 267:../../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1576               		.loc 1 267 0
 1577 04de 842F      		mov r24,r20
 1578 04e0 8F71      		andi r24,lo8(31)
 1579               	/* epilogue start */
 340:../../tmk_core/common/action.c **** }
 1580               		.loc 1 340 0
 1581 04e2 2896      		adiw r28,8
 1582 04e4 0FB6      		in __tmp_reg__,__SREG__
 1583 04e6 F894      		cli
 1584 04e8 DEBF      		out __SP_H__,r29
 1585 04ea 0FBE      		out __SREG__,__tmp_reg__
 1586 04ec CDBF      		out __SP_L__,r28
 1587 04ee DF91      		pop r29
 1588 04f0 CF91      		pop r28
 1589 04f2 1F91      		pop r17
 1590 04f4 0F91      		pop r16
 1591               	.LVL173:
 1592 04f6 FF90      		pop r15
 1593               	.LVL174:
 1594 04f8 EF90      		pop r14
 1595 04fa DF90      		pop r13
 1596 04fc CF90      		pop r12
 267:../../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1597               		.loc 1 267 0
 1598 04fe 0C94 0000 		jmp layer_off
 1599               	.LVL175:
 1600               	.L120:
 274:../../tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 1601               		.loc 1 274 0
 1602 0502 FF20      		tst r15
 1603 0504 01F0      		breq .L126
 274:../../tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 1604               		.loc 1 274 0 is_stmt 0 discriminator 1
 1605 0506 842F      		mov r24,r20
 1606 0508 8F71      		andi r24,lo8(31)
 1607               	/* epilogue start */
 340:../../tmk_core/common/action.c **** }
 1608               		.loc 1 340 0 is_stmt 1 discriminator 1
 1609 050a 2896      		adiw r28,8
 1610 050c 0FB6      		in __tmp_reg__,__SREG__
 1611 050e F894      		cli
 1612 0510 DEBF      		out __SP_H__,r29
 1613 0512 0FBE      		out __SREG__,__tmp_reg__
 1614 0514 CDBF      		out __SP_L__,r28
 1615 0516 DF91      		pop r29
 1616 0518 CF91      		pop r28
 1617 051a 1F91      		pop r17
 1618 051c 0F91      		pop r16
 1619               	.LVL176:
 1620 051e FF90      		pop r15
 1621               	.LVL177:
 1622 0520 EF90      		pop r14
 1623 0522 DF90      		pop r13
 1624 0524 CF90      		pop r12
 274:../../tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 1625               		.loc 1 274 0 discriminator 1
 1626 0526 0C94 0000 		jmp layer_move
 1627               	.LVL178:
 1628               	.L126:
 1629               	/* epilogue start */
 340:../../tmk_core/common/action.c **** }
 1630               		.loc 1 340 0
 1631 052a 2896      		adiw r28,8
 1632 052c 0FB6      		in __tmp_reg__,__SREG__
 1633 052e F894      		cli
 1634 0530 DEBF      		out __SP_H__,r29
 1635 0532 0FBE      		out __SREG__,__tmp_reg__
 1636 0534 CDBF      		out __SP_L__,r28
 1637 0536 DF91      		pop r29
 1638 0538 CF91      		pop r28
 1639 053a 1F91      		pop r17
 1640 053c 0F91      		pop r16
 1641               	.LVL179:
 1642 053e FF90      		pop r15
 1643               	.LVL180:
 1644 0540 EF90      		pop r14
 1645 0542 DF90      		pop r13
 1646 0544 CF90      		pop r12
 275:../../tmk_core/common/action.c ****                                     layer_clear();
 1647               		.loc 1 275 0
 1648 0546 0C94 0000 		jmp layer_clear
 1649               	.LVL181:
 1650               	.L114:
 279:../../tmk_core/common/action.c ****                     if (event.pressed) {
 1651               		.loc 1 279 0
 1652 054a FF20      		tst r15
 1653 054c 01F0      		breq .L127
 280:../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 1654               		.loc 1 280 0
 1655 054e 2223      		tst r18
 1656 0550 01F4      		brne .+2
 1657 0552 00C0      		rjmp .L125
 1658               	.L160:
 282:../../tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 1659               		.loc 1 282 0
 1660 0554 862F      		mov r24,r22
 1661               	/* epilogue start */
 340:../../tmk_core/common/action.c **** }
 1662               		.loc 1 340 0
 1663 0556 2896      		adiw r28,8
 1664 0558 0FB6      		in __tmp_reg__,__SREG__
 1665 055a F894      		cli
 1666 055c DEBF      		out __SP_H__,r29
 1667 055e 0FBE      		out __SREG__,__tmp_reg__
 1668 0560 CDBF      		out __SP_L__,r28
 1669 0562 DF91      		pop r29
 1670 0564 CF91      		pop r28
 1671 0566 1F91      		pop r17
 1672 0568 0F91      		pop r16
 1673               	.LVL182:
 1674 056a FF90      		pop r15
 1675               	.LVL183:
 1676 056c EF90      		pop r14
 1677 056e DF90      		pop r13
 1678 0570 CF90      		pop r12
 282:../../tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 1679               		.loc 1 282 0
 1680 0572 0C94 0000 		jmp register_code
 1681               	.LVL184:
 1682               	.L127:
 288:../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 1683               		.loc 1 288 0
 1684 0576 2223      		tst r18
 1685 0578 01F4      		brne .+2
 1686 057a 00C0      		rjmp .L124
 1687               	.L162:
 290:../../tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 1688               		.loc 1 290 0
 1689 057c 862F      		mov r24,r22
 1690               	/* epilogue start */
 340:../../tmk_core/common/action.c **** }
 1691               		.loc 1 340 0
 1692 057e 2896      		adiw r28,8
 1693 0580 0FB6      		in __tmp_reg__,__SREG__
 1694 0582 F894      		cli
 1695 0584 DEBF      		out __SP_H__,r29
 1696 0586 0FBE      		out __SREG__,__tmp_reg__
 1697 0588 CDBF      		out __SP_L__,r28
 1698 058a DF91      		pop r29
 1699 058c CF91      		pop r28
 1700 058e 1F91      		pop r17
 1701 0590 0F91      		pop r16
 1702               	.LVL185:
 1703 0592 FF90      		pop r15
 1704               	.LVL186:
 1705 0594 EF90      		pop r14
 1706 0596 DF90      		pop r13
 1707 0598 CF90      		pop r12
 290:../../tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 1708               		.loc 1 290 0
 1709 059a 0C94 0000 		jmp unregister_code
 1710               	.LVL187:
 1711               	.L75:
 304:../../tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 1712               		.loc 1 304 0
 1713 059e 4F70      		andi r20,lo8(15)
 1714 05a0 C801      		movw r24,r16
 1715 05a2 0E94 0000 		call action_get_macro
 1716               	.LVL188:
 1717               	/* epilogue start */
 340:../../tmk_core/common/action.c **** }
 1718               		.loc 1 340 0
 1719 05a6 2896      		adiw r28,8
 1720 05a8 0FB6      		in __tmp_reg__,__SREG__
 1721 05aa F894      		cli
 1722 05ac DEBF      		out __SP_H__,r29
 1723 05ae 0FBE      		out __SREG__,__tmp_reg__
 1724 05b0 CDBF      		out __SP_L__,r28
 1725 05b2 DF91      		pop r29
 1726 05b4 CF91      		pop r28
 1727 05b6 1F91      		pop r17
 1728 05b8 0F91      		pop r16
 1729               	.LVL189:
 1730 05ba FF90      		pop r15
 1731               	.LVL190:
 1732 05bc EF90      		pop r14
 1733 05be DF90      		pop r13
 1734 05c0 CF90      		pop r12
 304:../../tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 1735               		.loc 1 304 0
 1736 05c2 0C94 0000 		jmp action_macro_play
 1737               	.LVL191:
 1738               	.L76:
 334:../../tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 1739               		.loc 1 334 0
 1740 05c6 4F70      		andi r20,lo8(15)
 1741 05c8 C801      		movw r24,r16
 1742               	/* epilogue start */
 340:../../tmk_core/common/action.c **** }
 1743               		.loc 1 340 0
 1744 05ca 2896      		adiw r28,8
 1745 05cc 0FB6      		in __tmp_reg__,__SREG__
 1746 05ce F894      		cli
 1747 05d0 DEBF      		out __SP_H__,r29
 1748 05d2 0FBE      		out __SREG__,__tmp_reg__
 1749 05d4 CDBF      		out __SP_L__,r28
 1750 05d6 DF91      		pop r29
 1751 05d8 CF91      		pop r28
 1752 05da 1F91      		pop r17
 1753 05dc 0F91      		pop r16
 1754               	.LVL192:
 1755 05de FF90      		pop r15
 1756               	.LVL193:
 1757 05e0 EF90      		pop r14
 1758 05e2 DF90      		pop r13
 1759 05e4 CF90      		pop r12
 334:../../tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 1760               		.loc 1 334 0
 1761 05e6 0C94 0000 		jmp action_function
 1762               	.LVL194:
 1763               	.L63:
 1764               	/* epilogue start */
 340:../../tmk_core/common/action.c **** }
 1765               		.loc 1 340 0
 1766 05ea 2896      		adiw r28,8
 1767 05ec 0FB6      		in __tmp_reg__,__SREG__
 1768 05ee F894      		cli
 1769 05f0 DEBF      		out __SP_H__,r29
 1770 05f2 0FBE      		out __SREG__,__tmp_reg__
 1771 05f4 CDBF      		out __SP_L__,r28
 1772 05f6 DF91      		pop r29
 1773 05f8 CF91      		pop r28
 1774 05fa 1F91      		pop r17
 1775 05fc 0F91      		pop r16
 1776               	.LVL195:
 1777 05fe FF90      		pop r15
 1778               	.LVL196:
 1779 0600 EF90      		pop r14
 1780 0602 DF90      		pop r13
 1781 0604 CF90      		pop r12
 1782 0606 0895      		ret
 1783               		.cfi_endproc
 1784               	.LFE104:
 1786               		.section	.text.clear_keyboard_but_mods,"ax",@progbits
 1787               	.global	clear_keyboard_but_mods
 1789               	clear_keyboard_but_mods:
 1790               	.LFB110:
 491:../../tmk_core/common/action.c ****     }
 492:../../tmk_core/common/action.c **** }
 493:../../tmk_core/common/action.c **** 
 494:../../tmk_core/common/action.c **** void clear_keyboard(void)
 495:../../tmk_core/common/action.c **** {
 496:../../tmk_core/common/action.c ****     clear_mods();
 497:../../tmk_core/common/action.c ****     clear_keyboard_but_mods();
 498:../../tmk_core/common/action.c **** }
 499:../../tmk_core/common/action.c **** 
 500:../../tmk_core/common/action.c **** void clear_keyboard_but_mods(void)
 501:../../tmk_core/common/action.c **** {
 1791               		.loc 1 501 0
 1792               		.cfi_startproc
 1793               	/* prologue: function */
 1794               	/* frame size = 0 */
 1795               	/* stack size = 0 */
 1796               	.L__stack_usage = 0
 502:../../tmk_core/common/action.c ****     clear_weak_mods();
 1797               		.loc 1 502 0
 1798 0000 0E94 0000 		call clear_weak_mods
 1799               	.LVL197:
 503:../../tmk_core/common/action.c ****     clear_keys();
 1800               		.loc 1 503 0
 1801 0004 0E94 0000 		call clear_keys
 1802               	.LVL198:
 504:../../tmk_core/common/action.c ****     send_keyboard_report();
 1803               		.loc 1 504 0
 1804 0008 0E94 0000 		call send_keyboard_report
 1805               	.LVL199:
 505:../../tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 506:../../tmk_core/common/action.c ****     mousekey_clear();
 1806               		.loc 1 506 0
 1807 000c 0E94 0000 		call mousekey_clear
 1808               	.LVL200:
 507:../../tmk_core/common/action.c ****     mousekey_send();
 1809               		.loc 1 507 0
 1810 0010 0E94 0000 		call mousekey_send
 1811               	.LVL201:
 508:../../tmk_core/common/action.c **** #endif
 509:../../tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 510:../../tmk_core/common/action.c ****     host_system_send(0);
 1812               		.loc 1 510 0
 1813 0014 80E0      		ldi r24,0
 1814 0016 90E0      		ldi r25,0
 1815 0018 0E94 0000 		call host_system_send
 1816               	.LVL202:
 511:../../tmk_core/common/action.c ****     host_consumer_send(0);
 1817               		.loc 1 511 0
 1818 001c 80E0      		ldi r24,0
 1819 001e 90E0      		ldi r25,0
 1820 0020 0C94 0000 		jmp host_consumer_send
 1821               	.LVL203:
 1822               		.cfi_endproc
 1823               	.LFE110:
 1825               		.section	.text.clear_keyboard,"ax",@progbits
 1826               	.global	clear_keyboard
 1828               	clear_keyboard:
 1829               	.LFB109:
 495:../../tmk_core/common/action.c **** {
 1830               		.loc 1 495 0
 1831               		.cfi_startproc
 1832               	/* prologue: function */
 1833               	/* frame size = 0 */
 1834               	/* stack size = 0 */
 1835               	.L__stack_usage = 0
 496:../../tmk_core/common/action.c ****     clear_mods();
 1836               		.loc 1 496 0
 1837 0000 0E94 0000 		call clear_mods
 1838               	.LVL204:
 497:../../tmk_core/common/action.c ****     clear_keyboard_but_mods();
 1839               		.loc 1 497 0
 1840 0004 0C94 0000 		jmp clear_keyboard_but_mods
 1841               	.LVL205:
 1842               		.cfi_endproc
 1843               	.LFE109:
 1845               		.section	.text.is_tap_key,"ax",@progbits
 1846               	.global	is_tap_key
 1848               	is_tap_key:
 1849               	.LFB111:
 512:../../tmk_core/common/action.c **** #endif
 513:../../tmk_core/common/action.c **** }
 514:../../tmk_core/common/action.c **** 
 515:../../tmk_core/common/action.c **** bool is_tap_key(keypos_t key)
 516:../../tmk_core/common/action.c **** {
 1850               		.loc 1 516 0
 1851               		.cfi_startproc
 1852               	.LVL206:
 1853               	/* prologue: function */
 1854               	/* frame size = 0 */
 1855               	/* stack size = 0 */
 1856               	.L__stack_usage = 0
 517:../../tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 1857               		.loc 1 517 0
 1858 0000 0E94 0000 		call layer_switch_get_action
 1859               	.LVL207:
 518:../../tmk_core/common/action.c **** 
 519:../../tmk_core/common/action.c ****     switch (action.kind.id) {
 1860               		.loc 1 519 0
 1861 0004 292F      		mov r18,r25
 1862 0006 2295      		swap r18
 1863 0008 2F70      		andi r18,lo8(15)
 1864 000a 30E0      		ldi r19,0
 1865 000c 2C30      		cpi r18,12
 1866 000e 3105      		cpc r19,__zero_reg__
 1867 0010 04F4      		brge .L174
 1868 0012 2A30      		cpi r18,10
 1869 0014 3105      		cpc r19,__zero_reg__
 1870 0016 04F4      		brge .L175
 1871 0018 2250      		subi r18,2
 1872 001a 3109      		sbc r19,__zero_reg__
 1873 001c 2230      		cpi r18,2
 1874 001e 3105      		cpc r19,__zero_reg__
 1875 0020 00F4      		brsh .L189
 1876 0022 00C0      		rjmp .L175
 1877               	.L174:
 1878 0024 2C30      		cpi r18,12
 1879 0026 3105      		cpc r19,__zero_reg__
 1880 0028 01F0      		breq .L176
 1881 002a 2F30      		cpi r18,15
 1882 002c 3105      		cpc r19,__zero_reg__
 1883 002e 01F0      		breq .L176
 1884 0030 00C0      		rjmp .L189
 1885               	.L175:
 520:../../tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 521:../../tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 522:../../tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 523:../../tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 524:../../tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1886               		.loc 1 524 0
 1887 0032 803E      		cpi r24,lo8(-32)
 1888               	.LVL208:
 1889 0034 00F0      		brlo .L177
 1890 0036 803F      		cpi r24,lo8(-16)
 1891 0038 01F4      		brne .L189
 1892               	.L177:
 525:../../tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 526:../../tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 527:../../tmk_core/common/action.c ****                     return true;
 1893               		.loc 1 527 0
 1894 003a 81E0      		ldi r24,lo8(1)
 1895               	.LVL209:
 1896 003c 0895      		ret
 1897               	.L176:
 528:../../tmk_core/common/action.c ****             }
 529:../../tmk_core/common/action.c ****             return false;
 530:../../tmk_core/common/action.c ****         case ACT_MACRO:
 531:../../tmk_core/common/action.c ****         case ACT_FUNCTION:
 532:../../tmk_core/common/action.c ****             if (action.func.opt & FUNC_TAP) { return true; }
 1898               		.loc 1 532 0
 1899 003e 93FB      		bst r25,3
 1900 0040 8827      		clr r24
 1901 0042 80F9      		bld r24,0
 1902 0044 0895      		ret
 1903               	.LVL210:
 1904               	.L189:
 529:../../tmk_core/common/action.c ****             return false;
 1905               		.loc 1 529 0
 1906 0046 80E0      		ldi r24,0
 1907               	.LVL211:
 533:../../tmk_core/common/action.c ****             return false;
 534:../../tmk_core/common/action.c ****     }
 535:../../tmk_core/common/action.c ****     return false;
 536:../../tmk_core/common/action.c **** }
 1908               		.loc 1 536 0
 1909 0048 0895      		ret
 1910               		.cfi_endproc
 1911               	.LFE111:
 1913               		.section	.text.debug_event,"ax",@progbits
 1914               	.global	debug_event
 1916               	debug_event:
 1917               	.LFB112:
 537:../../tmk_core/common/action.c **** 
 538:../../tmk_core/common/action.c **** 
 539:../../tmk_core/common/action.c **** /*
 540:../../tmk_core/common/action.c ****  * debug print
 541:../../tmk_core/common/action.c ****  */
 542:../../tmk_core/common/action.c **** void debug_event(keyevent_t event)
 543:../../tmk_core/common/action.c **** {
 1918               		.loc 1 543 0
 1919               		.cfi_startproc
 1920 0000 CF93      		push r28
 1921               	.LCFI15:
 1922               		.cfi_def_cfa_offset 3
 1923               		.cfi_offset 28, -2
 1924 0002 DF93      		push r29
 1925               	.LCFI16:
 1926               		.cfi_def_cfa_offset 4
 1927               		.cfi_offset 29, -3
 1928 0004 00D0      		rcall .
 1929 0006 00D0      		rcall .
 1930 0008 1F92      		push __zero_reg__
 1931               	.LCFI17:
 1932               		.cfi_def_cfa_offset 9
 1933 000a CDB7      		in r28,__SP_L__
 1934 000c DEB7      		in r29,__SP_H__
 1935               	.LCFI18:
 1936               		.cfi_def_cfa_register 28
 1937               	/* prologue: function */
 1938               	/* frame size = 5 */
 1939               	/* stack size = 7 */
 1940               	.L__stack_usage = 7
 1941               	/* epilogue start */
 544:../../tmk_core/common/action.c ****     dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.ti
 545:../../tmk_core/common/action.c **** }
 1942               		.loc 1 545 0
 1943 000e 0F90      		pop __tmp_reg__
 1944 0010 0F90      		pop __tmp_reg__
 1945 0012 0F90      		pop __tmp_reg__
 1946 0014 0F90      		pop __tmp_reg__
 1947 0016 0F90      		pop __tmp_reg__
 1948 0018 DF91      		pop r29
 1949 001a CF91      		pop r28
 1950 001c 0895      		ret
 1951               		.cfi_endproc
 1952               	.LFE112:
 1954               		.section	.text.debug_record,"ax",@progbits
 1955               	.global	debug_record
 1957               	debug_record:
 1958               	.LFB113:
 546:../../tmk_core/common/action.c **** 
 547:../../tmk_core/common/action.c **** void debug_record(keyrecord_t record)
 548:../../tmk_core/common/action.c **** {
 1959               		.loc 1 548 0
 1960               		.cfi_startproc
 1961 0000 CF93      		push r28
 1962               	.LCFI19:
 1963               		.cfi_def_cfa_offset 3
 1964               		.cfi_offset 28, -2
 1965 0002 DF93      		push r29
 1966               	.LCFI20:
 1967               		.cfi_def_cfa_offset 4
 1968               		.cfi_offset 29, -3
 1969 0004 00D0      		rcall .
 1970 0006 00D0      		rcall .
 1971 0008 00D0      		rcall .
 1972               	.LCFI21:
 1973               		.cfi_def_cfa_offset 10
 1974 000a CDB7      		in r28,__SP_L__
 1975 000c DEB7      		in r29,__SP_H__
 1976               	.LCFI22:
 1977               		.cfi_def_cfa_register 28
 1978               	/* prologue: function */
 1979               	/* frame size = 6 */
 1980               	/* stack size = 8 */
 1981               	.L__stack_usage = 8
 1982               	/* epilogue start */
 549:../../tmk_core/common/action.c ****     debug_event(record.event);
 550:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 551:../../tmk_core/common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
 552:../../tmk_core/common/action.c **** #endif
 553:../../tmk_core/common/action.c **** }
 1983               		.loc 1 553 0
 1984 000e 2696      		adiw r28,6
 1985 0010 0FB6      		in __tmp_reg__,__SREG__
 1986 0012 F894      		cli
 1987 0014 DEBF      		out __SP_H__,r29
 1988 0016 0FBE      		out __SREG__,__tmp_reg__
 1989 0018 CDBF      		out __SP_L__,r28
 1990 001a DF91      		pop r29
 1991 001c CF91      		pop r28
 1992 001e 0895      		ret
 1993               		.cfi_endproc
 1994               	.LFE113:
 1996               		.section	.text.debug_action,"ax",@progbits
 1997               	.global	debug_action
 1999               	debug_action:
 2000               	.LFB114:
 554:../../tmk_core/common/action.c **** 
 555:../../tmk_core/common/action.c **** void debug_action(action_t action)
 556:../../tmk_core/common/action.c **** {
 2001               		.loc 1 556 0
 2002               		.cfi_startproc
 2003               	.LVL212:
 2004               	/* prologue: function */
 2005               	/* frame size = 0 */
 2006               	/* stack size = 0 */
 2007               	.L__stack_usage = 0
 2008 0000 0895      		ret
 2009               		.cfi_endproc
 2010               	.LFE114:
 2012               		.text
 2013               	.Letext0:
 2014               		.file 3 "/usr/local/CrossPack-AVR-20131216/avr/include/stdint.h"
 2015               		.file 4 "../../tmk_core/common/keycode.h"
 2016               		.file 5 "../../tmk_core/common/action_code.h"
 2017               		.file 6 "../../tmk_core/common/action_macro.h"
 2018               		.file 7 "../../tmk_core/common/action.h"
 2019               		.file 8 "../../tmk_core/common/action_tapping.h"
 2020               		.file 9 "../../tmk_core/common/action_util.h"
 2021               		.file 10 "../../tmk_core/common/host.h"
 2022               		.file 11 "../../tmk_core/common/action_layer.h"
 2023               		.file 12 "../../tmk_core/common/command.h"
 2024               		.file 13 "../../tmk_core/common/mousekey.h"
 2025               		.file 14 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
DEFINED SYMBOLS
                            *ABS*:00000000 action.c
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccuoWwdz.s:2      *ABS*:0000003e __SP_H__
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccuoWwdz.s:3      *ABS*:0000003d __SP_L__
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccuoWwdz.s:4      *ABS*:0000003f __SREG__
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccuoWwdz.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccuoWwdz.s:6      *ABS*:00000001 __zero_reg__
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccuoWwdz.s:13     .text.action_exec:00000000 action_exec
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccuoWwdz.s:93     .text.register_code:00000000 register_code
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccuoWwdz.s:410    .text.unregister_code:00000000 unregister_code
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccuoWwdz.s:545    .text.register_mods:00000000 register_mods
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccuoWwdz.s:571    .text.unregister_mods:00000000 unregister_mods
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccuoWwdz.s:597    .text.process_action:00000000 process_action
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccuoWwdz.s:1789   .text.clear_keyboard_but_mods:00000000 clear_keyboard_but_mods
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccuoWwdz.s:1828   .text.clear_keyboard:00000000 clear_keyboard
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccuoWwdz.s:1848   .text.is_tap_key:00000000 is_tap_key
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccuoWwdz.s:1916   .text.debug_event:00000000 debug_event
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccuoWwdz.s:1957   .text.debug_record:00000000 debug_record
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccuoWwdz.s:1999   .text.debug_action:00000000 debug_action

UNDEFINED SYMBOLS
action_tapping_process
host_keyboard_leds
add_key
send_keyboard_report
del_key
command_proc
add_mods
host_system_send
host_consumer_send
del_mods
layer_switch_get_action
layer_debug
default_layer_debug
__tablejump2__
add_weak_mods
del_weak_mods
set_oneshot_mods
clear_oneshot_mods
mousekey_on
mousekey_off
mousekey_send
default_layer_and
default_layer_xor
default_layer_or
layer_and
layer_xor
layer_or
layer_on
layer_off
layer_invert
layer_move
layer_clear
action_get_macro
action_macro_play
action_function
clear_weak_mods
clear_keys
mousekey_clear
clear_mods
