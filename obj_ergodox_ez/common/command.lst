   1               		.file	"command.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.mousekey_console_help,"ax",@progbits
  12               	mousekey_console_help:
  13               	.LFB114:
  14               		.file 1 "../../tmk_core/common/command.c"
   1:../../tmk_core/common/command.c **** /*
   2:../../tmk_core/common/command.c **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/command.c **** 
   4:../../tmk_core/common/command.c **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/command.c **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/command.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/command.c **** (at your option) any later version.
   8:../../tmk_core/common/command.c **** 
   9:../../tmk_core/common/command.c **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/command.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/command.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/command.c **** GNU General Public License for more details.
  13:../../tmk_core/common/command.c **** 
  14:../../tmk_core/common/command.c **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/command.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/command.c **** */
  17:../../tmk_core/common/command.c **** #include <stdint.h>
  18:../../tmk_core/common/command.c **** #include <stdbool.h>
  19:../../tmk_core/common/command.c **** #include <util/delay.h>
  20:../../tmk_core/common/command.c **** #include "keycode.h"
  21:../../tmk_core/common/command.c **** #include "host.h"
  22:../../tmk_core/common/command.c **** #include "keymap.h"
  23:../../tmk_core/common/command.c **** #include "print.h"
  24:../../tmk_core/common/command.c **** #include "debug.h"
  25:../../tmk_core/common/command.c **** #include "util.h"
  26:../../tmk_core/common/command.c **** #include "timer.h"
  27:../../tmk_core/common/command.c **** #include "keyboard.h"
  28:../../tmk_core/common/command.c **** #include "bootloader.h"
  29:../../tmk_core/common/command.c **** #include "action_layer.h"
  30:../../tmk_core/common/command.c **** #include "action_util.h"
  31:../../tmk_core/common/command.c **** #include "eeconfig.h"
  32:../../tmk_core/common/command.c **** #include "sleep_led.h"
  33:../../tmk_core/common/command.c **** #include "led.h"
  34:../../tmk_core/common/command.c **** #include "command.h"
  35:../../tmk_core/common/command.c **** #include "backlight.h"
  36:../../tmk_core/common/command.c **** 
  37:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  38:../../tmk_core/common/command.c **** #include "mousekey.h"
  39:../../tmk_core/common/command.c **** #endif
  40:../../tmk_core/common/command.c **** 
  41:../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
  42:../../tmk_core/common/command.c **** #   include "usb_keyboard.h"
  43:../../tmk_core/common/command.c **** #   ifdef EXTRAKEY_ENABLE
  44:../../tmk_core/common/command.c **** #       include "usb_extra.h"
  45:../../tmk_core/common/command.c **** #   endif
  46:../../tmk_core/common/command.c **** #endif
  47:../../tmk_core/common/command.c **** 
  48:../../tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
  49:../../tmk_core/common/command.c **** #   include "usbdrv.h"
  50:../../tmk_core/common/command.c **** #endif
  51:../../tmk_core/common/command.c **** 
  52:../../tmk_core/common/command.c **** 
  53:../../tmk_core/common/command.c **** static bool command_common(uint8_t code);
  54:../../tmk_core/common/command.c **** static void command_common_help(void);
  55:../../tmk_core/common/command.c **** static bool command_console(uint8_t code);
  56:../../tmk_core/common/command.c **** static void command_console_help(void);
  57:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  58:../../tmk_core/common/command.c **** static bool mousekey_console(uint8_t code);
  59:../../tmk_core/common/command.c **** static void mousekey_console_help(void);
  60:../../tmk_core/common/command.c **** #endif
  61:../../tmk_core/common/command.c **** 
  62:../../tmk_core/common/command.c **** static uint8_t numkey2num(uint8_t code);
  63:../../tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer);
  64:../../tmk_core/common/command.c **** 
  65:../../tmk_core/common/command.c **** 
  66:../../tmk_core/common/command.c **** command_state_t command_state = ONESHOT;
  67:../../tmk_core/common/command.c **** 
  68:../../tmk_core/common/command.c **** 
  69:../../tmk_core/common/command.c **** bool command_proc(uint8_t code)
  70:../../tmk_core/common/command.c **** {
  71:../../tmk_core/common/command.c ****     switch (command_state) {
  72:../../tmk_core/common/command.c ****         case ONESHOT:
  73:../../tmk_core/common/command.c ****             if (!IS_COMMAND())
  74:../../tmk_core/common/command.c ****                 return false;
  75:../../tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
  76:../../tmk_core/common/command.c ****             break;
  77:../../tmk_core/common/command.c ****         case CONSOLE:
  78:../../tmk_core/common/command.c ****             if (IS_COMMAND())
  79:../../tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
  80:../../tmk_core/common/command.c ****             else
  81:../../tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
  82:../../tmk_core/common/command.c ****             break;
  83:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  84:../../tmk_core/common/command.c ****         case MOUSEKEY:
  85:../../tmk_core/common/command.c ****             mousekey_console(code);
  86:../../tmk_core/common/command.c ****             break;
  87:../../tmk_core/common/command.c **** #endif
  88:../../tmk_core/common/command.c ****         default:
  89:../../tmk_core/common/command.c ****             command_state = ONESHOT;
  90:../../tmk_core/common/command.c ****             return false;
  91:../../tmk_core/common/command.c ****     }
  92:../../tmk_core/common/command.c ****     return true;
  93:../../tmk_core/common/command.c **** }
  94:../../tmk_core/common/command.c **** 
  95:../../tmk_core/common/command.c **** /* TODO: Refactoring is needed. */
  96:../../tmk_core/common/command.c **** /* This allows to define extra commands. return false when not processed. */
  97:../../tmk_core/common/command.c **** bool command_extra(uint8_t code) __attribute__ ((weak));
  98:../../tmk_core/common/command.c **** bool command_extra(uint8_t code)
  99:../../tmk_core/common/command.c **** {
 100:../../tmk_core/common/command.c ****     return false;
 101:../../tmk_core/common/command.c **** }
 102:../../tmk_core/common/command.c **** 
 103:../../tmk_core/common/command.c **** bool command_console_extra(uint8_t code) __attribute__ ((weak));
 104:../../tmk_core/common/command.c **** bool command_console_extra(uint8_t code)
 105:../../tmk_core/common/command.c **** {
 106:../../tmk_core/common/command.c ****     return false;
 107:../../tmk_core/common/command.c **** }
 108:../../tmk_core/common/command.c **** 
 109:../../tmk_core/common/command.c **** 
 110:../../tmk_core/common/command.c **** /***********************************************************
 111:../../tmk_core/common/command.c ****  * Command common
 112:../../tmk_core/common/command.c ****  ***********************************************************/
 113:../../tmk_core/common/command.c **** static void command_common_help(void)
 114:../../tmk_core/common/command.c **** {
 115:../../tmk_core/common/command.c ****     print("\n\t- Magic -\n"
 116:../../tmk_core/common/command.c ****           "d:	debug\n"
 117:../../tmk_core/common/command.c ****           "x:	debug matrix\n"
 118:../../tmk_core/common/command.c ****           "k:	debug keyboard\n"
 119:../../tmk_core/common/command.c ****           "m:	debug mouse\n"
 120:../../tmk_core/common/command.c ****           "v:	version\n"
 121:../../tmk_core/common/command.c ****           "s:	status\n"
 122:../../tmk_core/common/command.c ****           "c:	console mode\n"
 123:../../tmk_core/common/command.c ****           "0-4:	layer0-4(F10-F4)\n"
 124:../../tmk_core/common/command.c ****           "Paus:	bootloader\n"
 125:../../tmk_core/common/command.c **** 
 126:../../tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 127:../../tmk_core/common/command.c ****           "Caps:	Lock\n"
 128:../../tmk_core/common/command.c **** #endif
 129:../../tmk_core/common/command.c **** 
 130:../../tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 131:../../tmk_core/common/command.c ****           "e:	eeprom\n"
 132:../../tmk_core/common/command.c **** #endif
 133:../../tmk_core/common/command.c **** 
 134:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 135:../../tmk_core/common/command.c ****           "n:	NKRO\n"
 136:../../tmk_core/common/command.c **** #endif
 137:../../tmk_core/common/command.c **** 
 138:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 139:../../tmk_core/common/command.c ****           "z:	sleep LED test\n"
 140:../../tmk_core/common/command.c **** #endif
 141:../../tmk_core/common/command.c ****     );
 142:../../tmk_core/common/command.c **** }
 143:../../tmk_core/common/command.c **** 
 144:../../tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 145:../../tmk_core/common/command.c **** static void print_eeconfig(void)
 146:../../tmk_core/common/command.c **** {
 147:../../tmk_core/common/command.c ****     print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
 148:../../tmk_core/common/command.c **** 
 149:../../tmk_core/common/command.c ****     debug_config_t dc;
 150:../../tmk_core/common/command.c ****     dc.raw = eeconfig_read_debug();
 151:../../tmk_core/common/command.c ****     print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
 152:../../tmk_core/common/command.c ****     print(".enable: "); print_dec(dc.enable); print("\n");
 153:../../tmk_core/common/command.c ****     print(".matrix: "); print_dec(dc.matrix); print("\n");
 154:../../tmk_core/common/command.c ****     print(".keyboard: "); print_dec(dc.keyboard); print("\n");
 155:../../tmk_core/common/command.c ****     print(".mouse: "); print_dec(dc.mouse); print("\n");
 156:../../tmk_core/common/command.c **** 
 157:../../tmk_core/common/command.c ****     keymap_config_t kc;
 158:../../tmk_core/common/command.c ****     kc.raw = eeconfig_read_keymap();
 159:../../tmk_core/common/command.c ****     print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
 160:../../tmk_core/common/command.c ****     print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
 161:../../tmk_core/common/command.c ****     print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
 162:../../tmk_core/common/command.c ****     print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
 163:../../tmk_core/common/command.c ****     print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
 164:../../tmk_core/common/command.c ****     print(".no_gui: "); print_dec(kc.no_gui); print("\n");
 165:../../tmk_core/common/command.c ****     print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
 166:../../tmk_core/common/command.c ****     print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
 167:../../tmk_core/common/command.c ****     print(".nkro: "); print_dec(kc.nkro); print("\n");
 168:../../tmk_core/common/command.c **** 
 169:../../tmk_core/common/command.c **** #ifdef BACKLIGHT_ENABLE
 170:../../tmk_core/common/command.c ****     backlight_config_t bc;
 171:../../tmk_core/common/command.c ****     bc.raw = eeconfig_read_backlight();
 172:../../tmk_core/common/command.c ****     print("backlight_config.raw: "); print_hex8(bc.raw); print("\n");
 173:../../tmk_core/common/command.c ****     print(".enable: "); print_dec(bc.enable); print("\n");
 174:../../tmk_core/common/command.c ****     print(".level: "); print_dec(bc.level); print("\n");
 175:../../tmk_core/common/command.c **** #endif
 176:../../tmk_core/common/command.c **** }
 177:../../tmk_core/common/command.c **** #endif
 178:../../tmk_core/common/command.c **** 
 179:../../tmk_core/common/command.c **** static bool command_common(uint8_t code)
 180:../../tmk_core/common/command.c **** {
 181:../../tmk_core/common/command.c ****     static host_driver_t *host_driver = 0;
 182:../../tmk_core/common/command.c ****     switch (code) {
 183:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 184:../../tmk_core/common/command.c ****         case KC_Z:
 185:../../tmk_core/common/command.c ****             // test breathing sleep LED
 186:../../tmk_core/common/command.c ****             print("Sleep LED test\n");
 187:../../tmk_core/common/command.c ****             sleep_led_toggle();
 188:../../tmk_core/common/command.c ****             led_set(host_keyboard_leds());
 189:../../tmk_core/common/command.c ****             break;
 190:../../tmk_core/common/command.c **** #endif
 191:../../tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 192:../../tmk_core/common/command.c ****         case KC_E:
 193:../../tmk_core/common/command.c ****             print("eeconfig:\n");
 194:../../tmk_core/common/command.c ****             print_eeconfig();
 195:../../tmk_core/common/command.c ****             break;
 196:../../tmk_core/common/command.c **** #endif
 197:../../tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 198:../../tmk_core/common/command.c ****         case KC_CAPSLOCK:
 199:../../tmk_core/common/command.c ****             if (host_get_driver()) {
 200:../../tmk_core/common/command.c ****                 host_driver = host_get_driver();
 201:../../tmk_core/common/command.c ****                 clear_keyboard();
 202:../../tmk_core/common/command.c ****                 host_set_driver(0);
 203:../../tmk_core/common/command.c ****                 print("Locked.\n");
 204:../../tmk_core/common/command.c ****             } else {
 205:../../tmk_core/common/command.c ****                 host_set_driver(host_driver);
 206:../../tmk_core/common/command.c ****                 print("Unlocked.\n");
 207:../../tmk_core/common/command.c ****             }
 208:../../tmk_core/common/command.c ****             break;
 209:../../tmk_core/common/command.c **** #endif
 210:../../tmk_core/common/command.c ****         case KC_H:
 211:../../tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 212:../../tmk_core/common/command.c ****             command_common_help();
 213:../../tmk_core/common/command.c ****             break;
 214:../../tmk_core/common/command.c ****         case KC_C:
 215:../../tmk_core/common/command.c ****             debug_matrix   = false;
 216:../../tmk_core/common/command.c ****             debug_keyboard = false;
 217:../../tmk_core/common/command.c ****             debug_mouse    = false;
 218:../../tmk_core/common/command.c ****             debug_enable   = false;
 219:../../tmk_core/common/command.c ****             command_console_help();
 220:../../tmk_core/common/command.c ****             print("C> ");
 221:../../tmk_core/common/command.c ****             command_state = CONSOLE;
 222:../../tmk_core/common/command.c ****             break;
 223:../../tmk_core/common/command.c ****         case KC_PAUSE:
 224:../../tmk_core/common/command.c ****             clear_keyboard();
 225:../../tmk_core/common/command.c ****             print("\n\nbootloader... ");
 226:../../tmk_core/common/command.c ****             _delay_ms(1000);
 227:../../tmk_core/common/command.c ****             bootloader_jump(); // not return
 228:../../tmk_core/common/command.c ****             break;
 229:../../tmk_core/common/command.c ****         case KC_D:
 230:../../tmk_core/common/command.c ****             if (debug_enable) {
 231:../../tmk_core/common/command.c ****                 print("\ndebug: off\n");
 232:../../tmk_core/common/command.c ****                 debug_matrix   = false;
 233:../../tmk_core/common/command.c ****                 debug_keyboard = false;
 234:../../tmk_core/common/command.c ****                 debug_mouse    = false;
 235:../../tmk_core/common/command.c ****                 debug_enable   = false;
 236:../../tmk_core/common/command.c ****             } else {
 237:../../tmk_core/common/command.c ****                 print("\ndebug: on\n");
 238:../../tmk_core/common/command.c ****                 debug_enable   = true;
 239:../../tmk_core/common/command.c ****             }
 240:../../tmk_core/common/command.c ****             break;
 241:../../tmk_core/common/command.c ****         case KC_X: // debug matrix toggle
 242:../../tmk_core/common/command.c ****             debug_matrix = !debug_matrix;
 243:../../tmk_core/common/command.c ****             if (debug_matrix) {
 244:../../tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 245:../../tmk_core/common/command.c ****                 debug_enable = true;
 246:../../tmk_core/common/command.c ****             } else {
 247:../../tmk_core/common/command.c ****                 print("\nmatrix: off\n");
 248:../../tmk_core/common/command.c ****             }
 249:../../tmk_core/common/command.c ****             break;
 250:../../tmk_core/common/command.c ****         case KC_K: // debug keyboard toggle
 251:../../tmk_core/common/command.c ****             debug_keyboard = !debug_keyboard;
 252:../../tmk_core/common/command.c ****             if (debug_keyboard) {
 253:../../tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 254:../../tmk_core/common/command.c ****                 debug_enable = true;
 255:../../tmk_core/common/command.c ****             } else {
 256:../../tmk_core/common/command.c ****                 print("\nkeyboard: off\n");
 257:../../tmk_core/common/command.c ****             }
 258:../../tmk_core/common/command.c ****             break;
 259:../../tmk_core/common/command.c ****         case KC_M: // debug mouse toggle
 260:../../tmk_core/common/command.c ****             debug_mouse = !debug_mouse;
 261:../../tmk_core/common/command.c ****             if (debug_mouse) {
 262:../../tmk_core/common/command.c ****                 print("\nmouse: on\n");
 263:../../tmk_core/common/command.c ****                 debug_enable = true;
 264:../../tmk_core/common/command.c ****             } else {
 265:../../tmk_core/common/command.c ****                 print("\nmouse: off\n");
 266:../../tmk_core/common/command.c ****             }
 267:../../tmk_core/common/command.c ****             break;
 268:../../tmk_core/common/command.c ****         case KC_V: // print version & information
 269:../../tmk_core/common/command.c ****             print("\n\t- Version -\n");
 270:../../tmk_core/common/command.c ****             print("DESC: " STR(DESCRIPTION) "\n");
 271:../../tmk_core/common/command.c ****             print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 272:../../tmk_core/common/command.c ****                   "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
 273:../../tmk_core/common/command.c ****                   "VER: " STR(DEVICE_VER) "\n");
 274:../../tmk_core/common/command.c ****             print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
 275:../../tmk_core/common/command.c ****             /* build options */
 276:../../tmk_core/common/command.c ****             print("OPTIONS:"
 277:../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 278:../../tmk_core/common/command.c ****             " PJRC"
 279:../../tmk_core/common/command.c **** #endif
 280:../../tmk_core/common/command.c **** #ifdef PROTOCOL_LUFA
 281:../../tmk_core/common/command.c ****             " LUFA"
 282:../../tmk_core/common/command.c **** #endif
 283:../../tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
 284:../../tmk_core/common/command.c ****             " VUSB"
 285:../../tmk_core/common/command.c **** #endif
 286:../../tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 287:../../tmk_core/common/command.c ****             " BOOTMAGIC"
 288:../../tmk_core/common/command.c **** #endif
 289:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 290:../../tmk_core/common/command.c ****             " MOUSEKEY"
 291:../../tmk_core/common/command.c **** #endif
 292:../../tmk_core/common/command.c **** #ifdef EXTRAKEY_ENABLE
 293:../../tmk_core/common/command.c ****             " EXTRAKEY"
 294:../../tmk_core/common/command.c **** #endif
 295:../../tmk_core/common/command.c **** #ifdef CONSOLE_ENABLE
 296:../../tmk_core/common/command.c ****             " CONSOLE"
 297:../../tmk_core/common/command.c **** #endif
 298:../../tmk_core/common/command.c **** #ifdef COMMAND_ENABLE
 299:../../tmk_core/common/command.c ****             " COMMAND"
 300:../../tmk_core/common/command.c **** #endif
 301:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 302:../../tmk_core/common/command.c ****             " NKRO"
 303:../../tmk_core/common/command.c **** #endif
 304:../../tmk_core/common/command.c **** #ifdef KEYMAP_SECTION_ENABLE
 305:../../tmk_core/common/command.c ****             " KEYMAP_SECTION"
 306:../../tmk_core/common/command.c **** #endif
 307:../../tmk_core/common/command.c ****             " " STR(BOOTLOADER_SIZE) "\n");
 308:../../tmk_core/common/command.c **** 
 309:../../tmk_core/common/command.c ****             print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
 310:../../tmk_core/common/command.c ****                   " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
 311:../../tmk_core/common/command.c ****                   " AVR_ARCH: avr" STR(__AVR_ARCH__) "\n");
 312:../../tmk_core/common/command.c ****             break;
 313:../../tmk_core/common/command.c ****         case KC_S:
 314:../../tmk_core/common/command.c ****             print("\n\t- Status -\n");
 315:../../tmk_core/common/command.c ****             print_val_hex8(host_keyboard_leds());
 316:../../tmk_core/common/command.c ****             print_val_hex8(keyboard_protocol);
 317:../../tmk_core/common/command.c ****             print_val_hex8(keyboard_idle);
 318:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 319:../../tmk_core/common/command.c ****             print_val_hex8(keyboard_nkro);
 320:../../tmk_core/common/command.c **** #endif
 321:../../tmk_core/common/command.c ****             print_val_hex32(timer_count);
 322:../../tmk_core/common/command.c **** 
 323:../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 324:../../tmk_core/common/command.c ****             print_val_hex8(UDCON);
 325:../../tmk_core/common/command.c ****             print_val_hex8(UDIEN);
 326:../../tmk_core/common/command.c ****             print_val_hex8(UDINT);
 327:../../tmk_core/common/command.c ****             print_val_hex8(usb_keyboard_leds);
 328:../../tmk_core/common/command.c ****             print_val_hex8(usb_keyboard_idle_count);
 329:../../tmk_core/common/command.c **** #endif
 330:../../tmk_core/common/command.c **** 
 331:../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 332:../../tmk_core/common/command.c **** #   if USB_COUNT_SOF
 333:../../tmk_core/common/command.c ****             print_val_hex8(usbSofCount);
 334:../../tmk_core/common/command.c **** #   endif
 335:../../tmk_core/common/command.c **** #endif
 336:../../tmk_core/common/command.c ****             break;
 337:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 338:../../tmk_core/common/command.c ****         case KC_N:
 339:../../tmk_core/common/command.c ****             clear_keyboard(); //Prevents stuck keys.
 340:../../tmk_core/common/command.c ****             keyboard_nkro = !keyboard_nkro;
 341:../../tmk_core/common/command.c ****             if (keyboard_nkro)
 342:../../tmk_core/common/command.c ****                 print("NKRO: on\n");
 343:../../tmk_core/common/command.c ****             else
 344:../../tmk_core/common/command.c ****                 print("NKRO: off\n");
 345:../../tmk_core/common/command.c ****             break;
 346:../../tmk_core/common/command.c **** #endif
 347:../../tmk_core/common/command.c ****         case KC_ESC:
 348:../../tmk_core/common/command.c ****         case KC_GRV:
 349:../../tmk_core/common/command.c ****         case KC_0:
 350:../../tmk_core/common/command.c ****         case KC_F10:
 351:../../tmk_core/common/command.c ****             switch_default_layer(0);
 352:../../tmk_core/common/command.c ****             break;
 353:../../tmk_core/common/command.c ****         case KC_1 ... KC_9:
 354:../../tmk_core/common/command.c ****             switch_default_layer((code - KC_1) + 1);
 355:../../tmk_core/common/command.c ****             break;
 356:../../tmk_core/common/command.c ****         case KC_F1 ... KC_F9:
 357:../../tmk_core/common/command.c ****             switch_default_layer((code - KC_F1) + 1);
 358:../../tmk_core/common/command.c ****             break;
 359:../../tmk_core/common/command.c ****         default:
 360:../../tmk_core/common/command.c ****             print("?");
 361:../../tmk_core/common/command.c ****             return false;
 362:../../tmk_core/common/command.c ****     }
 363:../../tmk_core/common/command.c ****     return true;
 364:../../tmk_core/common/command.c **** }
 365:../../tmk_core/common/command.c **** 
 366:../../tmk_core/common/command.c **** 
 367:../../tmk_core/common/command.c **** /***********************************************************
 368:../../tmk_core/common/command.c ****  * Command console
 369:../../tmk_core/common/command.c ****  ***********************************************************/
 370:../../tmk_core/common/command.c **** static void command_console_help(void)
 371:../../tmk_core/common/command.c **** {
 372:../../tmk_core/common/command.c ****     print("\n\t- Console -\n"
 373:../../tmk_core/common/command.c ****           "ESC/q:	quit\n"
 374:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 375:../../tmk_core/common/command.c ****           "m:	mousekey\n"
 376:../../tmk_core/common/command.c **** #endif
 377:../../tmk_core/common/command.c ****     );
 378:../../tmk_core/common/command.c **** }
 379:../../tmk_core/common/command.c **** 
 380:../../tmk_core/common/command.c **** static bool command_console(uint8_t code)
 381:../../tmk_core/common/command.c **** {
 382:../../tmk_core/common/command.c ****     switch (code) {
 383:../../tmk_core/common/command.c ****         case KC_H:
 384:../../tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 385:../../tmk_core/common/command.c ****             command_console_help();
 386:../../tmk_core/common/command.c ****             break;
 387:../../tmk_core/common/command.c ****         case KC_Q:
 388:../../tmk_core/common/command.c ****         case KC_ESC:
 389:../../tmk_core/common/command.c ****             command_state = ONESHOT;
 390:../../tmk_core/common/command.c ****             return false;
 391:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 392:../../tmk_core/common/command.c ****         case KC_M:
 393:../../tmk_core/common/command.c ****             mousekey_console_help();
 394:../../tmk_core/common/command.c ****             print("M> ");
 395:../../tmk_core/common/command.c ****             command_state = MOUSEKEY;
 396:../../tmk_core/common/command.c ****             return true;
 397:../../tmk_core/common/command.c **** #endif
 398:../../tmk_core/common/command.c ****         default:
 399:../../tmk_core/common/command.c ****             print("?");
 400:../../tmk_core/common/command.c ****             return false;
 401:../../tmk_core/common/command.c ****     }
 402:../../tmk_core/common/command.c ****     print("C> ");
 403:../../tmk_core/common/command.c ****     return true;
 404:../../tmk_core/common/command.c **** }
 405:../../tmk_core/common/command.c **** 
 406:../../tmk_core/common/command.c **** 
 407:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 408:../../tmk_core/common/command.c **** /***********************************************************
 409:../../tmk_core/common/command.c ****  * Mousekey console
 410:../../tmk_core/common/command.c ****  ***********************************************************/
 411:../../tmk_core/common/command.c **** static uint8_t mousekey_param = 0;
 412:../../tmk_core/common/command.c **** 
 413:../../tmk_core/common/command.c **** static void mousekey_param_print(void)
 414:../../tmk_core/common/command.c **** {
 415:../../tmk_core/common/command.c ****     print("\n\t- Values -\n");
 416:../../tmk_core/common/command.c ****     print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
 417:../../tmk_core/common/command.c ****     print("2: interval(ms): "); pdec(mk_interval); print("\n");
 418:../../tmk_core/common/command.c ****     print("3: max_speed: "); pdec(mk_max_speed); print("\n");
 419:../../tmk_core/common/command.c ****     print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
 420:../../tmk_core/common/command.c ****     print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
 421:../../tmk_core/common/command.c ****     print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
 422:../../tmk_core/common/command.c **** }
 423:../../tmk_core/common/command.c **** 
 424:../../tmk_core/common/command.c **** //#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
 425:../../tmk_core/common/command.c **** #define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
 426:../../tmk_core/common/command.c **** static void mousekey_param_inc(uint8_t param, uint8_t inc)
 427:../../tmk_core/common/command.c **** {
 428:../../tmk_core/common/command.c ****     switch (param) {
 429:../../tmk_core/common/command.c ****         case 1:
 430:../../tmk_core/common/command.c ****             if (mk_delay + inc < UINT8_MAX)
 431:../../tmk_core/common/command.c ****                 mk_delay += inc;
 432:../../tmk_core/common/command.c ****             else
 433:../../tmk_core/common/command.c ****                 mk_delay = UINT8_MAX;
 434:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 435:../../tmk_core/common/command.c ****             break;
 436:../../tmk_core/common/command.c ****         case 2:
 437:../../tmk_core/common/command.c ****             if (mk_interval + inc < UINT8_MAX)
 438:../../tmk_core/common/command.c ****                 mk_interval += inc;
 439:../../tmk_core/common/command.c ****             else
 440:../../tmk_core/common/command.c ****                 mk_interval = UINT8_MAX;
 441:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 442:../../tmk_core/common/command.c ****             break;
 443:../../tmk_core/common/command.c ****         case 3:
 444:../../tmk_core/common/command.c ****             if (mk_max_speed + inc < UINT8_MAX)
 445:../../tmk_core/common/command.c ****                 mk_max_speed += inc;
 446:../../tmk_core/common/command.c ****             else
 447:../../tmk_core/common/command.c ****                 mk_max_speed = UINT8_MAX;
 448:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 449:../../tmk_core/common/command.c ****             break;
 450:../../tmk_core/common/command.c ****         case 4:
 451:../../tmk_core/common/command.c ****             if (mk_time_to_max + inc < UINT8_MAX)
 452:../../tmk_core/common/command.c ****                 mk_time_to_max += inc;
 453:../../tmk_core/common/command.c ****             else
 454:../../tmk_core/common/command.c ****                 mk_time_to_max = UINT8_MAX;
 455:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 456:../../tmk_core/common/command.c ****             break;
 457:../../tmk_core/common/command.c ****         case 5:
 458:../../tmk_core/common/command.c ****             if (mk_wheel_max_speed + inc < UINT8_MAX)
 459:../../tmk_core/common/command.c ****                 mk_wheel_max_speed += inc;
 460:../../tmk_core/common/command.c ****             else
 461:../../tmk_core/common/command.c ****                 mk_wheel_max_speed = UINT8_MAX;
 462:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 463:../../tmk_core/common/command.c ****             break;
 464:../../tmk_core/common/command.c ****         case 6:
 465:../../tmk_core/common/command.c ****             if (mk_wheel_time_to_max + inc < UINT8_MAX)
 466:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max += inc;
 467:../../tmk_core/common/command.c ****             else
 468:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max = UINT8_MAX;
 469:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 470:../../tmk_core/common/command.c ****             break;
 471:../../tmk_core/common/command.c ****     }
 472:../../tmk_core/common/command.c **** }
 473:../../tmk_core/common/command.c **** 
 474:../../tmk_core/common/command.c **** static void mousekey_param_dec(uint8_t param, uint8_t dec)
 475:../../tmk_core/common/command.c **** {
 476:../../tmk_core/common/command.c ****     switch (param) {
 477:../../tmk_core/common/command.c ****         case 1:
 478:../../tmk_core/common/command.c ****             if (mk_delay > dec)
 479:../../tmk_core/common/command.c ****                 mk_delay -= dec;
 480:../../tmk_core/common/command.c ****             else
 481:../../tmk_core/common/command.c ****                 mk_delay = 0;
 482:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 483:../../tmk_core/common/command.c ****             break;
 484:../../tmk_core/common/command.c ****         case 2:
 485:../../tmk_core/common/command.c ****             if (mk_interval > dec)
 486:../../tmk_core/common/command.c ****                 mk_interval -= dec;
 487:../../tmk_core/common/command.c ****             else
 488:../../tmk_core/common/command.c ****                 mk_interval = 0;
 489:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 490:../../tmk_core/common/command.c ****             break;
 491:../../tmk_core/common/command.c ****         case 3:
 492:../../tmk_core/common/command.c ****             if (mk_max_speed > dec)
 493:../../tmk_core/common/command.c ****                 mk_max_speed -= dec;
 494:../../tmk_core/common/command.c ****             else
 495:../../tmk_core/common/command.c ****                 mk_max_speed = 0;
 496:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 497:../../tmk_core/common/command.c ****             break;
 498:../../tmk_core/common/command.c ****         case 4:
 499:../../tmk_core/common/command.c ****             if (mk_time_to_max > dec)
 500:../../tmk_core/common/command.c ****                 mk_time_to_max -= dec;
 501:../../tmk_core/common/command.c ****             else
 502:../../tmk_core/common/command.c ****                 mk_time_to_max = 0;
 503:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 504:../../tmk_core/common/command.c ****             break;
 505:../../tmk_core/common/command.c ****         case 5:
 506:../../tmk_core/common/command.c ****             if (mk_wheel_max_speed > dec)
 507:../../tmk_core/common/command.c ****                 mk_wheel_max_speed -= dec;
 508:../../tmk_core/common/command.c ****             else
 509:../../tmk_core/common/command.c ****                 mk_wheel_max_speed = 0;
 510:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 511:../../tmk_core/common/command.c ****             break;
 512:../../tmk_core/common/command.c ****         case 6:
 513:../../tmk_core/common/command.c ****             if (mk_wheel_time_to_max > dec)
 514:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max -= dec;
 515:../../tmk_core/common/command.c ****             else
 516:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max = 0;
 517:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 518:../../tmk_core/common/command.c ****             break;
 519:../../tmk_core/common/command.c ****     }
 520:../../tmk_core/common/command.c **** }
 521:../../tmk_core/common/command.c **** 
 522:../../tmk_core/common/command.c **** static void mousekey_console_help(void)
 523:../../tmk_core/common/command.c **** {
  15               		.loc 1 523 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 524:../../tmk_core/common/command.c ****     print("\n\t- Mousekey -\n"
  21               		.loc 1 524 0
  22 0000 80E0      		ldi r24,lo8(__c.5080)
  23 0002 90E0      		ldi r25,hi8(__c.5080)
  24 0004 0E94 0000 		call xputs
  25               	.LVL0:
 525:../../tmk_core/common/command.c ****           "ESC/q:	quit\n"
 526:../../tmk_core/common/command.c ****           "1:	delay(*10ms)\n"
 527:../../tmk_core/common/command.c ****           "2:	interval(ms)\n"
 528:../../tmk_core/common/command.c ****           "3:	max_speed\n"
 529:../../tmk_core/common/command.c ****           "4:	time_to_max\n"
 530:../../tmk_core/common/command.c ****           "5:	wheel_max_speed\n"
 531:../../tmk_core/common/command.c ****           "6:	wheel_time_to_max\n"
 532:../../tmk_core/common/command.c ****           "\n"
 533:../../tmk_core/common/command.c ****           "p:	print values\n"
 534:../../tmk_core/common/command.c ****           "d:	set defaults\n"
 535:../../tmk_core/common/command.c ****           "up:	+1\n"
 536:../../tmk_core/common/command.c ****           "down:	-1\n"
 537:../../tmk_core/common/command.c ****           "pgup:	+10\n"
 538:../../tmk_core/common/command.c ****           "pgdown:	-10\n"
 539:../../tmk_core/common/command.c ****           "\n"
 540:../../tmk_core/common/command.c ****           "speed = delta * max_speed * (repeat / time_to_max)\n");
 541:../../tmk_core/common/command.c ****     xprintf("where delta: cursor=%d, wheel=%d\n" 
  26               		.loc 1 541 0
  27 0008 1F92      		push __zero_reg__
  28               	.LCFI0:
  29               		.cfi_def_cfa_offset 3
  30 000a 81E0      		ldi r24,lo8(1)
  31 000c 8F93      		push r24
  32               	.LCFI1:
  33               		.cfi_def_cfa_offset 4
  34 000e 1F92      		push __zero_reg__
  35               	.LCFI2:
  36               		.cfi_def_cfa_offset 5
  37 0010 85E0      		ldi r24,lo8(5)
  38 0012 8F93      		push r24
  39               	.LCFI3:
  40               		.cfi_def_cfa_offset 6
  41 0014 80E0      		ldi r24,lo8(__c.5082)
  42 0016 90E0      		ldi r25,hi8(__c.5082)
  43 0018 9F93      		push r25
  44               	.LCFI4:
  45               		.cfi_def_cfa_offset 7
  46 001a 8F93      		push r24
  47               	.LCFI5:
  48               		.cfi_def_cfa_offset 8
  49 001c 0E94 0000 		call __xprintf
  50               	.LVL1:
  51 0020 0F90      		pop __tmp_reg__
  52 0022 0F90      		pop __tmp_reg__
  53 0024 0F90      		pop __tmp_reg__
  54 0026 0F90      		pop __tmp_reg__
  55 0028 0F90      		pop __tmp_reg__
  56 002a 0F90      		pop __tmp_reg__
  57               	.LCFI6:
  58               		.cfi_def_cfa_offset 2
  59 002c 0895      		ret
  60               		.cfi_endproc
  61               	.LFE114:
  63               		.section	.text.mousekey_param_inc,"ax",@progbits
  65               	mousekey_param_inc:
  66               	.LFB112:
 427:../../tmk_core/common/command.c **** {
  67               		.loc 1 427 0
  68               		.cfi_startproc
  69               	.LVL2:
  70               	/* prologue: function */
  71               	/* frame size = 0 */
  72               	/* stack size = 0 */
  73               	.L__stack_usage = 0
 428:../../tmk_core/common/command.c ****     switch (param) {
  74               		.loc 1 428 0
  75 0000 8330      		cpi r24,lo8(3)
  76 0002 01F0      		breq .L4
  77 0004 00F4      		brsh .L5
  78 0006 8130      		cpi r24,lo8(1)
  79 0008 01F0      		breq .L6
  80 000a 8230      		cpi r24,lo8(2)
  81 000c 01F0      		breq .L7
  82 000e 0895      		ret
  83               	.L5:
  84 0010 8530      		cpi r24,lo8(5)
  85 0012 01F4      		brne .+2
  86 0014 00C0      		rjmp .L8
  87 0016 00F4      		brsh .+2
  88 0018 00C0      		rjmp .L9
  89 001a 8630      		cpi r24,lo8(6)
  90 001c 01F4      		brne .+2
  91 001e 00C0      		rjmp .L10
  92 0020 0895      		ret
  93               	.L6:
 430:../../tmk_core/common/command.c ****             if (mk_delay + inc < UINT8_MAX)
  94               		.loc 1 430 0
  95 0022 2091 0000 		lds r18,mk_delay
  96 0026 862F      		mov r24,r22
  97               	.LVL3:
  98 0028 90E0      		ldi r25,0
  99 002a 820F      		add r24,r18
 100 002c 911D      		adc r25,__zero_reg__
 101 002e 8F3F      		cpi r24,-1
 102 0030 9105      		cpc r25,__zero_reg__
 103 0032 00F4      		brsh .L11
 431:../../tmk_core/common/command.c ****                 mk_delay += inc;
 104               		.loc 1 431 0
 105 0034 620F      		add r22,r18
 106               	.LVL4:
 107 0036 6093 0000 		sts mk_delay,r22
 108 003a 00C0      		rjmp .L12
 109               	.LVL5:
 110               	.L11:
 433:../../tmk_core/common/command.c ****                 mk_delay = UINT8_MAX;
 111               		.loc 1 433 0
 112 003c 8FEF      		ldi r24,lo8(-1)
 113 003e 8093 0000 		sts mk_delay,r24
 114               	.LVL6:
 115               	.L12:
 434:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 116               		.loc 1 434 0
 117 0042 8091 0000 		lds r24,mk_delay
 118 0046 1F92      		push __zero_reg__
 119               	.LCFI7:
 120               		.cfi_remember_state
 121               		.cfi_def_cfa_offset 3
 122 0048 8F93      		push r24
 123               	.LCFI8:
 124               		.cfi_def_cfa_offset 4
 125 004a 80E0      		ldi r24,lo8(__c.5036)
 126 004c 90E0      		ldi r25,hi8(__c.5036)
 127 004e 00C0      		rjmp .L23
 128               	.LVL7:
 129               	.L7:
 130               	.LCFI9:
 131               		.cfi_restore_state
 437:../../tmk_core/common/command.c ****             if (mk_interval + inc < UINT8_MAX)
 132               		.loc 1 437 0
 133 0050 2091 0000 		lds r18,mk_interval
 134 0054 862F      		mov r24,r22
 135               	.LVL8:
 136 0056 90E0      		ldi r25,0
 137 0058 820F      		add r24,r18
 138 005a 911D      		adc r25,__zero_reg__
 139 005c 8F3F      		cpi r24,-1
 140 005e 9105      		cpc r25,__zero_reg__
 141 0060 00F4      		brsh .L13
 438:../../tmk_core/common/command.c ****                 mk_interval += inc;
 142               		.loc 1 438 0
 143 0062 620F      		add r22,r18
 144               	.LVL9:
 145 0064 6093 0000 		sts mk_interval,r22
 146 0068 00C0      		rjmp .L14
 147               	.LVL10:
 148               	.L13:
 440:../../tmk_core/common/command.c ****                 mk_interval = UINT8_MAX;
 149               		.loc 1 440 0
 150 006a 8FEF      		ldi r24,lo8(-1)
 151 006c 8093 0000 		sts mk_interval,r24
 152               	.LVL11:
 153               	.L14:
 441:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 154               		.loc 1 441 0
 155 0070 8091 0000 		lds r24,mk_interval
 156 0074 1F92      		push __zero_reg__
 157               	.LCFI10:
 158               		.cfi_remember_state
 159               		.cfi_def_cfa_offset 3
 160 0076 8F93      		push r24
 161               	.LCFI11:
 162               		.cfi_def_cfa_offset 4
 163 0078 80E0      		ldi r24,lo8(__c.5040)
 164 007a 90E0      		ldi r25,hi8(__c.5040)
 165 007c 00C0      		rjmp .L23
 166               	.LVL12:
 167               	.L4:
 168               	.LCFI12:
 169               		.cfi_restore_state
 444:../../tmk_core/common/command.c ****             if (mk_max_speed + inc < UINT8_MAX)
 170               		.loc 1 444 0
 171 007e 2091 0000 		lds r18,mk_max_speed
 172 0082 862F      		mov r24,r22
 173               	.LVL13:
 174 0084 90E0      		ldi r25,0
 175 0086 820F      		add r24,r18
 176 0088 911D      		adc r25,__zero_reg__
 177 008a 8F3F      		cpi r24,-1
 178 008c 9105      		cpc r25,__zero_reg__
 179 008e 00F4      		brsh .L15
 445:../../tmk_core/common/command.c ****                 mk_max_speed += inc;
 180               		.loc 1 445 0
 181 0090 620F      		add r22,r18
 182               	.LVL14:
 183 0092 6093 0000 		sts mk_max_speed,r22
 184 0096 00C0      		rjmp .L16
 185               	.LVL15:
 186               	.L15:
 447:../../tmk_core/common/command.c ****                 mk_max_speed = UINT8_MAX;
 187               		.loc 1 447 0
 188 0098 8FEF      		ldi r24,lo8(-1)
 189 009a 8093 0000 		sts mk_max_speed,r24
 190               	.LVL16:
 191               	.L16:
 448:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 192               		.loc 1 448 0
 193 009e 8091 0000 		lds r24,mk_max_speed
 194 00a2 1F92      		push __zero_reg__
 195               	.LCFI13:
 196               		.cfi_remember_state
 197               		.cfi_def_cfa_offset 3
 198 00a4 8F93      		push r24
 199               	.LCFI14:
 200               		.cfi_def_cfa_offset 4
 201 00a6 80E0      		ldi r24,lo8(__c.5043)
 202 00a8 90E0      		ldi r25,hi8(__c.5043)
 203 00aa 00C0      		rjmp .L23
 204               	.LVL17:
 205               	.L9:
 206               	.LCFI15:
 207               		.cfi_restore_state
 451:../../tmk_core/common/command.c ****             if (mk_time_to_max + inc < UINT8_MAX)
 208               		.loc 1 451 0
 209 00ac 2091 0000 		lds r18,mk_time_to_max
 210 00b0 862F      		mov r24,r22
 211               	.LVL18:
 212 00b2 90E0      		ldi r25,0
 213 00b4 820F      		add r24,r18
 214 00b6 911D      		adc r25,__zero_reg__
 215 00b8 8F3F      		cpi r24,-1
 216 00ba 9105      		cpc r25,__zero_reg__
 217 00bc 00F4      		brsh .L17
 452:../../tmk_core/common/command.c ****                 mk_time_to_max += inc;
 218               		.loc 1 452 0
 219 00be 620F      		add r22,r18
 220               	.LVL19:
 221 00c0 6093 0000 		sts mk_time_to_max,r22
 222 00c4 00C0      		rjmp .L18
 223               	.LVL20:
 224               	.L17:
 454:../../tmk_core/common/command.c ****                 mk_time_to_max = UINT8_MAX;
 225               		.loc 1 454 0
 226 00c6 8FEF      		ldi r24,lo8(-1)
 227 00c8 8093 0000 		sts mk_time_to_max,r24
 228               	.LVL21:
 229               	.L18:
 455:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 230               		.loc 1 455 0
 231 00cc 8091 0000 		lds r24,mk_time_to_max
 232 00d0 1F92      		push __zero_reg__
 233               	.LCFI16:
 234               		.cfi_remember_state
 235               		.cfi_def_cfa_offset 3
 236 00d2 8F93      		push r24
 237               	.LCFI17:
 238               		.cfi_def_cfa_offset 4
 239 00d4 80E0      		ldi r24,lo8(__c.5046)
 240 00d6 90E0      		ldi r25,hi8(__c.5046)
 241 00d8 00C0      		rjmp .L23
 242               	.LVL22:
 243               	.L8:
 244               	.LCFI18:
 245               		.cfi_restore_state
 458:../../tmk_core/common/command.c ****             if (mk_wheel_max_speed + inc < UINT8_MAX)
 246               		.loc 1 458 0
 247 00da 2091 0000 		lds r18,mk_wheel_max_speed
 248 00de 862F      		mov r24,r22
 249               	.LVL23:
 250 00e0 90E0      		ldi r25,0
 251 00e2 820F      		add r24,r18
 252 00e4 911D      		adc r25,__zero_reg__
 253 00e6 8F3F      		cpi r24,-1
 254 00e8 9105      		cpc r25,__zero_reg__
 255 00ea 00F4      		brsh .L19
 459:../../tmk_core/common/command.c ****                 mk_wheel_max_speed += inc;
 256               		.loc 1 459 0
 257 00ec 620F      		add r22,r18
 258               	.LVL24:
 259 00ee 6093 0000 		sts mk_wheel_max_speed,r22
 260 00f2 00C0      		rjmp .L20
 261               	.LVL25:
 262               	.L19:
 461:../../tmk_core/common/command.c ****                 mk_wheel_max_speed = UINT8_MAX;
 263               		.loc 1 461 0
 264 00f4 8FEF      		ldi r24,lo8(-1)
 265 00f6 8093 0000 		sts mk_wheel_max_speed,r24
 266               	.LVL26:
 267               	.L20:
 462:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 268               		.loc 1 462 0
 269 00fa 8091 0000 		lds r24,mk_wheel_max_speed
 270 00fe 1F92      		push __zero_reg__
 271               	.LCFI19:
 272               		.cfi_remember_state
 273               		.cfi_def_cfa_offset 3
 274 0100 8F93      		push r24
 275               	.LCFI20:
 276               		.cfi_def_cfa_offset 4
 277 0102 80E0      		ldi r24,lo8(__c.5049)
 278 0104 90E0      		ldi r25,hi8(__c.5049)
 279 0106 00C0      		rjmp .L23
 280               	.LVL27:
 281               	.L10:
 282               	.LCFI21:
 283               		.cfi_restore_state
 465:../../tmk_core/common/command.c ****             if (mk_wheel_time_to_max + inc < UINT8_MAX)
 284               		.loc 1 465 0
 285 0108 2091 0000 		lds r18,mk_wheel_time_to_max
 286 010c 862F      		mov r24,r22
 287               	.LVL28:
 288 010e 90E0      		ldi r25,0
 289 0110 820F      		add r24,r18
 290 0112 911D      		adc r25,__zero_reg__
 291 0114 8F3F      		cpi r24,-1
 292 0116 9105      		cpc r25,__zero_reg__
 293 0118 00F4      		brsh .L21
 466:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max += inc;
 294               		.loc 1 466 0
 295 011a 620F      		add r22,r18
 296               	.LVL29:
 297 011c 6093 0000 		sts mk_wheel_time_to_max,r22
 298 0120 00C0      		rjmp .L22
 299               	.LVL30:
 300               	.L21:
 468:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max = UINT8_MAX;
 301               		.loc 1 468 0
 302 0122 8FEF      		ldi r24,lo8(-1)
 303 0124 8093 0000 		sts mk_wheel_time_to_max,r24
 304               	.LVL31:
 305               	.L22:
 469:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 306               		.loc 1 469 0
 307 0128 8091 0000 		lds r24,mk_wheel_time_to_max
 308 012c 1F92      		push __zero_reg__
 309               	.LCFI22:
 310               		.cfi_def_cfa_offset 3
 311 012e 8F93      		push r24
 312               	.LCFI23:
 313               		.cfi_def_cfa_offset 4
 314 0130 80E0      		ldi r24,lo8(__c.5052)
 315 0132 90E0      		ldi r25,hi8(__c.5052)
 316               	.L23:
 317 0134 9F93      		push r25
 318               	.LCFI24:
 319               		.cfi_def_cfa_offset 5
 320 0136 8F93      		push r24
 321               	.LCFI25:
 322               		.cfi_def_cfa_offset 6
 323 0138 0E94 0000 		call __xprintf
 324               	.LVL32:
 470:../../tmk_core/common/command.c ****             break;
 325               		.loc 1 470 0
 326 013c 0F90      		pop __tmp_reg__
 327 013e 0F90      		pop __tmp_reg__
 328 0140 0F90      		pop __tmp_reg__
 329 0142 0F90      		pop __tmp_reg__
 330               	.LCFI26:
 331               		.cfi_def_cfa_offset 2
 332 0144 0895      		ret
 333               		.cfi_endproc
 334               	.LFE112:
 336               		.section	.text.mousekey_param_dec,"ax",@progbits
 338               	mousekey_param_dec:
 339               	.LFB113:
 475:../../tmk_core/common/command.c **** {
 340               		.loc 1 475 0
 341               		.cfi_startproc
 342               	.LVL33:
 343               	/* prologue: function */
 344               	/* frame size = 0 */
 345               	/* stack size = 0 */
 346               	.L__stack_usage = 0
 476:../../tmk_core/common/command.c ****     switch (param) {
 347               		.loc 1 476 0
 348 0000 8330      		cpi r24,lo8(3)
 349 0002 01F0      		breq .L27
 350 0004 00F4      		brsh .L28
 351 0006 8130      		cpi r24,lo8(1)
 352 0008 01F0      		breq .L29
 353 000a 8230      		cpi r24,lo8(2)
 354 000c 01F0      		breq .L30
 355 000e 0895      		ret
 356               	.L28:
 357 0010 8530      		cpi r24,lo8(5)
 358 0012 01F4      		brne .+2
 359 0014 00C0      		rjmp .L31
 360 0016 00F0      		brlo .L32
 361 0018 8630      		cpi r24,lo8(6)
 362 001a 01F4      		brne .+2
 363 001c 00C0      		rjmp .L33
 364 001e 0895      		ret
 365               	.L29:
 478:../../tmk_core/common/command.c ****             if (mk_delay > dec)
 366               		.loc 1 478 0
 367 0020 8091 0000 		lds r24,mk_delay
 368               	.LVL34:
 369 0024 6817      		cp r22,r24
 370 0026 00F4      		brsh .L34
 479:../../tmk_core/common/command.c ****                 mk_delay -= dec;
 371               		.loc 1 479 0
 372 0028 861B      		sub r24,r22
 373 002a 8093 0000 		sts mk_delay,r24
 374 002e 00C0      		rjmp .L35
 375               	.L34:
 481:../../tmk_core/common/command.c ****                 mk_delay = 0;
 376               		.loc 1 481 0
 377 0030 1092 0000 		sts mk_delay,__zero_reg__
 378               	.L35:
 482:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 379               		.loc 1 482 0
 380 0034 8091 0000 		lds r24,mk_delay
 381 0038 1F92      		push __zero_reg__
 382               	.LCFI27:
 383               		.cfi_remember_state
 384               		.cfi_def_cfa_offset 3
 385 003a 8F93      		push r24
 386               	.LCFI28:
 387               		.cfi_def_cfa_offset 4
 388 003c 80E0      		ldi r24,lo8(__c.5059)
 389 003e 90E0      		ldi r25,hi8(__c.5059)
 390 0040 00C0      		rjmp .L46
 391               	.LVL35:
 392               	.L30:
 393               	.LCFI29:
 394               		.cfi_restore_state
 485:../../tmk_core/common/command.c ****             if (mk_interval > dec)
 395               		.loc 1 485 0
 396 0042 8091 0000 		lds r24,mk_interval
 397               	.LVL36:
 398 0046 6817      		cp r22,r24
 399 0048 00F4      		brsh .L36
 486:../../tmk_core/common/command.c ****                 mk_interval -= dec;
 400               		.loc 1 486 0
 401 004a 861B      		sub r24,r22
 402 004c 8093 0000 		sts mk_interval,r24
 403 0050 00C0      		rjmp .L37
 404               	.L36:
 488:../../tmk_core/common/command.c ****                 mk_interval = 0;
 405               		.loc 1 488 0
 406 0052 1092 0000 		sts mk_interval,__zero_reg__
 407               	.L37:
 489:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 408               		.loc 1 489 0
 409 0056 8091 0000 		lds r24,mk_interval
 410 005a 1F92      		push __zero_reg__
 411               	.LCFI30:
 412               		.cfi_remember_state
 413               		.cfi_def_cfa_offset 3
 414 005c 8F93      		push r24
 415               	.LCFI31:
 416               		.cfi_def_cfa_offset 4
 417 005e 80E0      		ldi r24,lo8(__c.5063)
 418 0060 90E0      		ldi r25,hi8(__c.5063)
 419 0062 00C0      		rjmp .L46
 420               	.LVL37:
 421               	.L27:
 422               	.LCFI32:
 423               		.cfi_restore_state
 492:../../tmk_core/common/command.c ****             if (mk_max_speed > dec)
 424               		.loc 1 492 0
 425 0064 8091 0000 		lds r24,mk_max_speed
 426               	.LVL38:
 427 0068 6817      		cp r22,r24
 428 006a 00F4      		brsh .L38
 493:../../tmk_core/common/command.c ****                 mk_max_speed -= dec;
 429               		.loc 1 493 0
 430 006c 861B      		sub r24,r22
 431 006e 8093 0000 		sts mk_max_speed,r24
 432 0072 00C0      		rjmp .L39
 433               	.L38:
 495:../../tmk_core/common/command.c ****                 mk_max_speed = 0;
 434               		.loc 1 495 0
 435 0074 1092 0000 		sts mk_max_speed,__zero_reg__
 436               	.L39:
 496:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 437               		.loc 1 496 0
 438 0078 8091 0000 		lds r24,mk_max_speed
 439 007c 1F92      		push __zero_reg__
 440               	.LCFI33:
 441               		.cfi_remember_state
 442               		.cfi_def_cfa_offset 3
 443 007e 8F93      		push r24
 444               	.LCFI34:
 445               		.cfi_def_cfa_offset 4
 446 0080 80E0      		ldi r24,lo8(__c.5066)
 447 0082 90E0      		ldi r25,hi8(__c.5066)
 448 0084 00C0      		rjmp .L46
 449               	.LVL39:
 450               	.L32:
 451               	.LCFI35:
 452               		.cfi_restore_state
 499:../../tmk_core/common/command.c ****             if (mk_time_to_max > dec)
 453               		.loc 1 499 0
 454 0086 8091 0000 		lds r24,mk_time_to_max
 455               	.LVL40:
 456 008a 6817      		cp r22,r24
 457 008c 00F4      		brsh .L40
 500:../../tmk_core/common/command.c ****                 mk_time_to_max -= dec;
 458               		.loc 1 500 0
 459 008e 861B      		sub r24,r22
 460 0090 8093 0000 		sts mk_time_to_max,r24
 461 0094 00C0      		rjmp .L41
 462               	.L40:
 502:../../tmk_core/common/command.c ****                 mk_time_to_max = 0;
 463               		.loc 1 502 0
 464 0096 1092 0000 		sts mk_time_to_max,__zero_reg__
 465               	.L41:
 503:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 466               		.loc 1 503 0
 467 009a 8091 0000 		lds r24,mk_time_to_max
 468 009e 1F92      		push __zero_reg__
 469               	.LCFI36:
 470               		.cfi_remember_state
 471               		.cfi_def_cfa_offset 3
 472 00a0 8F93      		push r24
 473               	.LCFI37:
 474               		.cfi_def_cfa_offset 4
 475 00a2 80E0      		ldi r24,lo8(__c.5069)
 476 00a4 90E0      		ldi r25,hi8(__c.5069)
 477 00a6 00C0      		rjmp .L46
 478               	.LVL41:
 479               	.L31:
 480               	.LCFI38:
 481               		.cfi_restore_state
 506:../../tmk_core/common/command.c ****             if (mk_wheel_max_speed > dec)
 482               		.loc 1 506 0
 483 00a8 8091 0000 		lds r24,mk_wheel_max_speed
 484               	.LVL42:
 485 00ac 6817      		cp r22,r24
 486 00ae 00F4      		brsh .L42
 507:../../tmk_core/common/command.c ****                 mk_wheel_max_speed -= dec;
 487               		.loc 1 507 0
 488 00b0 861B      		sub r24,r22
 489 00b2 8093 0000 		sts mk_wheel_max_speed,r24
 490 00b6 00C0      		rjmp .L43
 491               	.L42:
 509:../../tmk_core/common/command.c ****                 mk_wheel_max_speed = 0;
 492               		.loc 1 509 0
 493 00b8 1092 0000 		sts mk_wheel_max_speed,__zero_reg__
 494               	.L43:
 510:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 495               		.loc 1 510 0
 496 00bc 8091 0000 		lds r24,mk_wheel_max_speed
 497 00c0 1F92      		push __zero_reg__
 498               	.LCFI39:
 499               		.cfi_remember_state
 500               		.cfi_def_cfa_offset 3
 501 00c2 8F93      		push r24
 502               	.LCFI40:
 503               		.cfi_def_cfa_offset 4
 504 00c4 80E0      		ldi r24,lo8(__c.5072)
 505 00c6 90E0      		ldi r25,hi8(__c.5072)
 506 00c8 00C0      		rjmp .L46
 507               	.LVL43:
 508               	.L33:
 509               	.LCFI41:
 510               		.cfi_restore_state
 513:../../tmk_core/common/command.c ****             if (mk_wheel_time_to_max > dec)
 511               		.loc 1 513 0
 512 00ca 8091 0000 		lds r24,mk_wheel_time_to_max
 513               	.LVL44:
 514 00ce 6817      		cp r22,r24
 515 00d0 00F4      		brsh .L44
 514:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max -= dec;
 516               		.loc 1 514 0
 517 00d2 861B      		sub r24,r22
 518 00d4 8093 0000 		sts mk_wheel_time_to_max,r24
 519 00d8 00C0      		rjmp .L45
 520               	.L44:
 516:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max = 0;
 521               		.loc 1 516 0
 522 00da 1092 0000 		sts mk_wheel_time_to_max,__zero_reg__
 523               	.L45:
 517:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 524               		.loc 1 517 0
 525 00de 8091 0000 		lds r24,mk_wheel_time_to_max
 526 00e2 1F92      		push __zero_reg__
 527               	.LCFI42:
 528               		.cfi_def_cfa_offset 3
 529 00e4 8F93      		push r24
 530               	.LCFI43:
 531               		.cfi_def_cfa_offset 4
 532 00e6 80E0      		ldi r24,lo8(__c.5075)
 533 00e8 90E0      		ldi r25,hi8(__c.5075)
 534               	.L46:
 535 00ea 9F93      		push r25
 536               	.LCFI44:
 537               		.cfi_def_cfa_offset 5
 538 00ec 8F93      		push r24
 539               	.LCFI45:
 540               		.cfi_def_cfa_offset 6
 541 00ee 0E94 0000 		call __xprintf
 542               	.LVL45:
 518:../../tmk_core/common/command.c ****             break;
 543               		.loc 1 518 0
 544 00f2 0F90      		pop __tmp_reg__
 545 00f4 0F90      		pop __tmp_reg__
 546 00f6 0F90      		pop __tmp_reg__
 547 00f8 0F90      		pop __tmp_reg__
 548               	.LCFI46:
 549               		.cfi_def_cfa_offset 2
 550 00fa 0895      		ret
 551               		.cfi_endproc
 552               	.LFE113:
 554               		.section	.text.switch_default_layer,"ax",@progbits
 556               	switch_default_layer:
 557               	.LFB117:
 542:../../tmk_core/common/command.c ****             "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_D
 543:../../tmk_core/common/command.c **** }
 544:../../tmk_core/common/command.c **** 
 545:../../tmk_core/common/command.c **** static bool mousekey_console(uint8_t code)
 546:../../tmk_core/common/command.c **** {
 547:../../tmk_core/common/command.c ****     switch (code) {
 548:../../tmk_core/common/command.c ****         case KC_H:
 549:../../tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 550:../../tmk_core/common/command.c ****             mousekey_console_help();
 551:../../tmk_core/common/command.c ****             break;
 552:../../tmk_core/common/command.c ****         case KC_Q:
 553:../../tmk_core/common/command.c ****         case KC_ESC:
 554:../../tmk_core/common/command.c ****             if (mousekey_param) {
 555:../../tmk_core/common/command.c ****                 mousekey_param = 0;
 556:../../tmk_core/common/command.c ****             } else {
 557:../../tmk_core/common/command.c ****                 print("C> ");
 558:../../tmk_core/common/command.c ****                 command_state = CONSOLE;
 559:../../tmk_core/common/command.c ****                 return false;
 560:../../tmk_core/common/command.c ****             }
 561:../../tmk_core/common/command.c ****             break;
 562:../../tmk_core/common/command.c ****         case KC_P:
 563:../../tmk_core/common/command.c ****             mousekey_param_print();
 564:../../tmk_core/common/command.c ****             break;
 565:../../tmk_core/common/command.c ****         case KC_1:
 566:../../tmk_core/common/command.c ****         case KC_2:
 567:../../tmk_core/common/command.c ****         case KC_3:
 568:../../tmk_core/common/command.c ****         case KC_4:
 569:../../tmk_core/common/command.c ****         case KC_5:
 570:../../tmk_core/common/command.c ****         case KC_6:
 571:../../tmk_core/common/command.c ****             mousekey_param = numkey2num(code);
 572:../../tmk_core/common/command.c ****             break;
 573:../../tmk_core/common/command.c ****         case KC_UP:
 574:../../tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 1);
 575:../../tmk_core/common/command.c ****             break;
 576:../../tmk_core/common/command.c ****         case KC_DOWN:
 577:../../tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 1);
 578:../../tmk_core/common/command.c ****             break;
 579:../../tmk_core/common/command.c ****         case KC_PGUP:
 580:../../tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 10);
 581:../../tmk_core/common/command.c ****             break;
 582:../../tmk_core/common/command.c ****         case KC_PGDN:
 583:../../tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 10);
 584:../../tmk_core/common/command.c ****             break;
 585:../../tmk_core/common/command.c ****         case KC_D:
 586:../../tmk_core/common/command.c ****             mk_delay = MOUSEKEY_DELAY/10;
 587:../../tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 588:../../tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 589:../../tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 590:../../tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 591:../../tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 592:../../tmk_core/common/command.c ****             print("set default\n");
 593:../../tmk_core/common/command.c ****             break;
 594:../../tmk_core/common/command.c ****         default:
 595:../../tmk_core/common/command.c ****             print("?");
 596:../../tmk_core/common/command.c ****             return false;
 597:../../tmk_core/common/command.c ****     }
 598:../../tmk_core/common/command.c ****     if (mousekey_param)
 599:../../tmk_core/common/command.c ****         xprintf("M%d> ", mousekey_param);
 600:../../tmk_core/common/command.c ****     else
 601:../../tmk_core/common/command.c ****         print("M>" );
 602:../../tmk_core/common/command.c ****     return true;
 603:../../tmk_core/common/command.c **** }
 604:../../tmk_core/common/command.c **** #endif
 605:../../tmk_core/common/command.c **** 
 606:../../tmk_core/common/command.c **** 
 607:../../tmk_core/common/command.c **** /***********************************************************
 608:../../tmk_core/common/command.c ****  * Utilities
 609:../../tmk_core/common/command.c ****  ***********************************************************/
 610:../../tmk_core/common/command.c **** static uint8_t numkey2num(uint8_t code)
 611:../../tmk_core/common/command.c **** {
 612:../../tmk_core/common/command.c ****     switch (code) {
 613:../../tmk_core/common/command.c ****         case KC_1: return 1;
 614:../../tmk_core/common/command.c ****         case KC_2: return 2;
 615:../../tmk_core/common/command.c ****         case KC_3: return 3;
 616:../../tmk_core/common/command.c ****         case KC_4: return 4;
 617:../../tmk_core/common/command.c ****         case KC_5: return 5;
 618:../../tmk_core/common/command.c ****         case KC_6: return 6;
 619:../../tmk_core/common/command.c ****         case KC_7: return 7;
 620:../../tmk_core/common/command.c ****         case KC_8: return 8;
 621:../../tmk_core/common/command.c ****         case KC_9: return 9;
 622:../../tmk_core/common/command.c ****         case KC_0: return 0;
 623:../../tmk_core/common/command.c ****     }
 624:../../tmk_core/common/command.c ****     return 0;
 625:../../tmk_core/common/command.c **** }
 626:../../tmk_core/common/command.c **** 
 627:../../tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer)
 628:../../tmk_core/common/command.c **** {
 558               		.loc 1 628 0
 559               		.cfi_startproc
 560               	.LVL46:
 561 0000 CF93      		push r28
 562               	.LCFI47:
 563               		.cfi_def_cfa_offset 3
 564               		.cfi_offset 28, -2
 565               	/* prologue: function */
 566               	/* frame size = 0 */
 567               	/* stack size = 1 */
 568               	.L__stack_usage = 1
 569 0002 C82F      		mov r28,r24
 629:../../tmk_core/common/command.c ****     xprintf("L%d\n", layer);
 570               		.loc 1 629 0
 571 0004 1F92      		push __zero_reg__
 572               	.LCFI48:
 573               		.cfi_def_cfa_offset 4
 574 0006 8F93      		push r24
 575               	.LCFI49:
 576               		.cfi_def_cfa_offset 5
 577 0008 20E0      		ldi r18,lo8(__c.5131)
 578 000a 30E0      		ldi r19,hi8(__c.5131)
 579 000c 3F93      		push r19
 580               	.LCFI50:
 581               		.cfi_def_cfa_offset 6
 582 000e 2F93      		push r18
 583               	.LCFI51:
 584               		.cfi_def_cfa_offset 7
 585 0010 0E94 0000 		call __xprintf
 586               	.LVL47:
 630:../../tmk_core/common/command.c ****     default_layer_set(1UL<<layer);
 587               		.loc 1 630 0
 588 0014 61E0      		ldi r22,lo8(1)
 589 0016 70E0      		ldi r23,0
 590 0018 80E0      		ldi r24,0
 591 001a 90E0      		ldi r25,0
 592 001c 00C0      		rjmp 2f
 593               		1:
 594 001e 660F      		lsl r22
 595 0020 771F      		rol r23
 596 0022 881F      		rol r24
 597 0024 991F      		rol r25
 598               		2:
 599 0026 CA95      		dec r28
 600 0028 02F4      		brpl 1b
 601 002a 0E94 0000 		call default_layer_set
 602               	.LVL48:
 631:../../tmk_core/common/command.c ****     clear_keyboard();
 603               		.loc 1 631 0
 604 002e 0F90      		pop __tmp_reg__
 605 0030 0F90      		pop __tmp_reg__
 606 0032 0F90      		pop __tmp_reg__
 607 0034 0F90      		pop __tmp_reg__
 608               	.LCFI52:
 609               		.cfi_def_cfa_offset 3
 610               	/* epilogue start */
 632:../../tmk_core/common/command.c **** }
 611               		.loc 1 632 0
 612 0036 CF91      		pop r28
 613               	.LVL49:
 631:../../tmk_core/common/command.c ****     clear_keyboard();
 614               		.loc 1 631 0
 615 0038 0C94 0000 		jmp clear_keyboard
 616               	.LVL50:
 617               		.cfi_endproc
 618               	.LFE117:
 620               		.section	.text.command_common,"ax",@progbits
 622               	command_common:
 623               	.LFB108:
 180:../../tmk_core/common/command.c **** {
 624               		.loc 1 180 0
 625               		.cfi_startproc
 626 0000 CF93      		push r28
 627               	.LCFI53:
 628               		.cfi_def_cfa_offset 3
 629               		.cfi_offset 28, -2
 630               	/* prologue: function */
 631               	/* frame size = 0 */
 632               	/* stack size = 1 */
 633               	.L__stack_usage = 1
 182:../../tmk_core/common/command.c ****     switch (code) {
 634               		.loc 1 182 0
 635 0002 8D31      		cpi r24,lo8(29)
 636 0004 01F4      		brne .+2
 637 0006 00C0      		rjmp .L50
 638 0008 00F4      		brsh .L51
 639 000a 8E30      		cpi r24,lo8(14)
 640 000c 01F4      		brne .+2
 641 000e 00C0      		rjmp .L52
 642 0010 00F4      		brsh .L53
 643 0012 8730      		cpi r24,lo8(7)
 644 0014 01F4      		brne .+2
 645 0016 00C0      		rjmp .L54
 646 0018 00F4      		brsh .L55
 647 001a 8630      		cpi r24,lo8(6)
 648 001c 01F0      		breq .+2
 649 001e 00C0      		rjmp .L49
 215:../../tmk_core/common/command.c ****             debug_matrix   = false;
 650               		.loc 1 215 0
 651 0020 8091 0000 		lds r24,debug_config
 218:../../tmk_core/common/command.c ****             debug_enable   = false;
 652               		.loc 1 218 0
 653 0024 817F      		andi r24,lo8(-15)
 654 0026 8E7F      		andi r24,lo8(~(1<<0))
 655 0028 8093 0000 		sts debug_config,r24
 656               	.LBB113:
 657               	.LBB114:
 372:../../tmk_core/common/command.c ****     print("\n\t- Console -\n"
 658               		.loc 1 372 0
 659 002c 80E0      		ldi r24,lo8(__c.4971)
 660 002e 90E0      		ldi r25,hi8(__c.4971)
 661 0030 0E94 0000 		call xputs
 662               	.LBE114:
 663               	.LBE113:
 220:../../tmk_core/common/command.c ****             print("C> ");
 664               		.loc 1 220 0
 665 0034 80E0      		ldi r24,lo8(__c.4903)
 666 0036 90E0      		ldi r25,hi8(__c.4903)
 667 0038 0E94 0000 		call xputs
 221:../../tmk_core/common/command.c ****             command_state = CONSOLE;
 668               		.loc 1 221 0
 669 003c 81E0      		ldi r24,lo8(1)
 670 003e 8093 0000 		sts command_state,r24
 671 0042 00C0      		rjmp .L95
 672               	.L55:
 182:../../tmk_core/common/command.c ****     switch (code) {
 673               		.loc 1 182 0
 674 0044 8830      		cpi r24,lo8(8)
 675 0046 01F4      		brne .+2
 676 0048 00C0      		rjmp .L57
 677 004a 8B30      		cpi r24,lo8(11)
 678 004c 01F4      		brne .+2
 679 004e 00C0      		rjmp .L58
 680 0050 00C0      		rjmp .L49
 681               	.L53:
 682 0052 8631      		cpi r24,lo8(22)
 683 0054 01F4      		brne .+2
 684 0056 00C0      		rjmp .L59
 685 0058 00F4      		brsh .L60
 686 005a 8031      		cpi r24,lo8(16)
 687 005c 01F4      		brne .+2
 688 005e 00C0      		rjmp .L61
 689 0060 8131      		cpi r24,lo8(17)
 690 0062 01F4      		brne .+2
 691 0064 00C0      		rjmp .L62
 692 0066 00C0      		rjmp .L49
 693               	.L60:
 694 0068 8931      		cpi r24,lo8(25)
 695 006a 01F4      		brne .+2
 696 006c 00C0      		rjmp .L63
 697 006e 8B31      		cpi r24,lo8(27)
 698 0070 01F4      		brne .+2
 699 0072 00C0      		rjmp .L64
 700 0074 00C0      		rjmp .L49
 701               	.L51:
 702 0076 8533      		cpi r24,lo8(53)
 703 0078 01F4      		brne .+2
 704 007a 00C0      		rjmp .L65
 705 007c 00F4      		brsh .L66
 706 007e 8732      		cpi r24,lo8(39)
 707 0080 01F4      		brne .+2
 708 0082 00C0      		rjmp .L65
 709 0084 00F4      		brsh .+2
 710 0086 00C0      		rjmp .L67
 711 0088 8932      		cpi r24,lo8(41)
 712 008a 01F4      		brne .+2
 713 008c 00C0      		rjmp .L65
 714 008e 00C0      		rjmp .L49
 715               	.L66:
 716 0090 8334      		cpi r24,lo8(67)
 717 0092 00F4      		brsh .L68
 718 0094 8A33      		cpi r24,lo8(58)
 719 0096 00F0      		brlo .+2
 720 0098 00C0      		rjmp .L69
 721 009a 8833      		cpi r24,lo8(56)
 722 009c 01F4      		brne .+2
 723 009e 00C0      		rjmp .L58
 724 00a0 00C0      		rjmp .L49
 725               	.L68:
 726 00a2 8334      		cpi r24,lo8(67)
 727 00a4 01F4      		brne .+2
 728 00a6 00C0      		rjmp .L65
 729 00a8 8834      		cpi r24,lo8(72)
 730 00aa 01F0      		breq .+2
 731 00ac 00C0      		rjmp .L49
 224:../../tmk_core/common/command.c ****             clear_keyboard();
 732               		.loc 1 224 0
 733 00ae 0E94 0000 		call clear_keyboard
 225:../../tmk_core/common/command.c ****             print("\n\nbootloader... ");
 734               		.loc 1 225 0
 735 00b2 80E0      		ldi r24,lo8(__c.4906)
 736 00b4 90E0      		ldi r25,hi8(__c.4906)
 737 00b6 0E94 0000 		call xputs
 738               	.LBB115:
 739               	.LBB116:
 740               		.file 2 "/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h"
   1:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   6:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   9:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  12:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      distribution.
  16:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  17:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  21:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  33:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  35:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  38:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  41:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  42:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <math.h>
  45:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  46:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \file */
  47:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \code
  49:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \endcode
  53:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  54:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     used.
  58:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  59:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  68:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  77:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  81:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** */
  82:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  83:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  87:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  88:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  93:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  94:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  97:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  98:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
 103:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 104:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /**
 105:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 107:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 109:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 112:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 114:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 120:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 125:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 129:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 132:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 140:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****  */
 141:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** void
 142:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** {
 144:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 152:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 155:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 158:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#else
 159:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		//round up by default
 160:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#endif
 162:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 163:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 741               		.loc 2 163 0
 742 00ba 9FEF      		ldi r25,lo8(3199999)
 743 00bc 23ED      		ldi r18,hi8(3199999)
 744 00be 80E3      		ldi r24,hlo8(3199999)
 745 00c0 9150      		1: subi r25,1
 746 00c2 2040      		sbci r18,0
 747 00c4 8040      		sbci r24,0
 748 00c6 01F4      		brne 1b
 749 00c8 00C0      		rjmp .
 750 00ca 0000      		nop
 751               	.LBE116:
 752               	.LBE115:
 227:../../tmk_core/common/command.c ****             bootloader_jump(); // not return
 753               		.loc 1 227 0
 754 00cc 0E94 0000 		call bootloader_jump
 755 00d0 00C0      		rjmp .L95
 756               	.L50:
 186:../../tmk_core/common/command.c ****             print("Sleep LED test\n");
 757               		.loc 1 186 0
 758 00d2 80E0      		ldi r24,lo8(__c.4894)
 759 00d4 90E0      		ldi r25,hi8(__c.4894)
 760 00d6 0E94 0000 		call xputs
 187:../../tmk_core/common/command.c ****             sleep_led_toggle();
 761               		.loc 1 187 0
 762 00da 0E94 0000 		call sleep_led_toggle
 188:../../tmk_core/common/command.c ****             led_set(host_keyboard_leds());
 763               		.loc 1 188 0
 764 00de 0E94 0000 		call host_keyboard_leds
 765 00e2 0E94 0000 		call led_set
 766 00e6 00C0      		rjmp .L95
 767               	.L57:
 193:../../tmk_core/common/command.c ****             print("eeconfig:\n");
 768               		.loc 1 193 0
 769 00e8 80E0      		ldi r24,lo8(__c.4898)
 770 00ea 90E0      		ldi r25,hi8(__c.4898)
 771 00ec 0E94 0000 		call xputs
 772               	.LBB117:
 773               	.LBB118:
 147:../../tmk_core/common/command.c ****     print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
 774               		.loc 1 147 0
 775 00f0 80E0      		ldi r24,lo8(__c.4797)
 776 00f2 90E0      		ldi r25,hi8(__c.4797)
 777 00f4 0E94 0000 		call xputs
 778 00f8 0E94 0000 		call eeconfig_read_default_layer
 779 00fc 1F92      		push __zero_reg__
 780               	.LCFI54:
 781               		.cfi_def_cfa_offset 4
 782 00fe 8F93      		push r24
 783               	.LCFI55:
 784               		.cfi_def_cfa_offset 5
 785 0100 80E0      		ldi r24,lo8(__c.4799)
 786 0102 90E0      		ldi r25,hi8(__c.4799)
 787 0104 9F93      		push r25
 788               	.LCFI56:
 789               		.cfi_def_cfa_offset 6
 790 0106 8F93      		push r24
 791               	.LCFI57:
 792               		.cfi_def_cfa_offset 7
 793 0108 0E94 0000 		call __xprintf
 794 010c 80E0      		ldi r24,lo8(__c.4801)
 795 010e 90E0      		ldi r25,hi8(__c.4801)
 796 0110 0E94 0000 		call xputs
 150:../../tmk_core/common/command.c ****     dc.raw = eeconfig_read_debug();
 797               		.loc 1 150 0
 798 0114 0E94 0000 		call eeconfig_read_debug
 799 0118 C82F      		mov r28,r24
 151:../../tmk_core/common/command.c ****     print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
 800               		.loc 1 151 0
 801 011a 80E0      		ldi r24,lo8(__c.4804)
 802 011c 90E0      		ldi r25,hi8(__c.4804)
 803 011e 0E94 0000 		call xputs
 804 0122 1F92      		push __zero_reg__
 805               	.LCFI58:
 806               		.cfi_def_cfa_offset 8
 807 0124 CF93      		push r28
 808               	.LCFI59:
 809               		.cfi_def_cfa_offset 9
 810 0126 20E0      		ldi r18,lo8(__c.4806)
 811 0128 30E0      		ldi r19,hi8(__c.4806)
 812 012a 3F93      		push r19
 813               	.LCFI60:
 814               		.cfi_def_cfa_offset 10
 815 012c 2F93      		push r18
 816               	.LCFI61:
 817               		.cfi_def_cfa_offset 11
 818 012e 0E94 0000 		call __xprintf
 819 0132 80E0      		ldi r24,lo8(__c.4808)
 820 0134 90E0      		ldi r25,hi8(__c.4808)
 821 0136 0E94 0000 		call xputs
 152:../../tmk_core/common/command.c ****     print(".enable: "); print_dec(dc.enable); print("\n");
 822               		.loc 1 152 0
 823 013a 80E0      		ldi r24,lo8(__c.4810)
 824 013c 90E0      		ldi r25,hi8(__c.4810)
 825 013e 0E94 0000 		call xputs
 826 0142 8C2F      		mov r24,r28
 827 0144 8170      		andi r24,1
 828 0146 1F92      		push __zero_reg__
 829               	.LCFI62:
 830               		.cfi_def_cfa_offset 12
 831 0148 8F93      		push r24
 832               	.LCFI63:
 833               		.cfi_def_cfa_offset 13
 834 014a 20E0      		ldi r18,lo8(__c.4812)
 835 014c 30E0      		ldi r19,hi8(__c.4812)
 836 014e 3F93      		push r19
 837               	.LCFI64:
 838               		.cfi_def_cfa_offset 14
 839 0150 2F93      		push r18
 840               	.LCFI65:
 841               		.cfi_def_cfa_offset 15
 842 0152 0E94 0000 		call __xprintf
 843 0156 80E0      		ldi r24,lo8(__c.4814)
 844 0158 90E0      		ldi r25,hi8(__c.4814)
 845 015a 0E94 0000 		call xputs
 153:../../tmk_core/common/command.c ****     print(".matrix: "); print_dec(dc.matrix); print("\n");
 846               		.loc 1 153 0
 847 015e 80E0      		ldi r24,lo8(__c.4816)
 848 0160 90E0      		ldi r25,hi8(__c.4816)
 849 0162 0E94 0000 		call xputs
 850 0166 C1FB      		bst r28,1
 851 0168 8827      		clr r24
 852 016a 80F9      		bld r24,0
 853 016c 1F92      		push __zero_reg__
 854               	.LCFI66:
 855               		.cfi_def_cfa_offset 16
 856 016e 8F93      		push r24
 857               	.LCFI67:
 858               		.cfi_def_cfa_offset 17
 859 0170 20E0      		ldi r18,lo8(__c.4818)
 860 0172 30E0      		ldi r19,hi8(__c.4818)
 861 0174 3F93      		push r19
 862               	.LCFI68:
 863               		.cfi_def_cfa_offset 18
 864 0176 2F93      		push r18
 865               	.LCFI69:
 866               		.cfi_def_cfa_offset 19
 867 0178 0E94 0000 		call __xprintf
 868 017c 80E0      		ldi r24,lo8(__c.4820)
 869 017e 90E0      		ldi r25,hi8(__c.4820)
 870 0180 0E94 0000 		call xputs
 154:../../tmk_core/common/command.c ****     print(".keyboard: "); print_dec(dc.keyboard); print("\n");
 871               		.loc 1 154 0
 872 0184 80E0      		ldi r24,lo8(__c.4822)
 873 0186 90E0      		ldi r25,hi8(__c.4822)
 874 0188 0E94 0000 		call xputs
 875 018c C2FB      		bst r28,2
 876 018e 8827      		clr r24
 877 0190 80F9      		bld r24,0
 878 0192 1F92      		push __zero_reg__
 879               	.LCFI70:
 880               		.cfi_def_cfa_offset 20
 881 0194 8F93      		push r24
 882               	.LCFI71:
 883               		.cfi_def_cfa_offset 21
 884 0196 20E0      		ldi r18,lo8(__c.4824)
 885 0198 30E0      		ldi r19,hi8(__c.4824)
 886 019a 3F93      		push r19
 887               	.LCFI72:
 888               		.cfi_def_cfa_offset 22
 889 019c 2F93      		push r18
 890               	.LCFI73:
 891               		.cfi_def_cfa_offset 23
 892 019e 0E94 0000 		call __xprintf
 893 01a2 80E0      		ldi r24,lo8(__c.4826)
 894 01a4 90E0      		ldi r25,hi8(__c.4826)
 895 01a6 0E94 0000 		call xputs
 155:../../tmk_core/common/command.c ****     print(".mouse: "); print_dec(dc.mouse); print("\n");
 896               		.loc 1 155 0
 897 01aa 80E0      		ldi r24,lo8(__c.4828)
 898 01ac 90E0      		ldi r25,hi8(__c.4828)
 899 01ae 0E94 0000 		call xputs
 900 01b2 C3FB      		bst r28,3
 901 01b4 CC27      		clr r28
 902 01b6 C0F9      		bld r28,0
 903 01b8 1F92      		push __zero_reg__
 904               	.LCFI74:
 905               		.cfi_def_cfa_offset 24
 906 01ba CF93      		push r28
 907               	.LCFI75:
 908               		.cfi_def_cfa_offset 25
 909 01bc 80E0      		ldi r24,lo8(__c.4830)
 910 01be 90E0      		ldi r25,hi8(__c.4830)
 911 01c0 9F93      		push r25
 912               	.LCFI76:
 913               		.cfi_def_cfa_offset 26
 914 01c2 8F93      		push r24
 915               	.LCFI77:
 916               		.cfi_def_cfa_offset 27
 917 01c4 0E94 0000 		call __xprintf
 918 01c8 80E0      		ldi r24,lo8(__c.4832)
 919 01ca 90E0      		ldi r25,hi8(__c.4832)
 920 01cc 0E94 0000 		call xputs
 158:../../tmk_core/common/command.c ****     kc.raw = eeconfig_read_keymap();
 921               		.loc 1 158 0
 922 01d0 0E94 0000 		call eeconfig_read_keymap
 923 01d4 C82F      		mov r28,r24
 159:../../tmk_core/common/command.c ****     print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
 924               		.loc 1 159 0
 925 01d6 80E0      		ldi r24,lo8(__c.4835)
 926 01d8 90E0      		ldi r25,hi8(__c.4835)
 927 01da 0E94 0000 		call xputs
 928 01de 1F92      		push __zero_reg__
 929               	.LCFI78:
 930               		.cfi_def_cfa_offset 28
 931 01e0 CF93      		push r28
 932               	.LCFI79:
 933               		.cfi_def_cfa_offset 29
 934 01e2 20E0      		ldi r18,lo8(__c.4837)
 935 01e4 30E0      		ldi r19,hi8(__c.4837)
 936 01e6 3F93      		push r19
 937               	.LCFI80:
 938               		.cfi_def_cfa_offset 30
 939 01e8 2F93      		push r18
 940               	.LCFI81:
 941               		.cfi_def_cfa_offset 31
 942 01ea 0E94 0000 		call __xprintf
 943 01ee 80E0      		ldi r24,lo8(__c.4839)
 944 01f0 90E0      		ldi r25,hi8(__c.4839)
 945 01f2 0E94 0000 		call xputs
 160:../../tmk_core/common/command.c ****     print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
 946               		.loc 1 160 0
 947 01f6 80E0      		ldi r24,lo8(__c.4841)
 948 01f8 90E0      		ldi r25,hi8(__c.4841)
 949 01fa 0E94 0000 		call xputs
 950 01fe 8C2F      		mov r24,r28
 951 0200 8170      		andi r24,1
 952 0202 1F92      		push __zero_reg__
 953               	.LCFI82:
 954               		.cfi_def_cfa_offset 32
 955 0204 8F93      		push r24
 956               	.LCFI83:
 957               		.cfi_def_cfa_offset 33
 958 0206 20E0      		ldi r18,lo8(__c.4843)
 959 0208 30E0      		ldi r19,hi8(__c.4843)
 960 020a 3F93      		push r19
 961               	.LCFI84:
 962               		.cfi_def_cfa_offset 34
 963 020c 2F93      		push r18
 964               	.LCFI85:
 965               		.cfi_def_cfa_offset 35
 966 020e 0E94 0000 		call __xprintf
 967 0212 8DB7      		in r24,__SP_L__
 968 0214 9EB7      		in r25,__SP_H__
 969 0216 8096      		adiw r24,32
 970 0218 0FB6      		in __tmp_reg__,__SREG__
 971 021a F894      		cli
 972 021c 9EBF      		out __SP_H__,r25
 973 021e 0FBE      		out __SREG__,__tmp_reg__
 974 0220 8DBF      		out __SP_L__,r24
 975               	.LCFI86:
 976               		.cfi_def_cfa_offset 3
 977 0222 80E0      		ldi r24,lo8(__c.4845)
 978 0224 90E0      		ldi r25,hi8(__c.4845)
 979 0226 0E94 0000 		call xputs
 161:../../tmk_core/common/command.c ****     print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
 980               		.loc 1 161 0
 981 022a 80E0      		ldi r24,lo8(__c.4847)
 982 022c 90E0      		ldi r25,hi8(__c.4847)
 983 022e 0E94 0000 		call xputs
 984 0232 C1FB      		bst r28,1
 985 0234 8827      		clr r24
 986 0236 80F9      		bld r24,0
 987 0238 1F92      		push __zero_reg__
 988               	.LCFI87:
 989               		.cfi_def_cfa_offset 4
 990 023a 8F93      		push r24
 991               	.LCFI88:
 992               		.cfi_def_cfa_offset 5
 993 023c 20E0      		ldi r18,lo8(__c.4849)
 994 023e 30E0      		ldi r19,hi8(__c.4849)
 995 0240 3F93      		push r19
 996               	.LCFI89:
 997               		.cfi_def_cfa_offset 6
 998 0242 2F93      		push r18
 999               	.LCFI90:
 1000               		.cfi_def_cfa_offset 7
 1001 0244 0E94 0000 		call __xprintf
 1002 0248 80E0      		ldi r24,lo8(__c.4851)
 1003 024a 90E0      		ldi r25,hi8(__c.4851)
 1004 024c 0E94 0000 		call xputs
 162:../../tmk_core/common/command.c ****     print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
 1005               		.loc 1 162 0
 1006 0250 80E0      		ldi r24,lo8(__c.4853)
 1007 0252 90E0      		ldi r25,hi8(__c.4853)
 1008 0254 0E94 0000 		call xputs
 1009 0258 C2FB      		bst r28,2
 1010 025a 8827      		clr r24
 1011 025c 80F9      		bld r24,0
 1012 025e 1F92      		push __zero_reg__
 1013               	.LCFI91:
 1014               		.cfi_def_cfa_offset 8
 1015 0260 8F93      		push r24
 1016               	.LCFI92:
 1017               		.cfi_def_cfa_offset 9
 1018 0262 20E0      		ldi r18,lo8(__c.4855)
 1019 0264 30E0      		ldi r19,hi8(__c.4855)
 1020 0266 3F93      		push r19
 1021               	.LCFI93:
 1022               		.cfi_def_cfa_offset 10
 1023 0268 2F93      		push r18
 1024               	.LCFI94:
 1025               		.cfi_def_cfa_offset 11
 1026 026a 0E94 0000 		call __xprintf
 1027 026e 80E0      		ldi r24,lo8(__c.4857)
 1028 0270 90E0      		ldi r25,hi8(__c.4857)
 1029 0272 0E94 0000 		call xputs
 163:../../tmk_core/common/command.c ****     print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
 1030               		.loc 1 163 0
 1031 0276 80E0      		ldi r24,lo8(__c.4859)
 1032 0278 90E0      		ldi r25,hi8(__c.4859)
 1033 027a 0E94 0000 		call xputs
 1034 027e C3FB      		bst r28,3
 1035 0280 8827      		clr r24
 1036 0282 80F9      		bld r24,0
 1037 0284 1F92      		push __zero_reg__
 1038               	.LCFI95:
 1039               		.cfi_def_cfa_offset 12
 1040 0286 8F93      		push r24
 1041               	.LCFI96:
 1042               		.cfi_def_cfa_offset 13
 1043 0288 20E0      		ldi r18,lo8(__c.4861)
 1044 028a 30E0      		ldi r19,hi8(__c.4861)
 1045 028c 3F93      		push r19
 1046               	.LCFI97:
 1047               		.cfi_def_cfa_offset 14
 1048 028e 2F93      		push r18
 1049               	.LCFI98:
 1050               		.cfi_def_cfa_offset 15
 1051 0290 0E94 0000 		call __xprintf
 1052 0294 80E0      		ldi r24,lo8(__c.4863)
 1053 0296 90E0      		ldi r25,hi8(__c.4863)
 1054 0298 0E94 0000 		call xputs
 164:../../tmk_core/common/command.c ****     print(".no_gui: "); print_dec(kc.no_gui); print("\n");
 1055               		.loc 1 164 0
 1056 029c 80E0      		ldi r24,lo8(__c.4865)
 1057 029e 90E0      		ldi r25,hi8(__c.4865)
 1058 02a0 0E94 0000 		call xputs
 1059 02a4 C4FB      		bst r28,4
 1060 02a6 8827      		clr r24
 1061 02a8 80F9      		bld r24,0
 1062 02aa 1F92      		push __zero_reg__
 1063               	.LCFI99:
 1064               		.cfi_def_cfa_offset 16
 1065 02ac 8F93      		push r24
 1066               	.LCFI100:
 1067               		.cfi_def_cfa_offset 17
 1068 02ae 20E0      		ldi r18,lo8(__c.4867)
 1069 02b0 30E0      		ldi r19,hi8(__c.4867)
 1070 02b2 3F93      		push r19
 1071               	.LCFI101:
 1072               		.cfi_def_cfa_offset 18
 1073 02b4 2F93      		push r18
 1074               	.LCFI102:
 1075               		.cfi_def_cfa_offset 19
 1076 02b6 0E94 0000 		call __xprintf
 1077 02ba 80E0      		ldi r24,lo8(__c.4869)
 1078 02bc 90E0      		ldi r25,hi8(__c.4869)
 1079 02be 0E94 0000 		call xputs
 165:../../tmk_core/common/command.c ****     print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
 1080               		.loc 1 165 0
 1081 02c2 80E0      		ldi r24,lo8(__c.4871)
 1082 02c4 90E0      		ldi r25,hi8(__c.4871)
 1083 02c6 0E94 0000 		call xputs
 1084 02ca C5FB      		bst r28,5
 1085 02cc 8827      		clr r24
 1086 02ce 80F9      		bld r24,0
 1087 02d0 1F92      		push __zero_reg__
 1088               	.LCFI103:
 1089               		.cfi_def_cfa_offset 20
 1090 02d2 8F93      		push r24
 1091               	.LCFI104:
 1092               		.cfi_def_cfa_offset 21
 1093 02d4 20E0      		ldi r18,lo8(__c.4873)
 1094 02d6 30E0      		ldi r19,hi8(__c.4873)
 1095 02d8 3F93      		push r19
 1096               	.LCFI105:
 1097               		.cfi_def_cfa_offset 22
 1098 02da 2F93      		push r18
 1099               	.LCFI106:
 1100               		.cfi_def_cfa_offset 23
 1101 02dc 0E94 0000 		call __xprintf
 1102 02e0 80E0      		ldi r24,lo8(__c.4875)
 1103 02e2 90E0      		ldi r25,hi8(__c.4875)
 1104 02e4 0E94 0000 		call xputs
 166:../../tmk_core/common/command.c ****     print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
 1105               		.loc 1 166 0
 1106 02e8 80E0      		ldi r24,lo8(__c.4877)
 1107 02ea 90E0      		ldi r25,hi8(__c.4877)
 1108 02ec 0E94 0000 		call xputs
 1109 02f0 C6FB      		bst r28,6
 1110 02f2 8827      		clr r24
 1111 02f4 80F9      		bld r24,0
 1112 02f6 1F92      		push __zero_reg__
 1113               	.LCFI107:
 1114               		.cfi_def_cfa_offset 24
 1115 02f8 8F93      		push r24
 1116               	.LCFI108:
 1117               		.cfi_def_cfa_offset 25
 1118 02fa 20E0      		ldi r18,lo8(__c.4879)
 1119 02fc 30E0      		ldi r19,hi8(__c.4879)
 1120 02fe 3F93      		push r19
 1121               	.LCFI109:
 1122               		.cfi_def_cfa_offset 26
 1123 0300 2F93      		push r18
 1124               	.LCFI110:
 1125               		.cfi_def_cfa_offset 27
 1126 0302 0E94 0000 		call __xprintf
 1127 0306 80E0      		ldi r24,lo8(__c.4881)
 1128 0308 90E0      		ldi r25,hi8(__c.4881)
 1129 030a 0E94 0000 		call xputs
 167:../../tmk_core/common/command.c ****     print(".nkro: "); print_dec(kc.nkro); print("\n");
 1130               		.loc 1 167 0
 1131 030e 80E0      		ldi r24,lo8(__c.4883)
 1132 0310 90E0      		ldi r25,hi8(__c.4883)
 1133 0312 0E94 0000 		call xputs
 1134 0316 C7FB      		bst r28,7
 1135 0318 CC27      		clr r28
 1136 031a C0F9      		bld r28,0
 1137 031c 1F92      		push __zero_reg__
 1138               	.LCFI111:
 1139               		.cfi_def_cfa_offset 28
 1140 031e CF93      		push r28
 1141               	.LCFI112:
 1142               		.cfi_def_cfa_offset 29
 1143 0320 80E0      		ldi r24,lo8(__c.4885)
 1144 0322 90E0      		ldi r25,hi8(__c.4885)
 1145 0324 9F93      		push r25
 1146               	.LCFI113:
 1147               		.cfi_def_cfa_offset 30
 1148 0326 8F93      		push r24
 1149               	.LCFI114:
 1150               		.cfi_def_cfa_offset 31
 1151 0328 0E94 0000 		call __xprintf
 1152 032c 80E0      		ldi r24,lo8(__c.4887)
 1153 032e 90E0      		ldi r25,hi8(__c.4887)
 1154 0330 0E94 0000 		call xputs
 1155 0334 8DB7      		in r24,__SP_L__
 1156 0336 9EB7      		in r25,__SP_H__
 1157 0338 4C96      		adiw r24,28
 1158 033a 0FB6      		in __tmp_reg__,__SREG__
 1159 033c F894      		cli
 1160 033e 9EBF      		out __SP_H__,r25
 1161 0340 0FBE      		out __SREG__,__tmp_reg__
 1162 0342 8DBF      		out __SP_L__,r24
 1163               	.LCFI115:
 1164               		.cfi_def_cfa_offset 3
 1165               	.L95:
 1166               	.LBE118:
 1167               	.LBE117:
 363:../../tmk_core/common/command.c ****     return true;
 1168               		.loc 1 363 0
 1169 0344 C1E0      		ldi r28,lo8(1)
 1170 0346 00C0      		rjmp .L71
 1171               	.L58:
 1172               	.LBB119:
 1173               	.LBB120:
 115:../../tmk_core/common/command.c ****     print("\n\t- Magic -\n"
 1174               		.loc 1 115 0
 1175 0348 80E0      		ldi r24,lo8(__c.4792)
 1176 034a 90E0      		ldi r25,hi8(__c.4792)
 1177 034c 00C0      		rjmp .L98
 1178               	.L54:
 1179               	.LBE120:
 1180               	.LBE119:
 230:../../tmk_core/common/command.c ****             if (debug_enable) {
 1181               		.loc 1 230 0
 1182 034e 8091 0000 		lds r24,debug_config
 1183 0352 C82F      		mov r28,r24
 1184 0354 C170      		andi r28,1
 1185 0356 80FF      		sbrs r24,0
 1186 0358 00C0      		rjmp .L72
 231:../../tmk_core/common/command.c ****                 print("\ndebug: off\n");
 1187               		.loc 1 231 0
 1188 035a 80E0      		ldi r24,lo8(__c.4909)
 1189 035c 90E0      		ldi r25,hi8(__c.4909)
 1190 035e 0E94 0000 		call xputs
 232:../../tmk_core/common/command.c ****                 debug_matrix   = false;
 1191               		.loc 1 232 0
 1192 0362 8091 0000 		lds r24,debug_config
 235:../../tmk_core/common/command.c ****                 debug_enable   = false;
 1193               		.loc 1 235 0
 1194 0366 817F      		andi r24,lo8(-15)
 1195 0368 8E7F      		andi r24,lo8(~(1<<0))
 1196 036a 00C0      		rjmp .L96
 1197               	.L72:
 237:../../tmk_core/common/command.c ****                 print("\ndebug: on\n");
 1198               		.loc 1 237 0
 1199 036c 80E0      		ldi r24,lo8(__c.4911)
 1200 036e 90E0      		ldi r25,hi8(__c.4911)
 1201 0370 0E94 0000 		call xputs
 238:../../tmk_core/common/command.c ****                 debug_enable   = true;
 1202               		.loc 1 238 0
 1203 0374 8091 0000 		lds r24,debug_config
 1204 0378 8160      		ori r24,lo8(1<<0)
 1205 037a 8093 0000 		sts debug_config,r24
 1206 037e 00C0      		rjmp .L95
 1207               	.L64:
 242:../../tmk_core/common/command.c ****             debug_matrix = !debug_matrix;
 1208               		.loc 1 242 0
 1209 0380 8091 0000 		lds r24,debug_config
 1210 0384 81FB      		bst r24,1
 1211 0386 CC27      		clr r28
 1212 0388 C0F9      		bld r28,0
 1213 038a 91E0      		ldi r25,lo8(1)
 1214 038c C927      		eor r28,r25
 1215 038e C0FB      		bst r28,0
 1216 0390 81F9      		bld r24,1
 1217 0392 8093 0000 		sts debug_config,r24
 243:../../tmk_core/common/command.c ****             if (debug_matrix) {
 1218               		.loc 1 243 0
 1219 0396 CC23      		tst r28
 1220 0398 01F0      		breq .L73
 244:../../tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 1221               		.loc 1 244 0
 1222 039a 80E0      		ldi r24,lo8(__c.4914)
 1223 039c 90E0      		ldi r25,hi8(__c.4914)
 1224 039e 00C0      		rjmp .L97
 1225               	.L73:
 247:../../tmk_core/common/command.c ****                 print("\nmatrix: off\n");
 1226               		.loc 1 247 0
 1227 03a0 80E0      		ldi r24,lo8(__c.4916)
 1228 03a2 90E0      		ldi r25,hi8(__c.4916)
 1229 03a4 00C0      		rjmp .L98
 1230               	.L52:
 251:../../tmk_core/common/command.c ****             debug_keyboard = !debug_keyboard;
 1231               		.loc 1 251 0
 1232 03a6 8091 0000 		lds r24,debug_config
 1233 03aa 82FB      		bst r24,2
 1234 03ac CC27      		clr r28
 1235 03ae C0F9      		bld r28,0
 1236 03b0 91E0      		ldi r25,lo8(1)
 1237 03b2 C927      		eor r28,r25
 1238 03b4 C0FB      		bst r28,0
 1239 03b6 82F9      		bld r24,2
 1240 03b8 8093 0000 		sts debug_config,r24
 252:../../tmk_core/common/command.c ****             if (debug_keyboard) {
 1241               		.loc 1 252 0
 1242 03bc CC23      		tst r28
 1243 03be 01F0      		breq .L74
 253:../../tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 1244               		.loc 1 253 0
 1245 03c0 80E0      		ldi r24,lo8(__c.4919)
 1246 03c2 90E0      		ldi r25,hi8(__c.4919)
 1247 03c4 00C0      		rjmp .L97
 1248               	.L74:
 256:../../tmk_core/common/command.c ****                 print("\nkeyboard: off\n");
 1249               		.loc 1 256 0
 1250 03c6 80E0      		ldi r24,lo8(__c.4921)
 1251 03c8 90E0      		ldi r25,hi8(__c.4921)
 1252 03ca 00C0      		rjmp .L98
 1253               	.L61:
 260:../../tmk_core/common/command.c ****             debug_mouse = !debug_mouse;
 1254               		.loc 1 260 0
 1255 03cc 8091 0000 		lds r24,debug_config
 1256 03d0 83FB      		bst r24,3
 1257 03d2 CC27      		clr r28
 1258 03d4 C0F9      		bld r28,0
 1259 03d6 91E0      		ldi r25,lo8(1)
 1260 03d8 C927      		eor r28,r25
 1261 03da C0FB      		bst r28,0
 1262 03dc 83F9      		bld r24,3
 1263 03de 8093 0000 		sts debug_config,r24
 261:../../tmk_core/common/command.c ****             if (debug_mouse) {
 1264               		.loc 1 261 0
 1265 03e2 CC23      		tst r28
 1266 03e4 01F0      		breq .L75
 262:../../tmk_core/common/command.c ****                 print("\nmouse: on\n");
 1267               		.loc 1 262 0
 1268 03e6 80E0      		ldi r24,lo8(__c.4924)
 1269 03e8 90E0      		ldi r25,hi8(__c.4924)
 1270               	.L97:
 1271 03ea 0E94 0000 		call xputs
 263:../../tmk_core/common/command.c ****                 debug_enable = true;
 1272               		.loc 1 263 0
 1273 03ee 8091 0000 		lds r24,debug_config
 1274 03f2 8160      		ori r24,lo8(1<<0)
 1275               	.L96:
 1276 03f4 8093 0000 		sts debug_config,r24
 1277 03f8 00C0      		rjmp .L71
 1278               	.L75:
 265:../../tmk_core/common/command.c ****                 print("\nmouse: off\n");
 1279               		.loc 1 265 0
 1280 03fa 80E0      		ldi r24,lo8(__c.4926)
 1281 03fc 90E0      		ldi r25,hi8(__c.4926)
 1282               	.L98:
 1283 03fe 0E94 0000 		call xputs
 1284 0402 00C0      		rjmp .L95
 1285               	.L63:
 269:../../tmk_core/common/command.c ****             print("\n\t- Version -\n");
 1286               		.loc 1 269 0
 1287 0404 80E0      		ldi r24,lo8(__c.4929)
 1288 0406 90E0      		ldi r25,hi8(__c.4929)
 1289 0408 0E94 0000 		call xputs
 270:../../tmk_core/common/command.c ****             print("DESC: " STR(DESCRIPTION) "\n");
 1290               		.loc 1 270 0
 1291 040c 80E0      		ldi r24,lo8(__c.4931)
 1292 040e 90E0      		ldi r25,hi8(__c.4931)
 1293 0410 0E94 0000 		call xputs
 271:../../tmk_core/common/command.c ****             print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 1294               		.loc 1 271 0
 1295 0414 80E0      		ldi r24,lo8(__c.4933)
 1296 0416 90E0      		ldi r25,hi8(__c.4933)
 1297 0418 0E94 0000 		call xputs
 274:../../tmk_core/common/command.c ****             print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
 1298               		.loc 1 274 0
 1299 041c 80E0      		ldi r24,lo8(__c.4935)
 1300 041e 90E0      		ldi r25,hi8(__c.4935)
 1301 0420 0E94 0000 		call xputs
 276:../../tmk_core/common/command.c ****             print("OPTIONS:"
 1302               		.loc 1 276 0
 1303 0424 80E0      		ldi r24,lo8(__c.4937)
 1304 0426 90E0      		ldi r25,hi8(__c.4937)
 1305 0428 0E94 0000 		call xputs
 309:../../tmk_core/common/command.c ****             print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
 1306               		.loc 1 309 0
 1307 042c 80E0      		ldi r24,lo8(__c.4939)
 1308 042e 90E0      		ldi r25,hi8(__c.4939)
 1309 0430 00C0      		rjmp .L98
 1310               	.L59:
 314:../../tmk_core/common/command.c ****             print("\n\t- Status -\n");
 1311               		.loc 1 314 0
 1312 0432 80E0      		ldi r24,lo8(__c.4942)
 1313 0434 90E0      		ldi r25,hi8(__c.4942)
 1314 0436 0E94 0000 		call xputs
 315:../../tmk_core/common/command.c ****             print_val_hex8(host_keyboard_leds());
 1315               		.loc 1 315 0
 1316 043a 0E94 0000 		call host_keyboard_leds
 1317 043e 1F92      		push __zero_reg__
 1318               	.LCFI116:
 1319               		.cfi_def_cfa_offset 4
 1320 0440 8F93      		push r24
 1321               	.LCFI117:
 1322               		.cfi_def_cfa_offset 5
 1323 0442 80E0      		ldi r24,lo8(__c.4944)
 1324 0444 90E0      		ldi r25,hi8(__c.4944)
 1325 0446 9F93      		push r25
 1326               	.LCFI118:
 1327               		.cfi_def_cfa_offset 6
 1328 0448 8F93      		push r24
 1329               	.LCFI119:
 1330               		.cfi_def_cfa_offset 7
 1331 044a 0E94 0000 		call __xprintf
 316:../../tmk_core/common/command.c ****             print_val_hex8(keyboard_protocol);
 1332               		.loc 1 316 0
 1333 044e 8091 0000 		lds r24,keyboard_protocol
 1334 0452 1F92      		push __zero_reg__
 1335               	.LCFI120:
 1336               		.cfi_def_cfa_offset 8
 1337 0454 8F93      		push r24
 1338               	.LCFI121:
 1339               		.cfi_def_cfa_offset 9
 1340 0456 80E0      		ldi r24,lo8(__c.4946)
 1341 0458 90E0      		ldi r25,hi8(__c.4946)
 1342 045a 9F93      		push r25
 1343               	.LCFI122:
 1344               		.cfi_def_cfa_offset 10
 1345 045c 8F93      		push r24
 1346               	.LCFI123:
 1347               		.cfi_def_cfa_offset 11
 1348 045e 0E94 0000 		call __xprintf
 317:../../tmk_core/common/command.c ****             print_val_hex8(keyboard_idle);
 1349               		.loc 1 317 0
 1350 0462 8091 0000 		lds r24,keyboard_idle
 1351 0466 1F92      		push __zero_reg__
 1352               	.LCFI124:
 1353               		.cfi_def_cfa_offset 12
 1354 0468 8F93      		push r24
 1355               	.LCFI125:
 1356               		.cfi_def_cfa_offset 13
 1357 046a 80E0      		ldi r24,lo8(__c.4948)
 1358 046c 90E0      		ldi r25,hi8(__c.4948)
 1359 046e 9F93      		push r25
 1360               	.LCFI126:
 1361               		.cfi_def_cfa_offset 14
 1362 0470 8F93      		push r24
 1363               	.LCFI127:
 1364               		.cfi_def_cfa_offset 15
 1365 0472 0E94 0000 		call __xprintf
 319:../../tmk_core/common/command.c ****             print_val_hex8(keyboard_nkro);
 1366               		.loc 1 319 0
 1367 0476 8091 0000 		lds r24,keyboard_nkro
 1368 047a 1F92      		push __zero_reg__
 1369               	.LCFI128:
 1370               		.cfi_def_cfa_offset 16
 1371 047c 8F93      		push r24
 1372               	.LCFI129:
 1373               		.cfi_def_cfa_offset 17
 1374 047e 80E0      		ldi r24,lo8(__c.4950)
 1375 0480 90E0      		ldi r25,hi8(__c.4950)
 1376 0482 9F93      		push r25
 1377               	.LCFI130:
 1378               		.cfi_def_cfa_offset 18
 1379 0484 8F93      		push r24
 1380               	.LCFI131:
 1381               		.cfi_def_cfa_offset 19
 1382 0486 0E94 0000 		call __xprintf
 321:../../tmk_core/common/command.c ****             print_val_hex32(timer_count);
 1383               		.loc 1 321 0
 1384 048a 8091 0000 		lds r24,timer_count
 1385 048e 9091 0000 		lds r25,timer_count+1
 1386 0492 A091 0000 		lds r26,timer_count+2
 1387 0496 B091 0000 		lds r27,timer_count+3
 1388 049a BF93      		push r27
 1389               	.LCFI132:
 1390               		.cfi_def_cfa_offset 20
 1391 049c AF93      		push r26
 1392               	.LCFI133:
 1393               		.cfi_def_cfa_offset 21
 1394 049e 9F93      		push r25
 1395               	.LCFI134:
 1396               		.cfi_def_cfa_offset 22
 1397 04a0 8F93      		push r24
 1398               	.LCFI135:
 1399               		.cfi_def_cfa_offset 23
 1400 04a2 80E0      		ldi r24,lo8(__c.4952)
 1401 04a4 90E0      		ldi r25,hi8(__c.4952)
 1402 04a6 9F93      		push r25
 1403               	.LCFI136:
 1404               		.cfi_def_cfa_offset 24
 1405 04a8 8F93      		push r24
 1406               	.LCFI137:
 1407               		.cfi_def_cfa_offset 25
 1408 04aa 0E94 0000 		call __xprintf
 336:../../tmk_core/common/command.c ****             break;
 1409               		.loc 1 336 0
 1410 04ae 8DB7      		in r24,__SP_L__
 1411 04b0 9EB7      		in r25,__SP_H__
 1412 04b2 4696      		adiw r24,22
 1413 04b4 0FB6      		in __tmp_reg__,__SREG__
 1414 04b6 F894      		cli
 1415 04b8 9EBF      		out __SP_H__,r25
 1416 04ba 0FBE      		out __SREG__,__tmp_reg__
 1417 04bc 8DBF      		out __SP_L__,r24
 1418               	.LCFI138:
 1419               		.cfi_def_cfa_offset 3
 1420 04be 00C0      		rjmp .L95
 1421               	.L62:
 339:../../tmk_core/common/command.c ****             clear_keyboard(); //Prevents stuck keys.
 1422               		.loc 1 339 0
 1423 04c0 0E94 0000 		call clear_keyboard
 340:../../tmk_core/common/command.c ****             keyboard_nkro = !keyboard_nkro;
 1424               		.loc 1 340 0
 1425 04c4 C091 0000 		lds r28,keyboard_nkro
 1426 04c8 81E0      		ldi r24,lo8(1)
 1427 04ca C827      		eor r28,r24
 1428 04cc C093 0000 		sts keyboard_nkro,r28
 341:../../tmk_core/common/command.c ****             if (keyboard_nkro)
 1429               		.loc 1 341 0
 1430 04d0 CC23      		tst r28
 1431 04d2 01F0      		breq .L76
 342:../../tmk_core/common/command.c ****                 print("NKRO: on\n");
 1432               		.loc 1 342 0
 1433 04d4 80E0      		ldi r24,lo8(__c.4955)
 1434 04d6 90E0      		ldi r25,hi8(__c.4955)
 1435 04d8 0E94 0000 		call xputs
 1436 04dc 00C0      		rjmp .L71
 1437               	.L76:
 344:../../tmk_core/common/command.c ****                 print("NKRO: off\n");
 1438               		.loc 1 344 0
 1439 04de 80E0      		ldi r24,lo8(__c.4957)
 1440 04e0 90E0      		ldi r25,hi8(__c.4957)
 1441 04e2 00C0      		rjmp .L98
 1442               	.L65:
 351:../../tmk_core/common/command.c ****             switch_default_layer(0);
 1443               		.loc 1 351 0
 1444 04e4 80E0      		ldi r24,0
 1445 04e6 00C0      		rjmp .L99
 1446               	.L67:
 354:../../tmk_core/common/command.c ****             switch_default_layer((code - KC_1) + 1);
 1447               		.loc 1 354 0
 1448 04e8 8D51      		subi r24,lo8(-(-29))
 1449 04ea 00C0      		rjmp .L99
 1450               	.L69:
 357:../../tmk_core/common/command.c ****             switch_default_layer((code - KC_F1) + 1);
 1451               		.loc 1 357 0
 1452 04ec 8953      		subi r24,lo8(-(-57))
 1453               	.L99:
 1454 04ee 0E94 0000 		call switch_default_layer
 1455 04f2 00C0      		rjmp .L95
 1456               	.L49:
 360:../../tmk_core/common/command.c ****             print("?");
 1457               		.loc 1 360 0
 1458 04f4 80E0      		ldi r24,lo8(__c.4966)
 1459 04f6 90E0      		ldi r25,hi8(__c.4966)
 1460 04f8 0E94 0000 		call xputs
 361:../../tmk_core/common/command.c ****             return false;
 1461               		.loc 1 361 0
 1462 04fc C0E0      		ldi r28,0
 1463               	.L71:
 364:../../tmk_core/common/command.c **** }
 1464               		.loc 1 364 0
 1465 04fe 8C2F      		mov r24,r28
 1466               	/* epilogue start */
 1467 0500 CF91      		pop r28
 1468 0502 0895      		ret
 1469               		.cfi_endproc
 1470               	.LFE108:
 1472               		.section	.text.command_extra,"ax",@progbits
 1473               		.weak	command_extra
 1475               	command_extra:
 1476               	.LFB104:
  99:../../tmk_core/common/command.c **** {
 1477               		.loc 1 99 0
 1478               		.cfi_startproc
 1479               	.LVL51:
 1480               	/* prologue: function */
 1481               	/* frame size = 0 */
 1482               	/* stack size = 0 */
 1483               	.L__stack_usage = 0
 101:../../tmk_core/common/command.c **** }
 1484               		.loc 1 101 0
 1485 0000 80E0      		ldi r24,0
 1486               	.LVL52:
 1487 0002 0895      		ret
 1488               		.cfi_endproc
 1489               	.LFE104:
 1491               		.section	.text.command_console_extra,"ax",@progbits
 1492               		.weak	command_console_extra
 1494               	command_console_extra:
 1495               	.LFB105:
 105:../../tmk_core/common/command.c **** {
 1496               		.loc 1 105 0
 1497               		.cfi_startproc
 1498               	.LVL53:
 1499               	/* prologue: function */
 1500               	/* frame size = 0 */
 1501               	/* stack size = 0 */
 1502               	.L__stack_usage = 0
 107:../../tmk_core/common/command.c **** }
 1503               		.loc 1 107 0
 1504 0000 80E0      		ldi r24,0
 1505               	.LVL54:
 1506 0002 0895      		ret
 1507               		.cfi_endproc
 1508               	.LFE105:
 1510               		.section	.text.command_proc,"ax",@progbits
 1511               	.global	command_proc
 1513               	command_proc:
 1514               	.LFB103:
  70:../../tmk_core/common/command.c **** {
 1515               		.loc 1 70 0
 1516               		.cfi_startproc
 1517 0000 CF93      		push r28
 1518               	.LCFI139:
 1519               		.cfi_def_cfa_offset 3
 1520               		.cfi_offset 28, -2
 1521               	/* prologue: function */
 1522               	/* frame size = 0 */
 1523               	/* stack size = 1 */
 1524               	.L__stack_usage = 1
 1525 0002 C82F      		mov r28,r24
  71:../../tmk_core/common/command.c ****     switch (command_state) {
 1526               		.loc 1 71 0
 1527 0004 8091 0000 		lds r24,command_state
 1528 0008 8130      		cpi r24,lo8(1)
 1529 000a 01F0      		breq .L104
 1530 000c 00F0      		brlo .L105
 1531 000e 8230      		cpi r24,lo8(2)
 1532 0010 01F4      		brne .+2
 1533 0012 00C0      		rjmp .L106
 1534 0014 00C0      		rjmp .L179
 1535               	.L105:
  73:../../tmk_core/common/command.c ****             if (!IS_COMMAND())
 1536               		.loc 1 73 0
 1537 0016 A091 0000 		lds r26,keyboard_report
 1538 001a B091 0000 		lds r27,keyboard_report+1
 1539 001e 8C91      		ld r24,X
 1540 0020 8131      		cpi r24,lo8(17)
 1541 0022 01F0      		breq .L110
  73:../../tmk_core/common/command.c ****             if (!IS_COMMAND())
 1542               		.loc 1 73 0 is_stmt 0 discriminator 1
 1543 0024 8232      		cpi r24,lo8(34)
 1544 0026 01F0      		breq .+2
 1545 0028 00C0      		rjmp .L137
 1546 002a 00C0      		rjmp .L110
 1547               	.L104:
  78:../../tmk_core/common/command.c ****             if (IS_COMMAND())
 1548               		.loc 1 78 0 is_stmt 1
 1549 002c A091 0000 		lds r26,keyboard_report
 1550 0030 B091 0000 		lds r27,keyboard_report+1
 1551 0034 8C91      		ld r24,X
 1552 0036 8131      		cpi r24,lo8(17)
 1553 0038 01F0      		breq .L110
  78:../../tmk_core/common/command.c ****             if (IS_COMMAND())
 1554               		.loc 1 78 0 is_stmt 0 discriminator 1
 1555 003a 8232      		cpi r24,lo8(34)
 1556 003c 01F4      		brne .L111
 1557               	.L110:
  79:../../tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 1558               		.loc 1 79 0 is_stmt 1
 1559 003e 8C2F      		mov r24,r28
 1560 0040 0E94 0000 		call command_extra
 1561 0044 8111      		cpse r24,__zero_reg__
 1562 0046 00C0      		rjmp .L140
  79:../../tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 1563               		.loc 1 79 0 is_stmt 0 discriminator 2
 1564 0048 8C2F      		mov r24,r28
 1565 004a 0E94 0000 		call command_common
 1566 004e 00C0      		rjmp .L113
 1567               	.L111:
  81:../../tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
 1568               		.loc 1 81 0 is_stmt 1
 1569 0050 8C2F      		mov r24,r28
 1570 0052 0E94 0000 		call command_console_extra
 1571 0056 8111      		cpse r24,__zero_reg__
 1572 0058 00C0      		rjmp .L140
 1573               	.LBB159:
 1574               	.LBB160:
 382:../../tmk_core/common/command.c ****     switch (code) {
 1575               		.loc 1 382 0
 1576 005a C431      		cpi r28,lo8(20)
 1577 005c 01F0      		breq .L115
 1578 005e 00F4      		brsh .L116
 1579 0060 CB30      		cpi r28,lo8(11)
 1580 0062 01F0      		breq .L117
 1581 0064 C031      		cpi r28,lo8(16)
 1582 0066 01F4      		brne .L114
 393:../../tmk_core/common/command.c ****             mousekey_console_help();
 1583               		.loc 1 393 0
 1584 0068 0E94 0000 		call mousekey_console_help
 394:../../tmk_core/common/command.c ****             print("M> ");
 1585               		.loc 1 394 0
 1586 006c 80E0      		ldi r24,lo8(__c.4982)
 1587 006e 90E0      		ldi r25,hi8(__c.4982)
 1588 0070 0E94 0000 		call xputs
 395:../../tmk_core/common/command.c ****             command_state = MOUSEKEY;
 1589               		.loc 1 395 0
 1590 0074 82E0      		ldi r24,lo8(2)
 1591 0076 8093 0000 		sts command_state,r24
 1592 007a 00C0      		rjmp .L140
 1593               	.L116:
 382:../../tmk_core/common/command.c ****     switch (code) {
 1594               		.loc 1 382 0
 1595 007c C932      		cpi r28,lo8(41)
 1596 007e 01F0      		breq .L115
 1597 0080 C833      		cpi r28,lo8(56)
 1598 0082 01F4      		brne .L114
 1599               	.L117:
 1600               	.LBB161:
 1601               	.LBB162:
 372:../../tmk_core/common/command.c ****     print("\n\t- Console -\n"
 1602               		.loc 1 372 0
 1603 0084 80E0      		ldi r24,lo8(__c.4971)
 1604 0086 90E0      		ldi r25,hi8(__c.4971)
 1605 0088 0E94 0000 		call xputs
 1606               	.LBE162:
 1607               	.LBE161:
 402:../../tmk_core/common/command.c ****     print("C> ");
 1608               		.loc 1 402 0
 1609 008c 80E0      		ldi r24,lo8(__c.4987)
 1610 008e 90E0      		ldi r25,hi8(__c.4987)
 1611 0090 0E94 0000 		call xputs
 1612 0094 00C0      		rjmp .L140
 1613               	.L115:
 389:../../tmk_core/common/command.c ****             command_state = ONESHOT;
 1614               		.loc 1 389 0
 1615 0096 1092 0000 		sts command_state,__zero_reg__
 1616 009a 00C0      		rjmp .L120
 1617               	.L114:
 399:../../tmk_core/common/command.c ****             print("?");
 1618               		.loc 1 399 0
 1619 009c 80E0      		ldi r24,lo8(__c.4985)
 1620 009e 90E0      		ldi r25,hi8(__c.4985)
 1621 00a0 0E94 0000 		call xputs
 1622 00a4 00C0      		rjmp .L120
 1623               	.L140:
 1624               	.LBE160:
 1625               	.LBE159:
  81:../../tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
 1626               		.loc 1 81 0
 1627 00a6 81E0      		ldi r24,lo8(1)
 1628               	.L113:
  81:../../tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
 1629               		.loc 1 81 0 is_stmt 0 discriminator 4
 1630 00a8 8170      		andi r24,lo8(1)
 1631 00aa 00C0      		rjmp .L172
 1632               	.L106:
 1633               	.LBB163:
 1634               	.LBB164:
 547:../../tmk_core/common/command.c ****     switch (code) {
 1635               		.loc 1 547 0 is_stmt 1
 1636 00ac C432      		cpi r28,lo8(36)
 1637 00ae 00F4      		brsh .L122
 1638 00b0 CE31      		cpi r28,lo8(30)
 1639 00b2 00F0      		brlo .+2
 1640 00b4 00C0      		rjmp .L123
 1641 00b6 CB30      		cpi r28,lo8(11)
 1642 00b8 01F0      		breq .L124
 1643 00ba 00F4      		brsh .L125
 1644 00bc C730      		cpi r28,lo8(7)
 1645 00be 01F0      		breq .+2
 1646 00c0 00C0      		rjmp .L121
 586:../../tmk_core/common/command.c ****             mk_delay = MOUSEKEY_DELAY/10;
 1647               		.loc 1 586 0
 1648 00c2 8AE0      		ldi r24,lo8(10)
 1649 00c4 8093 0000 		sts mk_delay,r24
 587:../../tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 1650               		.loc 1 587 0
 1651 00c8 94E1      		ldi r25,lo8(20)
 1652 00ca 9093 0000 		sts mk_interval,r25
 588:../../tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 1653               		.loc 1 588 0
 1654 00ce 93E0      		ldi r25,lo8(3)
 1655 00d0 9093 0000 		sts mk_max_speed,r25
 589:../../tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 1656               		.loc 1 589 0
 1657 00d4 8093 0000 		sts mk_time_to_max,r24
 590:../../tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 1658               		.loc 1 590 0
 1659 00d8 88E0      		ldi r24,lo8(8)
 1660 00da 8093 0000 		sts mk_wheel_max_speed,r24
 591:../../tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 1661               		.loc 1 591 0
 1662 00de 88E2      		ldi r24,lo8(40)
 1663 00e0 8093 0000 		sts mk_wheel_time_to_max,r24
 592:../../tmk_core/common/command.c ****             print("set default\n");
 1664               		.loc 1 592 0
 1665 00e4 80E0      		ldi r24,lo8(__c.5106)
 1666 00e6 90E0      		ldi r25,hi8(__c.5106)
 1667 00e8 0E94 0000 		call xputs
 1668 00ec 00C0      		rjmp .L134
 1669               	.L125:
 547:../../tmk_core/common/command.c ****     switch (code) {
 1670               		.loc 1 547 0
 1671 00ee C331      		cpi r28,lo8(19)
 1672 00f0 01F0      		breq .L127
 1673 00f2 C431      		cpi r28,lo8(20)
 1674 00f4 01F0      		breq .L128
 1675 00f6 00C0      		rjmp .L121
 1676               	.L122:
 1677 00f8 CB34      		cpi r28,lo8(75)
 1678 00fa 01F4      		brne .+2
 1679 00fc 00C0      		rjmp .L129
 1680 00fe 00F4      		brsh .L130
 1681 0100 C932      		cpi r28,lo8(41)
 1682 0102 01F0      		breq .L128
 1683 0104 C833      		cpi r28,lo8(56)
 1684 0106 01F0      		breq .L124
 1685 0108 00C0      		rjmp .L121
 1686               	.L130:
 1687 010a C135      		cpi r28,lo8(81)
 1688 010c 01F4      		brne .+2
 1689 010e 00C0      		rjmp .L131
 1690 0110 C235      		cpi r28,lo8(82)
 1691 0112 01F4      		brne .+2
 1692 0114 00C0      		rjmp .L132
 1693 0116 CE34      		cpi r28,lo8(78)
 1694 0118 01F0      		breq .+2
 1695 011a 00C0      		rjmp .L121
 583:../../tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 10);
 1696               		.loc 1 583 0
 1697 011c 6AE0      		ldi r22,lo8(10)
 1698 011e 00C0      		rjmp .L174
 1699               	.L124:
 550:../../tmk_core/common/command.c ****             mousekey_console_help();
 1700               		.loc 1 550 0
 1701 0120 0E94 0000 		call mousekey_console_help
 1702 0124 00C0      		rjmp .L134
 1703               	.L128:
 554:../../tmk_core/common/command.c ****             if (mousekey_param) {
 1704               		.loc 1 554 0
 1705 0126 8091 0000 		lds r24,mousekey_param
 1706 012a 8823      		tst r24
 1707 012c 01F0      		breq .L135
 555:../../tmk_core/common/command.c ****                 mousekey_param = 0;
 1708               		.loc 1 555 0
 1709 012e 1092 0000 		sts mousekey_param,__zero_reg__
 1710 0132 00C0      		rjmp .L134
 1711               	.L135:
 557:../../tmk_core/common/command.c ****                 print("C> ");
 1712               		.loc 1 557 0
 1713 0134 80E0      		ldi r24,lo8(__c.5092)
 1714 0136 90E0      		ldi r25,hi8(__c.5092)
 1715 0138 0E94 0000 		call xputs
 558:../../tmk_core/common/command.c ****                 command_state = CONSOLE;
 1716               		.loc 1 558 0
 1717 013c 81E0      		ldi r24,lo8(1)
 1718 013e 8093 0000 		sts command_state,r24
 1719 0142 00C0      		rjmp .L172
 1720               	.L127:
 1721               	.LBB165:
 1722               	.LBB166:
 415:../../tmk_core/common/command.c ****     print("\n\t- Values -\n");
 1723               		.loc 1 415 0
 1724 0144 80E0      		ldi r24,lo8(__c.4993)
 1725 0146 90E0      		ldi r25,hi8(__c.4993)
 1726 0148 0E94 0000 		call xputs
 416:../../tmk_core/common/command.c ****     print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
 1727               		.loc 1 416 0
 1728 014c 80E0      		ldi r24,lo8(__c.4995)
 1729 014e 90E0      		ldi r25,hi8(__c.4995)
 1730 0150 0E94 0000 		call xputs
 1731 0154 8091 0000 		lds r24,mk_delay
 1732 0158 1F92      		push __zero_reg__
 1733               	.LCFI140:
 1734               		.cfi_def_cfa_offset 4
 1735 015a 8F93      		push r24
 1736               	.LCFI141:
 1737               		.cfi_def_cfa_offset 5
 1738 015c 80E0      		ldi r24,lo8(__c.4997)
 1739 015e 90E0      		ldi r25,hi8(__c.4997)
 1740 0160 9F93      		push r25
 1741               	.LCFI142:
 1742               		.cfi_def_cfa_offset 6
 1743 0162 8F93      		push r24
 1744               	.LCFI143:
 1745               		.cfi_def_cfa_offset 7
 1746 0164 0E94 0000 		call __xprintf
 1747 0168 80E0      		ldi r24,lo8(__c.4999)
 1748 016a 90E0      		ldi r25,hi8(__c.4999)
 1749 016c 0E94 0000 		call xputs
 417:../../tmk_core/common/command.c ****     print("2: interval(ms): "); pdec(mk_interval); print("\n");
 1750               		.loc 1 417 0
 1751 0170 80E0      		ldi r24,lo8(__c.5001)
 1752 0172 90E0      		ldi r25,hi8(__c.5001)
 1753 0174 0E94 0000 		call xputs
 1754 0178 8091 0000 		lds r24,mk_interval
 1755 017c 1F92      		push __zero_reg__
 1756               	.LCFI144:
 1757               		.cfi_def_cfa_offset 8
 1758 017e 8F93      		push r24
 1759               	.LCFI145:
 1760               		.cfi_def_cfa_offset 9
 1761 0180 80E0      		ldi r24,lo8(__c.5003)
 1762 0182 90E0      		ldi r25,hi8(__c.5003)
 1763 0184 9F93      		push r25
 1764               	.LCFI146:
 1765               		.cfi_def_cfa_offset 10
 1766 0186 8F93      		push r24
 1767               	.LCFI147:
 1768               		.cfi_def_cfa_offset 11
 1769 0188 0E94 0000 		call __xprintf
 1770 018c 80E0      		ldi r24,lo8(__c.5005)
 1771 018e 90E0      		ldi r25,hi8(__c.5005)
 1772 0190 0E94 0000 		call xputs
 418:../../tmk_core/common/command.c ****     print("3: max_speed: "); pdec(mk_max_speed); print("\n");
 1773               		.loc 1 418 0
 1774 0194 80E0      		ldi r24,lo8(__c.5007)
 1775 0196 90E0      		ldi r25,hi8(__c.5007)
 1776 0198 0E94 0000 		call xputs
 1777 019c 8091 0000 		lds r24,mk_max_speed
 1778 01a0 1F92      		push __zero_reg__
 1779               	.LCFI148:
 1780               		.cfi_def_cfa_offset 12
 1781 01a2 8F93      		push r24
 1782               	.LCFI149:
 1783               		.cfi_def_cfa_offset 13
 1784 01a4 80E0      		ldi r24,lo8(__c.5009)
 1785 01a6 90E0      		ldi r25,hi8(__c.5009)
 1786 01a8 9F93      		push r25
 1787               	.LCFI150:
 1788               		.cfi_def_cfa_offset 14
 1789 01aa 8F93      		push r24
 1790               	.LCFI151:
 1791               		.cfi_def_cfa_offset 15
 1792 01ac 0E94 0000 		call __xprintf
 1793 01b0 80E0      		ldi r24,lo8(__c.5011)
 1794 01b2 90E0      		ldi r25,hi8(__c.5011)
 1795 01b4 0E94 0000 		call xputs
 419:../../tmk_core/common/command.c ****     print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
 1796               		.loc 1 419 0
 1797 01b8 80E0      		ldi r24,lo8(__c.5013)
 1798 01ba 90E0      		ldi r25,hi8(__c.5013)
 1799 01bc 0E94 0000 		call xputs
 1800 01c0 8091 0000 		lds r24,mk_time_to_max
 1801 01c4 1F92      		push __zero_reg__
 1802               	.LCFI152:
 1803               		.cfi_def_cfa_offset 16
 1804 01c6 8F93      		push r24
 1805               	.LCFI153:
 1806               		.cfi_def_cfa_offset 17
 1807 01c8 80E0      		ldi r24,lo8(__c.5015)
 1808 01ca 90E0      		ldi r25,hi8(__c.5015)
 1809 01cc 9F93      		push r25
 1810               	.LCFI154:
 1811               		.cfi_def_cfa_offset 18
 1812 01ce 8F93      		push r24
 1813               	.LCFI155:
 1814               		.cfi_def_cfa_offset 19
 1815 01d0 0E94 0000 		call __xprintf
 1816 01d4 80E0      		ldi r24,lo8(__c.5017)
 1817 01d6 90E0      		ldi r25,hi8(__c.5017)
 1818 01d8 0E94 0000 		call xputs
 420:../../tmk_core/common/command.c ****     print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
 1819               		.loc 1 420 0
 1820 01dc 80E0      		ldi r24,lo8(__c.5019)
 1821 01de 90E0      		ldi r25,hi8(__c.5019)
 1822 01e0 0E94 0000 		call xputs
 1823 01e4 8091 0000 		lds r24,mk_wheel_max_speed
 1824 01e8 1F92      		push __zero_reg__
 1825               	.LCFI156:
 1826               		.cfi_def_cfa_offset 20
 1827 01ea 8F93      		push r24
 1828               	.LCFI157:
 1829               		.cfi_def_cfa_offset 21
 1830 01ec 80E0      		ldi r24,lo8(__c.5021)
 1831 01ee 90E0      		ldi r25,hi8(__c.5021)
 1832 01f0 9F93      		push r25
 1833               	.LCFI158:
 1834               		.cfi_def_cfa_offset 22
 1835 01f2 8F93      		push r24
 1836               	.LCFI159:
 1837               		.cfi_def_cfa_offset 23
 1838 01f4 0E94 0000 		call __xprintf
 1839 01f8 80E0      		ldi r24,lo8(__c.5023)
 1840 01fa 90E0      		ldi r25,hi8(__c.5023)
 1841 01fc 0E94 0000 		call xputs
 421:../../tmk_core/common/command.c ****     print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
 1842               		.loc 1 421 0
 1843 0200 80E0      		ldi r24,lo8(__c.5025)
 1844 0202 90E0      		ldi r25,hi8(__c.5025)
 1845 0204 0E94 0000 		call xputs
 1846 0208 8091 0000 		lds r24,mk_wheel_time_to_max
 1847 020c 1F92      		push __zero_reg__
 1848               	.LCFI160:
 1849               		.cfi_def_cfa_offset 24
 1850 020e 8F93      		push r24
 1851               	.LCFI161:
 1852               		.cfi_def_cfa_offset 25
 1853 0210 80E0      		ldi r24,lo8(__c.5027)
 1854 0212 90E0      		ldi r25,hi8(__c.5027)
 1855 0214 9F93      		push r25
 1856               	.LCFI162:
 1857               		.cfi_def_cfa_offset 26
 1858 0216 8F93      		push r24
 1859               	.LCFI163:
 1860               		.cfi_def_cfa_offset 27
 1861 0218 0E94 0000 		call __xprintf
 1862 021c 80E0      		ldi r24,lo8(__c.5029)
 1863 021e 90E0      		ldi r25,hi8(__c.5029)
 1864 0220 0E94 0000 		call xputs
 1865 0224 8DB7      		in r24,__SP_L__
 1866 0226 9EB7      		in r25,__SP_H__
 1867 0228 4896      		adiw r24,24
 1868 022a 0FB6      		in __tmp_reg__,__SREG__
 1869 022c F894      		cli
 1870 022e 9EBF      		out __SP_H__,r25
 1871 0230 0FBE      		out __SREG__,__tmp_reg__
 1872 0232 8DBF      		out __SP_L__,r24
 1873               	.LCFI164:
 1874               		.cfi_def_cfa_offset 3
 1875 0234 00C0      		rjmp .L134
 1876               	.L123:
 1877 0236 CE51      		subi r28,lo8(-(-30))
 1878 0238 EC2F      		mov r30,r28
 1879 023a F0E0      		ldi r31,0
 1880 023c E050      		subi r30,lo8(-(CSWTCH.44))
 1881 023e F040      		sbci r31,hi8(-(CSWTCH.44))
 1882               	.LBE166:
 1883               	.LBE165:
 571:../../tmk_core/common/command.c ****             mousekey_param = numkey2num(code);
 1884               		.loc 1 571 0
 1885 0240 8081      		ld r24,Z
 1886 0242 8093 0000 		sts mousekey_param,r24
 1887 0246 00C0      		rjmp .L134
 1888               	.L132:
 574:../../tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 1);
 1889               		.loc 1 574 0
 1890 0248 61E0      		ldi r22,lo8(1)
 1891 024a 00C0      		rjmp .L173
 1892               	.L131:
 577:../../tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 1);
 1893               		.loc 1 577 0
 1894 024c 61E0      		ldi r22,lo8(1)
 1895 024e 00C0      		rjmp .L174
 1896               	.L129:
 580:../../tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 10);
 1897               		.loc 1 580 0
 1898 0250 6AE0      		ldi r22,lo8(10)
 1899               	.L173:
 1900 0252 8091 0000 		lds r24,mousekey_param
 1901 0256 0E94 0000 		call mousekey_param_inc
 1902 025a 00C0      		rjmp .L134
 1903               	.L174:
 583:../../tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 10);
 1904               		.loc 1 583 0
 1905 025c 8091 0000 		lds r24,mousekey_param
 1906 0260 0E94 0000 		call mousekey_param_dec
 1907 0264 00C0      		rjmp .L134
 1908               	.L121:
 595:../../tmk_core/common/command.c ****             print("?");
 1909               		.loc 1 595 0
 1910 0266 80E0      		ldi r24,lo8(__c.5109)
 1911 0268 90E0      		ldi r25,hi8(__c.5109)
 1912 026a 00C0      		rjmp .L176
 1913               	.L134:
 598:../../tmk_core/common/command.c ****     if (mousekey_param)
 1914               		.loc 1 598 0
 1915 026c 8091 0000 		lds r24,mousekey_param
 1916 0270 8823      		tst r24
 1917 0272 01F0      		breq .L136
 599:../../tmk_core/common/command.c ****         xprintf("M%d> ", mousekey_param);
 1918               		.loc 1 599 0
 1919 0274 1F92      		push __zero_reg__
 1920               	.LCFI165:
 1921               		.cfi_def_cfa_offset 4
 1922 0276 8F93      		push r24
 1923               	.LCFI166:
 1924               		.cfi_def_cfa_offset 5
 1925 0278 80E0      		ldi r24,lo8(__c.5111)
 1926 027a 90E0      		ldi r25,hi8(__c.5111)
 1927 027c 9F93      		push r25
 1928               	.LCFI167:
 1929               		.cfi_def_cfa_offset 6
 1930 027e 8F93      		push r24
 1931               	.LCFI168:
 1932               		.cfi_def_cfa_offset 7
 1933 0280 0E94 0000 		call __xprintf
 1934 0284 0F90      		pop __tmp_reg__
 1935 0286 0F90      		pop __tmp_reg__
 1936 0288 0F90      		pop __tmp_reg__
 1937 028a 0F90      		pop __tmp_reg__
 1938               	.LCFI169:
 1939               		.cfi_def_cfa_offset 3
 1940 028c 00C0      		rjmp .L175
 1941               	.L136:
 601:../../tmk_core/common/command.c ****         print("M>" );
 1942               		.loc 1 601 0
 1943 028e 80E0      		ldi r24,lo8(__c.5113)
 1944 0290 90E0      		ldi r25,hi8(__c.5113)
 1945               	.L176:
 1946 0292 0E94 0000 		call xputs
 1947               	.L175:
 1948               	.LBE164:
 1949               	.LBE163:
  92:../../tmk_core/common/command.c ****     return true;
 1950               		.loc 1 92 0
 1951 0296 81E0      		ldi r24,lo8(1)
 1952 0298 00C0      		rjmp .L172
 1953               	.L179:
  89:../../tmk_core/common/command.c ****             command_state = ONESHOT;
 1954               		.loc 1 89 0
 1955 029a 1092 0000 		sts command_state,__zero_reg__
 1956               	.L137:
  74:../../tmk_core/common/command.c ****                 return false;
 1957               		.loc 1 74 0
 1958 029e 80E0      		ldi r24,0
 1959 02a0 00C0      		rjmp .L172
 1960               	.L120:
  81:../../tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
 1961               		.loc 1 81 0
 1962 02a2 80E0      		ldi r24,0
 1963 02a4 00C0      		rjmp .L113
 1964               	.L172:
 1965               	/* epilogue start */
  93:../../tmk_core/common/command.c **** }
 1966               		.loc 1 93 0
 1967 02a6 CF91      		pop r28
 1968 02a8 0895      		ret
 1969               		.cfi_endproc
 1970               	.LFE103:
 1972               		.section	.rodata.CSWTCH.44,"a",@progbits
 1975               	CSWTCH.44:
 1976 0000 01        		.byte	1
 1977 0001 02        		.byte	2
 1978 0002 03        		.byte	3
 1979 0003 04        		.byte	4
 1980 0004 05        		.byte	5
 1981 0005 06        		.byte	6
 1982 0006 07        		.byte	7
 1983 0007 08        		.byte	8
 1984 0008 09        		.byte	9
 1985 0009 00        		.byte	0
 1986               		.section	.progmem.data.__c.5075,"a",@progbits
 1989               	__c.5075:
 1990 0000 6D6B 5F77 		.string	"mk_wheel_time_to_max = %d\n"
 1990      6865 656C 
 1990      5F74 696D 
 1990      655F 746F 
 1990      5F6D 6178 
 1991               		.section	.progmem.data.__c.5072,"a",@progbits
 1994               	__c.5072:
 1995 0000 6D6B 5F77 		.string	"mk_wheel_max_speed = %d\n"
 1995      6865 656C 
 1995      5F6D 6178 
 1995      5F73 7065 
 1995      6564 203D 
 1996               		.section	.progmem.data.__c.5069,"a",@progbits
 1999               	__c.5069:
 2000 0000 6D6B 5F74 		.string	"mk_time_to_max = %d\n"
 2000      696D 655F 
 2000      746F 5F6D 
 2000      6178 203D 
 2000      2025 640A 
 2001               		.section	.progmem.data.__c.5066,"a",@progbits
 2004               	__c.5066:
 2005 0000 6D6B 5F6D 		.string	"mk_max_speed = %d\n"
 2005      6178 5F73 
 2005      7065 6564 
 2005      203D 2025 
 2005      640A 00
 2006               		.section	.progmem.data.__c.5063,"a",@progbits
 2009               	__c.5063:
 2010 0000 6D6B 5F69 		.string	"mk_interval = %d\n"
 2010      6E74 6572 
 2010      7661 6C20 
 2010      3D20 2564 
 2010      0A00 
 2011               		.section	.progmem.data.__c.5059,"a",@progbits
 2014               	__c.5059:
 2015 0000 6D6B 5F64 		.string	"mk_delay = %d\n"
 2015      656C 6179 
 2015      203D 2025 
 2015      640A 00
 2016               		.section	.progmem.data.__c.5052,"a",@progbits
 2019               	__c.5052:
 2020 0000 6D6B 5F77 		.string	"mk_wheel_time_to_max = %d\n"
 2020      6865 656C 
 2020      5F74 696D 
 2020      655F 746F 
 2020      5F6D 6178 
 2021               		.section	.progmem.data.__c.5049,"a",@progbits
 2024               	__c.5049:
 2025 0000 6D6B 5F77 		.string	"mk_wheel_max_speed = %d\n"
 2025      6865 656C 
 2025      5F6D 6178 
 2025      5F73 7065 
 2025      6564 203D 
 2026               		.section	.progmem.data.__c.5046,"a",@progbits
 2029               	__c.5046:
 2030 0000 6D6B 5F74 		.string	"mk_time_to_max = %d\n"
 2030      696D 655F 
 2030      746F 5F6D 
 2030      6178 203D 
 2030      2025 640A 
 2031               		.section	.progmem.data.__c.5043,"a",@progbits
 2034               	__c.5043:
 2035 0000 6D6B 5F6D 		.string	"mk_max_speed = %d\n"
 2035      6178 5F73 
 2035      7065 6564 
 2035      203D 2025 
 2035      640A 00
 2036               		.section	.progmem.data.__c.5040,"a",@progbits
 2039               	__c.5040:
 2040 0000 6D6B 5F69 		.string	"mk_interval = %d\n"
 2040      6E74 6572 
 2040      7661 6C20 
 2040      3D20 2564 
 2040      0A00 
 2041               		.section	.progmem.data.__c.5036,"a",@progbits
 2044               	__c.5036:
 2045 0000 6D6B 5F64 		.string	"mk_delay = %d\n"
 2045      656C 6179 
 2045      203D 2025 
 2045      640A 00
 2046               		.section	.progmem.data.__c.5029,"a",@progbits
 2049               	__c.5029:
 2050 0000 0A00      		.string	"\n"
 2051               		.section	.progmem.data.__c.5027,"a",@progbits
 2054               	__c.5027:
 2055 0000 2575 00   		.string	"%u"
 2056               		.section	.progmem.data.__c.5025,"a",@progbits
 2059               	__c.5025:
 2060 0000 363A 2077 		.string	"6: wheel_time_to_max: "
 2060      6865 656C 
 2060      5F74 696D 
 2060      655F 746F 
 2060      5F6D 6178 
 2061               		.section	.progmem.data.__c.5023,"a",@progbits
 2064               	__c.5023:
 2065 0000 0A00      		.string	"\n"
 2066               		.section	.progmem.data.__c.5021,"a",@progbits
 2069               	__c.5021:
 2070 0000 2575 00   		.string	"%u"
 2071               		.section	.progmem.data.__c.5019,"a",@progbits
 2074               	__c.5019:
 2075 0000 353A 2077 		.string	"5: wheel_max_speed: "
 2075      6865 656C 
 2075      5F6D 6178 
 2075      5F73 7065 
 2075      6564 3A20 
 2076               		.section	.progmem.data.__c.5017,"a",@progbits
 2079               	__c.5017:
 2080 0000 0A00      		.string	"\n"
 2081               		.section	.progmem.data.__c.5015,"a",@progbits
 2084               	__c.5015:
 2085 0000 2575 00   		.string	"%u"
 2086               		.section	.progmem.data.__c.5013,"a",@progbits
 2089               	__c.5013:
 2090 0000 343A 2074 		.string	"4: time_to_max: "
 2090      696D 655F 
 2090      746F 5F6D 
 2090      6178 3A20 
 2090      00
 2091               		.section	.progmem.data.__c.5011,"a",@progbits
 2094               	__c.5011:
 2095 0000 0A00      		.string	"\n"
 2096               		.section	.progmem.data.__c.5009,"a",@progbits
 2099               	__c.5009:
 2100 0000 2575 00   		.string	"%u"
 2101               		.section	.progmem.data.__c.5007,"a",@progbits
 2104               	__c.5007:
 2105 0000 333A 206D 		.string	"3: max_speed: "
 2105      6178 5F73 
 2105      7065 6564 
 2105      3A20 00
 2106               		.section	.progmem.data.__c.5005,"a",@progbits
 2109               	__c.5005:
 2110 0000 0A00      		.string	"\n"
 2111               		.section	.progmem.data.__c.5003,"a",@progbits
 2114               	__c.5003:
 2115 0000 2575 00   		.string	"%u"
 2116               		.section	.progmem.data.__c.5001,"a",@progbits
 2119               	__c.5001:
 2120 0000 323A 2069 		.string	"2: interval(ms): "
 2120      6E74 6572 
 2120      7661 6C28 
 2120      6D73 293A 
 2120      2000 
 2121               		.section	.progmem.data.__c.4999,"a",@progbits
 2124               	__c.4999:
 2125 0000 0A00      		.string	"\n"
 2126               		.section	.progmem.data.__c.4997,"a",@progbits
 2129               	__c.4997:
 2130 0000 2575 00   		.string	"%u"
 2131               		.section	.progmem.data.__c.4995,"a",@progbits
 2134               	__c.4995:
 2135 0000 313A 2064 		.string	"1: delay(*10ms): "
 2135      656C 6179 
 2135      282A 3130 
 2135      6D73 293A 
 2135      2000 
 2136               		.section	.progmem.data.__c.4993,"a",@progbits
 2139               	__c.4993:
 2140 0000 0A09 2D20 		.string	"\n\t- Values -\n"
 2140      5661 6C75 
 2140      6573 202D 
 2140      0A00 
 2141               		.section	.progmem.data.__c.5113,"a",@progbits
 2144               	__c.5113:
 2145 0000 4D3E 00   		.string	"M>"
 2146               		.section	.progmem.data.__c.5111,"a",@progbits
 2149               	__c.5111:
 2150 0000 4D25 643E 		.string	"M%d> "
 2150      2000 
 2151               		.section	.progmem.data.__c.5109,"a",@progbits
 2154               	__c.5109:
 2155 0000 3F00      		.string	"?"
 2156               		.section	.progmem.data.__c.5106,"a",@progbits
 2159               	__c.5106:
 2160 0000 7365 7420 		.string	"set default\n"
 2160      6465 6661 
 2160      756C 740A 
 2160      00
 2161               		.section	.progmem.data.__c.5092,"a",@progbits
 2164               	__c.5092:
 2165 0000 433E 2000 		.string	"C> "
 2166               		.section	.progmem.data.__c.5082,"a",@progbits
 2169               	__c.5082:
 2170 0000 7768 6572 		.string	"where delta: cursor=%d, wheel=%d\nSee http://en.wikipedia.org/wiki/Mouse_keys\n"
 2170      6520 6465 
 2170      6C74 613A 
 2170      2063 7572 
 2170      736F 723D 
 2171               		.section	.progmem.data.__c.5080,"a",@progbits
 2174               	__c.5080:
 2175 0000 0A09 2D20 		.string	"\n\t- Mousekey -\nESC/q:\tquit\n1:\tdelay(*10ms)\n2:\tinterval(ms)\n3:\tmax_speed\n4:\tti
 2175      4D6F 7573 
 2175      656B 6579 
 2175      202D 0A45 
 2175      5343 2F71 
 2176               		.section	.progmem.data.__c.4985,"a",@progbits
 2179               	__c.4985:
 2180 0000 3F00      		.string	"?"
 2181               		.section	.progmem.data.__c.4982,"a",@progbits
 2184               	__c.4982:
 2185 0000 4D3E 2000 		.string	"M> "
 2186               		.section	.progmem.data.__c.4987,"a",@progbits
 2189               	__c.4987:
 2190 0000 433E 2000 		.string	"C> "
 2191               		.section	.progmem.data.__c.5131,"a",@progbits
 2194               	__c.5131:
 2195 0000 4C25 640A 		.string	"L%d\n"
 2195      00
 2196               		.section	.progmem.data.__c.4971,"a",@progbits
 2199               	__c.4971:
 2200 0000 0A09 2D20 		.string	"\n\t- Console -\nESC/q:\tquit\nm:\tmousekey\n"
 2200      436F 6E73 
 2200      6F6C 6520 
 2200      2D0A 4553 
 2200      432F 713A 
 2201               		.section	.progmem.data.__c.4792,"a",@progbits
 2204               	__c.4792:
 2205 0000 0A09 2D20 		.string	"\n\t- Magic -\nd:\tdebug\nx:\tdebug matrix\nk:\tdebug keyboard\nm:\tdebug mouse\nv:\tvers
 2205      4D61 6769 
 2205      6320 2D0A 
 2205      643A 0964 
 2205      6562 7567 
 2206               		.section	.progmem.data.__c.4887,"a",@progbits
 2209               	__c.4887:
 2210 0000 0A00      		.string	"\n"
 2211               		.section	.progmem.data.__c.4885,"a",@progbits
 2214               	__c.4885:
 2215 0000 2575 00   		.string	"%u"
 2216               		.section	.progmem.data.__c.4883,"a",@progbits
 2219               	__c.4883:
 2220 0000 2E6E 6B72 		.string	".nkro: "
 2220      6F3A 2000 
 2221               		.section	.progmem.data.__c.4881,"a",@progbits
 2224               	__c.4881:
 2225 0000 0A00      		.string	"\n"
 2226               		.section	.progmem.data.__c.4879,"a",@progbits
 2229               	__c.4879:
 2230 0000 2575 00   		.string	"%u"
 2231               		.section	.progmem.data.__c.4877,"a",@progbits
 2234               	__c.4877:
 2235 0000 2E73 7761 		.string	".swap_backslash_backspace: "
 2235      705F 6261 
 2235      636B 736C 
 2235      6173 685F 
 2235      6261 636B 
 2236               		.section	.progmem.data.__c.4875,"a",@progbits
 2239               	__c.4875:
 2240 0000 0A00      		.string	"\n"
 2241               		.section	.progmem.data.__c.4873,"a",@progbits
 2244               	__c.4873:
 2245 0000 2575 00   		.string	"%u"
 2246               		.section	.progmem.data.__c.4871,"a",@progbits
 2249               	__c.4871:
 2250 0000 2E73 7761 		.string	".swap_grave_esc: "
 2250      705F 6772 
 2250      6176 655F 
 2250      6573 633A 
 2250      2000 
 2251               		.section	.progmem.data.__c.4869,"a",@progbits
 2254               	__c.4869:
 2255 0000 0A00      		.string	"\n"
 2256               		.section	.progmem.data.__c.4867,"a",@progbits
 2259               	__c.4867:
 2260 0000 2575 00   		.string	"%u"
 2261               		.section	.progmem.data.__c.4865,"a",@progbits
 2264               	__c.4865:
 2265 0000 2E6E 6F5F 		.string	".no_gui: "
 2265      6775 693A 
 2265      2000 
 2266               		.section	.progmem.data.__c.4863,"a",@progbits
 2269               	__c.4863:
 2270 0000 0A00      		.string	"\n"
 2271               		.section	.progmem.data.__c.4861,"a",@progbits
 2274               	__c.4861:
 2275 0000 2575 00   		.string	"%u"
 2276               		.section	.progmem.data.__c.4859,"a",@progbits
 2279               	__c.4859:
 2280 0000 2E73 7761 		.string	".swap_ralt_rgui: "
 2280      705F 7261 
 2280      6C74 5F72 
 2280      6775 693A 
 2280      2000 
 2281               		.section	.progmem.data.__c.4857,"a",@progbits
 2284               	__c.4857:
 2285 0000 0A00      		.string	"\n"
 2286               		.section	.progmem.data.__c.4855,"a",@progbits
 2289               	__c.4855:
 2290 0000 2575 00   		.string	"%u"
 2291               		.section	.progmem.data.__c.4853,"a",@progbits
 2294               	__c.4853:
 2295 0000 2E73 7761 		.string	".swap_lalt_lgui: "
 2295      705F 6C61 
 2295      6C74 5F6C 
 2295      6775 693A 
 2295      2000 
 2296               		.section	.progmem.data.__c.4851,"a",@progbits
 2299               	__c.4851:
 2300 0000 0A00      		.string	"\n"
 2301               		.section	.progmem.data.__c.4849,"a",@progbits
 2304               	__c.4849:
 2305 0000 2575 00   		.string	"%u"
 2306               		.section	.progmem.data.__c.4847,"a",@progbits
 2309               	__c.4847:
 2310 0000 2E63 6170 		.string	".capslock_to_control: "
 2310      736C 6F63 
 2310      6B5F 746F 
 2310      5F63 6F6E 
 2310      7472 6F6C 
 2311               		.section	.progmem.data.__c.4845,"a",@progbits
 2314               	__c.4845:
 2315 0000 0A00      		.string	"\n"
 2316               		.section	.progmem.data.__c.4843,"a",@progbits
 2319               	__c.4843:
 2320 0000 2575 00   		.string	"%u"
 2321               		.section	.progmem.data.__c.4841,"a",@progbits
 2324               	__c.4841:
 2325 0000 2E73 7761 		.string	".swap_control_capslock: "
 2325      705F 636F 
 2325      6E74 726F 
 2325      6C5F 6361 
 2325      7073 6C6F 
 2326               		.section	.progmem.data.__c.4839,"a",@progbits
 2329               	__c.4839:
 2330 0000 0A00      		.string	"\n"
 2331               		.section	.progmem.data.__c.4837,"a",@progbits
 2334               	__c.4837:
 2335 0000 2530 3258 		.string	"%02X"
 2335      00
 2336               		.section	.progmem.data.__c.4835,"a",@progbits
 2339               	__c.4835:
 2340 0000 6B65 796D 		.string	"keymap_config.raw: "
 2340      6170 5F63 
 2340      6F6E 6669 
 2340      672E 7261 
 2340      773A 2000 
 2341               		.section	.progmem.data.__c.4832,"a",@progbits
 2344               	__c.4832:
 2345 0000 0A00      		.string	"\n"
 2346               		.section	.progmem.data.__c.4830,"a",@progbits
 2349               	__c.4830:
 2350 0000 2575 00   		.string	"%u"
 2351               		.section	.progmem.data.__c.4828,"a",@progbits
 2354               	__c.4828:
 2355 0000 2E6D 6F75 		.string	".mouse: "
 2355      7365 3A20 
 2355      00
 2356               		.section	.progmem.data.__c.4826,"a",@progbits
 2359               	__c.4826:
 2360 0000 0A00      		.string	"\n"
 2361               		.section	.progmem.data.__c.4824,"a",@progbits
 2364               	__c.4824:
 2365 0000 2575 00   		.string	"%u"
 2366               		.section	.progmem.data.__c.4822,"a",@progbits
 2369               	__c.4822:
 2370 0000 2E6B 6579 		.string	".keyboard: "
 2370      626F 6172 
 2370      643A 2000 
 2371               		.section	.progmem.data.__c.4820,"a",@progbits
 2374               	__c.4820:
 2375 0000 0A00      		.string	"\n"
 2376               		.section	.progmem.data.__c.4818,"a",@progbits
 2379               	__c.4818:
 2380 0000 2575 00   		.string	"%u"
 2381               		.section	.progmem.data.__c.4816,"a",@progbits
 2384               	__c.4816:
 2385 0000 2E6D 6174 		.string	".matrix: "
 2385      7269 783A 
 2385      2000 
 2386               		.section	.progmem.data.__c.4814,"a",@progbits
 2389               	__c.4814:
 2390 0000 0A00      		.string	"\n"
 2391               		.section	.progmem.data.__c.4812,"a",@progbits
 2394               	__c.4812:
 2395 0000 2575 00   		.string	"%u"
 2396               		.section	.progmem.data.__c.4810,"a",@progbits
 2399               	__c.4810:
 2400 0000 2E65 6E61 		.string	".enable: "
 2400      626C 653A 
 2400      2000 
 2401               		.section	.progmem.data.__c.4808,"a",@progbits
 2404               	__c.4808:
 2405 0000 0A00      		.string	"\n"
 2406               		.section	.progmem.data.__c.4806,"a",@progbits
 2409               	__c.4806:
 2410 0000 2530 3258 		.string	"%02X"
 2410      00
 2411               		.section	.progmem.data.__c.4804,"a",@progbits
 2414               	__c.4804:
 2415 0000 6465 6275 		.string	"debug_config.raw: "
 2415      675F 636F 
 2415      6E66 6967 
 2415      2E72 6177 
 2415      3A20 00
 2416               		.section	.progmem.data.__c.4801,"a",@progbits
 2419               	__c.4801:
 2420 0000 0A00      		.string	"\n"
 2421               		.section	.progmem.data.__c.4799,"a",@progbits
 2424               	__c.4799:
 2425 0000 2575 00   		.string	"%u"
 2426               		.section	.progmem.data.__c.4797,"a",@progbits
 2429               	__c.4797:
 2430 0000 6465 6661 		.string	"default_layer: "
 2430      756C 745F 
 2430      6C61 7965 
 2430      723A 2000 
 2431               		.section	.progmem.data.__c.4966,"a",@progbits
 2434               	__c.4966:
 2435 0000 3F00      		.string	"?"
 2436               		.section	.progmem.data.__c.4957,"a",@progbits
 2439               	__c.4957:
 2440 0000 4E4B 524F 		.string	"NKRO: off\n"
 2440      3A20 6F66 
 2440      660A 00
 2441               		.section	.progmem.data.__c.4955,"a",@progbits
 2444               	__c.4955:
 2445 0000 4E4B 524F 		.string	"NKRO: on\n"
 2445      3A20 6F6E 
 2445      0A00 
 2446               		.section	.progmem.data.__c.4952,"a",@progbits
 2449               	__c.4952:
 2450 0000 7469 6D65 		.string	"timer_count: %04lX\n"
 2450      725F 636F 
 2450      756E 743A 
 2450      2025 3034 
 2450      6C58 0A00 
 2451               		.section	.progmem.data.__c.4950,"a",@progbits
 2454               	__c.4950:
 2455 0000 6B65 7962 		.string	"keyboard_nkro: %X\n"
 2455      6F61 7264 
 2455      5F6E 6B72 
 2455      6F3A 2025 
 2455      580A 00
 2456               		.section	.progmem.data.__c.4948,"a",@progbits
 2459               	__c.4948:
 2460 0000 6B65 7962 		.string	"keyboard_idle: %X\n"
 2460      6F61 7264 
 2460      5F69 646C 
 2460      653A 2025 
 2460      580A 00
 2461               		.section	.progmem.data.__c.4946,"a",@progbits
 2464               	__c.4946:
 2465 0000 6B65 7962 		.string	"keyboard_protocol: %X\n"
 2465      6F61 7264 
 2465      5F70 726F 
 2465      746F 636F 
 2465      6C3A 2025 
 2466               		.section	.progmem.data.__c.4944,"a",@progbits
 2469               	__c.4944:
 2470 0000 686F 7374 		.string	"host_keyboard_leds(): %X\n"
 2470      5F6B 6579 
 2470      626F 6172 
 2470      645F 6C65 
 2470      6473 2829 
 2471               		.section	.progmem.data.__c.4942,"a",@progbits
 2474               	__c.4942:
 2475 0000 0A09 2D20 		.string	"\n\t- Status -\n"
 2475      5374 6174 
 2475      7573 202D 
 2475      0A00 
 2476               		.section	.progmem.data.__c.4939,"a",@progbits
 2479               	__c.4939:
 2480 0000 4743 433A 		.string	"GCC: 4.8.1 AVR-LIBC: 1.8.0svn AVR_ARCH: avr5\n"
 2480      2034 2E38 
 2480      2E31 2041 
 2480      5652 2D4C 
 2480      4942 433A 
 2481               		.section	.progmem.data.__c.4937,"a",@progbits
 2484               	__c.4937:
 2485 0000 4F50 5449 		.string	"OPTIONS: LUFA BOOTMAGIC MOUSEKEY EXTRAKEY CONSOLE COMMAND NKRO 512\n"
 2485      4F4E 533A 
 2485      204C 5546 
 2485      4120 424F 
 2485      4F54 4D41 
 2486               		.section	.progmem.data.__c.4935,"a",@progbits
 2489               	__c.4935:
 2490 0000 4255 494C 		.string	"BUILD: 0f2c773 (21:30:13 Jan  8 2016)\n"
 2490      443A 2030 
 2490      6632 6337 
 2490      3733 2028 
 2490      3231 3A33 
 2491               		.section	.progmem.data.__c.4933,"a",@progbits
 2494               	__c.4933:
 2495 0000 5649 443A 		.string	"VID: 0xFEED(ErgoDox EZ) PID: 0x1307(ErgoDox EZ) VER: 0x0001\n"
 2495      2030 7846 
 2495      4545 4428 
 2495      4572 676F 
 2495      446F 7820 
 2496               		.section	.progmem.data.__c.4931,"a",@progbits
 2499               	__c.4931:
 2500 0000 4445 5343 		.string	"DESC: t.m.k. keyboard firmware for Ergodox\n"
 2500      3A20 742E 
 2500      6D2E 6B2E 
 2500      206B 6579 
 2500      626F 6172 
 2501               		.section	.progmem.data.__c.4929,"a",@progbits
 2504               	__c.4929:
 2505 0000 0A09 2D20 		.string	"\n\t- Version -\n"
 2505      5665 7273 
 2505      696F 6E20 
 2505      2D0A 00
 2506               		.section	.progmem.data.__c.4926,"a",@progbits
 2509               	__c.4926:
 2510 0000 0A6D 6F75 		.string	"\nmouse: off\n"
 2510      7365 3A20 
 2510      6F66 660A 
 2510      00
 2511               		.section	.progmem.data.__c.4924,"a",@progbits
 2514               	__c.4924:
 2515 0000 0A6D 6F75 		.string	"\nmouse: on\n"
 2515      7365 3A20 
 2515      6F6E 0A00 
 2516               		.section	.progmem.data.__c.4921,"a",@progbits
 2519               	__c.4921:
 2520 0000 0A6B 6579 		.string	"\nkeyboard: off\n"
 2520      626F 6172 
 2520      643A 206F 
 2520      6666 0A00 
 2521               		.section	.progmem.data.__c.4919,"a",@progbits
 2524               	__c.4919:
 2525 0000 0A6B 6579 		.string	"\nkeyboard: on\n"
 2525      626F 6172 
 2525      643A 206F 
 2525      6E0A 00
 2526               		.section	.progmem.data.__c.4916,"a",@progbits
 2529               	__c.4916:
 2530 0000 0A6D 6174 		.string	"\nmatrix: off\n"
 2530      7269 783A 
 2530      206F 6666 
 2530      0A00 
 2531               		.section	.progmem.data.__c.4914,"a",@progbits
 2534               	__c.4914:
 2535 0000 0A6D 6174 		.string	"\nmatrix: on\n"
 2535      7269 783A 
 2535      206F 6E0A 
 2535      00
 2536               		.section	.progmem.data.__c.4911,"a",@progbits
 2539               	__c.4911:
 2540 0000 0A64 6562 		.string	"\ndebug: on\n"
 2540      7567 3A20 
 2540      6F6E 0A00 
 2541               		.section	.progmem.data.__c.4909,"a",@progbits
 2544               	__c.4909:
 2545 0000 0A64 6562 		.string	"\ndebug: off\n"
 2545      7567 3A20 
 2545      6F66 660A 
 2545      00
 2546               		.section	.progmem.data.__c.4906,"a",@progbits
 2549               	__c.4906:
 2550 0000 0A0A 626F 		.string	"\n\nbootloader... "
 2550      6F74 6C6F 
 2550      6164 6572 
 2550      2E2E 2E20 
 2550      00
 2551               		.section	.progmem.data.__c.4903,"a",@progbits
 2554               	__c.4903:
 2555 0000 433E 2000 		.string	"C> "
 2556               		.section	.progmem.data.__c.4898,"a",@progbits
 2559               	__c.4898:
 2560 0000 6565 636F 		.string	"eeconfig:\n"
 2560      6E66 6967 
 2560      3A0A 00
 2561               		.section	.progmem.data.__c.4894,"a",@progbits
 2564               	__c.4894:
 2565 0000 536C 6565 		.string	"Sleep LED test\n"
 2565      7020 4C45 
 2565      4420 7465 
 2565      7374 0A00 
 2566               		.section	.bss.mousekey_param,"aw",@nobits
 2569               	mousekey_param:
 2570 0000 00        		.zero	1
 2571               	.global	command_state
 2572               		.section	.bss.command_state,"aw",@nobits
 2575               	command_state:
 2576 0000 00        		.zero	1
 2577               		.comm	keymap_config,1,1
 2578               		.text
 2579               	.Letext0:
 2580               		.file 3 "/usr/local/CrossPack-AVR-20131216/avr/include/stdint.h"
 2581               		.file 4 "../../tmk_core/common/report.h"
 2582               		.file 5 "../../tmk_core/common/host_driver.h"
 2583               		.file 6 "../../tmk_core/common/keymap.h"
 2584               		.file 7 "../../tmk_core/common/debug.h"
 2585               		.file 8 "../../tmk_core/common/command.h"
 2586               		.file 9 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 2587               		.file 10 "../../tmk_core/common/host.h"
 2588               		.file 11 "../../tmk_core/common/timer.h"
 2589               		.file 12 "../../tmk_core/common/action_util.h"
 2590               		.file 13 "../../tmk_core/common/mousekey.h"
 2591               		.file 14 "../../tmk_core/common/avr/xprintf.h"
 2592               		.file 15 "../../tmk_core/common/action_layer.h"
 2593               		.file 16 "../../tmk_core/common/action.h"
 2594               		.file 17 "../../tmk_core/common/keycode.h"
DEFINED SYMBOLS
                            *ABS*:00000000 command.c
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2      *ABS*:0000003e __SP_H__
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:3      *ABS*:0000003d __SP_L__
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:4      *ABS*:0000003f __SREG__
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:6      *ABS*:00000001 __zero_reg__
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:12     .text.mousekey_console_help:00000000 mousekey_console_help
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2174   .progmem.data.__c.5080:00000000 __c.5080
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2169   .progmem.data.__c.5082:00000000 __c.5082
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:65     .text.mousekey_param_inc:00000000 mousekey_param_inc
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2044   .progmem.data.__c.5036:00000000 __c.5036
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2039   .progmem.data.__c.5040:00000000 __c.5040
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2034   .progmem.data.__c.5043:00000000 __c.5043
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2029   .progmem.data.__c.5046:00000000 __c.5046
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2024   .progmem.data.__c.5049:00000000 __c.5049
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2019   .progmem.data.__c.5052:00000000 __c.5052
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:338    .text.mousekey_param_dec:00000000 mousekey_param_dec
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2014   .progmem.data.__c.5059:00000000 __c.5059
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2009   .progmem.data.__c.5063:00000000 __c.5063
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2004   .progmem.data.__c.5066:00000000 __c.5066
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:1999   .progmem.data.__c.5069:00000000 __c.5069
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:1994   .progmem.data.__c.5072:00000000 __c.5072
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:1989   .progmem.data.__c.5075:00000000 __c.5075
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:556    .text.switch_default_layer:00000000 switch_default_layer
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2194   .progmem.data.__c.5131:00000000 __c.5131
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:622    .text.command_common:00000000 command_common
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2199   .progmem.data.__c.4971:00000000 __c.4971
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2554   .progmem.data.__c.4903:00000000 __c.4903
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2575   .bss.command_state:00000000 command_state
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2549   .progmem.data.__c.4906:00000000 __c.4906
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2564   .progmem.data.__c.4894:00000000 __c.4894
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2559   .progmem.data.__c.4898:00000000 __c.4898
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2429   .progmem.data.__c.4797:00000000 __c.4797
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2424   .progmem.data.__c.4799:00000000 __c.4799
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2419   .progmem.data.__c.4801:00000000 __c.4801
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2414   .progmem.data.__c.4804:00000000 __c.4804
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2409   .progmem.data.__c.4806:00000000 __c.4806
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2404   .progmem.data.__c.4808:00000000 __c.4808
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2399   .progmem.data.__c.4810:00000000 __c.4810
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2394   .progmem.data.__c.4812:00000000 __c.4812
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2389   .progmem.data.__c.4814:00000000 __c.4814
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2384   .progmem.data.__c.4816:00000000 __c.4816
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2379   .progmem.data.__c.4818:00000000 __c.4818
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2374   .progmem.data.__c.4820:00000000 __c.4820
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2369   .progmem.data.__c.4822:00000000 __c.4822
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2364   .progmem.data.__c.4824:00000000 __c.4824
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2359   .progmem.data.__c.4826:00000000 __c.4826
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2354   .progmem.data.__c.4828:00000000 __c.4828
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2349   .progmem.data.__c.4830:00000000 __c.4830
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2344   .progmem.data.__c.4832:00000000 __c.4832
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2339   .progmem.data.__c.4835:00000000 __c.4835
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2334   .progmem.data.__c.4837:00000000 __c.4837
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2329   .progmem.data.__c.4839:00000000 __c.4839
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2324   .progmem.data.__c.4841:00000000 __c.4841
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2319   .progmem.data.__c.4843:00000000 __c.4843
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2314   .progmem.data.__c.4845:00000000 __c.4845
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2309   .progmem.data.__c.4847:00000000 __c.4847
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2304   .progmem.data.__c.4849:00000000 __c.4849
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2299   .progmem.data.__c.4851:00000000 __c.4851
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2294   .progmem.data.__c.4853:00000000 __c.4853
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2289   .progmem.data.__c.4855:00000000 __c.4855
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2284   .progmem.data.__c.4857:00000000 __c.4857
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2279   .progmem.data.__c.4859:00000000 __c.4859
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2274   .progmem.data.__c.4861:00000000 __c.4861
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2269   .progmem.data.__c.4863:00000000 __c.4863
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2264   .progmem.data.__c.4865:00000000 __c.4865
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2259   .progmem.data.__c.4867:00000000 __c.4867
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2254   .progmem.data.__c.4869:00000000 __c.4869
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2249   .progmem.data.__c.4871:00000000 __c.4871
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2244   .progmem.data.__c.4873:00000000 __c.4873
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2239   .progmem.data.__c.4875:00000000 __c.4875
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2234   .progmem.data.__c.4877:00000000 __c.4877
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2229   .progmem.data.__c.4879:00000000 __c.4879
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2224   .progmem.data.__c.4881:00000000 __c.4881
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2219   .progmem.data.__c.4883:00000000 __c.4883
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2214   .progmem.data.__c.4885:00000000 __c.4885
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2209   .progmem.data.__c.4887:00000000 __c.4887
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2204   .progmem.data.__c.4792:00000000 __c.4792
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2544   .progmem.data.__c.4909:00000000 __c.4909
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2539   .progmem.data.__c.4911:00000000 __c.4911
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2534   .progmem.data.__c.4914:00000000 __c.4914
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2529   .progmem.data.__c.4916:00000000 __c.4916
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2524   .progmem.data.__c.4919:00000000 __c.4919
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2519   .progmem.data.__c.4921:00000000 __c.4921
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2514   .progmem.data.__c.4924:00000000 __c.4924
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2509   .progmem.data.__c.4926:00000000 __c.4926
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2504   .progmem.data.__c.4929:00000000 __c.4929
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2499   .progmem.data.__c.4931:00000000 __c.4931
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2494   .progmem.data.__c.4933:00000000 __c.4933
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2489   .progmem.data.__c.4935:00000000 __c.4935
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2484   .progmem.data.__c.4937:00000000 __c.4937
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2479   .progmem.data.__c.4939:00000000 __c.4939
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2474   .progmem.data.__c.4942:00000000 __c.4942
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2469   .progmem.data.__c.4944:00000000 __c.4944
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2464   .progmem.data.__c.4946:00000000 __c.4946
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2459   .progmem.data.__c.4948:00000000 __c.4948
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2454   .progmem.data.__c.4950:00000000 __c.4950
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2449   .progmem.data.__c.4952:00000000 __c.4952
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2444   .progmem.data.__c.4955:00000000 __c.4955
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2439   .progmem.data.__c.4957:00000000 __c.4957
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2434   .progmem.data.__c.4966:00000000 __c.4966
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:1475   .text.command_extra:00000000 command_extra
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:1494   .text.command_console_extra:00000000 command_console_extra
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:1513   .text.command_proc:00000000 command_proc
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2184   .progmem.data.__c.4982:00000000 __c.4982
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2189   .progmem.data.__c.4987:00000000 __c.4987
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2179   .progmem.data.__c.4985:00000000 __c.4985
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2159   .progmem.data.__c.5106:00000000 __c.5106
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2569   .bss.mousekey_param:00000000 mousekey_param
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2164   .progmem.data.__c.5092:00000000 __c.5092
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2139   .progmem.data.__c.4993:00000000 __c.4993
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2134   .progmem.data.__c.4995:00000000 __c.4995
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2129   .progmem.data.__c.4997:00000000 __c.4997
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2124   .progmem.data.__c.4999:00000000 __c.4999
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2119   .progmem.data.__c.5001:00000000 __c.5001
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2114   .progmem.data.__c.5003:00000000 __c.5003
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2109   .progmem.data.__c.5005:00000000 __c.5005
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2104   .progmem.data.__c.5007:00000000 __c.5007
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2099   .progmem.data.__c.5009:00000000 __c.5009
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2094   .progmem.data.__c.5011:00000000 __c.5011
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2089   .progmem.data.__c.5013:00000000 __c.5013
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2084   .progmem.data.__c.5015:00000000 __c.5015
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2079   .progmem.data.__c.5017:00000000 __c.5017
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2074   .progmem.data.__c.5019:00000000 __c.5019
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2069   .progmem.data.__c.5021:00000000 __c.5021
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2064   .progmem.data.__c.5023:00000000 __c.5023
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2059   .progmem.data.__c.5025:00000000 __c.5025
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2054   .progmem.data.__c.5027:00000000 __c.5027
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2049   .progmem.data.__c.5029:00000000 __c.5029
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:1975   .rodata.CSWTCH.44:00000000 CSWTCH.44
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2154   .progmem.data.__c.5109:00000000 __c.5109
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2149   .progmem.data.__c.5111:00000000 __c.5111
/var/folders/1b/xfvjmdyj6l31z1llzpnz5cwr0000gn/T//ccLxrLZs.s:2144   .progmem.data.__c.5113:00000000 __c.5113
                            *COM*:00000001 keymap_config

UNDEFINED SYMBOLS
xputs
__xprintf
mk_delay
mk_interval
mk_max_speed
mk_time_to_max
mk_wheel_max_speed
mk_wheel_time_to_max
default_layer_set
clear_keyboard
debug_config
bootloader_jump
sleep_led_toggle
host_keyboard_leds
led_set
eeconfig_read_default_layer
eeconfig_read_debug
eeconfig_read_keymap
keyboard_protocol
keyboard_idle
keyboard_nkro
timer_count
keyboard_report
__do_copy_data
__do_clear_bss
