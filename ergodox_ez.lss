
ergodox_ez.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00005bca  00005c5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005bca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000bf  0080013a  0080013a  00005c98  2**0
                  ALLOC
  3 .noinit       00000004  008001f9  008001f9  00005c98  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  00005c98  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000000a0  00000000  00000000  00006550  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  000065f0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000bd8  00000000  00000000  00006608  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00012599  00000000  00000000  000071e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004772  00000000  00000000  00019779  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000061e7  00000000  00000000  0001deeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001d6c  00000000  00000000  000240d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00004913  00000000  00000000  00025e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00009736  00000000  00000000  0002a753  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000d58  00000000  00000000  00033e89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__ctors_end>
       4:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>
       8:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>
       c:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>
      10:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>
      14:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>
      18:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>
      1c:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>
      20:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>
      24:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>
      28:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__vector_10>
      2c:	0c 94 41 13 	jmp	0x2682	; 0x2682 <__vector_11>
      30:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>
      34:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>
      3c:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>
      40:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>
      44:	0c 94 17 2c 	jmp	0x582e	; 0x582e <__vector_17>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      48:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>
      4c:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>
      50:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	0c 94 1e 22 	jmp	0x443c	; 0x443c <__vector_21>
      58:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>
      5c:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>
      60:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      64:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>
      68:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>

	ParserData->TotalDeviceReports = 1;
      6c:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>
      70:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>
      74:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>
      78:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>
      7c:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>
      84:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>
      88:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      90:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>
      94:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
      98:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      9c:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>
      a0:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>
      a4:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      a8:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__bad_interrupt>
      ac:	a6 13       	cpse	r26, r22
      ae:	c8 13       	cpse	r28, r24
      b0:	b3 14       	cp	r11, r3
      b2:	c8 13       	cpse	r28, r24
      b4:	b3 14       	cp	r11, r3
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      b6:	0a 14       	cp	r0, r10
      b8:	2d 14       	cp	r2, r13
      ba:	b3 14       	cp	r11, r3
      bc:	82 14       	cp	r8, r2
      be:	95 14       	cp	r9, r5
      c0:	e3 17       	cp	r30, r19
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      c2:	e3 17       	cp	r30, r19
      c4:	11 18       	sub	r1, r1
      c6:	11 18       	sub	r1, r1
      c8:	54 18       	sub	r5, r4
      ca:	90 18       	sub	r9, r0
      cc:	91 1a       	sub	r9, r17
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      ce:	91 1a       	sub	r9, r17
      d0:	a8 18       	sub	r10, r8
      d2:	91 1a       	sub	r9, r17
      d4:	9f 19       	sub	r25, r15
	{
		uint8_t  HIDReportItem  = *ReportData;
      d6:	9f 19       	sub	r25, r15
      d8:	6b 1a       	sub	r6, r27
      da:	91 1a       	sub	r9, r17
      dc:	91 1a       	sub	r9, r17
      de:	7f 1a       	sub	r7, r31

000000e0 <__trampolines_end>:
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      e0:	01 e0       	ldi	r16, 0x01	; 1
      e2:	01 04       	cpc	r0, r1
      e4:	02 04       	cpc	r0, r2
      e6:	02 e0       	ldi	r16, 0x02	; 2
      e8:	00 00       	nop

000000e9 <fn_actions>:
      e9:	00 00 f0 a1                                         ....

000000ed <keymaps>:
      ed:	35 00 2b 00 e0 00 e1 00 01 30 00 00 1e 00 14 00     5.+......0......
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
      fd:	04 00 1d 71 29 00 4d 00 1f 00 1a 00 16 00 1b 00     ...q).M.........
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     10d:	e1 04 2a 00 20 00 08 00 07 00 06 00 50 00 2c 00     ..*. .......P.,.
     11d:	21 00 15 00 09 00 19 74 4f 00 4a 00 22 00 17 00     !......tO.J."...
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     12d:	0a 00 05 78 00 00 e2 00 34 00 2d 00 00 00 00 7f     ...x....4.-.....
				ReportSize     -= 4;
     13d:	00 00 e3 00 01 54 2e 00 00 00 00 77 00 00 29 00     .....T.....w..).
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     14d:	23 00 1c 00 0b 00 11 78 00 00 e6 00 24 00 18 00     #......x....$...
				ReportSize     -= 2;
     15d:	0d 00 10 74 52 00 4b 00 25 00 0c 00 0e 00 36 00     ...tR.K.%.....6.
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     16d:	51 00 28 00 26 00 12 00 0f 00 37 00 2f 00 2b 00     Q.(.&.....7./.+.
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     17d:	27 00 13 00 33 82 38 71 30 00 4e 00 2a 00 31 00     '...3.8q0.N.*.1.
     18d:	e3 00 e5 00 34 00 00 00 01 00 01 00 01 00 01 00     ....4...........
     19d:	01 00 00 00 3a 00 1e 02 20 02 22 02 01 00 01 00     ....:... .".....
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;
     1ad:	3b 00 1f 02 21 02 23 02 01 00 01 00 3c 00 2f 02     ;...!.#.....<./.
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1bd:	26 02 2f 00 01 00 01 00 3d 00 30 02 27 02 30 00     &./.....=.0.'.0.
     1cd:	01 00 01 00 3e 00 31 02 35 00 35 02 00 00 01 00     ....>.1.5.5.....
     1dd:	01 00 01 00 00 00 01 00 00 00 01 00 01 00 01 00     ................
     1ed:	00 00 01 00 00 00 01 00 3f 00 52 00 51 00 24 02     ........?.R.Q.$.
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     1fd:	00 00 01 00 40 00 24 00 21 00 1e 00 01 00 01 00     ....@.$.!.......
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     20d:	41 00 25 00 22 00 1f 00 37 00 01 00 42 00 26 00     A.%."...7...B.&.
     21d:	23 00 20 00 27 00 01 00 43 00 25 02 2e 02 31 00     #. .'...C.%...1.
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     22d:	2e 00 01 00 44 00 45 00 01 00 01 00 01 00 00 00     ....D.E.........
     23d:	46 00 01 00 01 00 01 00 01 00 00 00 01 00 a6 00     F...............
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     24d:	01 00 01 00 01 00 01 00 01 00 01 00 50 00 01 00     ............P...
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     25d:	01 00 01 00 01 00 52 00 51 00 01 00 f4 00 01 00     ......R.Q.......

				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     26d:	01 00 01 00 4f 00 01 00 f5 00 01 00 01 00 01 00     ....O...........
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
				break;
     27d:	01 00 01 00 00 00 01 00 01 00 01 00 00 00 01 00     ................
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     28d:	00 00 01 00 01 00 01 00 00 00 01 00 00 00 01 00     ................
				break;

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     29d:	01 00 01 00 01 00 01 00 00 00 01 00 01 00 01 00     ................
				break;

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2ad:	01 00 01 00 a9 00 01 00 01 00 01 00 01 00 ac 00     ................
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2bd:	aa 00 b6 00 01 00 01 00 01 00 ab 00 a8 00 01 00     ................
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
     2cd:	01 00 01 00 01 00 01 00 01 00 01 00 01 00 01 00     ................

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
     2dd:	ae 00 01 00 01 00 00 00                             ........

000002e5 <__c.4827>:
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2e5:	0a 00                                               ..

000002e7 <__c.4825>:
     2e7:	25 30 31 36 62 00                                   %016b.

000002ed <__c.4823>:
     2ed:	3a 20 00                                            : .

000002f0 <__c.4821>:
     2f0:	25 30 32 58 00                                      %02X.

000002f5 <__c.4818>:
     2f5:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41     .r/c 0123456789A
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     305:	42 43 44 45 46 0a 00                                BCDEF..

0000030c <__c.4796>:
     30c:	0a 00                                               ..

0000030e <__c.4794>:
     30e:	25 30 32 58 00                                      %02X.

00000313 <__c.4792>:
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     313:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

0000031d <__c.4788>:
     31d:	6c 65 66 74 20 73 69 64 65 20 61 74 74 61 63 68     left side attach
     32d:	65 64 0a 00                                         ed..

00000331 <__c.4786>:
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     331:	6c 65 66 74 20 73 69 64 65 20 6e 6f 74 20 72 65     left side not re
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     341:	73 70 6f 6e 64 69 6e 67 0a 00                       sponding..

0000034b <__c.4784>:
     34b:	74 72 79 69 6e 67 20 74 6f 20 72 65 73 65 74 20     trying to reset 
     35b:	6d 63 70 32 33 30 31 38 0a 00                       mcp23018..

00000365 <__c.4651>:
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
					}
				}

				ParserData->UsingReportIDs = true;
     365:	0a 44 45 42 55 47 3a 20 65 6e 61 62 6c 65 64 2e     .DEBUG: enabled.

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     375:	0a 00                                               ..

00000377 <__c.4748>:
     377:	5b 73 5d 00                                         [s].

0000037b <__c.4746>:
     37b:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38b:	00                                                  .

0000038c <__c.4647>:
     38c:	5b 57 5d 00                                         [W].

00000390 <__c.4643>:
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     390:	5b 53 5d 00                                         [S].

00000394 <__c.4639>:
     394:	5b 52 5d 00                                         [R].

00000398 <__c.4634>:
     398:	5b 44 5d 00                                         [D].

0000039c <__c.4629>:
     39c:	5b 43 5d 00                                         [C].

000003a0 <ProductString>:
     3a0:	16 03 45 00 72 00 67 00 6f 00 44 00 6f 00 78 00     ..E.r.g.o.D.o.x.
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b0:	20 00 45 00 5a 00 00 00                              .E.Z...

000003b8 <ManufacturerString>:
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3b8:	16 03 45 00 72 00 67 00 6f 00 44 00 6f 00 78 00     ..E.r.g.o.D.o.x.
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3c8:	20 00 45 00 5a 00 00 00                              .E.Z...

000003d0 <LanguageString>:

					while (CurrCollectionPath->Parent != NULL)
     3d0:	04 03 09 04                                         ....

000003d4 <ConfigurationDescriptor>:
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3d4:	09 02 8d 00 05 01 00 a0 fa 09 04 00 00 01 03 01     ................
     3e4:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f4:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
				}

				CurrCollectionPath->Type       = ReportItemData;
     404:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     414:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     424:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
     434:	01 00 01 22 20 00 07 05 84 03 20 00 01 07 05 04     ..." ..... .....

					for (uint8_t i = 1; i < UsageListSize; i++)
					  UsageList[i - 1] = UsageList[i];
     444:	03 20 00 01 09 04 04 00 01 03 00 00 00 09 21 11     . ............!.

					UsageListSize--;
     454:	01 00 01 22 39 00 07 05 85 03 10 00 01              ..."9........

00000461 <DeviceDescriptor>:
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     461:	12 01 10 01 00 00 00 08 ed fe 07 13 01 00 01 02     ................
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     471:	00 01                                               ..

00000473 <NKROReport>:
     473:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     483:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     493:	91 02 95 01 75 03 91 01 05 07 19 00 29 77 15 00     ....u.......)w..
     4a3:	25 01 95 78 75 01 81 02 c0                          %..xu....

000004ac <ConsoleReport>:
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ac:	06 31 ff 09 74 a1 01 09 75 15 00 25 ff 95 20 75     .1..t...u..%.. u
     4bc:	08 81 02 09 76 15 00 25 ff 95 20 75 08 91 02 c0     ....v..%.. u....

000004cc <ExtrakeyReport>:
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4cc:	05 01 09 80 a1 01 85 02 16 01 00 26 b7 00 1a 01     ...........&....
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4dc:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4ec:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     4fc:	10 95 01 81 00 c0                                   ......

00000502 <MouseReport>:
					NewReportItem.CollectionPath = CurrCollectionPath;
     502:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     512:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     522:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     532:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8

						for (uint8_t i = 1; i < UsageListSize; i++)
						  UsageList[i - 1] = UsageList[i];
     542:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

0000054f <KeyboardReport>:

						UsageListSize--;
     54f:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     55f:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56f:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     57f:	19 00 29 ff 15 00 25 ff 95 06 75 08 81 00 c0        ..)...%...u....

0000058e <__c.4396>:
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     58e:	0a 00                                               ..

00000590 <__c.4391>:
     590:	25 30 32 58 20 00                                   %02X .

00000596 <__c.4388>:
     596:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5a6:	20 00                                                .

000005a8 <__c.4737>:
     5a8:	0a 00                                               ..

000005aa <__c.4735>:
     5aa:	25 30 32 58 00                                      %02X.

000005af <__c.4733>:
     5af:	6b 65 79 62 6f 61 72 64 5f 73 65 74 5f 6c 65 64     keyboard_set_led

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5bf:	3a 20 00                                            : .

000005c2 <__c.4536>:
     5c2:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can
     5d2:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

000005e0 <__c.4531>:
     5e0:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f0:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

000005fe <__c.4677>:
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     5fe:	64 6f 6e 65 2e 0a 00                                done...

00000605 <__c.4671>:
     605:	62 6f 6f 67 6d 61 67 69 63 20 73 63 61 6e 3a 20     boogmagic scan: 
     615:	2e 2e 2e 20 00                                      ... .

0000061a <__c.4468>:
     61a:	29 0a 00                                            )..

0000061d <__c.4466>:
     61d:	25 75 00                                            %u.

00000620 <__c.4464>:
     620:	2f 00                                               /.

00000622 <__c.4462>:
     622:	25 75 00                                            %u.

00000625 <__c.4460>:
     625:	5d 28 00                                            ](.

00000628 <__c.4458>:
     628:	25 64 00                                            %d.

0000062b <__c.4456>:
     62b:	20 00                                                .

0000062d <__c.4454>:
     62d:	25 64 00                                            %d.

00000630 <__c.4452>:
     630:	20 00                                                .

00000632 <__c.4450>:
     632:	25 64 00                                            %d.

00000635 <__c.4448>:
     635:	20 00                                                .

00000637 <__c.4446>:
     637:	25 64 00                                            %d.

0000063a <__c.4444>:
     63a:	7c 00                                               |.

0000063c <__c.4442>:
     63c:	25 30 32 58 00                                      %02X.

00000641 <__c.4440>:
     641:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     651:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     661:	20 5b 00                                             [.

00000664 <__c.5075>:
     664:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     674:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

0000067f <__c.5072>:
     67f:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     68f:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000698 <__c.5069>:
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     698:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
			UsageListSize       = 0;
     6a8:	20 25 64 0a 00                                       %d..

000006ad <__c.5066>:
		}
	}

	if (!(ParserData->TotalReportItems))
     6ad:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6bd:	64 0a 00                                            d..

000006c0 <__c.5063>:
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c0:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d0:	0a 00                                               ..

000006d2 <__c.5059>:
     6d2:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

000006e1 <__c.5052>:
     6e1:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     6f1:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

000006fc <__c.5049>:
     6fc:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     70c:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000715 <__c.5046>:
     715:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     725:	20 25 64 0a 00                                       %d..

0000072a <__c.5043>:
     72a:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     73a:	64 0a 00                                            d..

0000073d <__c.5040>:
     73d:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     74d:	0a 00                                               ..

0000074f <__c.5036>:
     74f:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

0000075e <__c.5029>:
     75e:	0a 00                                               ..

00000760 <__c.5027>:
     760:	25 75 00                                            %u.

00000763 <__c.5025>:
     763:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     773:	5f 6d 61 78 3a 20 00                                _max: .

0000077a <__c.5023>:
     77a:	0a 00                                               ..

0000077c <__c.5021>:
     77c:	25 75 00                                            %u.

0000077f <__c.5019>:
     77f:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     78f:	65 64 3a 20 00                                      ed: .

00000794 <__c.5017>:
     794:	0a 00                                               ..

00000796 <__c.5015>:
     796:	25 75 00                                            %u.

00000799 <__c.5013>:
     799:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     7a9:	00                                                  .

000007aa <__c.5011>:
     7aa:	0a 00                                               ..

000007ac <__c.5009>:
     7ac:	25 75 00                                            %u.

000007af <__c.5007>:
     7af:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

000007be <__c.5005>:
     7be:	0a 00                                               ..

000007c0 <__c.5003>:
     7c0:	25 75 00                                            %u.

000007c3 <__c.5001>:
     7c3:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     7d3:	20 00                                                .

000007d5 <__c.4999>:
     7d5:	0a 00                                               ..

000007d7 <__c.4997>:
     7d7:	25 75 00                                            %u.

000007da <__c.4995>:
     7da:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     7ea:	20 00                                                .

000007ec <__c.4993>:
     7ec:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

000007fa <__c.5113>:
     7fa:	4d 3e 00                                            M>.

000007fd <__c.5111>:
     7fd:	4d 25 64 3e 20 00                                   M%d> .

00000803 <__c.5109>:
     803:	3f 00                                               ?.

00000805 <__c.5106>:
     805:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

00000812 <__c.5092>:
     812:	43 3e 20 00                                         C> .

00000816 <__c.5082>:
     816:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     826:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     836:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     846:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     856:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

00000864 <__c.5080>:
     864:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     874:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     884:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     894:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     8a4:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     8b4:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     8c4:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     8d4:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     8e4:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     8f4:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     904:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     914:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     924:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     934:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     944:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     954:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

0000095f <__c.4985>:
     95f:	3f 00                                               ?.

00000961 <__c.4982>:
     961:	4d 3e 20 00                                         M> .

00000965 <__c.4987>:
     965:	43 3e 20 00                                         C> .

00000969 <__c.5131>:
     969:	4c 25 64 0a 00                                      L%d..

0000096e <__c.4971>:
     96e:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     97e:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     98e:	73 65 6b 65 79 0a 00                                sekey..

00000995 <__c.4792>:
     995:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     9a5:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     9b5:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     9c5:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     9d5:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     9e5:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     9f5:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     a05:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     a15:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     a25:	72 0a 65 3a 09 65 65 70 72 6f 6d 0a 6e 3a 09 4e     r.e:.eeprom.n:.N
     a35:	4b 52 4f 0a 7a 3a 09 73 6c 65 65 70 20 4c 45 44     KRO.z:.sleep LED
     a45:	20 74 65 73 74 0a 00                                 test..

00000a4c <__c.4887>:
     a4c:	0a 00                                               ..

00000a4e <__c.4885>:
     a4e:	25 75 00                                            %u.

00000a51 <__c.4883>:
     a51:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

00000a59 <__c.4881>:
     a59:	0a 00                                               ..

00000a5b <__c.4879>:
     a5b:	25 75 00                                            %u.

00000a5e <__c.4877>:
     a5e:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     a6e:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

00000a7a <__c.4875>:
     a7a:	0a 00                                               ..

00000a7c <__c.4873>:
     a7c:	25 75 00                                            %u.

00000a7f <__c.4871>:
     a7f:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     a8f:	20 00                                                .

00000a91 <__c.4869>:
     a91:	0a 00                                               ..

00000a93 <__c.4867>:
     a93:	25 75 00                                            %u.

00000a96 <__c.4865>:
     a96:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

00000aa0 <__c.4863>:
     aa0:	0a 00                                               ..

00000aa2 <__c.4861>:
     aa2:	25 75 00                                            %u.

00000aa5 <__c.4859>:
     aa5:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     ab5:	20 00                                                .

00000ab7 <__c.4857>:
     ab7:	0a 00                                               ..

00000ab9 <__c.4855>:
     ab9:	25 75 00                                            %u.

00000abc <__c.4853>:
     abc:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     acc:	20 00                                                .

00000ace <__c.4851>:
     ace:	0a 00                                               ..

00000ad0 <__c.4849>:
     ad0:	25 75 00                                            %u.

00000ad3 <__c.4847>:
     ad3:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     ae3:	74 72 6f 6c 3a 20 00                                trol: .

00000aea <__c.4845>:
     aea:	0a 00                                               ..

00000aec <__c.4843>:
     aec:	25 75 00                                            %u.

00000aef <__c.4841>:
     aef:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     aff:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

00000b08 <__c.4839>:
     b08:	0a 00                                               ..

00000b0a <__c.4837>:
     b0a:	25 30 32 58 00                                      %02X.

00000b0f <__c.4835>:
     b0f:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     b1f:	77 3a 20 00                                         w: .

00000b23 <__c.4832>:
     b23:	0a 00                                               ..

00000b25 <__c.4830>:
     b25:	25 75 00                                            %u.

00000b28 <__c.4828>:
     b28:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

00000b31 <__c.4826>:
     b31:	0a 00                                               ..

00000b33 <__c.4824>:
     b33:	25 75 00                                            %u.

00000b36 <__c.4822>:
     b36:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

00000b42 <__c.4820>:
     b42:	0a 00                                               ..

00000b44 <__c.4818>:
     b44:	25 75 00                                            %u.

00000b47 <__c.4816>:
     b47:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

00000b51 <__c.4814>:
     b51:	0a 00                                               ..

00000b53 <__c.4812>:
     b53:	25 75 00                                            %u.

00000b56 <__c.4810>:
     b56:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

00000b60 <__c.4808>:
     b60:	0a 00                                               ..

00000b62 <__c.4806>:
     b62:	25 30 32 58 00                                      %02X.

00000b67 <__c.4804>:
     b67:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     b77:	3a 20 00                                            : .

00000b7a <__c.4801>:
     b7a:	0a 00                                               ..

00000b7c <__c.4799>:
     b7c:	25 75 00                                            %u.

00000b7f <__c.4797>:
     b7f:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

00000b8f <__c.4966>:
     b8f:	3f 00                                               ?.

00000b91 <__c.4957>:
     b91:	4e 4b 52 4f 3a 20 6f 66 66 0a 00                    NKRO: off..

00000b9c <__c.4955>:
     b9c:	4e 4b 52 4f 3a 20 6f 6e 0a 00                       NKRO: on..

00000ba6 <__c.4952>:
     ba6:	74 69 6d 65 72 5f 63 6f 75 6e 74 3a 20 25 30 34     timer_count: %04
     bb6:	6c 58 0a 00                                         lX..

00000bba <__c.4950>:
     bba:	6b 65 79 62 6f 61 72 64 5f 6e 6b 72 6f 3a 20 25     keyboard_nkro: %
     bca:	58 0a 00                                            X..

00000bcd <__c.4948>:
     bcd:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     bdd:	58 0a 00                                            X..

00000be0 <__c.4946>:
     be0:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     bf0:	6c 3a 20 25 58 0a 00                                l: %X..

00000bf7 <__c.4944>:
     bf7:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     c07:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000c11 <__c.4942>:
     c11:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

00000c1f <__c.4939>:
     c1f:	47 43 43 3a 20 34 2e 38 2e 31 20 41 56 52 2d 4c     GCC: 4.8.1 AVR-L
     c2f:	49 42 43 3a 20 31 2e 38 2e 30 73 76 6e 20 41 56     IBC: 1.8.0svn AV
     c3f:	52 5f 41 52 43 48 3a 20 61 76 72 35 0a 00           R_ARCH: avr5..

00000c4d <__c.4937>:
     c4d:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     c5d:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     c6d:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     c7d:	45 20 43 4f 4d 4d 41 4e 44 20 4e 4b 52 4f 20 35     E COMMAND NKRO 5
     c8d:	31 32 0a 00                                         12..

00000c91 <__c.4935>:
     c91:	42 55 49 4c 44 3a 20 31 36 35 31 39 35 32 2d 64     BUILD: 1651952-d
     ca1:	69 72 74 79 20 28 32 32 3a 34 33 3a 31 32 20 46     irty (22:43:12 F
     cb1:	65 62 20 20 39 20 32 30 31 36 29 0a 00              eb  9 2016)..

00000cbe <__c.4933>:
     cbe:	56 49 44 3a 20 30 78 46 45 45 44 28 45 72 67 6f     VID: 0xFEED(Ergo
     cce:	44 6f 78 20 45 5a 29 20 50 49 44 3a 20 30 78 31     Dox EZ) PID: 0x1
     cde:	33 30 37 28 45 72 67 6f 44 6f 78 20 45 5a 29 20     307(ErgoDox EZ) 
     cee:	56 45 52 3a 20 30 78 30 30 30 31 0a 00              VER: 0x0001..

00000cfb <__c.4931>:
     cfb:	44 45 53 43 3a 20 74 2e 6d 2e 6b 2e 20 6b 65 79     DESC: t.m.k. key
     d0b:	62 6f 61 72 64 20 66 69 72 6d 77 61 72 65 20 66     board firmware f
     d1b:	6f 72 20 45 72 67 6f 64 6f 78 0a 00                 or Ergodox..

00000d27 <__c.4929>:
     d27:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

00000d36 <__c.4926>:
     d36:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

00000d43 <__c.4924>:
     d43:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

00000d4f <__c.4921>:
     d4f:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

00000d5f <__c.4919>:
     d5f:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

00000d6e <__c.4916>:
     d6e:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

00000d7c <__c.4914>:
     d7c:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000d89 <__c.4911>:
     d89:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000d95 <__c.4909>:
     d95:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000da2 <__c.4906>:
     da2:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     db2:	00                                                  .

00000db3 <__c.4903>:
     db3:	43 3e 20 00                                         C> .

00000db7 <__c.4898>:
     db7:	65 65 63 6f 6e 66 69 67 3a 0a 00                    eeconfig:..

00000dc2 <__c.4894>:
     dc2:	53 6c 65 65 70 20 4c 45 44 20 74 65 73 74 0a 00     Sleep LED test..

00000dd2 <breathing_table>:
     dd2:	00 00 00 00 00 00 00 00 00 00 00 01 02 04 06 0a     ................
     de2:	0f 17 20 2c 3a 4a 5d 71 87 9d b3 c7 da e9 f5 fc     .. ,:J]q........
     df2:	ff fc f5 e9 da c7 b3 9d 87 71 5d 4a 3a 2c 20 17     .........q]J:, .
     e02:	0f 0a 06 04 02 01 00 00 00 00 00 00 00 00 00 00     ................

00000e12 <__ctors_end>:
     e12:	11 24       	eor	r1, r1
     e14:	1f be       	out	0x3f, r1	; 63
     e16:	cf ef       	ldi	r28, 0xFF	; 255
     e18:	da e0       	ldi	r29, 0x0A	; 10
     e1a:	de bf       	out	0x3e, r29	; 62
     e1c:	cd bf       	out	0x3d, r28	; 61

00000e1e <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     e1e:	04 b6       	in	r0, 0x34	; 52
     e20:	03 fe       	sbrs	r0, 3
     e22:	24 c0       	rjmp	.+72     	; 0xe6c <__do_copy_data>
     e24:	80 91 f9 01 	lds	r24, 0x01F9
     e28:	90 91 fa 01 	lds	r25, 0x01FA
     e2c:	a0 91 fb 01 	lds	r26, 0x01FB
     e30:	b0 91 fc 01 	lds	r27, 0x01FC
     e34:	87 30       	cpi	r24, 0x07	; 7
     e36:	90 4b       	sbci	r25, 0xB0	; 176
     e38:	a7 40       	sbci	r26, 0x07	; 7
     e3a:	b0 4b       	sbci	r27, 0xB0	; 176
     e3c:	b9 f4       	brne	.+46     	; 0xe6c <__do_copy_data>
        reset_key = 0;
     e3e:	10 92 f9 01 	sts	0x01F9, r1
     e42:	10 92 fa 01 	sts	0x01FA, r1
     e46:	10 92 fb 01 	sts	0x01FB, r1
     e4a:	10 92 fc 01 	sts	0x01FC, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     e4e:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     e50:	84 b7       	in	r24, 0x34	; 52
     e52:	87 7f       	andi	r24, 0xF7	; 247
     e54:	84 bf       	out	0x34, r24	; 52
        wdt_disable();
     e56:	88 e1       	ldi	r24, 0x18	; 24
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	f8 94       	cli
     e5c:	80 93 60 00 	sts	0x0060, r24
     e60:	10 92 60 00 	sts	0x0060, r1
     e64:	0f be       	out	0x3f, r0	; 63

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     e66:	e0 e0       	ldi	r30, 0x00	; 0
     e68:	ff e3       	ldi	r31, 0x3F	; 63
     e6a:	09 95       	icall

00000e6c <__do_copy_data>:
     e6c:	11 e0       	ldi	r17, 0x01	; 1
     e6e:	a0 e0       	ldi	r26, 0x00	; 0
     e70:	b1 e0       	ldi	r27, 0x01	; 1
     e72:	ea ec       	ldi	r30, 0xCA	; 202
     e74:	fb e5       	ldi	r31, 0x5B	; 91
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <__do_copy_data+0x10>
     e78:	05 90       	lpm	r0, Z+
     e7a:	0d 92       	st	X+, r0
     e7c:	aa 33       	cpi	r26, 0x3A	; 58
     e7e:	b1 07       	cpc	r27, r17
     e80:	d9 f7       	brne	.-10     	; 0xe78 <__do_copy_data+0xc>

00000e82 <__do_clear_bss>:
     e82:	21 e0       	ldi	r18, 0x01	; 1
     e84:	aa e3       	ldi	r26, 0x3A	; 58
     e86:	b1 e0       	ldi	r27, 0x01	; 1
     e88:	01 c0       	rjmp	.+2      	; 0xe8c <.do_clear_bss_start>

00000e8a <.do_clear_bss_loop>:
     e8a:	1d 92       	st	X+, r1

00000e8c <.do_clear_bss_start>:
     e8c:	a9 3f       	cpi	r26, 0xF9	; 249
     e8e:	b2 07       	cpc	r27, r18
     e90:	e1 f7       	brne	.-8      	; 0xe8a <.do_clear_bss_loop>
     e92:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <main>
     e96:	0c 94 e3 2d 	jmp	0x5bc6	; 0x5bc6 <_exit>

00000e9a <__bad_interrupt>:
     e9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000e9e <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     e9e:	ff 93       	push	r31
	push	ZL
     ea0:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     ea2:	e0 91 3a 01 	lds	r30, 0x013A
	lds	ZH, xfunc_out+1	;/
     ea6:	f0 91 3b 01 	lds	r31, 0x013B
	sbiw	ZL, 0		;Skip if null
     eaa:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     eac:	09 f0       	breq	.+2      	; 0xeb0 <xputc+0x12>
	icall
     eae:	09 95       	icall
2:	pop	ZL
     eb0:	ef 91       	pop	r30
	pop	ZH
     eb2:	ff 91       	pop	r31
	ret
     eb4:	08 95       	ret

00000eb6 <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     eb6:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     eb8:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     eba:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     ebc:	11 f0       	breq	.+4      	; 0xec2 <xputs+0xc>
	rcall	xputc
     ebe:	ef df       	rcall	.-34     	; 0xe9e <xputc>
	rjmp	1b
     ec0:	fb cf       	rjmp	.-10     	; 0xeb8 <xputs+0x2>
2:	ret
     ec2:	08 95       	ret

00000ec4 <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     ec4:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     ec6:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     ec8:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     eca:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     ecc:	0c c0       	rjmp	.+24     	; 0xee6 <xitoa+0x22>
	neg	r20		;
     ece:	41 95       	neg	r20
	sbrs	r25, 7		;
     ed0:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     ed2:	09 c0       	rjmp	.+18     	; 0xee6 <xitoa+0x22>
	ldi	r30, '-'	;
     ed4:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     ed6:	60 95       	com	r22
	com	r23		;
     ed8:	70 95       	com	r23
	com	r24		;
     eda:	80 95       	com	r24
	com	r25		;
     edc:	90 95       	com	r25
	adc	r22, r1		;
     ede:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     ee0:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     ee2:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     ee4:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     ee6:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <xitoa+0x2a>
	neg	r18		;
     eea:	21 95       	neg	r18
	ldi	r19, '0'	;/
     eec:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     eee:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     ef0:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     ef2:	66 0f       	add	r22, r22
	rol	r23		;
     ef4:	77 1f       	adc	r23, r23
	rol	r24		;
     ef6:	88 1f       	adc	r24, r24
	rol	r25		;
     ef8:	99 1f       	adc	r25, r25
	rol	r26		;
     efa:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     efc:	a4 17       	cp	r26, r20
	brcs	3f		;
     efe:	10 f0       	brcs	.+4      	; 0xf04 <xitoa+0x40>
	sub	r26, r20	;
     f00:	a4 1b       	sub	r26, r20
	inc	r22		;
     f02:	63 95       	inc	r22
3:	dec	r21		;
     f04:	5a 95       	dec	r21
	brne	2b		;/
     f06:	a9 f7       	brne	.-22     	; 0xef2 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     f08:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <xitoa+0x4a>
	subi	r26, -7		;
     f0c:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     f0e:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     f10:	af 93       	push	r26
	inc	r31		;/
     f12:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     f14:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     f16:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     f18:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     f1a:	91 05       	cpc	r25, r1
	brne	1b		;/
     f1c:	41 f7       	brne	.-48     	; 0xeee <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     f1e:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     f20:	11 f4       	brne	.+4      	; 0xf26 <xitoa+0x62>
	push	r30		;
     f22:	ef 93       	push	r30
	inc	r31		;/
     f24:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     f26:	f2 17       	cp	r31, r18
	brcc	6f		;
     f28:	18 f4       	brcc	.+6      	; 0xf30 <xitoa+0x6c>
	push	r19		;
     f2a:	3f 93       	push	r19
	inc	r31		;
     f2c:	f3 95       	inc	r31
	rjmp	5b		;/
     f2e:	fb cf       	rjmp	.-10     	; 0xf26 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     f30:	8f 91       	pop	r24
	rcall	xputc		;
     f32:	b5 df       	rcall	.-150    	; 0xe9e <xputc>
	dec	r31		;
     f34:	fa 95       	dec	r31
	brne	6b		;/
     f36:	e1 f7       	brne	.-8      	; 0xf30 <xitoa+0x6c>

	ret
     f38:	08 95       	ret

00000f3a <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     f3a:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     f3c:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     f3e:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     f40:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     f42:	21 f0       	breq	.+8      	; 0xf4c <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     f44:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     f46:	19 f0       	breq	.+6      	; 0xf4e <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     f48:	aa df       	rcall	.-172    	; 0xe9e <xputc>
	rjmp	0b		;/
     f4a:	f9 cf       	rjmp	.-14     	; 0xf3e <xvprintf+0x4>
90:	ret
     f4c:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     f4e:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     f50:	e8 94       	clt
	_LPMI	r21		;Get flags
     f52:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     f54:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     f56:	c1 f3       	breq	.-16     	; 0xf48 <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     f58:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     f5a:	11 f4       	brne	.+4      	; 0xf60 <xvprintf+0x26>
	set			;/
     f5c:	68 94       	set
22:	_LPMI	r21		;Get width
     f5e:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     f60:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     f62:	48 f4       	brcc	.+18     	; 0xf76 <xvprintf+0x3c>
	subi	r21, '0'	;
     f64:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     f66:	90 f3       	brcs	.-28     	; 0xf4c <xvprintf+0x12>
	lsl	r18		;
     f68:	22 0f       	add	r18, r18
	mov	r0, r18		;
     f6a:	02 2e       	mov	r0, r18
	lsl	r18		;
     f6c:	22 0f       	add	r18, r18
	lsl	r18		;
     f6e:	22 0f       	add	r18, r18
	add	r18, r0		;
     f70:	20 0d       	add	r18, r0
	add	r18, r21	;
     f72:	25 0f       	add	r18, r21
	rjmp	22b		;/
     f74:	f4 cf       	rjmp	.-24     	; 0xf5e <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     f76:	0e f4       	brtc	.+2      	; 0xf7a <xvprintf+0x40>
	neg	r18		;
     f78:	21 95       	neg	r18
25:	ld	r24, Y+		;
     f7a:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     f7c:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     f7e:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     f80:	19 f3       	breq	.-58     	; 0xf48 <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     f82:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     f84:	29 f1       	breq	.+74     	; 0xfd0 <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     f86:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     f88:	59 f1       	breq	.+86     	; 0xfe0 <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     f8a:	bc 01       	movw	r22, r24
	clr	r24		;
     f8c:	88 27       	eor	r24, r24
	clr	r25		;
     f8e:	99 27       	eor	r25, r25
	clt			;/
     f90:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     f92:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     f94:	21 f4       	brne	.+8      	; 0xf9e <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     f96:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     f98:	99 91       	ld	r25, Y+
	set			;
     f9a:	68 94       	set
	_LPMI	r21		;/
     f9c:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     f9e:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     fa0:	39 f4       	brne	.+14     	; 0xfb0 <xvprintf+0x76>
	ldi	r20, -10	;
     fa2:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     fa4:	7e f0       	brts	.+30     	; 0xfc4 <xvprintf+0x8a>
	sbrs	r23, 7		;
     fa6:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     fa8:	0d c0       	rjmp	.+26     	; 0xfc4 <xvprintf+0x8a>
	ldi	r24, -1		;
     faa:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     fac:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     fae:	0a c0       	rjmp	.+20     	; 0xfc4 <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     fb0:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     fb2:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     fb4:	39 f0       	breq	.+14     	; 0xfc4 <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     fb6:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     fb8:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     fba:	21 f0       	breq	.+8      	; 0xfc4 <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     fbc:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     fbe:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     fc0:	09 f0       	breq	.+2      	; 0xfc4 <xvprintf+0x8a>
	ret			;abort
     fc2:	08 95       	ret
40:	push	ZH		;Output the value
     fc4:	ff 93       	push	r31
	push	ZL		;
     fc6:	ef 93       	push	r30
	rcall	xitoa		;
     fc8:	7d df       	rcall	.-262    	; 0xec4 <xitoa>
42:	pop	ZL		;
     fca:	ef 91       	pop	r30
	pop	ZH		;
     fcc:	ff 91       	pop	r31
	rjmp	0b		;/
     fce:	b7 cf       	rjmp	.-146    	; 0xf3e <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     fd0:	ff 93       	push	r31
	push	ZL
     fd2:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     fd4:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     fd6:	81 91       	ld	r24, Z+
	cpi	r24, 0
     fd8:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     fda:	b9 f3       	breq	.-18     	; 0xfca <xvprintf+0x90>
	rcall	xputc
     fdc:	60 df       	rcall	.-320    	; 0xe9e <xputc>
	rjmp	51b
     fde:	fb cf       	rjmp	.-10     	; 0xfd6 <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     fe0:	ff 93       	push	r31
	push	ZL
     fe2:	ef 93       	push	r30
	rcall	xputs
     fe4:	68 df       	rcall	.-304    	; 0xeb6 <xputs>
	rjmp	42b
     fe6:	f1 cf       	rjmp	.-30     	; 0xfca <xvprintf+0x90>

00000fe8 <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     fe8:	df 93       	push	r29
	push	YL
     fea:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     fec:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     fee:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     ff0:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     ff2:	a3 df       	rcall	.-186    	; 0xf3a <xvprintf>
	pop	YL
     ff4:	cf 91       	pop	r28
	pop	YH
     ff6:	df 91       	pop	r29
	ret
     ff8:	08 95       	ret

00000ffa <action_get_macro>:
};

const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
{
  // MACRODOWN only works in this function
      switch(id) {
     ffa:	66 23       	and	r22, r22
     ffc:	19 f0       	breq	.+6      	; 0x1004 <action_get_macro+0xa>
     ffe:	61 30       	cpi	r22, 0x01	; 1
    1000:	69 f0       	breq	.+26     	; 0x101c <action_get_macro+0x22>
    1002:	13 c0       	rjmp	.+38     	; 0x102a <action_get_macro+0x30>
        case 0:
        if (record->event.pressed) {
    1004:	fc 01       	movw	r30, r24
    1006:	82 81       	ldd	r24, Z+2	; 0x02
    1008:	88 23       	and	r24, r24
    100a:	21 f0       	breq	.+8      	; 0x1014 <action_get_macro+0x1a>
          register_code(KC_RSFT);
    100c:	85 ee       	ldi	r24, 0xE5	; 229
    100e:	0e 94 77 16 	call	0x2cee	; 0x2cee <register_code>
    1012:	0b c0       	rjmp	.+22     	; 0x102a <action_get_macro+0x30>
        } else {
          unregister_code(KC_RSFT);
    1014:	85 ee       	ldi	r24, 0xE5	; 229
    1016:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <unregister_code>
    101a:	07 c0       	rjmp	.+14     	; 0x102a <action_get_macro+0x30>
        }
        break;

        // M(1) : Tmux key
        case 1:
        if (record->event.pressed) {
    101c:	fc 01       	movw	r30, r24
    101e:	82 81       	ldd	r24, Z+2	; 0x02
    1020:	88 23       	and	r24, r24
    1022:	19 f0       	breq	.+6      	; 0x102a <action_get_macro+0x30>
          return MACRO( D(LCTL), T(A), U(LCTL), END );
    1024:	80 ee       	ldi	r24, 0xE0	; 224
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	08 95       	ret
        }
        break;

      }
    return MACRO_NONE;
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	90 e0       	ldi	r25, 0x00	; 0
};
    102e:	08 95       	ret

00001030 <matrix_init_user>:

// Runs just one time when the keyboard initializes.
void * matrix_init_user(void) {

};
    1030:	08 95       	ret

00001032 <matrix_scan_user>:

// Runs constantly in the background, in a loop.
void * matrix_scan_user(void) {

    uint8_t layer = biton32(layer_state);
    1032:	60 91 bc 01 	lds	r22, 0x01BC
    1036:	70 91 bd 01 	lds	r23, 0x01BD
    103a:	80 91 be 01 	lds	r24, 0x01BE
    103e:	90 91 bf 01 	lds	r25, 0x01BF
    1042:	0e 94 22 21 	call	0x4244	; 0x4244 <biton32>
inline void ergodox_right_led_1_on(void)    { DDRB |=  (1<<5); PORTB |=  (1<<5); }
inline void ergodox_right_led_2_on(void)    { DDRB |=  (1<<6); PORTB |=  (1<<6); }
inline void ergodox_right_led_3_on(void)    { DDRB |=  (1<<7); PORTB |=  (1<<7); }
inline void ergodox_right_led_on(uint8_t led) { DDRB |= (1<<(led+4)); PORTB |= (1<<(led+4)); }

inline void ergodox_board_led_off(void)     { DDRD &= ~(1<<6); PORTD &= ~(1<<6); }
    1046:	56 98       	cbi	0x0a, 6	; 10
    1048:	5e 98       	cbi	0x0b, 6	; 11
inline void ergodox_right_led_1_off(void)   { DDRB &= ~(1<<5); PORTB &= ~(1<<5); }
    104a:	25 98       	cbi	0x04, 5	; 4
    104c:	2d 98       	cbi	0x05, 5	; 5
inline void ergodox_right_led_2_off(void)   { DDRB &= ~(1<<6); PORTB &= ~(1<<6); }
    104e:	26 98       	cbi	0x04, 6	; 4
    1050:	2e 98       	cbi	0x05, 6	; 5
inline void ergodox_right_led_3_off(void)   { DDRB &= ~(1<<7); PORTB &= ~(1<<7); }
    1052:	27 98       	cbi	0x04, 7	; 4
    1054:	2f 98       	cbi	0x05, 7	; 5

    ergodox_board_led_off();
    ergodox_right_led_1_off();
    ergodox_right_led_2_off();
    ergodox_right_led_3_off();
    switch (layer) {
    1056:	81 30       	cpi	r24, 0x01	; 1
    1058:	19 f0       	breq	.+6      	; 0x1060 <matrix_scan_user+0x2e>
    105a:	82 30       	cpi	r24, 0x02	; 2
    105c:	21 f0       	breq	.+8      	; 0x1066 <matrix_scan_user+0x34>
    105e:	08 95       	ret
#define LED_BRIGHTNESS_LO       15
#define LED_BRIGHTNESS_HI       255


inline void ergodox_board_led_on(void)      { DDRD |=  (1<<6); PORTD |=  (1<<6); }
inline void ergodox_right_led_1_on(void)    { DDRB |=  (1<<5); PORTB |=  (1<<5); }
    1060:	25 9a       	sbi	0x04, 5	; 4
    1062:	2d 9a       	sbi	0x05, 5	; 5
    1064:	08 95       	ret
inline void ergodox_right_led_2_on(void)    { DDRB |=  (1<<6); PORTB |=  (1<<6); }
    1066:	26 9a       	sbi	0x04, 6	; 4
    1068:	2e 9a       	sbi	0x05, 6	; 5
        default:
            // none
            break;
    }

};
    106a:	08 95       	ret

0000106c <matrix_scan_kb>:
    return NULL;
};

void * matrix_scan_kb(void) {

    if (matrix_scan_user) {
    106c:	89 e1       	ldi	r24, 0x19	; 25
    106e:	98 e0       	ldi	r25, 0x08	; 8
    1070:	89 2b       	or	r24, r25
    1072:	11 f0       	breq	.+4      	; 0x1078 <matrix_scan_kb+0xc>
        (*matrix_scan_user)();
    1074:	0e 94 19 08 	call	0x1032	; 0x1032 <matrix_scan_user>
    }

    return NULL;
};
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	08 95       	ret

0000107e <ergodox_blink_all_leds>:
inline void ergodox_right_led_1_on(void)    { DDRB |=  (1<<5); PORTB |=  (1<<5); }
inline void ergodox_right_led_2_on(void)    { DDRB |=  (1<<6); PORTB |=  (1<<6); }
inline void ergodox_right_led_3_on(void)    { DDRB |=  (1<<7); PORTB |=  (1<<7); }
inline void ergodox_right_led_on(uint8_t led) { DDRB |= (1<<(led+4)); PORTB |= (1<<(led+4)); }

inline void ergodox_board_led_off(void)     { DDRD &= ~(1<<6); PORTD &= ~(1<<6); }
    107e:	56 98       	cbi	0x0a, 6	; 10
    1080:	5e 98       	cbi	0x0b, 6	; 11
inline void ergodox_right_led_1_off(void)   { DDRB &= ~(1<<5); PORTB &= ~(1<<5); }
    1082:	25 98       	cbi	0x04, 5	; 4
    1084:	2d 98       	cbi	0x05, 5	; 5
inline void ergodox_right_led_2_off(void)   { DDRB &= ~(1<<6); PORTB &= ~(1<<6); }
    1086:	26 98       	cbi	0x04, 6	; 4
    1088:	2e 98       	cbi	0x05, 6	; 5
inline void ergodox_right_led_3_off(void)   { DDRB &= ~(1<<7); PORTB &= ~(1<<7); }
    108a:	27 98       	cbi	0x04, 7	; 4
    108c:	2f 98       	cbi	0x05, 7	; 5
    ergodox_right_led_1_off();
    ergodox_right_led_2_off();
    ergodox_right_led_3_off();
}

inline void ergodox_right_led_1_set(uint8_t n)    { OCR1A = n; }
    108e:	8f ef       	ldi	r24, 0xFF	; 255
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	90 93 89 00 	sts	0x0089, r25
    1096:	80 93 88 00 	sts	0x0088, r24
inline void ergodox_right_led_2_set(uint8_t n)    { OCR1B = n; }
    109a:	90 93 8b 00 	sts	0x008B, r25
    109e:	80 93 8a 00 	sts	0x008A, r24
inline void ergodox_right_led_3_set(uint8_t n)    { OCR1C = n; }
    10a2:	90 93 8d 00 	sts	0x008D, r25
    10a6:	80 93 8c 00 	sts	0x008C, r24
#define LED_BRIGHTNESS_LO       15
#define LED_BRIGHTNESS_HI       255


inline void ergodox_board_led_on(void)      { DDRD |=  (1<<6); PORTD |=  (1<<6); }
inline void ergodox_right_led_1_on(void)    { DDRB |=  (1<<5); PORTB |=  (1<<5); }
    10aa:	25 9a       	sbi	0x04, 5	; 4
    10ac:	2d 9a       	sbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10ae:	2f ef       	ldi	r18, 0xFF	; 255
    10b0:	80 e7       	ldi	r24, 0x70	; 112
    10b2:	92 e0       	ldi	r25, 0x02	; 2
    10b4:	21 50       	subi	r18, 0x01	; 1
    10b6:	80 40       	sbci	r24, 0x00	; 0
    10b8:	90 40       	sbci	r25, 0x00	; 0
    10ba:	e1 f7       	brne	.-8      	; 0x10b4 <ergodox_blink_all_leds+0x36>
    10bc:	00 c0       	rjmp	.+0      	; 0x10be <ergodox_blink_all_leds+0x40>
    10be:	00 00       	nop
inline void ergodox_right_led_2_on(void)    { DDRB |=  (1<<6); PORTB |=  (1<<6); }
    10c0:	26 9a       	sbi	0x04, 6	; 4
    10c2:	2e 9a       	sbi	0x05, 6	; 5
    10c4:	2f ef       	ldi	r18, 0xFF	; 255
    10c6:	80 e7       	ldi	r24, 0x70	; 112
    10c8:	92 e0       	ldi	r25, 0x02	; 2
    10ca:	21 50       	subi	r18, 0x01	; 1
    10cc:	80 40       	sbci	r24, 0x00	; 0
    10ce:	90 40       	sbci	r25, 0x00	; 0
    10d0:	e1 f7       	brne	.-8      	; 0x10ca <ergodox_blink_all_leds+0x4c>
    10d2:	00 c0       	rjmp	.+0      	; 0x10d4 <ergodox_blink_all_leds+0x56>
    10d4:	00 00       	nop
inline void ergodox_right_led_3_on(void)    { DDRB |=  (1<<7); PORTB |=  (1<<7); }
    10d6:	27 9a       	sbi	0x04, 7	; 4
    10d8:	2f 9a       	sbi	0x05, 7	; 5
    10da:	2f ef       	ldi	r18, 0xFF	; 255
    10dc:	80 e7       	ldi	r24, 0x70	; 112
    10de:	92 e0       	ldi	r25, 0x02	; 2
    10e0:	21 50       	subi	r18, 0x01	; 1
    10e2:	80 40       	sbci	r24, 0x00	; 0
    10e4:	90 40       	sbci	r25, 0x00	; 0
    10e6:	e1 f7       	brne	.-8      	; 0x10e0 <ergodox_blink_all_leds+0x62>
    10e8:	00 c0       	rjmp	.+0      	; 0x10ea <ergodox_blink_all_leds+0x6c>
    10ea:	00 00       	nop
inline void ergodox_right_led_on(uint8_t led) { DDRB |= (1<<(led+4)); PORTB |= (1<<(led+4)); }

inline void ergodox_board_led_off(void)     { DDRD &= ~(1<<6); PORTD &= ~(1<<6); }
inline void ergodox_right_led_1_off(void)   { DDRB &= ~(1<<5); PORTB &= ~(1<<5); }
    10ec:	25 98       	cbi	0x04, 5	; 4
    10ee:	2d 98       	cbi	0x05, 5	; 5
    10f0:	2f ef       	ldi	r18, 0xFF	; 255
    10f2:	80 e7       	ldi	r24, 0x70	; 112
    10f4:	92 e0       	ldi	r25, 0x02	; 2
    10f6:	21 50       	subi	r18, 0x01	; 1
    10f8:	80 40       	sbci	r24, 0x00	; 0
    10fa:	90 40       	sbci	r25, 0x00	; 0
    10fc:	e1 f7       	brne	.-8      	; 0x10f6 <ergodox_blink_all_leds+0x78>
    10fe:	00 c0       	rjmp	.+0      	; 0x1100 <ergodox_blink_all_leds+0x82>
    1100:	00 00       	nop
inline void ergodox_right_led_2_off(void)   { DDRB &= ~(1<<6); PORTB &= ~(1<<6); }
    1102:	26 98       	cbi	0x04, 6	; 4
    1104:	2e 98       	cbi	0x05, 6	; 5
    1106:	2f ef       	ldi	r18, 0xFF	; 255
    1108:	80 e7       	ldi	r24, 0x70	; 112
    110a:	92 e0       	ldi	r25, 0x02	; 2
    110c:	21 50       	subi	r18, 0x01	; 1
    110e:	80 40       	sbci	r24, 0x00	; 0
    1110:	90 40       	sbci	r25, 0x00	; 0
    1112:	e1 f7       	brne	.-8      	; 0x110c <ergodox_blink_all_leds+0x8e>
    1114:	00 c0       	rjmp	.+0      	; 0x1116 <ergodox_blink_all_leds+0x98>
    1116:	00 00       	nop
inline void ergodox_right_led_3_off(void)   { DDRB &= ~(1<<7); PORTB &= ~(1<<7); }
    1118:	27 98       	cbi	0x04, 7	; 4
    111a:	2f 98       	cbi	0x05, 7	; 5
inline void ergodox_right_led_1_on(void)    { DDRB |=  (1<<5); PORTB |=  (1<<5); }
inline void ergodox_right_led_2_on(void)    { DDRB |=  (1<<6); PORTB |=  (1<<6); }
inline void ergodox_right_led_3_on(void)    { DDRB |=  (1<<7); PORTB |=  (1<<7); }
inline void ergodox_right_led_on(uint8_t led) { DDRB |= (1<<(led+4)); PORTB |= (1<<(led+4)); }

inline void ergodox_board_led_off(void)     { DDRD &= ~(1<<6); PORTD &= ~(1<<6); }
    111c:	56 98       	cbi	0x0a, 6	; 10
    111e:	5e 98       	cbi	0x0b, 6	; 11
inline void ergodox_right_led_1_off(void)   { DDRB &= ~(1<<5); PORTB &= ~(1<<5); }
    1120:	25 98       	cbi	0x04, 5	; 4
    1122:	2d 98       	cbi	0x05, 5	; 5
inline void ergodox_right_led_2_off(void)   { DDRB &= ~(1<<6); PORTB &= ~(1<<6); }
    1124:	26 98       	cbi	0x04, 6	; 4
    1126:	2e 98       	cbi	0x05, 6	; 5
inline void ergodox_right_led_3_off(void)   { DDRB &= ~(1<<7); PORTB &= ~(1<<7); }
    1128:	27 98       	cbi	0x04, 7	; 4
    112a:	2f 98       	cbi	0x05, 7	; 5
    112c:	08 95       	ret

0000112e <matrix_init_kb>:
    return NULL;
};

void * matrix_init_kb(void) {
   // keyboard LEDs (see "PWM on ports OC1(A|B|C)" in "teensy-2-0.md")
    TCCR1A = 0b10101001;  // set and configure fast PWM
    112e:	89 ea       	ldi	r24, 0xA9	; 169
    1130:	80 93 80 00 	sts	0x0080, r24
    TCCR1B = 0b00001001;  // set and configure fast PWM
    1134:	89 e0       	ldi	r24, 0x09	; 9
    1136:	80 93 81 00 	sts	0x0081, r24

    // (tied to Vcc for hardware convenience)
    DDRB  &= ~(1<<4);  // set B(4) as input
    113a:	24 98       	cbi	0x04, 4	; 4
    PORTB &= ~(1<<4);  // set B(4) internal pull-up disabled
    113c:	2c 98       	cbi	0x05, 4	; 5

    // unused pins - C7, D4, D5, D7, E6
    // set as input with internal pull-ip enabled
    DDRC  &= ~(1<<7);
    113e:	3f 98       	cbi	0x07, 7	; 7
    DDRD  &= ~(1<<7 | 1<<5 | 1<<4);
    1140:	8a b1       	in	r24, 0x0a	; 10
    1142:	8f 74       	andi	r24, 0x4F	; 79
    1144:	8a b9       	out	0x0a, r24	; 10
    DDRE  &= ~(1<<6);
    1146:	6e 98       	cbi	0x0d, 6	; 13
    PORTC |=  (1<<7);
    1148:	47 9a       	sbi	0x08, 7	; 8
    PORTD |=  (1<<7 | 1<<5 | 1<<4);
    114a:	8b b1       	in	r24, 0x0b	; 11
    114c:	80 6b       	ori	r24, 0xB0	; 176
    114e:	8b b9       	out	0x0b, r24	; 11
    PORTE |=  (1<<6);
    1150:	76 9a       	sbi	0x0e, 6	; 14

    ergodox_blink_all_leds();
    1152:	0e 94 3f 08 	call	0x107e	; 0x107e <ergodox_blink_all_leds>

    if (matrix_init_user) {
    1156:	88 e1       	ldi	r24, 0x18	; 24
    1158:	98 e0       	ldi	r25, 0x08	; 8
    115a:	89 2b       	or	r24, r25
    115c:	11 f0       	breq	.+4      	; 0x1162 <matrix_init_kb+0x34>
        (*matrix_init_user)();
    115e:	0e 94 18 08 	call	0x1030	; 0x1030 <matrix_init_user>
    }

    return NULL;
};
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	08 95       	ret

00001168 <init_mcp23018>:
    //_delay_ms(333);
    ergodox_led_all_off();
}

uint8_t init_mcp23018(void) {
    mcp23018_status = 0x20;
    1168:	80 e2       	ldi	r24, 0x20	; 32
    116a:	80 93 00 01 	sts	0x0100, r24

    // I2C subsystem
    if (i2c_initialized == 0) {
    116e:	80 91 3c 01 	lds	r24, 0x013C
    1172:	81 11       	cpse	r24, r1
    1174:	0e c0       	rjmp	.+28     	; 0x1192 <init_mcp23018+0x2a>
        i2c_init();  // on pins D(1,0)
    1176:	0e 94 03 09 	call	0x1206	; 0x1206 <i2c_init>
        i2c_initialized++;
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	80 93 3c 01 	sts	0x013C, r24
    1180:	2f ef       	ldi	r18, 0xFF	; 255
    1182:	83 ed       	ldi	r24, 0xD3	; 211
    1184:	90 e3       	ldi	r25, 0x30	; 48
    1186:	21 50       	subi	r18, 0x01	; 1
    1188:	80 40       	sbci	r24, 0x00	; 0
    118a:	90 40       	sbci	r25, 0x00	; 0
    118c:	e1 f7       	brne	.-8      	; 0x1186 <init_mcp23018+0x1e>
    118e:	00 c0       	rjmp	.+0      	; 0x1190 <init_mcp23018+0x28>
    1190:	00 00       	nop

    // set pin direction
    // - unused  : input  : 1
    // - input   : input  : 1
    // - driving : output : 0
    mcp23018_status = i2c_start(I2C_ADDR_WRITE);    if (mcp23018_status) goto out;
    1192:	80 e4       	ldi	r24, 0x40	; 64
    1194:	0e 94 09 09 	call	0x1212	; 0x1212 <i2c_start>
    1198:	80 93 00 01 	sts	0x0100, r24
    119c:	81 11       	cpse	r24, r1
    119e:	2e c0       	rjmp	.+92     	; 0x11fc <init_mcp23018+0x94>
    mcp23018_status = i2c_write(IODIRA);            if (mcp23018_status) goto out;
    11a0:	0e 94 33 09 	call	0x1266	; 0x1266 <i2c_write>
    11a4:	80 93 00 01 	sts	0x0100, r24
    11a8:	81 11       	cpse	r24, r1
    11aa:	28 c0       	rjmp	.+80     	; 0x11fc <init_mcp23018+0x94>
    mcp23018_status = i2c_write(0b00000000);        if (mcp23018_status) goto out;
    11ac:	0e 94 33 09 	call	0x1266	; 0x1266 <i2c_write>
    11b0:	80 93 00 01 	sts	0x0100, r24
    11b4:	81 11       	cpse	r24, r1
    11b6:	22 c0       	rjmp	.+68     	; 0x11fc <init_mcp23018+0x94>
    mcp23018_status = i2c_write(0b00111111);        if (mcp23018_status) goto out;
    11b8:	8f e3       	ldi	r24, 0x3F	; 63
    11ba:	0e 94 33 09 	call	0x1266	; 0x1266 <i2c_write>
    11be:	80 93 00 01 	sts	0x0100, r24
    11c2:	81 11       	cpse	r24, r1
    11c4:	1b c0       	rjmp	.+54     	; 0x11fc <init_mcp23018+0x94>
    i2c_stop();
    11c6:	0e 94 2b 09 	call	0x1256	; 0x1256 <i2c_stop>

    // set pull-up
    // - unused  : on  : 1
    // - input   : on  : 1
    // - driving : off : 0
    mcp23018_status = i2c_start(I2C_ADDR_WRITE);    if (mcp23018_status) goto out;
    11ca:	80 e4       	ldi	r24, 0x40	; 64
    11cc:	0e 94 09 09 	call	0x1212	; 0x1212 <i2c_start>
    11d0:	80 93 00 01 	sts	0x0100, r24
    11d4:	81 11       	cpse	r24, r1
    11d6:	12 c0       	rjmp	.+36     	; 0x11fc <init_mcp23018+0x94>
    mcp23018_status = i2c_write(GPPUA);             if (mcp23018_status) goto out;
    11d8:	8c e0       	ldi	r24, 0x0C	; 12
    11da:	0e 94 33 09 	call	0x1266	; 0x1266 <i2c_write>
    11de:	80 93 00 01 	sts	0x0100, r24
    11e2:	81 11       	cpse	r24, r1
    11e4:	0b c0       	rjmp	.+22     	; 0x11fc <init_mcp23018+0x94>
    mcp23018_status = i2c_write(0b00000000);        if (mcp23018_status) goto out;
    11e6:	0e 94 33 09 	call	0x1266	; 0x1266 <i2c_write>
    11ea:	80 93 00 01 	sts	0x0100, r24
    11ee:	81 11       	cpse	r24, r1
    11f0:	05 c0       	rjmp	.+10     	; 0x11fc <init_mcp23018+0x94>
    mcp23018_status = i2c_write(0b00111111);        if (mcp23018_status) goto out;
    11f2:	8f e3       	ldi	r24, 0x3F	; 63
    11f4:	0e 94 33 09 	call	0x1266	; 0x1266 <i2c_write>
    11f8:	80 93 00 01 	sts	0x0100, r24

out:
    i2c_stop();
    11fc:	0e 94 2b 09 	call	0x1256	; 0x1256 <i2c_stop>

    return mcp23018_status;
}
    1200:	80 91 00 01 	lds	r24, 0x0100
    1204:	08 95       	ret

00001206 <i2c_init>:
   * I2C bus speed - about 444 kHz
   *
   * for more details, see 20.5.2 in ATmega16/32 secification
   */
  
  TWSR = 0;     /* no prescaler */
    1206:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = 10;    /* must be >= 10 for stable operation */
    120a:	8a e0       	ldi	r24, 0x0A	; 10
    120c:	80 93 b8 00 	sts	0x00B8, r24
    1210:	08 95       	ret

00001212 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1212:	94 ea       	ldi	r25, 0xA4	; 164
    1214:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1218:	90 91 bc 00 	lds	r25, 0x00BC
    121c:	97 ff       	sbrs	r25, 7
    121e:	fc cf       	rjmp	.-8      	; 0x1218 <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1220:	90 91 b9 00 	lds	r25, 0x00B9
    1224:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    1226:	98 30       	cpi	r25, 0x08	; 8
    1228:	21 f0       	breq	.+8      	; 0x1232 <i2c_start+0x20>
    122a:	90 31       	cpi	r25, 0x10	; 16
    122c:	11 f0       	breq	.+4      	; 0x1232 <i2c_start+0x20>
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	08 95       	ret

	// send device address
	TWDR = address;
    1232:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1236:	84 e8       	ldi	r24, 0x84	; 132
    1238:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    123c:	80 91 bc 00 	lds	r24, 0x00BC
    1240:	87 ff       	sbrs	r24, 7
    1242:	fc cf       	rjmp	.-8      	; 0x123c <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1244:	80 91 b9 00 	lds	r24, 0x00B9
    1248:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    124a:	88 31       	cpi	r24, 0x18	; 24
    124c:	11 f0       	breq	.+4      	; 0x1252 <i2c_start+0x40>
    124e:	80 34       	cpi	r24, 0x40	; 64
    1250:	71 f7       	brne	.-36     	; 0x122e <i2c_start+0x1c>

	return 0;
    1252:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    1254:	08 95       	ret

00001256 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1256:	84 e9       	ldi	r24, 0x94	; 148
    1258:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    125c:	80 91 bc 00 	lds	r24, 0x00BC
    1260:	84 fd       	sbrc	r24, 4
    1262:	fc cf       	rjmp	.-8      	; 0x125c <i2c_stop+0x6>

}/* i2c_stop */
    1264:	08 95       	ret

00001266 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    1266:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    126a:	84 e8       	ldi	r24, 0x84	; 132
    126c:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1270:	80 91 bc 00 	lds	r24, 0x00BC
    1274:	87 ff       	sbrs	r24, 7
    1276:	fc cf       	rjmp	.-8      	; 0x1270 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1278:	90 91 b9 00 	lds	r25, 0x00B9
    127c:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	98 32       	cpi	r25, 0x28	; 40
    1282:	09 f4       	brne	.+2      	; 0x1286 <i2c_write+0x20>
    1284:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    1286:	08 95       	ret

00001288 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    1288:	84 e8       	ldi	r24, 0x84	; 132
    128a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    128e:	80 91 bc 00 	lds	r24, 0x00BC
    1292:	87 ff       	sbrs	r24, 7
    1294:	fc cf       	rjmp	.-8      	; 0x128e <i2c_readNak+0x6>
	
    return TWDR;
    1296:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    129a:	08 95       	ret

0000129c <unselect_rows>:
 * pin: A0  A1  A2  A3  A4  A5  A6
 */
static void unselect_rows(void)
{
    // unselect on mcp23018
    if (mcp23018_status) { // if there was an error
    129c:	80 91 00 01 	lds	r24, 0x0100
    12a0:	81 11       	cpse	r24, r1
    12a2:	15 c0       	rjmp	.+42     	; 0x12ce <unselect_rows+0x32>
        // do nothing
    } else {
        // set all rows hi-Z : 1
        mcp23018_status = i2c_start(I2C_ADDR_WRITE);    if (mcp23018_status) goto out;
    12a4:	80 e4       	ldi	r24, 0x40	; 64
    12a6:	0e 94 09 09 	call	0x1212	; 0x1212 <i2c_start>
    12aa:	80 93 00 01 	sts	0x0100, r24
    12ae:	81 11       	cpse	r24, r1
    12b0:	0c c0       	rjmp	.+24     	; 0x12ca <unselect_rows+0x2e>
        mcp23018_status = i2c_write(GPIOA);             if (mcp23018_status) goto out;
    12b2:	82 e1       	ldi	r24, 0x12	; 18
    12b4:	0e 94 33 09 	call	0x1266	; 0x1266 <i2c_write>
    12b8:	80 93 00 01 	sts	0x0100, r24
    12bc:	81 11       	cpse	r24, r1
    12be:	05 c0       	rjmp	.+10     	; 0x12ca <unselect_rows+0x2e>
        mcp23018_status = i2c_write( 0xFF
    12c0:	8f ef       	ldi	r24, 0xFF	; 255
    12c2:	0e 94 33 09 	call	0x1266	; 0x1266 <i2c_write>
    12c6:	80 93 00 01 	sts	0x0100, r24
                              & ~(0<<7)
                          );                            if (mcp23018_status) goto out;
    out:
        i2c_stop();
    12ca:	0e 94 2b 09 	call	0x1256	; 0x1256 <i2c_stop>
    }

    // unselect on teensy
    // Hi-Z(DDR:0, PORT:0) to unselect
    DDRB  &= ~(1<<0 | 1<<1 | 1<<2 | 1<<3);
    12ce:	84 b1       	in	r24, 0x04	; 4
    12d0:	80 7f       	andi	r24, 0xF0	; 240
    12d2:	84 b9       	out	0x04, r24	; 4
    PORTB &= ~(1<<0 | 1<<1 | 1<<2 | 1<<3);
    12d4:	85 b1       	in	r24, 0x05	; 5
    12d6:	80 7f       	andi	r24, 0xF0	; 240
    12d8:	85 b9       	out	0x05, r24	; 5
    DDRD  &= ~(1<<2 | 1<<3);
    12da:	8a b1       	in	r24, 0x0a	; 10
    12dc:	83 7f       	andi	r24, 0xF3	; 243
    12de:	8a b9       	out	0x0a, r24	; 10
    PORTD &= ~(1<<2 | 1<<3);
    12e0:	8b b1       	in	r24, 0x0b	; 11
    12e2:	83 7f       	andi	r24, 0xF3	; 243
    12e4:	8b b9       	out	0x0b, r24	; 11
    DDRC  &= ~(1<<6);
    12e6:	3e 98       	cbi	0x07, 6	; 7
    PORTC &= ~(1<<6);
    12e8:	46 98       	cbi	0x08, 6	; 8
    12ea:	08 95       	ret

000012ec <matrix_init>:

void matrix_init(void)
{
    // initialize row and col

    mcp23018_status = init_mcp23018();
    12ec:	0e 94 b4 08 	call	0x1168	; 0x1168 <init_mcp23018>
    12f0:	80 93 00 01 	sts	0x0100, r24


    unselect_rows();
    12f4:	0e 94 4e 09 	call	0x129c	; 0x129c <unselect_rows>
    // init on mcp23018
    // not needed, already done as part of init_mcp23018()

    // init on teensy
    // Input with pull-up(DDR:0, PORT:1)
    DDRF  &= ~(1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<1 | 1<<0);
    12f8:	80 b3       	in	r24, 0x10	; 16
    12fa:	8c 70       	andi	r24, 0x0C	; 12
    12fc:	80 bb       	out	0x10, r24	; 16
    PORTF |=  (1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<1 | 1<<0);
    12fe:	81 b3       	in	r24, 0x11	; 17
    1300:	83 6f       	ori	r24, 0xF3	; 243
    1302:	81 bb       	out	0x11, r24	; 17
    1304:	ec e4       	ldi	r30, 0x4C	; 76
    1306:	f1 e0       	ldi	r31, 0x01	; 1
    1308:	ae e3       	ldi	r26, 0x3E	; 62
    130a:	b1 e0       	ldi	r27, 0x01	; 1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
    130c:	11 92       	st	Z+, r1
        matrix_debouncing[i] = 0;
    130e:	1d 92       	st	X+, r1

    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	ea 35       	cpi	r30, 0x5A	; 90
    1314:	f8 07       	cpc	r31, r24
    1316:	d1 f7       	brne	.-12     	; 0x130c <matrix_init+0x20>
#ifdef DEBUG_MATRIX_SCAN_RATE
    matrix_timer = timer_read32();
    matrix_scan_count = 0;
#endif

    if (matrix_init_kb) {
    1318:	87 e9       	ldi	r24, 0x97	; 151
    131a:	98 e0       	ldi	r25, 0x08	; 8
    131c:	89 2b       	or	r24, r25
    131e:	11 f0       	breq	.+4      	; 0x1324 <matrix_init+0x38>
        (*matrix_init_kb)();
    1320:	0c 94 97 08 	jmp	0x112e	; 0x112e <matrix_init_kb>
    1324:	08 95       	ret

00001326 <matrix_scan>:
    }

}

uint8_t matrix_scan(void)
{
    1326:	9f 92       	push	r9
    1328:	af 92       	push	r10
    132a:	bf 92       	push	r11
    132c:	cf 92       	push	r12
    132e:	df 92       	push	r13
    1330:	ef 92       	push	r14
    1332:	ff 92       	push	r15
    1334:	0f 93       	push	r16
    1336:	1f 93       	push	r17
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    if (mcp23018_status) { // if there was an error
    133c:	80 91 00 01 	lds	r24, 0x0100
    1340:	88 23       	and	r24, r24
    1342:	e1 f0       	breq	.+56     	; 0x137c <matrix_scan+0x56>
        if (++mcp23018_reset_loop == 0) {
    1344:	80 91 3d 01 	lds	r24, 0x013D
    1348:	8f 5f       	subi	r24, 0xFF	; 255
    134a:	80 93 3d 01 	sts	0x013D, r24
    134e:	81 11       	cpse	r24, r1
    1350:	15 c0       	rjmp	.+42     	; 0x137c <matrix_scan+0x56>
            // since mcp23018_reset_loop is 8 bit - we'll try to reset once in 255 matrix scans
            // this will be approx bit more frequent than once per second
            print("trying to reset mcp23018\n");
    1352:	8b e4       	ldi	r24, 0x4B	; 75
    1354:	93 e0       	ldi	r25, 0x03	; 3
    1356:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
            mcp23018_status = init_mcp23018();
    135a:	0e 94 b4 08 	call	0x1168	; 0x1168 <init_mcp23018>
    135e:	80 93 00 01 	sts	0x0100, r24
            if (mcp23018_status) {
    1362:	88 23       	and	r24, r24
    1364:	29 f0       	breq	.+10     	; 0x1370 <matrix_scan+0x4a>
                print("left side not responding\n");
    1366:	81 e3       	ldi	r24, 0x31	; 49
    1368:	93 e0       	ldi	r25, 0x03	; 3
    136a:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    136e:	06 c0       	rjmp	.+12     	; 0x137c <matrix_scan+0x56>
            } else {
                print("left side attached\n");
    1370:	8d e1       	ldi	r24, 0x1D	; 29
    1372:	93 e0       	ldi	r25, 0x03	; 3
    1374:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
                ergodox_blink_all_leds();
    1378:	0e 94 3f 08 	call	0x107e	; 0x107e <ergodox_blink_all_leds>
    }

}

uint8_t matrix_scan(void)
{
    137c:	0e e3       	ldi	r16, 0x3E	; 62
    137e:	11 e0       	ldi	r17, 0x01	; 1
    1380:	c0 e0       	ldi	r28, 0x00	; 0
    1382:	d0 e0       	ldi	r29, 0x00	; 0
    1384:	bb 24       	eor	r11, r11
    1386:	b3 94       	inc	r11
            return data;
        }
    } else {
        _delay_us(30);  // without this wait read unstable value.
        // read from teensy
        return
    1388:	82 e0       	ldi	r24, 0x02	; 2
    138a:	a8 2e       	mov	r10, r24
        } else {
            // set active row low  : 0
            // set other rows hi-Z : 1
            mcp23018_status = i2c_start(I2C_ADDR_WRITE);        if (mcp23018_status) goto out;
            mcp23018_status = i2c_write(GPIOA);                 if (mcp23018_status) goto out;
            mcp23018_status = i2c_write( 0xFF & ~(1<<row)
    138c:	cc 24       	eor	r12, r12
    138e:	c3 94       	inc	r12
    1390:	d1 2c       	mov	r13, r1
        select_row(i);
        matrix_row_t cols = read_cols(i);
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
    1392:	2e e0       	ldi	r18, 0x0E	; 14
    1394:	e2 2e       	mov	r14, r18
    1396:	23 e0       	ldi	r18, 0x03	; 3
    1398:	f2 2e       	mov	r15, r18
    PORTC &= ~(1<<6);
}

static void select_row(uint8_t row)
{
    if (row < 7) {
    139a:	c7 30       	cpi	r28, 0x07	; 7
    139c:	00 f5       	brcc	.+64     	; 0x13de <matrix_scan+0xb8>
        // select on mcp23018
        if (mcp23018_status) { // if there was an error
    139e:	80 91 00 01 	lds	r24, 0x0100
    13a2:	81 11       	cpse	r24, r1
    13a4:	62 c0       	rjmp	.+196    	; 0x146a <matrix_scan+0x144>
            // do nothing
        } else {
            // set active row low  : 0
            // set other rows hi-Z : 1
            mcp23018_status = i2c_start(I2C_ADDR_WRITE);        if (mcp23018_status) goto out;
    13a6:	80 e4       	ldi	r24, 0x40	; 64
    13a8:	0e 94 09 09 	call	0x1212	; 0x1212 <i2c_start>
    13ac:	80 93 00 01 	sts	0x0100, r24
    13b0:	81 11       	cpse	r24, r1
    13b2:	12 c0       	rjmp	.+36     	; 0x13d8 <matrix_scan+0xb2>
            mcp23018_status = i2c_write(GPIOA);                 if (mcp23018_status) goto out;
    13b4:	82 e1       	ldi	r24, 0x12	; 18
    13b6:	0e 94 33 09 	call	0x1266	; 0x1266 <i2c_write>
    13ba:	80 93 00 01 	sts	0x0100, r24
    13be:	81 11       	cpse	r24, r1
    13c0:	0b c0       	rjmp	.+22     	; 0x13d8 <matrix_scan+0xb2>
            mcp23018_status = i2c_write( 0xFF & ~(1<<row)
    13c2:	c6 01       	movw	r24, r12
    13c4:	0c 2e       	mov	r0, r28
    13c6:	01 c0       	rjmp	.+2      	; 0x13ca <matrix_scan+0xa4>
    13c8:	88 0f       	add	r24, r24
    13ca:	0a 94       	dec	r0
    13cc:	ea f7       	brpl	.-6      	; 0x13c8 <matrix_scan+0xa2>
    13ce:	80 95       	com	r24
    13d0:	0e 94 33 09 	call	0x1266	; 0x1266 <i2c_write>
    13d4:	80 93 00 01 	sts	0x0100, r24
                                  & ~(0<<7)
                              );                                if (mcp23018_status) goto out;
        out:
            i2c_stop();
    13d8:	0e 94 2b 09 	call	0x1256	; 0x1256 <i2c_stop>
    13dc:	46 c0       	rjmp	.+140    	; 0x146a <matrix_scan+0x144>
        }
    } else {
        // select on teensy
        // Output low(DDR:1, PORT:0) to select
        switch (row) {
    13de:	ca 30       	cpi	r28, 0x0A	; 10
    13e0:	a1 f0       	breq	.+40     	; 0x140a <matrix_scan+0xe4>
    13e2:	28 f4       	brcc	.+10     	; 0x13ee <matrix_scan+0xc8>
    13e4:	c8 30       	cpi	r28, 0x08	; 8
    13e6:	59 f0       	breq	.+22     	; 0x13fe <matrix_scan+0xd8>
    13e8:	c9 30       	cpi	r28, 0x09	; 9
    13ea:	61 f0       	breq	.+24     	; 0x1404 <matrix_scan+0xde>
    13ec:	05 c0       	rjmp	.+10     	; 0x13f8 <matrix_scan+0xd2>
    13ee:	cc 30       	cpi	r28, 0x0C	; 12
    13f0:	89 f0       	breq	.+34     	; 0x1414 <matrix_scan+0xee>
    13f2:	70 f0       	brcs	.+28     	; 0x1410 <matrix_scan+0xea>
    13f4:	cd 30       	cpi	r28, 0x0D	; 13
    13f6:	89 f0       	breq	.+34     	; 0x141a <matrix_scan+0xf4>
            case 7:
                DDRB  |= (1<<0);
    13f8:	20 9a       	sbi	0x04, 0	; 4
                PORTB &= ~(1<<0);
    13fa:	28 98       	cbi	0x05, 0	; 5
    13fc:	10 c0       	rjmp	.+32     	; 0x141e <matrix_scan+0xf8>
                break;
            case 8:
                DDRB  |= (1<<1);
    13fe:	21 9a       	sbi	0x04, 1	; 4
                PORTB &= ~(1<<1);
    1400:	29 98       	cbi	0x05, 1	; 5
    1402:	0d c0       	rjmp	.+26     	; 0x141e <matrix_scan+0xf8>
                break;
            case 9:
                DDRB  |= (1<<2);
    1404:	22 9a       	sbi	0x04, 2	; 4
                PORTB &= ~(1<<2);
    1406:	2a 98       	cbi	0x05, 2	; 5
    1408:	0a c0       	rjmp	.+20     	; 0x141e <matrix_scan+0xf8>
                break;
            case 10:
                DDRB  |= (1<<3);
    140a:	23 9a       	sbi	0x04, 3	; 4
                PORTB &= ~(1<<3);
    140c:	2b 98       	cbi	0x05, 3	; 5
    140e:	07 c0       	rjmp	.+14     	; 0x141e <matrix_scan+0xf8>
                break;
            case 11:
                DDRD  |= (1<<2);
    1410:	52 9a       	sbi	0x0a, 2	; 10
    1412:	01 c0       	rjmp	.+2      	; 0x1416 <matrix_scan+0xf0>
                PORTD &= ~(1<<3);
                break;
            case 12:
                DDRD  |= (1<<3);
    1414:	53 9a       	sbi	0x0a, 3	; 10
                PORTD &= ~(1<<3);
    1416:	5b 98       	cbi	0x0b, 3	; 11
    1418:	02 c0       	rjmp	.+4      	; 0x141e <matrix_scan+0xf8>
                break;
            case 13:
                DDRC  |= (1<<6);
    141a:	3e 9a       	sbi	0x07, 6	; 7
                PORTC &= ~(1<<6);
    141c:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    141e:	e0 ea       	ldi	r30, 0xA0	; 160
    1420:	ea 95       	dec	r30
    1422:	f1 f7       	brne	.-4      	; 0x1420 <matrix_scan+0xfa>
        }
    } else {
        _delay_us(30);  // without this wait read unstable value.
        // read from teensy
        return
            (PINF&(1<<0) ? 0 : (1<<0)) |
    1424:	8f b1       	in	r24, 0x0f	; 15
            return data;
        }
    } else {
        _delay_us(30);  // without this wait read unstable value.
        // read from teensy
        return
    1426:	79 99       	sbic	0x0f, 1	; 15
    1428:	85 c0       	rjmp	.+266    	; 0x1534 <matrix_scan+0x20e>
    142a:	92 e0       	ldi	r25, 0x02	; 2
            (PINF&(1<<0) ? 0 : (1<<0)) |
    142c:	81 70       	andi	r24, 0x01	; 1
    142e:	8b 25       	eor	r24, r11
            return data;
        }
    } else {
        _delay_us(30);  // without this wait read unstable value.
        // read from teensy
        return
    1430:	89 2b       	or	r24, r25
    1432:	7c 9b       	sbis	0x0f, 4	; 15
    1434:	02 c0       	rjmp	.+4      	; 0x143a <matrix_scan+0x114>
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	01 c0       	rjmp	.+2      	; 0x143c <matrix_scan+0x116>
    143a:	94 e0       	ldi	r25, 0x04	; 4
    143c:	89 2b       	or	r24, r25
    143e:	7d 9b       	sbis	0x0f, 5	; 15
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <matrix_scan+0x120>
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	01 c0       	rjmp	.+2      	; 0x1448 <matrix_scan+0x122>
    1446:	98 e0       	ldi	r25, 0x08	; 8
    1448:	89 2b       	or	r24, r25
    144a:	7e 9b       	sbis	0x0f, 6	; 15
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <matrix_scan+0x12c>
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	01 c0       	rjmp	.+2      	; 0x1454 <matrix_scan+0x12e>
    1452:	90 e1       	ldi	r25, 0x10	; 16
    1454:	89 2b       	or	r24, r25
            (PINF&(1<<0) ? 0 : (1<<0)) |
            (PINF&(1<<1) ? 0 : (1<<1)) |
            (PINF&(1<<4) ? 0 : (1<<2)) |
            (PINF&(1<<5) ? 0 : (1<<3)) |
            (PINF&(1<<6) ? 0 : (1<<4)) |
            (PINF&(1<<7) ? 0 : (1<<5)) ;
    1456:	9f b1       	in	r25, 0x0f	; 15
            return data;
        }
    } else {
        _delay_us(30);  // without this wait read unstable value.
        // read from teensy
        return
    1458:	90 95       	com	r25
    145a:	99 1f       	adc	r25, r25
    145c:	99 27       	eor	r25, r25
    145e:	99 1f       	adc	r25, r25
    1460:	92 95       	swap	r25
    1462:	99 0f       	add	r25, r25
    1464:	90 7e       	andi	r25, 0xE0	; 224
    1466:	89 2b       	or	r24, r25
    1468:	10 c0       	rjmp	.+32     	; 0x148a <matrix_scan+0x164>
}

static matrix_row_t read_cols(uint8_t row)
{
    if (row < 7) {
        if (mcp23018_status) { // if there was an error
    146a:	80 91 00 01 	lds	r24, 0x0100
    146e:	81 11       	cpse	r24, r1
    1470:	76 c0       	rjmp	.+236    	; 0x155e <matrix_scan+0x238>
            return 0;
        } else {
            uint8_t data = 0;
            mcp23018_status = i2c_start(I2C_ADDR_WRITE);    if (mcp23018_status) goto out;
    1472:	80 e4       	ldi	r24, 0x40	; 64
    1474:	0e 94 09 09 	call	0x1212	; 0x1212 <i2c_start>
    1478:	80 93 00 01 	sts	0x0100, r24
    147c:	88 23       	and	r24, r24
    147e:	09 f4       	brne	.+2      	; 0x1482 <matrix_scan+0x15c>
    1480:	5b c0       	rjmp	.+182    	; 0x1538 <matrix_scan+0x212>
{
    if (row < 7) {
        if (mcp23018_status) { // if there was an error
            return 0;
        } else {
            uint8_t data = 0;
    1482:	91 2c       	mov	r9, r1
            mcp23018_status = i2c_write(GPIOB);             if (mcp23018_status) goto out;
            mcp23018_status = i2c_start(I2C_ADDR_READ);     if (mcp23018_status) goto out;
            data = i2c_readNak();
            data = ~data;
        out:
            i2c_stop();
    1484:	0e 94 2b 09 	call	0x1256	; 0x1256 <i2c_stop>
            return data;
    1488:	89 2d       	mov	r24, r9
#endif

    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        matrix_row_t cols = read_cols(i);
        if (matrix_debouncing[i] != cols) {
    148a:	f8 01       	movw	r30, r16
    148c:	90 81       	ld	r25, Z
    148e:	98 17       	cp	r25, r24
    1490:	39 f1       	breq	.+78     	; 0x14e0 <matrix_scan+0x1ba>
            matrix_debouncing[i] = cols;
    1492:	80 83       	st	Z, r24
            if (debouncing) {
    1494:	80 91 01 01 	lds	r24, 0x0101
    1498:	88 23       	and	r24, r24
    149a:	01 f1       	breq	.+64     	; 0x14dc <matrix_scan+0x1b6>
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
    149c:	80 91 d7 01 	lds	r24, 0x01D7
    14a0:	80 ff       	sbrs	r24, 0
    14a2:	04 c0       	rjmp	.+8      	; 0x14ac <matrix_scan+0x186>
    14a4:	83 e1       	ldi	r24, 0x13	; 19
    14a6:	93 e0       	ldi	r25, 0x03	; 3
    14a8:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    14ac:	80 91 d7 01 	lds	r24, 0x01D7
    14b0:	80 ff       	sbrs	r24, 0
    14b2:	0c c0       	rjmp	.+24     	; 0x14cc <matrix_scan+0x1a6>
    14b4:	80 91 01 01 	lds	r24, 0x0101
    14b8:	1f 92       	push	r1
    14ba:	8f 93       	push	r24
    14bc:	ff 92       	push	r15
    14be:	ef 92       	push	r14
    14c0:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	80 91 d7 01 	lds	r24, 0x01D7
    14d0:	80 ff       	sbrs	r24, 0
    14d2:	04 c0       	rjmp	.+8      	; 0x14dc <matrix_scan+0x1b6>
    14d4:	8c e0       	ldi	r24, 0x0C	; 12
    14d6:	93 e0       	ldi	r25, 0x03	; 3
    14d8:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
            }
            debouncing = DEBOUNCE;
    14dc:	a0 92 01 01 	sts	0x0101, r10
        }
        unselect_rows();
    14e0:	0e 94 4e 09 	call	0x129c	; 0x129c <unselect_rows>
    14e4:	21 96       	adiw	r28, 0x01	; 1
    14e6:	0f 5f       	subi	r16, 0xFF	; 255
    14e8:	1f 4f       	sbci	r17, 0xFF	; 255
        matrix_timer = timer_now;
        matrix_scan_count = 0;
    }
#endif

    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    14ea:	ce 30       	cpi	r28, 0x0E	; 14
    14ec:	d1 05       	cpc	r29, r1
    14ee:	09 f0       	breq	.+2      	; 0x14f2 <matrix_scan+0x1cc>
    14f0:	54 cf       	rjmp	.-344    	; 0x139a <matrix_scan+0x74>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
    14f2:	80 91 01 01 	lds	r24, 0x0101
    14f6:	88 23       	and	r24, r24
    14f8:	b1 f0       	breq	.+44     	; 0x1526 <matrix_scan+0x200>
        if (--debouncing) {
    14fa:	81 50       	subi	r24, 0x01	; 1
    14fc:	80 93 01 01 	sts	0x0101, r24
    1500:	88 23       	and	r24, r24
    1502:	39 f0       	breq	.+14     	; 0x1512 <matrix_scan+0x1ec>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1504:	8f e9       	ldi	r24, 0x9F	; 159
    1506:	9f e0       	ldi	r25, 0x0F	; 15
    1508:	01 97       	sbiw	r24, 0x01	; 1
    150a:	f1 f7       	brne	.-4      	; 0x1508 <matrix_scan+0x1e2>
    150c:	00 c0       	rjmp	.+0      	; 0x150e <matrix_scan+0x1e8>
    150e:	00 00       	nop
    1510:	0a c0       	rjmp	.+20     	; 0x1526 <matrix_scan+0x200>
    1512:	ac e4       	ldi	r26, 0x4C	; 76
    1514:	b1 e0       	ldi	r27, 0x01	; 1
    1516:	ee e3       	ldi	r30, 0x3E	; 62
    1518:	f1 e0       	ldi	r31, 0x01	; 1
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
    151a:	81 91       	ld	r24, Z+
    151c:	8d 93       	st	X+, r24

    if (debouncing) {
        if (--debouncing) {
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    151e:	91 e0       	ldi	r25, 0x01	; 1
    1520:	ec 34       	cpi	r30, 0x4C	; 76
    1522:	f9 07       	cpc	r31, r25
    1524:	d1 f7       	brne	.-12     	; 0x151a <matrix_scan+0x1f4>
            }
        }
    }


    if (matrix_scan_kb) {
    1526:	86 e3       	ldi	r24, 0x36	; 54
    1528:	98 e0       	ldi	r25, 0x08	; 8
    152a:	89 2b       	or	r24, r25
    152c:	d1 f0       	breq	.+52     	; 0x1562 <matrix_scan+0x23c>
        (*matrix_scan_kb)();
    152e:	0e 94 36 08 	call	0x106c	; 0x106c <matrix_scan_kb>
    1532:	17 c0       	rjmp	.+46     	; 0x1562 <matrix_scan+0x23c>
            return data;
        }
    } else {
        _delay_us(30);  // without this wait read unstable value.
        // read from teensy
        return
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	7a cf       	rjmp	.-268    	; 0x142c <matrix_scan+0x106>
        if (mcp23018_status) { // if there was an error
            return 0;
        } else {
            uint8_t data = 0;
            mcp23018_status = i2c_start(I2C_ADDR_WRITE);    if (mcp23018_status) goto out;
            mcp23018_status = i2c_write(GPIOB);             if (mcp23018_status) goto out;
    1538:	83 e1       	ldi	r24, 0x13	; 19
    153a:	0e 94 33 09 	call	0x1266	; 0x1266 <i2c_write>
    153e:	80 93 00 01 	sts	0x0100, r24
    1542:	81 11       	cpse	r24, r1
    1544:	9e cf       	rjmp	.-196    	; 0x1482 <matrix_scan+0x15c>
            mcp23018_status = i2c_start(I2C_ADDR_READ);     if (mcp23018_status) goto out;
    1546:	81 e4       	ldi	r24, 0x41	; 65
    1548:	0e 94 09 09 	call	0x1212	; 0x1212 <i2c_start>
    154c:	80 93 00 01 	sts	0x0100, r24
    1550:	81 11       	cpse	r24, r1
    1552:	97 cf       	rjmp	.-210    	; 0x1482 <matrix_scan+0x15c>
            data = i2c_readNak();
    1554:	0e 94 44 09 	call	0x1288	; 0x1288 <i2c_readNak>
            data = ~data;
    1558:	98 2e       	mov	r9, r24
    155a:	90 94       	com	r9
    155c:	93 cf       	rjmp	.-218    	; 0x1484 <matrix_scan+0x15e>

static matrix_row_t read_cols(uint8_t row)
{
    if (row < 7) {
        if (mcp23018_status) { // if there was an error
            return 0;
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	94 cf       	rjmp	.-216    	; 0x148a <matrix_scan+0x164>
    if (matrix_scan_kb) {
        (*matrix_scan_kb)();
    }

    return 1;
}
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	df 91       	pop	r29
    1566:	cf 91       	pop	r28
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	ff 90       	pop	r15
    156e:	ef 90       	pop	r14
    1570:	df 90       	pop	r13
    1572:	cf 90       	pop	r12
    1574:	bf 90       	pop	r11
    1576:	af 90       	pop	r10
    1578:	9f 90       	pop	r9
    157a:	08 95       	ret

0000157c <matrix_get_row>:
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    157c:	e8 2f       	mov	r30, r24
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	e4 5b       	subi	r30, 0xB4	; 180
    1582:	fe 4f       	sbci	r31, 0xFE	; 254
}
    1584:	80 81       	ld	r24, Z
    1586:	08 95       	ret

00001588 <matrix_print>:

void matrix_print(void)
{
    1588:	cf 92       	push	r12
    158a:	df 92       	push	r13
    158c:	ef 92       	push	r14
    158e:	ff 92       	push	r15
    1590:	0f 93       	push	r16
    1592:	1f 93       	push	r17
    1594:	cf 93       	push	r28
    1596:	df 93       	push	r29
    print("\nr/c 0123456789ABCDEF\n");
    1598:	85 ef       	ldi	r24, 0xF5	; 245
    159a:	92 e0       	ldi	r25, 0x02	; 2
    159c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    15a0:	3c e4       	ldi	r19, 0x4C	; 76
    15a2:	e3 2e       	mov	r14, r19
    15a4:	31 e0       	ldi	r19, 0x01	; 1
    15a6:	f3 2e       	mov	r15, r19
    15a8:	c0 e0       	ldi	r28, 0x00	; 0
    15aa:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    15ac:	40 ef       	ldi	r20, 0xF0	; 240
    15ae:	c4 2e       	mov	r12, r20
    15b0:	42 e0       	ldi	r20, 0x02	; 2
    15b2:	d4 2e       	mov	r13, r20
        pbin_reverse16(matrix_get_row(row));
    15b4:	07 ee       	ldi	r16, 0xE7	; 231
    15b6:	12 e0       	ldi	r17, 0x02	; 2

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    15b8:	df 93       	push	r29
    15ba:	cf 93       	push	r28
    15bc:	df 92       	push	r13
    15be:	cf 92       	push	r12
    15c0:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    15c4:	8d ee       	ldi	r24, 0xED	; 237
    15c6:	92 e0       	ldi	r25, 0x02	; 2
    15c8:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    15cc:	f7 01       	movw	r30, r14
    15ce:	81 91       	ld	r24, Z+
    15d0:	7f 01       	movw	r14, r30
void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	0e 94 87 21 	call	0x430e	; 0x430e <bitrev16>
    15d8:	9f 93       	push	r25
    15da:	8f 93       	push	r24
    15dc:	1f 93       	push	r17
    15de:	0f 93       	push	r16
    15e0:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
        print("\n");
    15e4:	85 ee       	ldi	r24, 0xE5	; 229
    15e6:	92 e0       	ldi	r25, 0x02	; 2
    15e8:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    15ec:	21 96       	adiw	r28, 0x01	; 1
}

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    15ee:	8d b7       	in	r24, 0x3d	; 61
    15f0:	9e b7       	in	r25, 0x3e	; 62
    15f2:	08 96       	adiw	r24, 0x08	; 8
    15f4:	0f b6       	in	r0, 0x3f	; 63
    15f6:	f8 94       	cli
    15f8:	9e bf       	out	0x3e, r25	; 62
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	8d bf       	out	0x3d, r24	; 61
    15fe:	ce 30       	cpi	r28, 0x0E	; 14
    1600:	d1 05       	cpc	r29, r1
    1602:	d1 f6       	brne	.-76     	; 0x15b8 <matrix_print+0x30>
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	1f 91       	pop	r17
    160a:	0f 91       	pop	r16
    160c:	ff 90       	pop	r15
    160e:	ef 90       	pop	r14
    1610:	df 90       	pop	r13
    1612:	cf 90       	pop	r12
    1614:	08 95       	ret

00001616 <keycode_to_action>:

/* translates keycode to action */
static action_t keycode_to_action(uint16_t keycode)
{
    action_t action;
    switch (keycode) {
    1616:	8b 3b       	cpi	r24, 0xBB	; 187
    1618:	91 05       	cpc	r25, r1
    161a:	78 f4       	brcc	.+30     	; 0x163a <keycode_to_action+0x24>
    161c:	88 3a       	cpi	r24, 0xA8	; 168
    161e:	91 05       	cpc	r25, r1
    1620:	40 f5       	brcc	.+80     	; 0x1672 <keycode_to_action+0x5c>
    1622:	85 3a       	cpi	r24, 0xA5	; 165
    1624:	91 05       	cpc	r25, r1
    1626:	d0 f4       	brcc	.+52     	; 0x165c <keycode_to_action+0x46>
    1628:	84 30       	cpi	r24, 0x04	; 4
    162a:	91 05       	cpc	r25, r1
    162c:	08 f0       	brcs	.+2      	; 0x1630 <keycode_to_action+0x1a>
    162e:	b1 c0       	rjmp	.+354    	; 0x1792 <keycode_to_action+0x17c>
    1630:	81 30       	cpi	r24, 0x01	; 1
    1632:	91 05       	cpc	r25, r1
    1634:	09 f4       	brne	.+2      	; 0x1638 <keycode_to_action+0x22>
    1636:	ad c0       	rjmp	.+346    	; 0x1792 <keycode_to_action+0x17c>
    1638:	6b c0       	rjmp	.+214    	; 0x1710 <keycode_to_action+0xfa>
    163a:	80 3e       	cpi	r24, 0xE0	; 224
    163c:	91 05       	cpc	r25, r1
    163e:	08 f4       	brcc	.+2      	; 0x1642 <keycode_to_action+0x2c>
    1640:	67 c0       	rjmp	.+206    	; 0x1710 <keycode_to_action+0xfa>
    1642:	88 3e       	cpi	r24, 0xE8	; 232
    1644:	91 05       	cpc	r25, r1
    1646:	08 f4       	brcc	.+2      	; 0x164a <keycode_to_action+0x34>
    1648:	a4 c0       	rjmp	.+328    	; 0x1792 <keycode_to_action+0x17c>
    164a:	9c 01       	movw	r18, r24
    164c:	20 5f       	subi	r18, 0xF0	; 240
    164e:	31 09       	sbc	r19, r1
    1650:	20 31       	cpi	r18, 0x10	; 16
    1652:	31 05       	cpc	r19, r1
    1654:	08 f0       	brcs	.+2      	; 0x1658 <keycode_to_action+0x42>
    1656:	5c c0       	rjmp	.+184    	; 0x1710 <keycode_to_action+0xfa>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
    1658:	90 65       	ori	r25, 0x50	; 80
            break;
    165a:	08 95       	ret
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    165c:	85 3a       	cpi	r24, 0xA5	; 165
    165e:	91 05       	cpc	r25, r1
    1660:	09 f4       	brne	.+2      	; 0x1664 <keycode_to_action+0x4e>
    1662:	59 c0       	rjmp	.+178    	; 0x1716 <keycode_to_action+0x100>
    1664:	86 3a       	cpi	r24, 0xA6	; 166
    1666:	91 05       	cpc	r25, r1
    1668:	09 f4       	brne	.+2      	; 0x166c <keycode_to_action+0x56>
    166a:	58 c0       	rjmp	.+176    	; 0x171c <keycode_to_action+0x106>
    166c:	83 e8       	ldi	r24, 0x83	; 131
    166e:	90 e4       	ldi	r25, 0x40	; 64
    1670:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    1672:	88 3a       	cpi	r24, 0xA8	; 168
    1674:	91 05       	cpc	r25, r1
    1676:	09 f4       	brne	.+2      	; 0x167a <keycode_to_action+0x64>
    1678:	54 c0       	rjmp	.+168    	; 0x1722 <keycode_to_action+0x10c>
    167a:	89 3a       	cpi	r24, 0xA9	; 169
    167c:	91 05       	cpc	r25, r1
    167e:	09 f4       	brne	.+2      	; 0x1682 <keycode_to_action+0x6c>
    1680:	53 c0       	rjmp	.+166    	; 0x1728 <keycode_to_action+0x112>
    1682:	8a 3a       	cpi	r24, 0xAA	; 170
    1684:	91 05       	cpc	r25, r1
    1686:	09 f4       	brne	.+2      	; 0x168a <keycode_to_action+0x74>
    1688:	52 c0       	rjmp	.+164    	; 0x172e <keycode_to_action+0x118>
    168a:	8b 3a       	cpi	r24, 0xAB	; 171
    168c:	91 05       	cpc	r25, r1
    168e:	09 f4       	brne	.+2      	; 0x1692 <keycode_to_action+0x7c>
    1690:	51 c0       	rjmp	.+162    	; 0x1734 <keycode_to_action+0x11e>
    1692:	8c 3a       	cpi	r24, 0xAC	; 172
    1694:	91 05       	cpc	r25, r1
    1696:	09 f4       	brne	.+2      	; 0x169a <keycode_to_action+0x84>
    1698:	50 c0       	rjmp	.+160    	; 0x173a <keycode_to_action+0x124>
    169a:	8d 3a       	cpi	r24, 0xAD	; 173
    169c:	91 05       	cpc	r25, r1
    169e:	09 f4       	brne	.+2      	; 0x16a2 <keycode_to_action+0x8c>
    16a0:	4f c0       	rjmp	.+158    	; 0x1740 <keycode_to_action+0x12a>
    16a2:	80 3b       	cpi	r24, 0xB0	; 176
    16a4:	91 05       	cpc	r25, r1
    16a6:	09 f4       	brne	.+2      	; 0x16aa <keycode_to_action+0x94>
    16a8:	4e c0       	rjmp	.+156    	; 0x1746 <keycode_to_action+0x130>
    16aa:	8e 3a       	cpi	r24, 0xAE	; 174
    16ac:	91 05       	cpc	r25, r1
    16ae:	09 f4       	brne	.+2      	; 0x16b2 <keycode_to_action+0x9c>
    16b0:	4d c0       	rjmp	.+154    	; 0x174c <keycode_to_action+0x136>
    16b2:	8f 3a       	cpi	r24, 0xAF	; 175
    16b4:	91 05       	cpc	r25, r1
    16b6:	09 f4       	brne	.+2      	; 0x16ba <keycode_to_action+0xa4>
    16b8:	4c c0       	rjmp	.+152    	; 0x1752 <keycode_to_action+0x13c>
    16ba:	81 3b       	cpi	r24, 0xB1	; 177
    16bc:	91 05       	cpc	r25, r1
    16be:	09 f4       	brne	.+2      	; 0x16c2 <keycode_to_action+0xac>
    16c0:	4b c0       	rjmp	.+150    	; 0x1758 <keycode_to_action+0x142>
    16c2:	82 3b       	cpi	r24, 0xB2	; 178
    16c4:	91 05       	cpc	r25, r1
    16c6:	09 f4       	brne	.+2      	; 0x16ca <keycode_to_action+0xb4>
    16c8:	4a c0       	rjmp	.+148    	; 0x175e <keycode_to_action+0x148>
    16ca:	83 3b       	cpi	r24, 0xB3	; 179
    16cc:	91 05       	cpc	r25, r1
    16ce:	09 f4       	brne	.+2      	; 0x16d2 <keycode_to_action+0xbc>
    16d0:	49 c0       	rjmp	.+146    	; 0x1764 <keycode_to_action+0x14e>
    16d2:	84 3b       	cpi	r24, 0xB4	; 180
    16d4:	91 05       	cpc	r25, r1
    16d6:	09 f4       	brne	.+2      	; 0x16da <keycode_to_action+0xc4>
    16d8:	48 c0       	rjmp	.+144    	; 0x176a <keycode_to_action+0x154>
    16da:	85 3b       	cpi	r24, 0xB5	; 181
    16dc:	91 05       	cpc	r25, r1
    16de:	09 f4       	brne	.+2      	; 0x16e2 <keycode_to_action+0xcc>
    16e0:	47 c0       	rjmp	.+142    	; 0x1770 <keycode_to_action+0x15a>
    16e2:	86 3b       	cpi	r24, 0xB6	; 182
    16e4:	91 05       	cpc	r25, r1
    16e6:	09 f4       	brne	.+2      	; 0x16ea <keycode_to_action+0xd4>
    16e8:	46 c0       	rjmp	.+140    	; 0x1776 <keycode_to_action+0x160>
    16ea:	87 3b       	cpi	r24, 0xB7	; 183
    16ec:	91 05       	cpc	r25, r1
    16ee:	09 f4       	brne	.+2      	; 0x16f2 <keycode_to_action+0xdc>
    16f0:	45 c0       	rjmp	.+138    	; 0x177c <keycode_to_action+0x166>
    16f2:	88 3b       	cpi	r24, 0xB8	; 184
    16f4:	91 05       	cpc	r25, r1
    16f6:	09 f4       	brne	.+2      	; 0x16fa <keycode_to_action+0xe4>
    16f8:	44 c0       	rjmp	.+136    	; 0x1782 <keycode_to_action+0x16c>
    16fa:	89 3b       	cpi	r24, 0xB9	; 185
    16fc:	91 05       	cpc	r25, r1
    16fe:	09 f4       	brne	.+2      	; 0x1702 <keycode_to_action+0xec>
    1700:	43 c0       	rjmp	.+134    	; 0x1788 <keycode_to_action+0x172>
    1702:	8a 3b       	cpi	r24, 0xBA	; 186
    1704:	91 05       	cpc	r25, r1
    1706:	09 f0       	breq	.+2      	; 0x170a <keycode_to_action+0xf4>
    1708:	42 c0       	rjmp	.+132    	; 0x178e <keycode_to_action+0x178>
    170a:	8a e2       	ldi	r24, 0x2A	; 42
    170c:	96 e4       	ldi	r25, 0x46	; 70
    170e:	08 95       	ret
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
            break;
        default:
            action.code = ACTION_NO;
    1710:	80 e0       	ldi	r24, 0x00	; 0
    1712:	90 e0       	ldi	r25, 0x00	; 0
            break;
    1714:	08 95       	ret
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    1716:	81 e8       	ldi	r24, 0x81	; 129
    1718:	90 e4       	ldi	r25, 0x40	; 64
    171a:	08 95       	ret
    171c:	82 e8       	ldi	r24, 0x82	; 130
    171e:	90 e4       	ldi	r25, 0x40	; 64
    1720:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    1722:	82 ee       	ldi	r24, 0xE2	; 226
    1724:	94 e4       	ldi	r25, 0x44	; 68
    1726:	08 95       	ret
    1728:	89 ee       	ldi	r24, 0xE9	; 233
    172a:	94 e4       	ldi	r25, 0x44	; 68
    172c:	08 95       	ret
    172e:	8a ee       	ldi	r24, 0xEA	; 234
    1730:	94 e4       	ldi	r25, 0x44	; 68
    1732:	08 95       	ret
    1734:	85 eb       	ldi	r24, 0xB5	; 181
    1736:	94 e4       	ldi	r25, 0x44	; 68
    1738:	08 95       	ret
    173a:	86 eb       	ldi	r24, 0xB6	; 182
    173c:	94 e4       	ldi	r25, 0x44	; 68
    173e:	08 95       	ret
    1740:	87 eb       	ldi	r24, 0xB7	; 183
    1742:	94 e4       	ldi	r25, 0x44	; 68
    1744:	08 95       	ret
    1746:	8c ec       	ldi	r24, 0xCC	; 204
    1748:	94 e4       	ldi	r25, 0x44	; 68
    174a:	08 95       	ret
    174c:	8d ec       	ldi	r24, 0xCD	; 205
    174e:	94 e4       	ldi	r25, 0x44	; 68
    1750:	08 95       	ret
    1752:	83 e8       	ldi	r24, 0x83	; 131
    1754:	95 e4       	ldi	r25, 0x45	; 69
    1756:	08 95       	ret
    1758:	8a e8       	ldi	r24, 0x8A	; 138
    175a:	95 e4       	ldi	r25, 0x45	; 69
    175c:	08 95       	ret
    175e:	82 e9       	ldi	r24, 0x92	; 146
    1760:	95 e4       	ldi	r25, 0x45	; 69
    1762:	08 95       	ret
    1764:	84 e9       	ldi	r24, 0x94	; 148
    1766:	95 e4       	ldi	r25, 0x45	; 69
    1768:	08 95       	ret
    176a:	81 e2       	ldi	r24, 0x21	; 33
    176c:	96 e4       	ldi	r25, 0x46	; 70
    176e:	08 95       	ret
    1770:	83 e2       	ldi	r24, 0x23	; 35
    1772:	96 e4       	ldi	r25, 0x46	; 70
    1774:	08 95       	ret
    1776:	84 e2       	ldi	r24, 0x24	; 36
    1778:	96 e4       	ldi	r25, 0x46	; 70
    177a:	08 95       	ret
    177c:	85 e2       	ldi	r24, 0x25	; 37
    177e:	96 e4       	ldi	r25, 0x46	; 70
    1780:	08 95       	ret
    1782:	86 e2       	ldi	r24, 0x26	; 38
    1784:	96 e4       	ldi	r25, 0x46	; 70
    1786:	08 95       	ret
    1788:	87 e2       	ldi	r24, 0x27	; 39
    178a:	96 e4       	ldi	r25, 0x46	; 70
    178c:	08 95       	ret
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	94 e4       	ldi	r25, 0x44	; 68
        default:
            action.code = ACTION_NO;
            break;
    }
    return action;
}
    1792:	08 95       	ret

00001794 <action_function>:
}

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    1794:	08 95       	ret

00001796 <keymap_key_to_keycode>:

/* translates key to keycode */
uint16_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
	// Read entire word (16bits)
    return pgm_read_word(&keymaps[(layer)][(key.row)][(key.col)]);
    1796:	96 e0       	ldi	r25, 0x06	; 6
    1798:	79 9f       	mul	r23, r25
    179a:	f0 01       	movw	r30, r0
    179c:	11 24       	eor	r1, r1
    179e:	94 e5       	ldi	r25, 0x54	; 84
    17a0:	89 9f       	mul	r24, r25
    17a2:	e0 0d       	add	r30, r0
    17a4:	f1 1d       	adc	r31, r1
    17a6:	11 24       	eor	r1, r1
    17a8:	e6 0f       	add	r30, r22
    17aa:	f1 1d       	adc	r31, r1
    17ac:	ee 0f       	add	r30, r30
    17ae:	ff 1f       	adc	r31, r31
    17b0:	e3 51       	subi	r30, 0x13	; 19
    17b2:	ff 4f       	sbci	r31, 0xFF	; 255
}
    17b4:	85 91       	lpm	r24, Z+
    17b6:	94 91       	lpm	r25, Z
    17b8:	08 95       	ret

000017ba <keymap_fn_to_action>:

/* translates Fn keycode to action */
action_t keymap_fn_to_action(uint16_t keycode)
{
    return (action_t){ .code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]) };
    17ba:	88 0f       	add	r24, r24
    17bc:	99 1f       	adc	r25, r25
    17be:	87 59       	subi	r24, 0x97	; 151
    17c0:	90 40       	sbci	r25, 0x00	; 0
}
    17c2:	fc 01       	movw	r30, r24
    17c4:	85 91       	lpm	r24, Z+
    17c6:	94 91       	lpm	r25, Z
    17c8:	08 95       	ret

000017ca <keymap_func_to_action>:

action_t keymap_func_to_action(uint16_t keycode)
{
	// For FUNC without 8bit limit
    return (action_t){ .code = pgm_read_word(&fn_actions[(int)keycode]) };
    17ca:	88 0f       	add	r24, r24
    17cc:	99 1f       	adc	r25, r25
    17ce:	87 51       	subi	r24, 0x17	; 23
    17d0:	9f 4f       	sbci	r25, 0xFF	; 255
}
    17d2:	fc 01       	movw	r30, r24
    17d4:	85 91       	lpm	r24, Z+
    17d6:	94 91       	lpm	r25, Z
    17d8:	08 95       	ret

000017da <action_for_key>:

/* translates key to keycode */
uint16_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
	// Read entire word (16bits)
    return pgm_read_word(&keymaps[(layer)][(key.row)][(key.col)]);
    17da:	26 e0       	ldi	r18, 0x06	; 6
    17dc:	72 9f       	mul	r23, r18
    17de:	f0 01       	movw	r30, r0
    17e0:	11 24       	eor	r1, r1
    17e2:	44 e5       	ldi	r20, 0x54	; 84
    17e4:	84 9f       	mul	r24, r20
    17e6:	e0 0d       	add	r30, r0
    17e8:	f1 1d       	adc	r31, r1
    17ea:	11 24       	eor	r1, r1
    17ec:	e6 0f       	add	r30, r22
    17ee:	f1 1d       	adc	r31, r1
    17f0:	ee 0f       	add	r30, r30
    17f2:	ff 1f       	adc	r31, r31
    17f4:	e3 51       	subi	r30, 0x13	; 19
    17f6:	ff 4f       	sbci	r31, 0xFF	; 255
    17f8:	25 91       	lpm	r18, Z+
    17fa:	34 91       	lpm	r19, Z
action_t action_for_key(uint8_t layer, keypos_t key)
{
	// 16bit keycodes - important
    uint16_t keycode = keymap_key_to_keycode(layer, key);

    if (keycode >= 0x0100 && keycode < 0x2000) {
    17fc:	c9 01       	movw	r24, r18
    17fe:	9a 95       	dec	r25
    1800:	81 15       	cp	r24, r1
    1802:	9f 41       	sbci	r25, 0x1F	; 31
    1804:	10 f4       	brcc	.+4      	; 0x180a <action_for_key+0x30>
    	// Has a modifier
    	action_t action;
    	// Split it up
    	action.code = ACTION_MODS_KEY(keycode >> 8, keycode & 0xFF); // adds modifier to key
    	return action;
    1806:	c9 01       	movw	r24, r18
    1808:	08 95       	ret
	} else if (keycode >= 0x2000 && keycode < 0x3000) {
    180a:	c9 01       	movw	r24, r18
    180c:	90 52       	subi	r25, 0x20	; 32
    180e:	81 15       	cp	r24, r1
    1810:	90 41       	sbci	r25, 0x10	; 16
    1812:	28 f4       	brcc	.+10     	; 0x181e <action_for_key+0x44>
        // Is a shortcut for function layer, pull last 12bits
        // This means we have 4,096 FN macros at our disposal
        return keymap_func_to_action(keycode & 0xFFF);
    1814:	c9 01       	movw	r24, r18
    1816:	9f 70       	andi	r25, 0x0F	; 15
    1818:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <keymap_func_to_action>
    181c:	08 95       	ret
	} else if (keycode >= 0x3000 && keycode < 0x4000) {
    181e:	c9 01       	movw	r24, r18
    1820:	90 53       	subi	r25, 0x30	; 48
    1822:	81 15       	cp	r24, r1
    1824:	90 41       	sbci	r25, 0x10	; 16
    1826:	20 f4       	brcc	.+8      	; 0x1830 <action_for_key+0x56>
      // When the code starts with 3, it's an action macro.
    	action_t action;
    	action.code = ACTION_MACRO(keycode & 0xFF);
    1828:	c9 01       	movw	r24, r18
    182a:	99 27       	eor	r25, r25
    	return action;
    182c:	90 6c       	ori	r25, 0xC0	; 192
    182e:	08 95       	ret
    } else if (keycode == BL_STEP) {
        action_t action;
        action.code = ACTION_BACKLIGHT_STEP();
        return action;
#endif
    } else if (keycode == RESET) { // RESET is 0x5000, which is why this is here
    1830:	21 15       	cp	r18, r1
    1832:	80 e5       	ldi	r24, 0x50	; 80
    1834:	38 07       	cpc	r19, r24
    1836:	69 f4       	brne	.+26     	; 0x1852 <action_for_key+0x78>
        clear_keyboard();
    1838:	0e 94 b2 1a 	call	0x3564	; 0x3564 <clear_keyboard>
    183c:	9f ef       	ldi	r25, 0xFF	; 255
    183e:	24 e3       	ldi	r18, 0x34	; 52
    1840:	4c e0       	ldi	r20, 0x0C	; 12
    1842:	91 50       	subi	r25, 0x01	; 1
    1844:	20 40       	sbci	r18, 0x00	; 0
    1846:	40 40       	sbci	r20, 0x00	; 0
    1848:	e1 f7       	brne	.-8      	; 0x1842 <action_for_key+0x68>
    184a:	00 c0       	rjmp	.+0      	; 0x184c <action_for_key+0x72>
    184c:	00 00       	nop
        _delay_ms(250);
        bootloader_jump();
    184e:	0c 94 43 22 	jmp	0x4486	; 0x4486 <bootloader_jump>
        return;
    } else if (keycode == DEBUG) { // DEBUG is 0x5001
    1852:	21 30       	cpi	r18, 0x01	; 1
    1854:	80 e5       	ldi	r24, 0x50	; 80
    1856:	38 07       	cpc	r19, r24
    1858:	51 f4       	brne	.+20     	; 0x186e <action_for_key+0x94>
      // TODO: Does this actually work?
        print("\nDEBUG: enabled.\n");
    185a:	85 e6       	ldi	r24, 0x65	; 101
    185c:	93 e0       	ldi	r25, 0x03	; 3
    185e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
        debug_enable = true;
    1862:	80 91 d7 01 	lds	r24, 0x01D7
    1866:	81 60       	ori	r24, 0x01	; 1
    1868:	80 93 d7 01 	sts	0x01D7, r24
    186c:	08 95       	ret
        return;
    } else if (keycode >= 0x5000 && keycode < 0x6000) {
    186e:	c9 01       	movw	r24, r18
    1870:	90 55       	subi	r25, 0x50	; 80
    1872:	81 15       	cp	r24, r1
    1874:	90 41       	sbci	r25, 0x10	; 16
    1876:	08 f0       	brcs	.+2      	; 0x187a <action_for_key+0xa0>
    1878:	50 c0       	rjmp	.+160    	; 0x191a <action_for_key+0x140>
        // Layer movement shortcuts
        // See .h to see constraints/usage
        int type = (keycode >> 0x8) & 0xF;
    187a:	83 2f       	mov	r24, r19
    187c:	99 27       	eor	r25, r25
    187e:	8f 70       	andi	r24, 0x0F	; 15
    1880:	99 27       	eor	r25, r25
        if (type == 0x1) {
    1882:	81 30       	cpi	r24, 0x01	; 1
    1884:	91 05       	cpc	r25, r1
    1886:	d9 f4       	brne	.+54     	; 0x18be <action_for_key+0xe4>
            // Layer set "GOTO"
            int when = (keycode >> 0x4) & 0x3;
            int layer = keycode & 0xF;
            action_t action;
            action.code = ACTION_LAYER_SET(layer, when);
    1888:	a9 01       	movw	r20, r18
    188a:	43 70       	andi	r20, 0x03	; 3
    188c:	55 27       	eor	r21, r21
    188e:	02 c0       	rjmp	.+4      	; 0x1894 <action_for_key+0xba>
    1890:	88 0f       	add	r24, r24
    1892:	99 1f       	adc	r25, r25
    1894:	4a 95       	dec	r20
    1896:	e2 f7       	brpl	.-8      	; 0x1890 <action_for_key+0xb6>
    1898:	9c 68       	ori	r25, 0x8C	; 140
        // Layer movement shortcuts
        // See .h to see constraints/usage
        int type = (keycode >> 0x8) & 0xF;
        if (type == 0x1) {
            // Layer set "GOTO"
            int when = (keycode >> 0x4) & 0x3;
    189a:	a9 01       	movw	r20, r18
    189c:	64 e0       	ldi	r22, 0x04	; 4
    189e:	44 0f       	add	r20, r20
    18a0:	55 1f       	adc	r21, r21
    18a2:	6a 95       	dec	r22
    18a4:	e1 f7       	brne	.-8      	; 0x189e <action_for_key+0xc4>
            int layer = keycode & 0xF;
            action_t action;
            action.code = ACTION_LAYER_SET(layer, when);
    18a6:	44 27       	eor	r20, r20
    18a8:	53 70       	andi	r21, 0x03	; 3
    18aa:	84 2b       	or	r24, r20
    18ac:	95 2b       	or	r25, r21
    18ae:	73 e0       	ldi	r23, 0x03	; 3
    18b0:	22 0f       	add	r18, r18
    18b2:	33 1f       	adc	r19, r19
    18b4:	7a 95       	dec	r23
    18b6:	e1 f7       	brne	.-8      	; 0x18b0 <action_for_key+0xd6>
    18b8:	20 76       	andi	r18, 0x60	; 96
    18ba:	33 27       	eor	r19, r19
    18bc:	1d c0       	rjmp	.+58     	; 0x18f8 <action_for_key+0x11e>
            return action;
        } else if (type == 0x2) {
    18be:	82 30       	cpi	r24, 0x02	; 2
    18c0:	91 05       	cpc	r25, r1
    18c2:	29 f4       	brne	.+10     	; 0x18ce <action_for_key+0xf4>
            // Momentary layer
            int layer = keycode & 0xFF;
            action_t action;
            action.code = ACTION_LAYER_MOMENTARY(layer);
    18c4:	92 2f       	mov	r25, r18
    18c6:	88 27       	eor	r24, r24
            return action;
    18c8:	81 6f       	ori	r24, 0xF1	; 241
    18ca:	90 6a       	ori	r25, 0xA0	; 160
    18cc:	08 95       	ret
        } else if (type == 0x3) {
    18ce:	83 30       	cpi	r24, 0x03	; 3
    18d0:	91 05       	cpc	r25, r1
    18d2:	a9 f4       	brne	.+42     	; 0x18fe <action_for_key+0x124>
            // Set default layer
            int layer = keycode & 0xFF;
            action_t action;
            action.code = ACTION_DEFAULT_LAYER_SET(layer);
    18d4:	a9 01       	movw	r20, r18
    18d6:	43 70       	andi	r20, 0x03	; 3
    18d8:	55 27       	eor	r21, r21
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	02 c0       	rjmp	.+4      	; 0x18e4 <action_for_key+0x10a>
    18e0:	88 0f       	add	r24, r24
    18e2:	99 1f       	adc	r25, r25
    18e4:	4a 95       	dec	r20
    18e6:	e2 f7       	brpl	.-8      	; 0x18e0 <action_for_key+0x106>
    18e8:	9c 68       	ori	r25, 0x8C	; 140
    18ea:	43 e0       	ldi	r20, 0x03	; 3
    18ec:	22 0f       	add	r18, r18
    18ee:	33 1f       	adc	r19, r19
    18f0:	4a 95       	dec	r20
    18f2:	e1 f7       	brne	.-8      	; 0x18ec <action_for_key+0x112>
    18f4:	20 7e       	andi	r18, 0xE0	; 224
    18f6:	37 70       	andi	r19, 0x07	; 7
            return action;
    18f8:	82 2b       	or	r24, r18
    18fa:	93 2b       	or	r25, r19
    18fc:	08 95       	ret
        } else if (type == 0x4) {
    18fe:	04 97       	sbiw	r24, 0x04	; 4
    1900:	f1 f4       	brne	.+60     	; 0x193e <action_for_key+0x164>
            // Set default layer
            int layer = keycode & 0xFF;
            action_t action;
            action.code = ACTION_LAYER_TOGGLE(layer);
    1902:	a9 01       	movw	r20, r18
    1904:	43 70       	andi	r20, 0x03	; 3
    1906:	55 27       	eor	r21, r21
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <action_for_key+0x138>
    190e:	88 0f       	add	r24, r24
    1910:	99 1f       	adc	r25, r25
    1912:	4a 95       	dec	r20
    1914:	e2 f7       	brpl	.-8      	; 0x190e <action_for_key+0x134>
    1916:	9a 68       	ori	r25, 0x8A	; 138
    1918:	e8 cf       	rjmp	.-48     	; 0x18ea <action_for_key+0x110>
    } else if (keycode >= 0x6000 && keycode < 0x7000) {
        action_t action;
        action.code =  ACTION_FUNCTION_OPT(keycode & 0xFF, (keycode & 0x0F00) >> 8);
        return action;
#endif
    } else if (keycode >= 0x7000 && keycode < 0x8000) {
    191a:	c9 01       	movw	r24, r18
    191c:	90 57       	subi	r25, 0x70	; 112
    191e:	81 15       	cp	r24, r1
    1920:	90 41       	sbci	r25, 0x10	; 16
    1922:	20 f4       	brcc	.+8      	; 0x192c <action_for_key+0x152>
        action_t action;
        action.code = ACTION_MODS_TAP_KEY((keycode >> 0x8) & 0xF, keycode & 0xFF);
    1924:	c9 01       	movw	r24, r18
    1926:	9f 70       	andi	r25, 0x0F	; 15
        return action;
    1928:	90 62       	ori	r25, 0x20	; 32
    192a:	08 95       	ret
    } else if (keycode >= 0x8000 && keycode < 0x9000) {
    192c:	c9 01       	movw	r24, r18
    192e:	90 58       	subi	r25, 0x80	; 128
    1930:	81 15       	cp	r24, r1
    1932:	90 41       	sbci	r25, 0x10	; 16
    1934:	20 f4       	brcc	.+8      	; 0x193e <action_for_key+0x164>
        action_t action;
        action.code = ACTION_LAYER_TAP_KEY((keycode >> 0x8) & 0xF, keycode & 0xFF);
    1936:	c9 01       	movw	r24, r18
    1938:	9f 70       	andi	r25, 0x0F	; 15
        return action;
    193a:	90 6a       	ori	r25, 0xA0	; 160
    193c:	08 95       	ret
#endif
    } else {

    }

    switch (keycode) {
    193e:	20 3e       	cpi	r18, 0xE0	; 224
    1940:	31 05       	cpc	r19, r1
    1942:	e0 f4       	brcc	.+56     	; 0x197c <action_for_key+0x1a2>
    1944:	20 3c       	cpi	r18, 0xC0	; 192
    1946:	31 05       	cpc	r19, r1
    1948:	58 f5       	brcc	.+86     	; 0x19a0 <action_for_key+0x1c6>
    194a:	21 33       	cpi	r18, 0x31	; 49
    194c:	31 05       	cpc	r19, r1
    194e:	09 f4       	brne	.+2      	; 0x1952 <action_for_key+0x178>
    1950:	70 c0       	rjmp	.+224    	; 0x1a32 <action_for_key+0x258>
    1952:	48 f4       	brcc	.+18     	; 0x1966 <action_for_key+0x18c>
    1954:	29 32       	cpi	r18, 0x29	; 41
    1956:	31 05       	cpc	r19, r1
    1958:	09 f4       	brne	.+2      	; 0x195c <action_for_key+0x182>
    195a:	64 c0       	rjmp	.+200    	; 0x1a24 <action_for_key+0x24a>
    195c:	2a 32       	cpi	r18, 0x2A	; 42
    195e:	31 05       	cpc	r19, r1
    1960:	09 f4       	brne	.+2      	; 0x1964 <action_for_key+0x18a>
    1962:	6e c0       	rjmp	.+220    	; 0x1a40 <action_for_key+0x266>
    1964:	74 c0       	rjmp	.+232    	; 0x1a4e <action_for_key+0x274>
    1966:	29 33       	cpi	r18, 0x39	; 57
    1968:	31 05       	cpc	r19, r1
    196a:	f1 f0       	breq	.+60     	; 0x19a8 <action_for_key+0x1ce>
    196c:	22 38       	cpi	r18, 0x82	; 130
    196e:	31 05       	cpc	r19, r1
    1970:	d9 f0       	breq	.+54     	; 0x19a8 <action_for_key+0x1ce>
    1972:	25 33       	cpi	r18, 0x35	; 53
    1974:	31 05       	cpc	r19, r1
    1976:	09 f4       	brne	.+2      	; 0x197a <action_for_key+0x1a0>
    1978:	4e c0       	rjmp	.+156    	; 0x1a16 <action_for_key+0x23c>
    197a:	69 c0       	rjmp	.+210    	; 0x1a4e <action_for_key+0x274>
    197c:	23 3e       	cpi	r18, 0xE3	; 227
    197e:	31 05       	cpc	r19, r1
    1980:	89 f1       	breq	.+98     	; 0x19e4 <action_for_key+0x20a>
    1982:	38 f4       	brcc	.+14     	; 0x1992 <action_for_key+0x1b8>
    1984:	20 3e       	cpi	r18, 0xE0	; 224
    1986:	31 05       	cpc	r19, r1
    1988:	c1 f0       	breq	.+48     	; 0x19ba <action_for_key+0x1e0>
    198a:	22 3e       	cpi	r18, 0xE2	; 226
    198c:	31 05       	cpc	r19, r1
    198e:	e1 f0       	breq	.+56     	; 0x19c8 <action_for_key+0x1ee>
    1990:	5e c0       	rjmp	.+188    	; 0x1a4e <action_for_key+0x274>
    1992:	26 3e       	cpi	r18, 0xE6	; 230
    1994:	31 05       	cpc	r19, r1
    1996:	69 f1       	breq	.+90     	; 0x19f2 <action_for_key+0x218>
    1998:	27 3e       	cpi	r18, 0xE7	; 231
    199a:	31 05       	cpc	r19, r1
    199c:	a9 f1       	breq	.+106    	; 0x1a08 <action_for_key+0x22e>
    199e:	57 c0       	rjmp	.+174    	; 0x1a4e <action_for_key+0x274>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    19a0:	c9 01       	movw	r24, r18
    19a2:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <keymap_fn_to_action>
    19a6:	08 95       	ret
#ifdef BOOTMAGIC_ENABLE
        case KC_CAPSLOCK:
        case KC_LOCKING_CAPS:
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    19a8:	80 91 ea 01 	lds	r24, 0x01EA
    19ac:	80 fd       	sbrc	r24, 0
    19ae:	02 c0       	rjmp	.+4      	; 0x19b4 <action_for_key+0x1da>
    19b0:	81 ff       	sbrs	r24, 1
    19b2:	4d c0       	rjmp	.+154    	; 0x1a4e <action_for_key+0x274>
                return keycode_to_action(KC_LCTL);
    19b4:	80 ee       	ldi	r24, 0xE0	; 224
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	4b c0       	rjmp	.+150    	; 0x1a50 <action_for_key+0x276>
            }
            return keycode_to_action(keycode);
        case KC_LCTL:
            if (keymap_config.swap_control_capslock) {
    19ba:	80 91 ea 01 	lds	r24, 0x01EA
    19be:	80 ff       	sbrs	r24, 0
    19c0:	f9 cf       	rjmp	.-14     	; 0x19b4 <action_for_key+0x1da>
                return keycode_to_action(KC_CAPSLOCK);
    19c2:	89 e3       	ldi	r24, 0x39	; 57
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	44 c0       	rjmp	.+136    	; 0x1a50 <action_for_key+0x276>
            }
            return keycode_to_action(KC_LCTL);
        case KC_LALT:
            if (keymap_config.swap_lalt_lgui) {
    19c8:	80 91 ea 01 	lds	r24, 0x01EA
    19cc:	82 ff       	sbrs	r24, 2
    19ce:	0e c0       	rjmp	.+28     	; 0x19ec <action_for_key+0x212>
                if (keymap_config.no_gui) {
    19d0:	80 91 ea 01 	lds	r24, 0x01EA
    19d4:	84 ff       	sbrs	r24, 4
    19d6:	03 c0       	rjmp	.+6      	; 0x19de <action_for_key+0x204>
                    return keycode_to_action(ACTION_NO);
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	39 c0       	rjmp	.+114    	; 0x1a50 <action_for_key+0x276>
                }
                return keycode_to_action(KC_LGUI);
    19de:	83 ee       	ldi	r24, 0xE3	; 227
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	36 c0       	rjmp	.+108    	; 0x1a50 <action_for_key+0x276>
            }
            return keycode_to_action(KC_LALT);
        case KC_LGUI:
            if (keymap_config.swap_lalt_lgui) {
    19e4:	80 91 ea 01 	lds	r24, 0x01EA
    19e8:	82 ff       	sbrs	r24, 2
    19ea:	f2 cf       	rjmp	.-28     	; 0x19d0 <action_for_key+0x1f6>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_LGUI);
            }
            return keycode_to_action(KC_LALT);
    19ec:	82 ee       	ldi	r24, 0xE2	; 226
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	2f c0       	rjmp	.+94     	; 0x1a50 <action_for_key+0x276>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_LGUI);
        case KC_RALT:
            if (keymap_config.swap_ralt_rgui) {
    19f2:	80 91 ea 01 	lds	r24, 0x01EA
    19f6:	83 ff       	sbrs	r24, 3
    19f8:	0b c0       	rjmp	.+22     	; 0x1a10 <action_for_key+0x236>
                if (keymap_config.no_gui) {
    19fa:	80 91 ea 01 	lds	r24, 0x01EA
    19fe:	84 fd       	sbrc	r24, 4
    1a00:	eb cf       	rjmp	.-42     	; 0x19d8 <action_for_key+0x1fe>
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
    1a02:	87 ee       	ldi	r24, 0xE7	; 231
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	24 c0       	rjmp	.+72     	; 0x1a50 <action_for_key+0x276>
            }
            return keycode_to_action(KC_RALT);
        case KC_RGUI:
            if (keymap_config.swap_ralt_rgui) {
    1a08:	80 91 ea 01 	lds	r24, 0x01EA
    1a0c:	83 ff       	sbrs	r24, 3
    1a0e:	f5 cf       	rjmp	.-22     	; 0x19fa <action_for_key+0x220>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
            }
            return keycode_to_action(KC_RALT);
    1a10:	86 ee       	ldi	r24, 0xE6	; 230
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	1d c0       	rjmp	.+58     	; 0x1a50 <action_for_key+0x276>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
    1a16:	80 91 ea 01 	lds	r24, 0x01EA
    1a1a:	85 ff       	sbrs	r24, 5
    1a1c:	07 c0       	rjmp	.+14     	; 0x1a2c <action_for_key+0x252>
                return keycode_to_action(KC_ESC);
    1a1e:	89 e2       	ldi	r24, 0x29	; 41
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	16 c0       	rjmp	.+44     	; 0x1a50 <action_for_key+0x276>
            }
            return keycode_to_action(KC_GRAVE);
        case KC_ESC:
            if (keymap_config.swap_grave_esc) {
    1a24:	80 91 ea 01 	lds	r24, 0x01EA
    1a28:	85 ff       	sbrs	r24, 5
    1a2a:	f9 cf       	rjmp	.-14     	; 0x1a1e <action_for_key+0x244>
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_ESC);
            }
            return keycode_to_action(KC_GRAVE);
    1a2c:	85 e3       	ldi	r24, 0x35	; 53
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	0f c0       	rjmp	.+30     	; 0x1a50 <action_for_key+0x276>
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_GRAVE);
            }
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
    1a32:	80 91 ea 01 	lds	r24, 0x01EA
    1a36:	86 ff       	sbrs	r24, 6
    1a38:	07 c0       	rjmp	.+14     	; 0x1a48 <action_for_key+0x26e>
                return keycode_to_action(KC_BSPACE);
    1a3a:	8a e2       	ldi	r24, 0x2A	; 42
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	08 c0       	rjmp	.+16     	; 0x1a50 <action_for_key+0x276>
            }
            return keycode_to_action(KC_BSLASH);
        case KC_BSPACE:
            if (keymap_config.swap_backslash_backspace) {
    1a40:	80 91 ea 01 	lds	r24, 0x01EA
    1a44:	86 ff       	sbrs	r24, 6
    1a46:	f9 cf       	rjmp	.-14     	; 0x1a3a <action_for_key+0x260>
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
                return keycode_to_action(KC_BSPACE);
            }
            return keycode_to_action(KC_BSLASH);
    1a48:	81 e3       	ldi	r24, 0x31	; 49
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	01 c0       	rjmp	.+2      	; 0x1a50 <action_for_key+0x276>
                return keycode_to_action(KC_BSLASH);
            }
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    1a4e:	c9 01       	movw	r24, r18
    1a50:	0e 94 0b 0b 	call	0x1616	; 0x1616 <keycode_to_action>
    }
}
    1a54:	08 95       	ret

00001a56 <led_set>:
#include "stdint.h"
#include "led.h"


void led_set(uint8_t usb_led)
{
    1a56:	08 95       	ret

00001a58 <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    1a58:	80 91 6d 01 	lds	r24, 0x016D
    1a5c:	08 95       	ret

00001a5e <sendchar>:
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
    1a5e:	9f b7       	in	r25, 0x3f	; 63
    1a60:	f8 94       	cli
    1a62:	10 92 5c 01 	sts	0x015C, r1
    1a66:	9f bf       	out	0x3f, r25	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1a68:	90 91 f0 01 	lds	r25, 0x01F0
    1a6c:	94 30       	cpi	r25, 0x04	; 4
    1a6e:	09 f0       	breq	.+2      	; 0x1a72 <sendchar+0x14>
    1a70:	58 c0       	rjmp	.+176    	; 0x1b22 <sendchar+0xc4>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1a72:	90 91 e9 00 	lds	r25, 0x00E9
    1a76:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1a78:	20 91 ec 00 	lds	r18, 0x00EC
    1a7c:	20 ff       	sbrs	r18, 0
    1a7e:	02 c0       	rjmp	.+4      	; 0x1a84 <sendchar+0x26>
    1a80:	20 e8       	ldi	r18, 0x80	; 128
    1a82:	01 c0       	rjmp	.+2      	; 0x1a86 <sendchar+0x28>
    1a84:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1a86:	29 2b       	or	r18, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a88:	94 e0       	ldi	r25, 0x04	; 4
    1a8a:	90 93 e9 00 	sts	0x00E9, r25
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1a8e:	90 91 eb 00 	lds	r25, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1a92:	90 ff       	sbrs	r25, 0
    1a94:	43 c0       	rjmp	.+134    	; 0x1b1c <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1a96:	90 91 ee 00 	lds	r25, 0x00EE
    1a9a:	97 ff       	sbrs	r25, 7
    1a9c:	3f c0       	rjmp	.+126    	; 0x1b1c <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    1a9e:	90 91 5a 01 	lds	r25, 0x015A
    1aa2:	99 23       	and	r25, r25
    1aa4:	21 f0       	breq	.+8      	; 0x1aae <sendchar+0x50>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1aa6:	90 91 e8 00 	lds	r25, 0x00E8
    1aaa:	95 ff       	sbrs	r25, 5
    1aac:	37 c0       	rjmp	.+110    	; 0x1b1c <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    timeouted = false;
    1aae:	10 92 5a 01 	sts	0x015A, r1

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    1ab2:	96 e0       	ldi	r25, 0x06	; 6
    1ab4:	30 91 e8 00 	lds	r19, 0x00E8
    1ab8:	35 fd       	sbrc	r19, 5
    1aba:	15 c0       	rjmp	.+42     	; 0x1ae6 <sendchar+0x88>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    1abc:	30 91 f0 01 	lds	r19, 0x01F0
    1ac0:	34 30       	cpi	r19, 0x04	; 4
    1ac2:	61 f5       	brne	.+88     	; 0x1b1c <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1ac4:	30 91 eb 00 	lds	r19, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
    1ac8:	35 fd       	sbrc	r19, 5
    1aca:	28 c0       	rjmp	.+80     	; 0x1b1c <sendchar+0xbe>
    1acc:	91 50       	subi	r25, 0x01	; 1
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
    1ace:	21 f4       	brne	.+8      	; 0x1ad8 <sendchar+0x7a>
            timeouted = true;
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	80 93 5a 01 	sts	0x015A, r24
            goto ERROR_EXIT;
    1ad6:	22 c0       	rjmp	.+68     	; 0x1b1c <sendchar+0xbe>
    1ad8:	ef e9       	ldi	r30, 0x9F	; 159
    1ada:	ff e0       	ldi	r31, 0x0F	; 15
    1adc:	31 97       	sbiw	r30, 0x01	; 1
    1ade:	f1 f7       	brne	.-4      	; 0x1adc <sendchar+0x7e>
    1ae0:	00 c0       	rjmp	.+0      	; 0x1ae2 <sendchar+0x84>
    1ae2:	00 00       	nop
    1ae4:	e7 cf       	rjmp	.-50     	; 0x1ab4 <sendchar+0x56>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1ae6:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1aea:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
    1aee:	85 fd       	sbrc	r24, 5
    1af0:	0a c0       	rjmp	.+20     	; 0x1b06 <sendchar+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1af2:	80 91 e8 00 	lds	r24, 0x00E8
        while (!(Endpoint_IsINReady()));
    1af6:	80 ff       	sbrs	r24, 0
    1af8:	fc cf       	rjmp	.-8      	; 0x1af2 <sendchar+0x94>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1afa:	80 91 e8 00 	lds	r24, 0x00E8
    1afe:	8e 77       	andi	r24, 0x7E	; 126
    1b00:	80 93 e8 00 	sts	0x00E8, r24
    1b04:	06 c0       	rjmp	.+12     	; 0x1b12 <sendchar+0xb4>
        Endpoint_ClearIN();
    } else {
        CONSOLE_FLUSH_SET(true);
    1b06:	8f b7       	in	r24, 0x3f	; 63
    1b08:	f8 94       	cli
    1b0a:	91 e0       	ldi	r25, 0x01	; 1
    1b0c:	90 93 5c 01 	sts	0x015C, r25
    1b10:	8f bf       	out	0x3f, r24	; 63
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b12:	2f 70       	andi	r18, 0x0F	; 15
    1b14:	20 93 e9 00 	sts	0x00E9, r18
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	08 95       	ret
    1b1c:	2f 70       	andi	r18, 0x0F	; 15
    1b1e:	20 93 e9 00 	sts	0x00E9, r18
    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);

    if (USB_DeviceState != DEVICE_STATE_Configured)
        return -1;
    1b22:	8f ef       	ldi	r24, 0xFF	; 255
    Endpoint_SelectEndpoint(ep);
    return 0;
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    1b24:	08 95       	ret

00001b26 <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    1b26:	cf 93       	push	r28
    1b28:	df 93       	push	r29
    1b2a:	00 d0       	rcall	.+0      	; 0x1b2c <send_consumer+0x6>
    1b2c:	1f 92       	push	r1
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
    bluefruit_serial_send(0x00);
#endif

    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1b32:	20 91 f0 01 	lds	r18, 0x01F0
    1b36:	24 30       	cpi	r18, 0x04	; 4
    1b38:	19 f5       	brne	.+70     	; 0x1b80 <send_consumer+0x5a>
        return;

    report_extra_t r = {
    1b3a:	23 e0       	ldi	r18, 0x03	; 3
    1b3c:	29 83       	std	Y+1, r18	; 0x01
    1b3e:	9b 83       	std	Y+3, r25	; 0x03
    1b40:	8a 83       	std	Y+2, r24	; 0x02
    1b42:	20 93 e9 00 	sts	0x00E9, r18
    1b46:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1b48:	90 91 e8 00 	lds	r25, 0x00E8
    1b4c:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1b4e:	95 fd       	sbrc	r25, 5
    1b50:	06 c0       	rjmp	.+12     	; 0x1b5e <send_consumer+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b52:	95 ed       	ldi	r25, 0xD5	; 213
    1b54:	9a 95       	dec	r25
    1b56:	f1 f7       	brne	.-4      	; 0x1b54 <send_consumer+0x2e>
    1b58:	00 00       	nop
    1b5a:	81 11       	cpse	r24, r1
    1b5c:	f5 cf       	rjmp	.-22     	; 0x1b48 <send_consumer+0x22>
    1b5e:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1b62:	85 ff       	sbrs	r24, 5
    1b64:	0d c0       	rjmp	.+26     	; 0x1b80 <send_consumer+0x5a>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    1b66:	40 e0       	ldi	r20, 0x00	; 0
    1b68:	50 e0       	ldi	r21, 0x00	; 0
    1b6a:	63 e0       	ldi	r22, 0x03	; 3
    1b6c:	70 e0       	ldi	r23, 0x00	; 0
    1b6e:	ce 01       	movw	r24, r28
    1b70:	01 96       	adiw	r24, 0x01	; 1
    1b72:	0e 94 62 10 	call	0x20c4	; 0x20c4 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b76:	80 91 e8 00 	lds	r24, 0x00E8
    1b7a:	8e 77       	andi	r24, 0x7E	; 126
    1b7c:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	0f 90       	pop	r0
    1b86:	df 91       	pop	r29
    1b88:	cf 91       	pop	r28
    1b8a:	08 95       	ret

00001b8c <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    1b8c:	cf 93       	push	r28
    1b8e:	df 93       	push	r29
    1b90:	00 d0       	rcall	.+0      	; 0x1b92 <send_system+0x6>
    1b92:	1f 92       	push	r1
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1b98:	20 91 f0 01 	lds	r18, 0x01F0
    1b9c:	24 30       	cpi	r18, 0x04	; 4
    1b9e:	21 f5       	brne	.+72     	; 0x1be8 <send_system+0x5c>
        return;

    report_extra_t r = {
    1ba0:	22 e0       	ldi	r18, 0x02	; 2
    1ba2:	29 83       	std	Y+1, r18	; 0x01
    1ba4:	9b 83       	std	Y+3, r25	; 0x03
    1ba6:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ba8:	83 e0       	ldi	r24, 0x03	; 3
    1baa:	80 93 e9 00 	sts	0x00E9, r24
    1bae:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1bb0:	90 91 e8 00 	lds	r25, 0x00E8
    1bb4:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1bb6:	95 fd       	sbrc	r25, 5
    1bb8:	06 c0       	rjmp	.+12     	; 0x1bc6 <send_system+0x3a>
    1bba:	95 ed       	ldi	r25, 0xD5	; 213
    1bbc:	9a 95       	dec	r25
    1bbe:	f1 f7       	brne	.-4      	; 0x1bbc <send_system+0x30>
    1bc0:	00 00       	nop
    1bc2:	81 11       	cpse	r24, r1
    1bc4:	f5 cf       	rjmp	.-22     	; 0x1bb0 <send_system+0x24>
    1bc6:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1bca:	85 ff       	sbrs	r24, 5
    1bcc:	0d c0       	rjmp	.+26     	; 0x1be8 <send_system+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    1bce:	40 e0       	ldi	r20, 0x00	; 0
    1bd0:	50 e0       	ldi	r21, 0x00	; 0
    1bd2:	63 e0       	ldi	r22, 0x03	; 3
    1bd4:	70 e0       	ldi	r23, 0x00	; 0
    1bd6:	ce 01       	movw	r24, r28
    1bd8:	01 96       	adiw	r24, 0x01	; 1
    1bda:	0e 94 62 10 	call	0x20c4	; 0x20c4 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1bde:	80 91 e8 00 	lds	r24, 0x00E8
    1be2:	8e 77       	andi	r24, 0x7E	; 126
    1be4:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    1be8:	0f 90       	pop	r0
    1bea:	0f 90       	pop	r0
    1bec:	0f 90       	pop	r0
    1bee:	df 91       	pop	r29
    1bf0:	cf 91       	pop	r28
    1bf2:	08 95       	ret

00001bf4 <send_mouse>:
    bluefruit_serial_send(0x00);
#endif

    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1bf4:	20 91 f0 01 	lds	r18, 0x01F0
    1bf8:	24 30       	cpi	r18, 0x04	; 4
    1bfa:	f1 f4       	brne	.+60     	; 0x1c38 <send_mouse+0x44>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1bfc:	22 e0       	ldi	r18, 0x02	; 2
    1bfe:	20 93 e9 00 	sts	0x00E9, r18
    1c02:	2f ef       	ldi	r18, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1c04:	30 91 e8 00 	lds	r19, 0x00E8
    1c08:	21 50       	subi	r18, 0x01	; 1

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1c0a:	35 fd       	sbrc	r19, 5
    1c0c:	06 c0       	rjmp	.+12     	; 0x1c1a <send_mouse+0x26>
    1c0e:	35 ed       	ldi	r19, 0xD5	; 213
    1c10:	3a 95       	dec	r19
    1c12:	f1 f7       	brne	.-4      	; 0x1c10 <send_mouse+0x1c>
    1c14:	00 00       	nop
    1c16:	21 11       	cpse	r18, r1
    1c18:	f5 cf       	rjmp	.-22     	; 0x1c04 <send_mouse+0x10>
    1c1a:	20 91 e8 00 	lds	r18, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1c1e:	25 ff       	sbrs	r18, 5
    1c20:	0b c0       	rjmp	.+22     	; 0x1c38 <send_mouse+0x44>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    1c22:	40 e0       	ldi	r20, 0x00	; 0
    1c24:	50 e0       	ldi	r21, 0x00	; 0
    1c26:	65 e0       	ldi	r22, 0x05	; 5
    1c28:	70 e0       	ldi	r23, 0x00	; 0
    1c2a:	0e 94 62 10 	call	0x20c4	; 0x20c4 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c2e:	80 91 e8 00 	lds	r24, 0x00E8
    1c32:	8e 77       	andi	r24, 0x7E	; 126
    1c34:	80 93 e8 00 	sts	0x00E8, r24
    1c38:	08 95       	ret

00001c3a <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    1c3a:	cf 93       	push	r28
    1c3c:	df 93       	push	r29
    1c3e:	ec 01       	movw	r28, r24
    }
#endif

    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1c40:	80 91 f0 01 	lds	r24, 0x01F0
    1c44:	84 30       	cpi	r24, 0x04	; 4
    1c46:	09 f0       	breq	.+2      	; 0x1c4a <send_keyboard+0x10>
    1c48:	47 c0       	rjmp	.+142    	; 0x1cd8 <send_keyboard+0x9e>
        return;

    /* Select the Keyboard Report Endpoint */
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    1c4a:	80 91 0c 01 	lds	r24, 0x010C
    1c4e:	88 23       	and	r24, r24
    1c50:	e1 f0       	breq	.+56     	; 0x1c8a <send_keyboard+0x50>
    1c52:	80 91 0d 01 	lds	r24, 0x010D
    1c56:	88 23       	and	r24, r24
    1c58:	c1 f0       	breq	.+48     	; 0x1c8a <send_keyboard+0x50>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c5a:	85 e0       	ldi	r24, 0x05	; 5
    1c5c:	80 93 e9 00 	sts	0x00E9, r24
    1c60:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1c62:	90 91 e8 00 	lds	r25, 0x00E8
    1c66:	81 50       	subi	r24, 0x01	; 1
        /* Report protocol - NKRO */
        Endpoint_SelectEndpoint(NKRO_IN_EPNUM);

        /* Check if write ready for a polling interval around 1ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
    1c68:	95 fd       	sbrc	r25, 5
    1c6a:	06 c0       	rjmp	.+12     	; 0x1c78 <send_keyboard+0x3e>
    1c6c:	95 e1       	ldi	r25, 0x15	; 21
    1c6e:	9a 95       	dec	r25
    1c70:	f1 f7       	brne	.-4      	; 0x1c6e <send_keyboard+0x34>
    1c72:	00 00       	nop
    1c74:	81 11       	cpse	r24, r1
    1c76:	f5 cf       	rjmp	.-22     	; 0x1c62 <send_keyboard+0x28>
    1c78:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    1c7c:	85 ff       	sbrs	r24, 5
    1c7e:	2c c0       	rjmp	.+88     	; 0x1cd8 <send_keyboard+0x9e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    1c80:	40 e0       	ldi	r20, 0x00	; 0
    1c82:	50 e0       	ldi	r21, 0x00	; 0
    1c84:	60 e1       	ldi	r22, 0x10	; 16
    1c86:	70 e0       	ldi	r23, 0x00	; 0
    1c88:	17 c0       	rjmp	.+46     	; 0x1cb8 <send_keyboard+0x7e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	80 93 e9 00 	sts	0x00E9, r24
    1c90:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1c92:	90 91 e8 00 	lds	r25, 0x00E8
    1c96:	81 50       	subi	r24, 0x01	; 1
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1c98:	95 fd       	sbrc	r25, 5
    1c9a:	06 c0       	rjmp	.+12     	; 0x1ca8 <send_keyboard+0x6e>
    1c9c:	95 ed       	ldi	r25, 0xD5	; 213
    1c9e:	9a 95       	dec	r25
    1ca0:	f1 f7       	brne	.-4      	; 0x1c9e <send_keyboard+0x64>
    1ca2:	00 00       	nop
    1ca4:	81 11       	cpse	r24, r1
    1ca6:	f5 cf       	rjmp	.-22     	; 0x1c92 <send_keyboard+0x58>
    1ca8:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    1cac:	85 ff       	sbrs	r24, 5
    1cae:	14 c0       	rjmp	.+40     	; 0x1cd8 <send_keyboard+0x9e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    1cb0:	40 e0       	ldi	r20, 0x00	; 0
    1cb2:	50 e0       	ldi	r21, 0x00	; 0
    1cb4:	68 e0       	ldi	r22, 0x08	; 8
    1cb6:	70 e0       	ldi	r23, 0x00	; 0
    1cb8:	ce 01       	movw	r24, r28
    1cba:	0e 94 62 10 	call	0x20c4	; 0x20c4 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1cbe:	80 91 e8 00 	lds	r24, 0x00E8
    1cc2:	8e 77       	andi	r24, 0x7E	; 126
    1cc4:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    1cc8:	80 e1       	ldi	r24, 0x10	; 16
    1cca:	fe 01       	movw	r30, r28
    1ccc:	ad e5       	ldi	r26, 0x5D	; 93
    1cce:	b1 e0       	ldi	r27, 0x01	; 1
    1cd0:	01 90       	ld	r0, Z+
    1cd2:	0d 92       	st	X+, r0
    1cd4:	8a 95       	dec	r24
    1cd6:	e1 f7       	brne	.-8      	; 0x1cd0 <send_keyboard+0x96>
}
    1cd8:	df 91       	pop	r29
    1cda:	cf 91       	pop	r28
    1cdc:	08 95       	ret

00001cde <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    1cde:	8c e9       	ldi	r24, 0x9C	; 156
    1ce0:	93 e0       	ldi	r25, 0x03	; 3
    1ce2:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    1ce6:	80 91 ef 01 	lds	r24, 0x01EF
    1cea:	81 11       	cpse	r24, r1
    1cec:	09 c0       	rjmp	.+18     	; 0x1d00 <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    1cee:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <USB_Disable>
        USB_Init();
    1cf2:	0e 94 51 12 	call	0x24a2	; 0x24a2 <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    1cf6:	80 91 e2 00 	lds	r24, 0x00E2
    1cfa:	84 60       	ori	r24, 0x04	; 4
    1cfc:	80 93 e2 00 	sts	0x00E2, r24
    1d00:	08 95       	ret

00001d02 <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    1d02:	88 e9       	ldi	r24, 0x98	; 152
    1d04:	93 e0       	ldi	r25, 0x03	; 3
    1d06:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    1d0a:	10 92 ef 01 	sts	0x01EF, r1
    1d0e:	08 95       	ret

00001d10 <EVENT_USB_Device_Reset>:
*/
}

void EVENT_USB_Device_Reset(void)
{
    print("[R]");
    1d10:	84 e9       	ldi	r24, 0x94	; 148
    1d12:	93 e0       	ldi	r25, 0x03	; 3
    1d14:	0c 94 5b 07 	jmp	0xeb6	; 0xeb6 <xputs>

00001d18 <EVENT_USB_Device_Suspend>:
}

void EVENT_USB_Device_Suspend()
{
    print("[S]");
    1d18:	80 e9       	ldi	r24, 0x90	; 144
    1d1a:	93 e0       	ldi	r25, 0x03	; 3
    1d1c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
#ifdef SLEEP_LED_ENABLE
    sleep_led_enable();
    1d20:	0c 94 04 2c 	jmp	0x5808	; 0x5808 <sleep_led_enable>

00001d24 <EVENT_USB_Device_WakeUp>:
#endif
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    1d24:	8c e8       	ldi	r24, 0x8C	; 140
    1d26:	93 e0       	ldi	r25, 0x03	; 3
    1d28:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    suspend_wakeup_init();
    1d2c:	0e 94 de 21 	call	0x43bc	; 0x43bc <suspend_wakeup_init>

#ifdef SLEEP_LED_ENABLE
    sleep_led_disable();
    1d30:	0e 94 0a 2c 	call	0x5814	; 0x5814 <sleep_led_disable>
    // NOTE: converters may not accept this
    led_set(host_keyboard_leds());
    1d34:	0e 94 ed 14 	call	0x29da	; 0x29da <host_keyboard_leds>
    1d38:	0c 94 2b 0d 	jmp	0x1a56	; 0x1a56 <led_set>

00001d3c <EVENT_USB_Device_StartOfFrame>:

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    static uint8_t count;
    if (++count % 50) return;
    1d3c:	80 91 5b 01 	lds	r24, 0x015B
    1d40:	8f 5f       	subi	r24, 0xFF	; 255
    1d42:	80 93 5b 01 	sts	0x015B, r24
    1d46:	62 e3       	ldi	r22, 0x32	; 50
    1d48:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <__udivmodqi4>
    1d4c:	91 11       	cpse	r25, r1
    1d4e:	35 c0       	rjmp	.+106    	; 0x1dba <EVENT_USB_Device_StartOfFrame+0x7e>
    count = 0;
    1d50:	10 92 5b 01 	sts	0x015B, r1

    if (!console_flush) return;
    1d54:	80 91 5c 01 	lds	r24, 0x015C
    1d58:	88 23       	and	r24, r24
    1d5a:	79 f1       	breq	.+94     	; 0x1dba <EVENT_USB_Device_StartOfFrame+0x7e>
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1d5c:	80 91 f0 01 	lds	r24, 0x01F0
    1d60:	84 30       	cpi	r24, 0x04	; 4
    1d62:	49 f5       	brne	.+82     	; 0x1db6 <EVENT_USB_Device_StartOfFrame+0x7a>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1d64:	80 91 e9 00 	lds	r24, 0x00E9
    1d68:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1d6a:	90 91 ec 00 	lds	r25, 0x00EC
    1d6e:	90 ff       	sbrs	r25, 0
    1d70:	02 c0       	rjmp	.+4      	; 0x1d76 <EVENT_USB_Device_StartOfFrame+0x3a>
    1d72:	90 e8       	ldi	r25, 0x80	; 128
    1d74:	01 c0       	rjmp	.+2      	; 0x1d78 <EVENT_USB_Device_StartOfFrame+0x3c>
    1d76:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1d78:	98 2b       	or	r25, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d7a:	84 e0       	ldi	r24, 0x04	; 4
    1d7c:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1d80:	80 91 eb 00 	lds	r24, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1d84:	80 ff       	sbrs	r24, 0
    1d86:	14 c0       	rjmp	.+40     	; 0x1db0 <EVENT_USB_Device_StartOfFrame+0x74>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1d88:	80 91 ee 00 	lds	r24, 0x00EE
    1d8c:	87 ff       	sbrs	r24, 7
    1d8e:	10 c0       	rjmp	.+32     	; 0x1db0 <EVENT_USB_Device_StartOfFrame+0x74>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1d90:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    1d94:	85 ff       	sbrs	r24, 5
    1d96:	03 c0       	rjmp	.+6      	; 0x1d9e <EVENT_USB_Device_StartOfFrame+0x62>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1d98:	10 92 f1 00 	sts	0x00F1, r1
    1d9c:	f9 cf       	rjmp	.-14     	; 0x1d90 <EVENT_USB_Device_StartOfFrame+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1d9e:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    1da2:	80 ff       	sbrs	r24, 0
    1da4:	05 c0       	rjmp	.+10     	; 0x1db0 <EVENT_USB_Device_StartOfFrame+0x74>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1da6:	80 91 e8 00 	lds	r24, 0x00E8
    1daa:	8e 77       	andi	r24, 0x7E	; 126
    1dac:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1db0:	9f 70       	andi	r25, 0x0F	; 15
    1db2:	90 93 e9 00 	sts	0x00E9, r25
    if (++count % 50) return;
    count = 0;

    if (!console_flush) return;
    Console_Task();
    console_flush = false;
    1db6:	10 92 5c 01 	sts	0x015C, r1
    1dba:	08 95       	ret

00001dbc <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1dbc:	42 e0       	ldi	r20, 0x02	; 2
    1dbe:	61 ec       	ldi	r22, 0xC1	; 193
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	0e 94 6e 11 	call	0x22dc	; 0x22dc <Endpoint_ConfigureEndpoint_Prv>
    1dc6:	42 e0       	ldi	r20, 0x02	; 2
    1dc8:	61 ec       	ldi	r22, 0xC1	; 193
    1dca:	82 e0       	ldi	r24, 0x02	; 2
    1dcc:	0e 94 6e 11 	call	0x22dc	; 0x22dc <Endpoint_ConfigureEndpoint_Prv>
    1dd0:	42 e0       	ldi	r20, 0x02	; 2
    1dd2:	61 ec       	ldi	r22, 0xC1	; 193
    1dd4:	83 e0       	ldi	r24, 0x03	; 3
    1dd6:	0e 94 6e 11 	call	0x22dc	; 0x22dc <Endpoint_ConfigureEndpoint_Prv>
    1dda:	42 e2       	ldi	r20, 0x22	; 34
    1ddc:	61 ec       	ldi	r22, 0xC1	; 193
    1dde:	84 e0       	ldi	r24, 0x04	; 4
    1de0:	0e 94 6e 11 	call	0x22dc	; 0x22dc <Endpoint_ConfigureEndpoint_Prv>
    1de4:	42 e1       	ldi	r20, 0x12	; 18
    1de6:	61 ec       	ldi	r22, 0xC1	; 193
    1de8:	85 e0       	ldi	r24, 0x05	; 5
    1dea:	0c 94 6e 11 	jmp	0x22dc	; 0x22dc <Endpoint_ConfigureEndpoint_Prv>

00001dee <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    1dee:	80 91 f2 01 	lds	r24, 0x01F2
    1df2:	83 30       	cpi	r24, 0x03	; 3
    1df4:	09 f4       	brne	.+2      	; 0x1df8 <EVENT_USB_Device_ControlRequest+0xa>
    1df6:	55 c0       	rjmp	.+170    	; 0x1ea2 <EVENT_USB_Device_ControlRequest+0xb4>
    1df8:	30 f4       	brcc	.+12     	; 0x1e06 <EVENT_USB_Device_ControlRequest+0x18>
    1dfa:	81 30       	cpi	r24, 0x01	; 1
    1dfc:	71 f0       	breq	.+28     	; 0x1e1a <EVENT_USB_Device_ControlRequest+0x2c>
    1dfe:	82 30       	cpi	r24, 0x02	; 2
    1e00:	09 f4       	brne	.+2      	; 0x1e04 <EVENT_USB_Device_ControlRequest+0x16>
    1e02:	8e c0       	rjmp	.+284    	; 0x1f20 <EVENT_USB_Device_ControlRequest+0x132>
    1e04:	08 95       	ret
    1e06:	8a 30       	cpi	r24, 0x0A	; 10
    1e08:	09 f4       	brne	.+2      	; 0x1e0c <EVENT_USB_Device_ControlRequest+0x1e>
    1e0a:	7a c0       	rjmp	.+244    	; 0x1f00 <EVENT_USB_Device_ControlRequest+0x112>
    1e0c:	8b 30       	cpi	r24, 0x0B	; 11
    1e0e:	09 f4       	brne	.+2      	; 0x1e12 <EVENT_USB_Device_ControlRequest+0x24>
    1e10:	60 c0       	rjmp	.+192    	; 0x1ed2 <EVENT_USB_Device_ControlRequest+0xe4>
    1e12:	89 30       	cpi	r24, 0x09	; 9
    1e14:	09 f0       	breq	.+2      	; 0x1e18 <EVENT_USB_Device_ControlRequest+0x2a>
    1e16:	9c c0       	rjmp	.+312    	; 0x1f50 <EVENT_USB_Device_ControlRequest+0x162>
    1e18:	20 c0       	rjmp	.+64     	; 0x1e5a <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1e1a:	80 91 f1 01 	lds	r24, 0x01F1
    1e1e:	81 3a       	cpi	r24, 0xA1	; 161
    1e20:	09 f0       	breq	.+2      	; 0x1e24 <EVENT_USB_Device_ControlRequest+0x36>
    1e22:	96 c0       	rjmp	.+300    	; 0x1f50 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e24:	80 91 e8 00 	lds	r24, 0x00E8
    1e28:	87 7f       	andi	r24, 0xF7	; 247
    1e2a:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    1e2e:	80 91 f5 01 	lds	r24, 0x01F5
    1e32:	90 91 f6 01 	lds	r25, 0x01F6
    1e36:	89 2b       	or	r24, r25
    1e38:	21 f0       	breq	.+8      	; 0x1e42 <EVENT_USB_Device_ControlRequest+0x54>
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;
    1e3a:	60 e0       	ldi	r22, 0x00	; 0
/** Event handler for the USB_ControlRequest event.
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	03 c0       	rjmp	.+6      	; 0x1e48 <EVENT_USB_Device_ControlRequest+0x5a>
                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
                    ReportSize = sizeof(keyboard_report_sent);
    1e42:	60 e1       	ldi	r22, 0x10	; 16

                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
    1e44:	8d e5       	ldi	r24, 0x5D	; 93
    1e46:	91 e0       	ldi	r25, 0x01	; 1
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1e48:	70 e0       	ldi	r23, 0x00	; 0
    1e4a:	0e 94 ab 10 	call	0x2156	; 0x2156 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1e4e:	80 91 e8 00 	lds	r24, 0x00E8
    1e52:	8b 77       	andi	r24, 0x7B	; 123
    1e54:	80 93 e8 00 	sts	0x00E8, r24
    1e58:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1e5a:	80 91 f1 01 	lds	r24, 0x01F1
    1e5e:	81 32       	cpi	r24, 0x21	; 33
    1e60:	09 f0       	breq	.+2      	; 0x1e64 <EVENT_USB_Device_ControlRequest+0x76>
    1e62:	76 c0       	rjmp	.+236    	; 0x1f50 <EVENT_USB_Device_ControlRequest+0x162>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    1e64:	80 91 f5 01 	lds	r24, 0x01F5
    1e68:	90 91 f6 01 	lds	r25, 0x01F6
    1e6c:	00 97       	sbiw	r24, 0x00	; 0
    1e6e:	19 f0       	breq	.+6      	; 0x1e76 <EVENT_USB_Device_ControlRequest+0x88>
    1e70:	04 97       	sbiw	r24, 0x04	; 4
    1e72:	09 f0       	breq	.+2      	; 0x1e76 <EVENT_USB_Device_ControlRequest+0x88>
    1e74:	6d c0       	rjmp	.+218    	; 0x1f50 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e76:	80 91 e8 00 	lds	r24, 0x00E8
    1e7a:	87 7f       	andi	r24, 0xF7	; 247
    1e7c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1e80:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    1e84:	82 fd       	sbrc	r24, 2
    1e86:	05 c0       	rjmp	.+10     	; 0x1e92 <EVENT_USB_Device_ControlRequest+0xa4>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    1e88:	80 91 f0 01 	lds	r24, 0x01F0
    1e8c:	81 11       	cpse	r24, r1
    1e8e:	f8 cf       	rjmp	.-16     	; 0x1e80 <EVENT_USB_Device_ControlRequest+0x92>
    1e90:	5f c0       	rjmp	.+190    	; 0x1f50 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1e92:	80 91 f1 00 	lds	r24, 0x00F1
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    1e96:	80 93 6d 01 	sts	0x016D, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1e9a:	80 91 e8 00 	lds	r24, 0x00E8
    1e9e:	8b 77       	andi	r24, 0x7B	; 123
    1ea0:	53 c0       	rjmp	.+166    	; 0x1f48 <EVENT_USB_Device_ControlRequest+0x15a>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1ea2:	80 91 f1 01 	lds	r24, 0x01F1
    1ea6:	81 3a       	cpi	r24, 0xA1	; 161
    1ea8:	09 f0       	breq	.+2      	; 0x1eac <EVENT_USB_Device_ControlRequest+0xbe>
    1eaa:	52 c0       	rjmp	.+164    	; 0x1f50 <EVENT_USB_Device_ControlRequest+0x162>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1eac:	80 91 f5 01 	lds	r24, 0x01F5
    1eb0:	90 91 f6 01 	lds	r25, 0x01F6
    1eb4:	89 2b       	or	r24, r25
    1eb6:	09 f0       	breq	.+2      	; 0x1eba <EVENT_USB_Device_ControlRequest+0xcc>
    1eb8:	4b c0       	rjmp	.+150    	; 0x1f50 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1eba:	80 91 e8 00 	lds	r24, 0x00E8
    1ebe:	87 7f       	andi	r24, 0xF7	; 247
    1ec0:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1ec4:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    1ec8:	80 ff       	sbrs	r24, 0
    1eca:	fc cf       	rjmp	.-8      	; 0x1ec4 <EVENT_USB_Device_ControlRequest+0xd6>
                    Endpoint_Write_8(keyboard_protocol);
    1ecc:	80 91 0c 01 	lds	r24, 0x010C
    1ed0:	36 c0       	rjmp	.+108    	; 0x1f3e <EVENT_USB_Device_ControlRequest+0x150>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1ed2:	80 91 f1 01 	lds	r24, 0x01F1
    1ed6:	81 32       	cpi	r24, 0x21	; 33
    1ed8:	d9 f5       	brne	.+118    	; 0x1f50 <EVENT_USB_Device_ControlRequest+0x162>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1eda:	80 91 f5 01 	lds	r24, 0x01F5
    1ede:	90 91 f6 01 	lds	r25, 0x01F6
    1ee2:	89 2b       	or	r24, r25
    1ee4:	a9 f5       	brne	.+106    	; 0x1f50 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ee6:	80 91 e8 00 	lds	r24, 0x00E8
    1eea:	87 7f       	andi	r24, 0xF7	; 247
    1eec:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    1ef0:	0e 94 a3 11 	call	0x2346	; 0x2346 <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    1ef4:	80 91 f3 01 	lds	r24, 0x01F3
    1ef8:	80 93 0c 01 	sts	0x010C, r24
                    clear_keyboard();
    1efc:	0c 94 b2 1a 	jmp	0x3564	; 0x3564 <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1f00:	80 91 f1 01 	lds	r24, 0x01F1
    1f04:	81 32       	cpi	r24, 0x21	; 33
    1f06:	21 f5       	brne	.+72     	; 0x1f50 <EVENT_USB_Device_ControlRequest+0x162>
    1f08:	80 91 e8 00 	lds	r24, 0x00E8
    1f0c:	87 7f       	andi	r24, 0xF7	; 247
    1f0e:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    1f12:	0e 94 a3 11 	call	0x2346	; 0x2346 <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    1f16:	80 91 f4 01 	lds	r24, 0x01F4
    1f1a:	80 93 6e 01 	sts	0x016E, r24
    1f1e:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1f20:	80 91 f1 01 	lds	r24, 0x01F1
    1f24:	81 3a       	cpi	r24, 0xA1	; 161
    1f26:	a1 f4       	brne	.+40     	; 0x1f50 <EVENT_USB_Device_ControlRequest+0x162>
    1f28:	80 91 e8 00 	lds	r24, 0x00E8
    1f2c:	87 7f       	andi	r24, 0xF7	; 247
    1f2e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1f32:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    1f36:	80 ff       	sbrs	r24, 0
    1f38:	fc cf       	rjmp	.-8      	; 0x1f32 <EVENT_USB_Device_ControlRequest+0x144>
                Endpoint_Write_8(keyboard_idle);
    1f3a:	80 91 6e 01 	lds	r24, 0x016E
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1f3e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f42:	80 91 e8 00 	lds	r24, 0x00E8
    1f46:	8e 77       	andi	r24, 0x7E	; 126
    1f48:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    1f4c:	0c 94 a3 11 	jmp	0x2346	; 0x2346 <Endpoint_ClearStatusStage>
    1f50:	08 95       	ret

00001f52 <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    1f52:	84 b7       	in	r24, 0x34	; 52
    1f54:	87 7f       	andi	r24, 0xF7	; 247
    1f56:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
    1f58:	88 e1       	ldi	r24, 0x18	; 24
    1f5a:	0f b6       	in	r0, 0x3f	; 63
    1f5c:	f8 94       	cli
    1f5e:	80 93 60 00 	sts	0x0060, r24
    1f62:	10 92 60 00 	sts	0x0060, r1
    1f66:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	80 e8       	ldi	r24, 0x80	; 128
    1f6c:	0f b6       	in	r0, 0x3f	; 63
    1f6e:	f8 94       	cli
    1f70:	80 93 61 00 	sts	0x0061, r24
    1f74:	90 93 61 00 	sts	0x0061, r25
    1f78:	0f be       	out	0x3f, r0	; 63
    midi_device_set_send_func(&midi_device, usb_send_func);
    midi_device_set_pre_input_process_func(&midi_device, usb_get_midi);
#endif

    setup_mcu();
    keyboard_setup();
    1f7a:	0e 94 76 15 	call	0x2aec	; 0x2aec <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    1f7e:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <USB_Disable>

    USB_Init();
    1f82:	0e 94 51 12 	call	0x24a2	; 0x24a2 <USB_Init>
    1f86:	80 91 e2 00 	lds	r24, 0x00E2
    1f8a:	84 60       	ori	r24, 0x04	; 4
    1f8c:	80 93 e2 00 	sts	0x00E2, r24

    // for Console_Task
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar);
    1f90:	8f e2       	ldi	r24, 0x2F	; 47
    1f92:	9d e0       	ldi	r25, 0x0D	; 13
    1f94:	0e 94 1d 21 	call	0x423a	; 0x423a <print_set_sendchar>
#endif

    setup_mcu();
    keyboard_setup();
    setup_usb();
    sei();
    1f98:	78 94       	sei
            USB_USBTask();
    #endif
    }
    print("USB configured.\n");
#else
    USB_USBTask();
    1f9a:	0e 94 cb 14 	call	0x2996	; 0x2996 <USB_USBTask>
#endif
    /* init modules */
    keyboard_init();
    1f9e:	0e 94 78 15 	call	0x2af0	; 0x2af0 <keyboard_init>
    host_set_driver(&lufa_driver);
    1fa2:	82 e0       	ldi	r24, 0x02	; 2
    1fa4:	91 e0       	ldi	r25, 0x01	; 1
    1fa6:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
    1faa:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <sleep_led_init>
#endif

    print("Keyboard start.\n");
    1fae:	8b e7       	ldi	r24, 0x7B	; 123
    1fb0:	93 e0       	ldi	r25, 0x03	; 3
    1fb2:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    while (1) {
        #ifndef BLUETOOTH_ENABLE
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    1fb6:	80 91 f0 01 	lds	r24, 0x01F0
    1fba:	85 30       	cpi	r24, 0x05	; 5
    1fbc:	89 f4       	brne	.+34     	; 0x1fe0 <main+0x8e>
            print("[s]");
    1fbe:	87 e7       	ldi	r24, 0x77	; 119
    1fc0:	93 e0       	ldi	r25, 0x03	; 3
    1fc2:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
            suspend_power_down();
    1fc6:	0e 94 a1 21 	call	0x4342	; 0x4342 <suspend_power_down>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    1fca:	80 91 ee 01 	lds	r24, 0x01EE
    1fce:	88 23       	and	r24, r24
    1fd0:	91 f3       	breq	.-28     	; 0x1fb6 <main+0x64>
    1fd2:	0e 94 c9 21 	call	0x4392	; 0x4392 <suspend_wakeup_condition>
    1fd6:	88 23       	and	r24, r24
    1fd8:	71 f3       	breq	.-36     	; 0x1fb6 <main+0x64>
                    USB_Device_SendRemoteWakeup();
    1fda:	0e 94 4c 10 	call	0x2098	; 0x2098 <USB_Device_SendRemoteWakeup>
    1fde:	eb cf       	rjmp	.-42     	; 0x1fb6 <main+0x64>

#ifdef MIDI_ENABLE
        midi_device_process(&midi_device);
        // MIDI_Task();
#endif
        keyboard_task();
    1fe0:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
    1fe4:	e8 cf       	rjmp	.-48     	; 0x1fb6 <main+0x64>

00001fe6 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    1fe6:	29 2f       	mov	r18, r25
    1fe8:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    1fea:	23 30       	cpi	r18, 0x03	; 3
    1fec:	31 05       	cpc	r19, r1
    1fee:	a9 f0       	breq	.+42     	; 0x201a <CALLBACK_USB_GetDescriptor+0x34>
    1ff0:	6c f4       	brge	.+26     	; 0x200c <CALLBACK_USB_GetDescriptor+0x26>
    1ff2:	21 30       	cpi	r18, 0x01	; 1
    1ff4:	31 05       	cpc	r19, r1
    1ff6:	09 f4       	brne	.+2      	; 0x1ffa <CALLBACK_USB_GetDescriptor+0x14>
    1ff8:	42 c0       	rjmp	.+132    	; 0x207e <CALLBACK_USB_GetDescriptor+0x98>
    1ffa:	22 30       	cpi	r18, 0x02	; 2
    1ffc:	31 05       	cpc	r19, r1
    1ffe:	09 f0       	breq	.+2      	; 0x2002 <CALLBACK_USB_GetDescriptor+0x1c>
    2000:	43 c0       	rjmp	.+134    	; 0x2088 <CALLBACK_USB_GetDescriptor+0xa2>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    2002:	8d e8       	ldi	r24, 0x8D	; 141
    2004:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    2006:	24 ed       	ldi	r18, 0xD4	; 212
    2008:	33 e0       	ldi	r19, 0x03	; 3
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    200a:	42 c0       	rjmp	.+132    	; 0x2090 <CALLBACK_USB_GetDescriptor+0xaa>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    200c:	21 32       	cpi	r18, 0x21	; 33
    200e:	31 05       	cpc	r19, r1
    2010:	c9 f0       	breq	.+50     	; 0x2044 <CALLBACK_USB_GetDescriptor+0x5e>
    2012:	22 32       	cpi	r18, 0x22	; 34
    2014:	31 05       	cpc	r19, r1
    2016:	19 f1       	breq	.+70     	; 0x205e <CALLBACK_USB_GetDescriptor+0x78>
    2018:	37 c0       	rjmp	.+110    	; 0x2088 <CALLBACK_USB_GetDescriptor+0xa2>
    201a:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    201c:	81 30       	cpi	r24, 0x01	; 1
    201e:	91 05       	cpc	r25, r1
    2020:	41 f0       	breq	.+16     	; 0x2032 <CALLBACK_USB_GetDescriptor+0x4c>
    2022:	82 30       	cpi	r24, 0x02	; 2
    2024:	91 05       	cpc	r25, r1
    2026:	41 f0       	breq	.+16     	; 0x2038 <CALLBACK_USB_GetDescriptor+0x52>
    2028:	89 2b       	or	r24, r25
    202a:	71 f5       	brne	.+92     	; 0x2088 <CALLBACK_USB_GetDescriptor+0xa2>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    202c:	e0 ed       	ldi	r30, 0xD0	; 208
    202e:	f3 e0       	ldi	r31, 0x03	; 3
    2030:	05 c0       	rjmp	.+10     	; 0x203c <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    2032:	e8 eb       	ldi	r30, 0xB8	; 184
    2034:	f3 e0       	ldi	r31, 0x03	; 3
    2036:	02 c0       	rjmp	.+4      	; 0x203c <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    2038:	e0 ea       	ldi	r30, 0xA0	; 160
    203a:	f3 e0       	ldi	r31, 0x03	; 3
    203c:	84 91       	lpm	r24, Z
    203e:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    2040:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    2042:	26 c0       	rjmp	.+76     	; 0x2090 <CALLBACK_USB_GetDescriptor+0xaa>
    2044:	65 30       	cpi	r22, 0x05	; 5
    2046:	00 f5       	brcc	.+64     	; 0x2088 <CALLBACK_USB_GetDescriptor+0xa2>
    2048:	e6 2f       	mov	r30, r22
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	ee 0f       	add	r30, r30
    204e:	ff 1f       	adc	r31, r31
    2050:	eb 5d       	subi	r30, 0xDB	; 219
    2052:	fe 4f       	sbci	r31, 0xFE	; 254
    2054:	20 81       	ld	r18, Z
    2056:	31 81       	ldd	r19, Z+1	; 0x01
    2058:	89 e0       	ldi	r24, 0x09	; 9
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	19 c0       	rjmp	.+50     	; 0x2090 <CALLBACK_USB_GetDescriptor+0xaa>
    205e:	65 30       	cpi	r22, 0x05	; 5
    2060:	98 f4       	brcc	.+38     	; 0x2088 <CALLBACK_USB_GetDescriptor+0xa2>
    2062:	e6 2f       	mov	r30, r22
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	df 01       	movw	r26, r30
    2068:	aa 0f       	add	r26, r26
    206a:	bb 1f       	adc	r27, r27
    206c:	a5 5e       	subi	r26, 0xE5	; 229
    206e:	be 4f       	sbci	r27, 0xFE	; 254
    2070:	2d 91       	ld	r18, X+
    2072:	3c 91       	ld	r19, X
    2074:	ea 5e       	subi	r30, 0xEA	; 234
    2076:	fe 4f       	sbci	r31, 0xFE	; 254
    2078:	80 81       	ld	r24, Z
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	09 c0       	rjmp	.+18     	; 0x2090 <CALLBACK_USB_GetDescriptor+0xaa>

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    207e:	82 e1       	ldi	r24, 0x12	; 18
    2080:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    2082:	21 e6       	ldi	r18, 0x61	; 97
    2084:	34 e0       	ldi	r19, 0x04	; 4
    2086:	04 c0       	rjmp	.+8      	; 0x2090 <CALLBACK_USB_GetDescriptor+0xaa>
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    2090:	fa 01       	movw	r30, r20
    2092:	31 83       	std	Z+1, r19	; 0x01
    2094:	20 83       	st	Z, r18
    return Size;
}
    2096:	08 95       	ret

00002098 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2098:	80 e1       	ldi	r24, 0x10	; 16
    209a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    209c:	82 e1       	ldi	r24, 0x12	; 18
    209e:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    20a0:	09 b4       	in	r0, 0x29	; 41
    20a2:	00 fe       	sbrs	r0, 0
    20a4:	fd cf       	rjmp	.-6      	; 0x20a0 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    20a6:	80 91 d8 00 	lds	r24, 0x00D8
    20aa:	8f 7d       	andi	r24, 0xDF	; 223
    20ac:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    20b0:	80 91 e0 00 	lds	r24, 0x00E0
    20b4:	82 60       	ori	r24, 0x02	; 2
    20b6:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    20ba:	80 91 e0 00 	lds	r24, 0x00E0
    20be:	81 fd       	sbrc	r24, 1
    20c0:	fc cf       	rjmp	.-8      	; 0x20ba <USB_Device_SendRemoteWakeup+0x22>
}
    20c2:	08 95       	ret

000020c4 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    20c4:	cf 92       	push	r12
    20c6:	df 92       	push	r13
    20c8:	ef 92       	push	r14
    20ca:	ff 92       	push	r15
    20cc:	0f 93       	push	r16
    20ce:	1f 93       	push	r17
    20d0:	cf 93       	push	r28
    20d2:	df 93       	push	r29
    20d4:	7c 01       	movw	r14, r24
    20d6:	8b 01       	movw	r16, r22
    20d8:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    20da:	0e 94 c4 11 	call	0x2388	; 0x2388 <Endpoint_WaitUntilReady>
    20de:	81 11       	cpse	r24, r1
    20e0:	31 c0       	rjmp	.+98     	; 0x2144 <Endpoint_Write_Stream_LE+0x80>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    20e2:	20 97       	sbiw	r28, 0x00	; 0
    20e4:	31 f0       	breq	.+12     	; 0x20f2 <Endpoint_Write_Stream_LE+0x2e>
	{
		Length -= *BytesProcessed;
    20e6:	88 81       	ld	r24, Y
    20e8:	99 81       	ldd	r25, Y+1	; 0x01
    20ea:	08 1b       	sub	r16, r24
    20ec:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    20ee:	e8 0e       	add	r14, r24
    20f0:	f9 1e       	adc	r15, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    20f2:	c1 2c       	mov	r12, r1
    20f4:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    20f6:	01 15       	cp	r16, r1
    20f8:	11 05       	cpc	r17, r1
    20fa:	19 f1       	breq	.+70     	; 0x2142 <Endpoint_Write_Stream_LE+0x7e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    20fc:	80 91 e8 00 	lds	r24, 0x00E8
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    2100:	85 fd       	sbrc	r24, 5
    2102:	14 c0       	rjmp	.+40     	; 0x212c <Endpoint_Write_Stream_LE+0x68>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2104:	80 91 e8 00 	lds	r24, 0x00E8
    2108:	8e 77       	andi	r24, 0x7E	; 126
    210a:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    210e:	20 97       	sbiw	r28, 0x00	; 0
    2110:	41 f0       	breq	.+16     	; 0x2122 <Endpoint_Write_Stream_LE+0x5e>
			{
				*BytesProcessed += BytesInTransfer;
    2112:	88 81       	ld	r24, Y
    2114:	99 81       	ldd	r25, Y+1	; 0x01
    2116:	8c 0d       	add	r24, r12
    2118:	9d 1d       	adc	r25, r13
    211a:	99 83       	std	Y+1, r25	; 0x01
    211c:	88 83       	st	Y, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    211e:	85 e0       	ldi	r24, 0x05	; 5
    2120:	11 c0       	rjmp	.+34     	; 0x2144 <Endpoint_Write_Stream_LE+0x80>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    2122:	0e 94 c4 11 	call	0x2388	; 0x2388 <Endpoint_WaitUntilReady>
    2126:	88 23       	and	r24, r24
    2128:	31 f3       	breq	.-52     	; 0x20f6 <Endpoint_Write_Stream_LE+0x32>
    212a:	0c c0       	rjmp	.+24     	; 0x2144 <Endpoint_Write_Stream_LE+0x80>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    212c:	f7 01       	movw	r30, r14
    212e:	81 91       	ld	r24, Z+
    2130:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2132:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    2136:	01 50       	subi	r16, 0x01	; 1
    2138:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    213a:	ff ef       	ldi	r31, 0xFF	; 255
    213c:	cf 1a       	sub	r12, r31
    213e:	df 0a       	sbc	r13, r31
    2140:	da cf       	rjmp	.-76     	; 0x20f6 <Endpoint_Write_Stream_LE+0x32>
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    2142:	80 e0       	ldi	r24, 0x00	; 0
}
    2144:	df 91       	pop	r29
    2146:	cf 91       	pop	r28
    2148:	1f 91       	pop	r17
    214a:	0f 91       	pop	r16
    214c:	ff 90       	pop	r15
    214e:	ef 90       	pop	r14
    2150:	df 90       	pop	r13
    2152:	cf 90       	pop	r12
    2154:	08 95       	ret

00002156 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    2156:	20 91 f7 01 	lds	r18, 0x01F7
    215a:	30 91 f8 01 	lds	r19, 0x01F8
    215e:	26 17       	cp	r18, r22
    2160:	37 07       	cpc	r19, r23
    2162:	48 f0       	brcs	.+18     	; 0x2176 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    2164:	61 15       	cp	r22, r1
    2166:	71 05       	cpc	r23, r1
    2168:	39 f4       	brne	.+14     	; 0x2178 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    216a:	20 91 e8 00 	lds	r18, 0x00E8
    216e:	2e 77       	andi	r18, 0x7E	; 126
    2170:	20 93 e8 00 	sts	0x00E8, r18
    2174:	01 c0       	rjmp	.+2      	; 0x2178 <Endpoint_Write_Control_Stream_LE+0x22>
    2176:	b9 01       	movw	r22, r18
    2178:	fc 01       	movw	r30, r24
    217a:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    217c:	61 15       	cp	r22, r1
    217e:	71 05       	cpc	r23, r1
    2180:	b9 f1       	breq	.+110    	; 0x21f0 <Endpoint_Write_Control_Stream_LE+0x9a>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2182:	80 91 f0 01 	lds	r24, 0x01F0

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2186:	88 23       	and	r24, r24
    2188:	09 f4       	brne	.+2      	; 0x218c <Endpoint_Write_Control_Stream_LE+0x36>
    218a:	40 c0       	rjmp	.+128    	; 0x220c <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    218c:	85 30       	cpi	r24, 0x05	; 5
    218e:	09 f4       	brne	.+2      	; 0x2192 <Endpoint_Write_Control_Stream_LE+0x3c>
    2190:	3f c0       	rjmp	.+126    	; 0x2210 <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2192:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2196:	83 fd       	sbrc	r24, 3
    2198:	3d c0       	rjmp	.+122    	; 0x2214 <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    219a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    219e:	82 ff       	sbrs	r24, 2
    21a0:	06 c0       	rjmp	.+12     	; 0x21ae <Endpoint_Write_Control_Stream_LE+0x58>
    21a2:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    21a6:	82 ff       	sbrs	r24, 2
    21a8:	26 c0       	rjmp	.+76     	; 0x21f6 <Endpoint_Write_Control_Stream_LE+0xa0>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    21aa:	80 e0       	ldi	r24, 0x00	; 0
    21ac:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    21ae:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    21b2:	80 ff       	sbrs	r24, 0
    21b4:	e3 cf       	rjmp	.-58     	; 0x217c <Endpoint_Write_Control_Stream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    21b6:	20 91 f3 00 	lds	r18, 0x00F3
    21ba:	80 91 f2 00 	lds	r24, 0x00F2
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    21c2:	61 15       	cp	r22, r1
    21c4:	71 05       	cpc	r23, r1
    21c6:	51 f0       	breq	.+20     	; 0x21dc <Endpoint_Write_Control_Stream_LE+0x86>
    21c8:	88 30       	cpi	r24, 0x08	; 8
    21ca:	91 05       	cpc	r25, r1
    21cc:	38 f4       	brcc	.+14     	; 0x21dc <Endpoint_Write_Control_Stream_LE+0x86>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    21ce:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    21d0:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    21d4:	61 50       	subi	r22, 0x01	; 1
    21d6:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    21d8:	01 96       	adiw	r24, 0x01	; 1
    21da:	f3 cf       	rjmp	.-26     	; 0x21c2 <Endpoint_Write_Control_Stream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    21dc:	21 e0       	ldi	r18, 0x01	; 1
    21de:	08 97       	sbiw	r24, 0x08	; 8
    21e0:	09 f0       	breq	.+2      	; 0x21e4 <Endpoint_Write_Control_Stream_LE+0x8e>
    21e2:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    21e4:	80 91 e8 00 	lds	r24, 0x00E8
    21e8:	8e 77       	andi	r24, 0x7E	; 126
    21ea:	80 93 e8 00 	sts	0x00E8, r24
    21ee:	c6 cf       	rjmp	.-116    	; 0x217c <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    21f0:	21 11       	cpse	r18, r1
    21f2:	c7 cf       	rjmp	.-114    	; 0x2182 <Endpoint_Write_Control_Stream_LE+0x2c>
    21f4:	d6 cf       	rjmp	.-84     	; 0x21a2 <Endpoint_Write_Control_Stream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    21f6:	80 91 f0 01 	lds	r24, 0x01F0

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    21fa:	88 23       	and	r24, r24
    21fc:	39 f0       	breq	.+14     	; 0x220c <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    21fe:	85 30       	cpi	r24, 0x05	; 5
    2200:	39 f0       	breq	.+14     	; 0x2210 <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2202:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2206:	83 ff       	sbrs	r24, 3
    2208:	cc cf       	rjmp	.-104    	; 0x21a2 <Endpoint_Write_Control_Stream_LE+0x4c>
    220a:	04 c0       	rjmp	.+8      	; 0x2214 <Endpoint_Write_Control_Stream_LE+0xbe>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    220c:	82 e0       	ldi	r24, 0x02	; 2
    220e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    2210:	83 e0       	ldi	r24, 0x03	; 3
    2212:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    2214:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    2216:	08 95       	ret

00002218 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    2218:	20 91 f7 01 	lds	r18, 0x01F7
    221c:	30 91 f8 01 	lds	r19, 0x01F8
    2220:	26 17       	cp	r18, r22
    2222:	37 07       	cpc	r19, r23
    2224:	48 f0       	brcs	.+18     	; 0x2238 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    2226:	61 15       	cp	r22, r1
    2228:	71 05       	cpc	r23, r1
    222a:	39 f4       	brne	.+14     	; 0x223a <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    222c:	20 91 e8 00 	lds	r18, 0x00E8
    2230:	2e 77       	andi	r18, 0x7E	; 126
    2232:	20 93 e8 00 	sts	0x00E8, r18
    2236:	01 c0       	rjmp	.+2      	; 0x223a <Endpoint_Write_Control_PStream_LE+0x22>
    2238:	b9 01       	movw	r22, r18
    223a:	fc 01       	movw	r30, r24
    223c:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    223e:	61 15       	cp	r22, r1
    2240:	71 05       	cpc	r23, r1
    2242:	c1 f1       	breq	.+112    	; 0x22b4 <Endpoint_Write_Control_PStream_LE+0x9c>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2244:	80 91 f0 01 	lds	r24, 0x01F0

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2248:	88 23       	and	r24, r24
    224a:	09 f4       	brne	.+2      	; 0x224e <Endpoint_Write_Control_PStream_LE+0x36>
    224c:	41 c0       	rjmp	.+130    	; 0x22d0 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    224e:	85 30       	cpi	r24, 0x05	; 5
    2250:	09 f4       	brne	.+2      	; 0x2254 <Endpoint_Write_Control_PStream_LE+0x3c>
    2252:	40 c0       	rjmp	.+128    	; 0x22d4 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2254:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2258:	83 fd       	sbrc	r24, 3
    225a:	3e c0       	rjmp	.+124    	; 0x22d8 <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    225c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    2260:	82 ff       	sbrs	r24, 2
    2262:	06 c0       	rjmp	.+12     	; 0x2270 <Endpoint_Write_Control_PStream_LE+0x58>
    2264:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    2268:	82 ff       	sbrs	r24, 2
    226a:	27 c0       	rjmp	.+78     	; 0x22ba <Endpoint_Write_Control_PStream_LE+0xa2>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    226c:	80 e0       	ldi	r24, 0x00	; 0
    226e:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2270:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    2274:	80 ff       	sbrs	r24, 0
    2276:	e3 cf       	rjmp	.-58     	; 0x223e <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    2278:	20 91 f3 00 	lds	r18, 0x00F3
    227c:	80 91 f2 00 	lds	r24, 0x00F2
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2284:	61 15       	cp	r22, r1
    2286:	71 05       	cpc	r23, r1
    2288:	59 f0       	breq	.+22     	; 0x22a0 <Endpoint_Write_Control_PStream_LE+0x88>
    228a:	88 30       	cpi	r24, 0x08	; 8
    228c:	91 05       	cpc	r25, r1
    228e:	40 f4       	brcc	.+16     	; 0x22a0 <Endpoint_Write_Control_PStream_LE+0x88>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    2290:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2292:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    2296:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    2298:	61 50       	subi	r22, 0x01	; 1
    229a:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    229c:	01 96       	adiw	r24, 0x01	; 1
    229e:	f2 cf       	rjmp	.-28     	; 0x2284 <Endpoint_Write_Control_PStream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    22a0:	21 e0       	ldi	r18, 0x01	; 1
    22a2:	08 97       	sbiw	r24, 0x08	; 8
    22a4:	09 f0       	breq	.+2      	; 0x22a8 <Endpoint_Write_Control_PStream_LE+0x90>
    22a6:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    22a8:	80 91 e8 00 	lds	r24, 0x00E8
    22ac:	8e 77       	andi	r24, 0x7E	; 126
    22ae:	80 93 e8 00 	sts	0x00E8, r24
    22b2:	c5 cf       	rjmp	.-118    	; 0x223e <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    22b4:	21 11       	cpse	r18, r1
    22b6:	c6 cf       	rjmp	.-116    	; 0x2244 <Endpoint_Write_Control_PStream_LE+0x2c>
    22b8:	d5 cf       	rjmp	.-86     	; 0x2264 <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    22ba:	80 91 f0 01 	lds	r24, 0x01F0

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    22be:	88 23       	and	r24, r24
    22c0:	39 f0       	breq	.+14     	; 0x22d0 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    22c2:	85 30       	cpi	r24, 0x05	; 5
    22c4:	39 f0       	breq	.+14     	; 0x22d4 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    22c6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    22ca:	83 ff       	sbrs	r24, 3
    22cc:	cb cf       	rjmp	.-106    	; 0x2264 <Endpoint_Write_Control_PStream_LE+0x4c>
    22ce:	04 c0       	rjmp	.+8      	; 0x22d8 <Endpoint_Write_Control_PStream_LE+0xc0>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    22d0:	82 e0       	ldi	r24, 0x02	; 2
    22d2:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    22d4:	83 e0       	ldi	r24, 0x03	; 3
    22d6:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    22d8:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    22da:	08 95       	ret

000022dc <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    22dc:	98 2f       	mov	r25, r24
    22de:	97 30       	cpi	r25, 0x07	; 7
    22e0:	58 f5       	brcc	.+86     	; 0x2338 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    22e2:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    22e6:	98 17       	cp	r25, r24
    22e8:	39 f0       	breq	.+14     	; 0x22f8 <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    22ea:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    22ee:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    22f2:	50 91 f0 00 	lds	r21, 0x00F0
    22f6:	03 c0       	rjmp	.+6      	; 0x22fe <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    22f8:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    22fa:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    22fc:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    22fe:	21 ff       	sbrs	r18, 1
    2300:	19 c0       	rjmp	.+50     	; 0x2334 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    2302:	30 91 eb 00 	lds	r19, 0x00EB
    2306:	3e 7f       	andi	r19, 0xFE	; 254
    2308:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    230c:	30 91 ed 00 	lds	r19, 0x00ED
    2310:	3d 7f       	andi	r19, 0xFD	; 253
    2312:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    2316:	30 91 eb 00 	lds	r19, 0x00EB
    231a:	31 60       	ori	r19, 0x01	; 1
    231c:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    2320:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    2324:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    2328:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    232c:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    2330:	27 ff       	sbrs	r18, 7
    2332:	07 c0       	rjmp	.+14     	; 0x2342 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    2334:	9f 5f       	subi	r25, 0xFF	; 255
    2336:	d3 cf       	rjmp	.-90     	; 0x22de <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2338:	8f 70       	andi	r24, 0x0F	; 15
    233a:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    2342:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    2344:	08 95       	ret

00002346 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    2346:	80 91 f1 01 	lds	r24, 0x01F1
    234a:	87 fd       	sbrc	r24, 7
    234c:	05 c0       	rjmp	.+10     	; 0x2358 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    234e:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    2352:	80 ff       	sbrs	r24, 0
    2354:	0e c0       	rjmp	.+28     	; 0x2372 <Endpoint_ClearStatusStage+0x2c>
    2356:	12 c0       	rjmp	.+36     	; 0x237c <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2358:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    235c:	82 fd       	sbrc	r24, 2
    235e:	05 c0       	rjmp	.+10     	; 0x236a <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    2360:	80 91 f0 01 	lds	r24, 0x01F0
    2364:	81 11       	cpse	r24, r1
    2366:	f8 cf       	rjmp	.-16     	; 0x2358 <Endpoint_ClearStatusStage+0x12>
    2368:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    236a:	80 91 e8 00 	lds	r24, 0x00E8
    236e:	8b 77       	andi	r24, 0x7B	; 123
    2370:	08 c0       	rjmp	.+16     	; 0x2382 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    2372:	80 91 f0 01 	lds	r24, 0x01F0
    2376:	81 11       	cpse	r24, r1
    2378:	ea cf       	rjmp	.-44     	; 0x234e <Endpoint_ClearStatusStage+0x8>
    237a:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    237c:	80 91 e8 00 	lds	r24, 0x00E8
    2380:	8e 77       	andi	r24, 0x7E	; 126
    2382:	80 93 e8 00 	sts	0x00E8, r24
    2386:	08 95       	ret

00002388 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    2388:	80 91 e4 00 	lds	r24, 0x00E4
    238c:	90 91 e5 00 	lds	r25, 0x00E5
    2390:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2392:	20 91 ec 00 	lds	r18, 0x00EC
    2396:	20 ff       	sbrs	r18, 0
    2398:	21 c0       	rjmp	.+66     	; 0x23dc <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    239a:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    239e:	20 fd       	sbrc	r18, 0
    23a0:	21 c0       	rjmp	.+66     	; 0x23e4 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    23a2:	20 91 f0 01 	lds	r18, 0x01F0

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    23a6:	22 23       	and	r18, r18
    23a8:	89 f0       	breq	.+34     	; 0x23cc <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    23aa:	25 30       	cpi	r18, 0x05	; 5
    23ac:	89 f0       	breq	.+34     	; 0x23d0 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    23ae:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    23b2:	25 fd       	sbrc	r18, 5
    23b4:	0f c0       	rjmp	.+30     	; 0x23d4 <Endpoint_WaitUntilReady+0x4c>
    23b6:	20 91 e4 00 	lds	r18, 0x00E4
    23ba:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    23be:	28 17       	cp	r18, r24
    23c0:	39 07       	cpc	r19, r25
    23c2:	39 f3       	breq	.-50     	; 0x2392 <Endpoint_WaitUntilReady+0xa>
    23c4:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    23c6:	41 f0       	breq	.+16     	; 0x23d8 <Endpoint_WaitUntilReady+0x50>
    23c8:	c9 01       	movw	r24, r18
    23ca:	e3 cf       	rjmp	.-58     	; 0x2392 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    23cc:	82 e0       	ldi	r24, 0x02	; 2
    23ce:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    23d0:	83 e0       	ldi	r24, 0x03	; 3
    23d2:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    23d8:	84 e0       	ldi	r24, 0x04	; 4
    23da:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    23dc:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    23e0:	22 ff       	sbrs	r18, 2
    23e2:	df cf       	rjmp	.-66     	; 0x23a2 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    23e4:	80 e0       	ldi	r24, 0x00	; 0
    23e6:	08 95       	ret

000023e8 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    23e8:	0e 94 62 12 	call	0x24c4	; 0x24c4 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    23ec:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    23f0:	e0 ee       	ldi	r30, 0xE0	; 224
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 81       	ld	r24, Z
    23f6:	81 60       	ori	r24, 0x01	; 1
    23f8:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    23fa:	e8 ed       	ldi	r30, 0xD8	; 216
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	80 81       	ld	r24, Z
    2400:	8f 77       	andi	r24, 0x7F	; 127
    2402:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2404:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    2406:	a7 ed       	ldi	r26, 0xD7	; 215
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	8c 91       	ld	r24, X
    240c:	8e 7f       	andi	r24, 0xFE	; 254
    240e:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    2410:	80 81       	ld	r24, Z
    2412:	8f 7e       	andi	r24, 0xEF	; 239
    2414:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    2416:	10 92 ef 01 	sts	0x01EF, r1
    241a:	08 95       	ret

0000241c <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    241c:	0f 93       	push	r16
    241e:	1f 93       	push	r17
    2420:	cf 93       	push	r28
    2422:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    2424:	0e 94 62 12 	call	0x24c4	; 0x24c4 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    2428:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    242c:	c8 ed       	ldi	r28, 0xD8	; 216
    242e:	d0 e0       	ldi	r29, 0x00	; 0
    2430:	88 81       	ld	r24, Y
    2432:	8f 77       	andi	r24, 0x7F	; 127
    2434:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    2436:	88 81       	ld	r24, Y
    2438:	80 68       	ori	r24, 0x80	; 128
    243a:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    243c:	88 81       	ld	r24, Y
    243e:	8f 7d       	andi	r24, 0xDF	; 223
    2440:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2442:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    2444:	10 92 f0 01 	sts	0x01F0, r1
	USB_Device_ConfigurationNumber  = 0;
    2448:	10 92 ec 01 	sts	0x01EC, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    244c:	10 92 ee 01 	sts	0x01EE, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    2450:	10 92 ed 01 	sts	0x01ED, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    2454:	00 ee       	ldi	r16, 0xE0	; 224
    2456:	10 e0       	ldi	r17, 0x00	; 0
    2458:	f8 01       	movw	r30, r16
    245a:	80 81       	ld	r24, Z
    245c:	8b 7f       	andi	r24, 0xFB	; 251
    245e:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    2460:	88 81       	ld	r24, Y
    2462:	81 60       	ori	r24, 0x01	; 1
    2464:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    2466:	42 e0       	ldi	r20, 0x02	; 2
    2468:	60 e0       	ldi	r22, 0x00	; 0
    246a:	80 e0       	ldi	r24, 0x00	; 0
    246c:	0e 94 6e 11 	call	0x22dc	; 0x22dc <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    2470:	e1 ee       	ldi	r30, 0xE1	; 225
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	80 81       	ld	r24, Z
    2476:	8e 7f       	andi	r24, 0xFE	; 254
    2478:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    247a:	e2 ee       	ldi	r30, 0xE2	; 226
    247c:	f0 e0       	ldi	r31, 0x00	; 0
    247e:	80 81       	ld	r24, Z
    2480:	81 60       	ori	r24, 0x01	; 1
    2482:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    2484:	80 81       	ld	r24, Z
    2486:	88 60       	ori	r24, 0x08	; 8
    2488:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    248a:	f8 01       	movw	r30, r16
    248c:	80 81       	ld	r24, Z
    248e:	8e 7f       	andi	r24, 0xFE	; 254
    2490:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    2492:	88 81       	ld	r24, Y
    2494:	80 61       	ori	r24, 0x10	; 16
    2496:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    2498:	df 91       	pop	r29
    249a:	cf 91       	pop	r28
    249c:	1f 91       	pop	r17
    249e:	0f 91       	pop	r16
    24a0:	08 95       	ret

000024a2 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    24a2:	e8 ed       	ldi	r30, 0xD8	; 216
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	80 81       	ld	r24, Z
    24a8:	8f 7e       	andi	r24, 0xEF	; 239
    24aa:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    24ac:	e7 ed       	ldi	r30, 0xD7	; 215
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	80 81       	ld	r24, Z
    24b2:	81 60       	ori	r24, 0x01	; 1
    24b4:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    24b6:	84 e0       	ldi	r24, 0x04	; 4
    24b8:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	80 93 ef 01 	sts	0x01EF, r24

	USB_ResetInterface();
    24c0:	0c 94 0e 12 	jmp	0x241c	; 0x241c <USB_ResetInterface>

000024c4 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    24c4:	e8 ed       	ldi	r30, 0xD8	; 216
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	8e 7f       	andi	r24, 0xFE	; 254
    24cc:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    24ce:	10 92 e2 00 	sts	0x00E2, r1
    24d2:	08 95       	ret

000024d4 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    24d4:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    24d8:	10 92 e1 00 	sts	0x00E1, r1
    24dc:	08 95       	ret

000024de <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    24de:	1f 92       	push	r1
    24e0:	0f 92       	push	r0
    24e2:	0f b6       	in	r0, 0x3f	; 63
    24e4:	0f 92       	push	r0
    24e6:	11 24       	eor	r1, r1
    24e8:	2f 93       	push	r18
    24ea:	3f 93       	push	r19
    24ec:	4f 93       	push	r20
    24ee:	5f 93       	push	r21
    24f0:	6f 93       	push	r22
    24f2:	7f 93       	push	r23
    24f4:	8f 93       	push	r24
    24f6:	9f 93       	push	r25
    24f8:	af 93       	push	r26
    24fa:	bf 93       	push	r27
    24fc:	ef 93       	push	r30
    24fe:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    2500:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    2504:	82 ff       	sbrs	r24, 2
    2506:	0b c0       	rjmp	.+22     	; 0x251e <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    2508:	80 91 e2 00 	lds	r24, 0x00E2
    250c:	82 ff       	sbrs	r24, 2
    250e:	07 c0       	rjmp	.+14     	; 0x251e <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    2510:	80 91 e1 00 	lds	r24, 0x00E1
    2514:	8b 7f       	andi	r24, 0xFB	; 251
    2516:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    251a:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    251e:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    2522:	80 ff       	sbrs	r24, 0
    2524:	1f c0       	rjmp	.+62     	; 0x2564 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    2526:	80 91 d8 00 	lds	r24, 0x00D8
    252a:	80 ff       	sbrs	r24, 0
    252c:	1b c0       	rjmp	.+54     	; 0x2564 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    252e:	80 91 da 00 	lds	r24, 0x00DA
    2532:	8e 7f       	andi	r24, 0xFE	; 254
    2534:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    2538:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    253c:	80 ff       	sbrs	r24, 0
    253e:	0d c0       	rjmp	.+26     	; 0x255a <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2540:	80 e1       	ldi	r24, 0x10	; 16
    2542:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2544:	82 e1       	ldi	r24, 0x12	; 18
    2546:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    2548:	09 b4       	in	r0, 0x29	; 41
    254a:	00 fe       	sbrs	r0, 0
    254c:	fd cf       	rjmp	.-6      	; 0x2548 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	80 93 f0 01 	sts	0x01F0, r24
			EVENT_USB_Device_Connect();
    2554:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <EVENT_USB_Device_Connect>
    2558:	05 c0       	rjmp	.+10     	; 0x2564 <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    255a:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    255c:	10 92 f0 01 	sts	0x01F0, r1
			EVENT_USB_Device_Disconnect();
    2560:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    2564:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    2568:	80 ff       	sbrs	r24, 0
    256a:	19 c0       	rjmp	.+50     	; 0x259e <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    256c:	80 91 e2 00 	lds	r24, 0x00E2
    2570:	80 ff       	sbrs	r24, 0
    2572:	15 c0       	rjmp	.+42     	; 0x259e <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2574:	80 91 e2 00 	lds	r24, 0x00E2
    2578:	8e 7f       	andi	r24, 0xFE	; 254
    257a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    257e:	80 91 e2 00 	lds	r24, 0x00E2
    2582:	80 61       	ori	r24, 0x10	; 16
    2584:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    2588:	80 91 d8 00 	lds	r24, 0x00D8
    258c:	80 62       	ori	r24, 0x20	; 32
    258e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2592:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    2594:	85 e0       	ldi	r24, 0x05	; 5
    2596:	80 93 f0 01 	sts	0x01F0, r24
		EVENT_USB_Device_Suspend();
    259a:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    259e:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    25a2:	84 ff       	sbrs	r24, 4
    25a4:	30 c0       	rjmp	.+96     	; 0x2606 <__vector_10+0x128>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    25a6:	80 91 e2 00 	lds	r24, 0x00E2
    25aa:	84 ff       	sbrs	r24, 4
    25ac:	2c c0       	rjmp	.+88     	; 0x2606 <__vector_10+0x128>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    25ae:	80 e1       	ldi	r24, 0x10	; 16
    25b0:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    25b2:	82 e1       	ldi	r24, 0x12	; 18
    25b4:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    25b6:	09 b4       	in	r0, 0x29	; 41
    25b8:	00 fe       	sbrs	r0, 0
    25ba:	fd cf       	rjmp	.-6      	; 0x25b6 <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    25bc:	80 91 d8 00 	lds	r24, 0x00D8
    25c0:	8f 7d       	andi	r24, 0xDF	; 223
    25c2:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    25c6:	80 91 e1 00 	lds	r24, 0x00E1
    25ca:	8f 7e       	andi	r24, 0xEF	; 239
    25cc:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    25d0:	80 91 e2 00 	lds	r24, 0x00E2
    25d4:	8f 7e       	andi	r24, 0xEF	; 239
    25d6:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    25da:	80 91 e2 00 	lds	r24, 0x00E2
    25de:	81 60       	ori	r24, 0x01	; 1
    25e0:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    25e4:	80 91 ec 01 	lds	r24, 0x01EC
    25e8:	88 23       	and	r24, r24
    25ea:	11 f0       	breq	.+4      	; 0x25f0 <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
    25ec:	84 e0       	ldi	r24, 0x04	; 4
    25ee:	07 c0       	rjmp	.+14     	; 0x25fe <__vector_10+0x120>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    25f0:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    25f4:	87 ff       	sbrs	r24, 7
    25f6:	02 c0       	rjmp	.+4      	; 0x25fc <__vector_10+0x11e>
    25f8:	83 e0       	ldi	r24, 0x03	; 3
    25fa:	01 c0       	rjmp	.+2      	; 0x25fe <__vector_10+0x120>
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	80 93 f0 01 	sts	0x01F0, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    2602:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    2606:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    260a:	83 ff       	sbrs	r24, 3
    260c:	29 c0       	rjmp	.+82     	; 0x2660 <__vector_10+0x182>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    260e:	80 91 e2 00 	lds	r24, 0x00E2
    2612:	83 ff       	sbrs	r24, 3
    2614:	25 c0       	rjmp	.+74     	; 0x2660 <__vector_10+0x182>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    2616:	80 91 e1 00 	lds	r24, 0x00E1
    261a:	87 7f       	andi	r24, 0xF7	; 247
    261c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    2620:	82 e0       	ldi	r24, 0x02	; 2
    2622:	80 93 f0 01 	sts	0x01F0, r24
		USB_Device_ConfigurationNumber = 0;
    2626:	10 92 ec 01 	sts	0x01EC, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    262a:	80 91 e1 00 	lds	r24, 0x00E1
    262e:	8e 7f       	andi	r24, 0xFE	; 254
    2630:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2634:	80 91 e2 00 	lds	r24, 0x00E2
    2638:	8e 7f       	andi	r24, 0xFE	; 254
    263a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    263e:	80 91 e2 00 	lds	r24, 0x00E2
    2642:	80 61       	ori	r24, 0x10	; 16
    2644:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    2648:	42 e0       	ldi	r20, 0x02	; 2
    264a:	60 e0       	ldi	r22, 0x00	; 0
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	0e 94 6e 11 	call	0x22dc	; 0x22dc <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    2652:	80 91 f0 00 	lds	r24, 0x00F0
    2656:	88 60       	ori	r24, 0x08	; 8
    2658:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    265c:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    2660:	ff 91       	pop	r31
    2662:	ef 91       	pop	r30
    2664:	bf 91       	pop	r27
    2666:	af 91       	pop	r26
    2668:	9f 91       	pop	r25
    266a:	8f 91       	pop	r24
    266c:	7f 91       	pop	r23
    266e:	6f 91       	pop	r22
    2670:	5f 91       	pop	r21
    2672:	4f 91       	pop	r20
    2674:	3f 91       	pop	r19
    2676:	2f 91       	pop	r18
    2678:	0f 90       	pop	r0
    267a:	0f be       	out	0x3f, r0	; 63
    267c:	0f 90       	pop	r0
    267e:	1f 90       	pop	r1
    2680:	18 95       	reti

00002682 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    2682:	1f 92       	push	r1
    2684:	0f 92       	push	r0
    2686:	0f b6       	in	r0, 0x3f	; 63
    2688:	0f 92       	push	r0
    268a:	11 24       	eor	r1, r1
    268c:	2f 93       	push	r18
    268e:	3f 93       	push	r19
    2690:	4f 93       	push	r20
    2692:	5f 93       	push	r21
    2694:	6f 93       	push	r22
    2696:	7f 93       	push	r23
    2698:	8f 93       	push	r24
    269a:	9f 93       	push	r25
    269c:	af 93       	push	r26
    269e:	bf 93       	push	r27
    26a0:	cf 93       	push	r28
    26a2:	ef 93       	push	r30
    26a4:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    26a6:	c0 91 e9 00 	lds	r28, 0x00E9
    26aa:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    26ac:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    26b0:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    26b4:	80 91 f0 00 	lds	r24, 0x00F0
    26b8:	87 7f       	andi	r24, 0xF7	; 247
    26ba:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    26be:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    26c0:	0e 94 7d 13 	call	0x26fa	; 0x26fa <USB_Device_ProcessControlRequest>
    26c4:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    26c8:	80 91 f0 00 	lds	r24, 0x00F0
    26cc:	88 60       	ori	r24, 0x08	; 8
    26ce:	80 93 f0 00 	sts	0x00F0, r24
    26d2:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    26d6:	ff 91       	pop	r31
    26d8:	ef 91       	pop	r30
    26da:	cf 91       	pop	r28
    26dc:	bf 91       	pop	r27
    26de:	af 91       	pop	r26
    26e0:	9f 91       	pop	r25
    26e2:	8f 91       	pop	r24
    26e4:	7f 91       	pop	r23
    26e6:	6f 91       	pop	r22
    26e8:	5f 91       	pop	r21
    26ea:	4f 91       	pop	r20
    26ec:	3f 91       	pop	r19
    26ee:	2f 91       	pop	r18
    26f0:	0f 90       	pop	r0
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	0f 90       	pop	r0
    26f6:	1f 90       	pop	r1
    26f8:	18 95       	reti

000026fa <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    26fa:	1f 93       	push	r17
    26fc:	cf 93       	push	r28
    26fe:	df 93       	push	r29
    2700:	cd b7       	in	r28, 0x3d	; 61
    2702:	de b7       	in	r29, 0x3e	; 62
    2704:	aa 97       	sbiw	r28, 0x2a	; 42
    2706:	0f b6       	in	r0, 0x3f	; 63
    2708:	f8 94       	cli
    270a:	de bf       	out	0x3e, r29	; 62
    270c:	0f be       	out	0x3f, r0	; 63
    270e:	cd bf       	out	0x3d, r28	; 61
    2710:	e1 ef       	ldi	r30, 0xF1	; 241
    2712:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2714:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    2718:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    271a:	21 e0       	ldi	r18, 0x01	; 1
    271c:	e9 3f       	cpi	r30, 0xF9	; 249
    271e:	f2 07       	cpc	r31, r18
    2720:	c9 f7       	brne	.-14     	; 0x2714 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    2722:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2726:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    272a:	83 ff       	sbrs	r24, 3
    272c:	1c c1       	rjmp	.+568    	; 0x2966 <USB_Device_ProcessControlRequest+0x26c>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    272e:	20 91 f1 01 	lds	r18, 0x01F1

		switch (USB_ControlRequest.bRequest)
    2732:	30 91 f2 01 	lds	r19, 0x01F2
    2736:	83 2f       	mov	r24, r19
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	8a 30       	cpi	r24, 0x0A	; 10
    273c:	91 05       	cpc	r25, r1
    273e:	08 f0       	brcs	.+2      	; 0x2742 <USB_Device_ProcessControlRequest+0x48>
    2740:	12 c1       	rjmp	.+548    	; 0x2966 <USB_Device_ProcessControlRequest+0x26c>
    2742:	fc 01       	movw	r30, r24
    2744:	ea 5a       	subi	r30, 0xAA	; 170
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	0c 94 98 2d 	jmp	0x5b30	; 0x5b30 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    274c:	20 38       	cpi	r18, 0x80	; 128
    274e:	81 f0       	breq	.+32     	; 0x2770 <USB_Device_ProcessControlRequest+0x76>
    2750:	22 38       	cpi	r18, 0x82	; 130
    2752:	09 f0       	breq	.+2      	; 0x2756 <USB_Device_ProcessControlRequest+0x5c>
    2754:	08 c1       	rjmp	.+528    	; 0x2966 <USB_Device_ProcessControlRequest+0x26c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2756:	80 91 f5 01 	lds	r24, 0x01F5
    275a:	8f 70       	andi	r24, 0x0F	; 15
    275c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2760:	80 91 eb 00 	lds	r24, 0x00EB
    2764:	85 fb       	bst	r24, 5
    2766:	88 27       	eor	r24, r24
    2768:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    276a:	10 92 e9 00 	sts	0x00E9, r1
    276e:	06 c0       	rjmp	.+12     	; 0x277c <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    2770:	80 91 ed 01 	lds	r24, 0x01ED
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    2774:	90 91 ee 01 	lds	r25, 0x01EE
    2778:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    277a:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    277c:	90 91 e8 00 	lds	r25, 0x00E8
    2780:	97 7f       	andi	r25, 0xF7	; 247
    2782:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    2786:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    278a:	10 92 f1 00 	sts	0x00F1, r1
    278e:	c5 c0       	rjmp	.+394    	; 0x291a <USB_Device_ProcessControlRequest+0x220>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2790:	82 2f       	mov	r24, r18
    2792:	8d 7f       	andi	r24, 0xFD	; 253
    2794:	09 f0       	breq	.+2      	; 0x2798 <USB_Device_ProcessControlRequest+0x9e>
    2796:	e7 c0       	rjmp	.+462    	; 0x2966 <USB_Device_ProcessControlRequest+0x26c>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    2798:	22 23       	and	r18, r18
    279a:	19 f0       	breq	.+6      	; 0x27a2 <USB_Device_ProcessControlRequest+0xa8>
    279c:	22 30       	cpi	r18, 0x02	; 2
    279e:	61 f0       	breq	.+24     	; 0x27b8 <USB_Device_ProcessControlRequest+0xbe>
    27a0:	e2 c0       	rjmp	.+452    	; 0x2966 <USB_Device_ProcessControlRequest+0x26c>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    27a2:	80 91 f3 01 	lds	r24, 0x01F3
    27a6:	81 30       	cpi	r24, 0x01	; 1
    27a8:	09 f0       	breq	.+2      	; 0x27ac <USB_Device_ProcessControlRequest+0xb2>
    27aa:	dd c0       	rjmp	.+442    	; 0x2966 <USB_Device_ProcessControlRequest+0x26c>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    27ac:	33 30       	cpi	r19, 0x03	; 3
    27ae:	09 f0       	breq	.+2      	; 0x27b2 <USB_Device_ProcessControlRequest+0xb8>
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	80 93 ee 01 	sts	0x01EE, r24
    27b6:	28 c0       	rjmp	.+80     	; 0x2808 <USB_Device_ProcessControlRequest+0x10e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    27b8:	80 91 f3 01 	lds	r24, 0x01F3
    27bc:	81 11       	cpse	r24, r1
    27be:	24 c0       	rjmp	.+72     	; 0x2808 <USB_Device_ProcessControlRequest+0x10e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    27c0:	20 91 f5 01 	lds	r18, 0x01F5
    27c4:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    27c6:	09 f4       	brne	.+2      	; 0x27ca <USB_Device_ProcessControlRequest+0xd0>
    27c8:	ce c0       	rjmp	.+412    	; 0x2966 <USB_Device_ProcessControlRequest+0x26c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    27ca:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    27ce:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    27d2:	80 ff       	sbrs	r24, 0
    27d4:	19 c0       	rjmp	.+50     	; 0x2808 <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    27d6:	80 91 eb 00 	lds	r24, 0x00EB
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    27da:	33 30       	cpi	r19, 0x03	; 3
    27dc:	11 f4       	brne	.+4      	; 0x27e2 <USB_Device_ProcessControlRequest+0xe8>
    27de:	80 62       	ori	r24, 0x20	; 32
    27e0:	11 c0       	rjmp	.+34     	; 0x2804 <USB_Device_ProcessControlRequest+0x10a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    27e2:	80 61       	ori	r24, 0x10	; 16
    27e4:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	02 2e       	mov	r0, r18
    27ee:	01 c0       	rjmp	.+2      	; 0x27f2 <USB_Device_ProcessControlRequest+0xf8>
    27f0:	88 0f       	add	r24, r24
    27f2:	0a 94       	dec	r0
    27f4:	ea f7       	brpl	.-6      	; 0x27f0 <USB_Device_ProcessControlRequest+0xf6>
    27f6:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    27fa:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    27fe:	80 91 eb 00 	lds	r24, 0x00EB
    2802:	88 60       	ori	r24, 0x08	; 8
    2804:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2808:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    280c:	80 91 e8 00 	lds	r24, 0x00E8
    2810:	87 7f       	andi	r24, 0xF7	; 247
    2812:	86 c0       	rjmp	.+268    	; 0x2920 <USB_Device_ProcessControlRequest+0x226>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2814:	21 11       	cpse	r18, r1
    2816:	a7 c0       	rjmp	.+334    	; 0x2966 <USB_Device_ProcessControlRequest+0x26c>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    2818:	10 91 f3 01 	lds	r17, 0x01F3
    281c:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    281e:	80 91 e3 00 	lds	r24, 0x00E3
    2822:	80 78       	andi	r24, 0x80	; 128
    2824:	81 2b       	or	r24, r17
    2826:	80 93 e3 00 	sts	0x00E3, r24
    282a:	80 91 e8 00 	lds	r24, 0x00E8
    282e:	87 7f       	andi	r24, 0xF7	; 247
    2830:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    2834:	0e 94 a3 11 	call	0x2346	; 0x2346 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2838:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    283c:	80 ff       	sbrs	r24, 0
    283e:	fc cf       	rjmp	.-8      	; 0x2838 <USB_Device_ProcessControlRequest+0x13e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    2840:	80 91 e3 00 	lds	r24, 0x00E3
    2844:	80 68       	ori	r24, 0x80	; 128
    2846:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    284a:	11 23       	and	r17, r17
    284c:	11 f0       	breq	.+4      	; 0x2852 <USB_Device_ProcessControlRequest+0x158>
    284e:	83 e0       	ldi	r24, 0x03	; 3
    2850:	01 c0       	rjmp	.+2      	; 0x2854 <USB_Device_ProcessControlRequest+0x15a>
    2852:	82 e0       	ldi	r24, 0x02	; 2
    2854:	80 93 f0 01 	sts	0x01F0, r24
    2858:	86 c0       	rjmp	.+268    	; 0x2966 <USB_Device_ProcessControlRequest+0x26c>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    285a:	20 58       	subi	r18, 0x80	; 128
    285c:	22 30       	cpi	r18, 0x02	; 2
    285e:	08 f0       	brcs	.+2      	; 0x2862 <USB_Device_ProcessControlRequest+0x168>
    2860:	82 c0       	rjmp	.+260    	; 0x2966 <USB_Device_ProcessControlRequest+0x26c>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    2862:	80 91 f3 01 	lds	r24, 0x01F3
    2866:	90 91 f4 01 	lds	r25, 0x01F4
    286a:	8c 3d       	cpi	r24, 0xDC	; 220
    286c:	23 e0       	ldi	r18, 0x03	; 3
    286e:	92 07       	cpc	r25, r18
    2870:	79 f5       	brne	.+94     	; 0x28d0 <USB_Device_ProcessControlRequest+0x1d6>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    2872:	83 e0       	ldi	r24, 0x03	; 3
    2874:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    2876:	8a e2       	ldi	r24, 0x2A	; 42
    2878:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    287a:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    287c:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    287e:	de 01       	movw	r26, r28
    2880:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    2882:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    2884:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    2886:	51 e2       	ldi	r21, 0x21	; 33
    2888:	e3 2f       	mov	r30, r19
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	50 93 57 00 	sts	0x0057, r21
    2890:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    2892:	20 ff       	sbrs	r18, 0
    2894:	03 c0       	rjmp	.+6      	; 0x289c <USB_Device_ProcessControlRequest+0x1a2>
					{
						SerialByte >>= 4;
    2896:	e2 95       	swap	r30
    2898:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    289a:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    289c:	ef 70       	andi	r30, 0x0F	; 15
    289e:	8e 2f       	mov	r24, r30
    28a0:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    28a2:	ea 30       	cpi	r30, 0x0A	; 10
    28a4:	10 f0       	brcs	.+4      	; 0x28aa <USB_Device_ProcessControlRequest+0x1b0>
    28a6:	c7 96       	adiw	r24, 0x37	; 55
    28a8:	01 c0       	rjmp	.+2      	; 0x28ac <USB_Device_ProcessControlRequest+0x1b2>
    28aa:	c0 96       	adiw	r24, 0x30	; 48
    28ac:	8d 93       	st	X+, r24
    28ae:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    28b0:	2f 5f       	subi	r18, 0xFF	; 255
    28b2:	24 31       	cpi	r18, 0x14	; 20
    28b4:	49 f7       	brne	.-46     	; 0x2888 <USB_Device_ProcessControlRequest+0x18e>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    28b6:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    28b8:	80 91 e8 00 	lds	r24, 0x00E8
    28bc:	87 7f       	andi	r24, 0xF7	; 247
    28be:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    28c2:	6a e2       	ldi	r22, 0x2A	; 42
    28c4:	70 e0       	ldi	r23, 0x00	; 0
    28c6:	ce 01       	movw	r24, r28
    28c8:	01 96       	adiw	r24, 0x01	; 1
    28ca:	0e 94 ab 10 	call	0x2156	; 0x2156 <Endpoint_Write_Control_Stream_LE>
    28ce:	14 c0       	rjmp	.+40     	; 0x28f8 <USB_Device_ProcessControlRequest+0x1fe>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    28d0:	ae 01       	movw	r20, r28
    28d2:	4f 5f       	subi	r20, 0xFF	; 255
    28d4:	5f 4f       	sbci	r21, 0xFF	; 255
    28d6:	60 91 f5 01 	lds	r22, 0x01F5
    28da:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <CALLBACK_USB_GetDescriptor>
    28de:	00 97       	sbiw	r24, 0x00	; 0
    28e0:	09 f4       	brne	.+2      	; 0x28e4 <USB_Device_ProcessControlRequest+0x1ea>
    28e2:	41 c0       	rjmp	.+130    	; 0x2966 <USB_Device_ProcessControlRequest+0x26c>
    28e4:	20 91 e8 00 	lds	r18, 0x00E8
    28e8:	27 7f       	andi	r18, 0xF7	; 247
    28ea:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    28ee:	bc 01       	movw	r22, r24
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
    28f2:	9a 81       	ldd	r25, Y+2	; 0x02
    28f4:	0e 94 0c 11 	call	0x2218	; 0x2218 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    28f8:	80 91 e8 00 	lds	r24, 0x00E8
    28fc:	8b 77       	andi	r24, 0x7B	; 123
    28fe:	80 93 e8 00 	sts	0x00E8, r24
    2902:	31 c0       	rjmp	.+98     	; 0x2966 <USB_Device_ProcessControlRequest+0x26c>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    2904:	20 38       	cpi	r18, 0x80	; 128
    2906:	79 f5       	brne	.+94     	; 0x2966 <USB_Device_ProcessControlRequest+0x26c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2908:	80 91 e8 00 	lds	r24, 0x00E8
    290c:	87 7f       	andi	r24, 0xF7	; 247
    290e:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    2912:	80 91 ec 01 	lds	r24, 0x01EC
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2916:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    291a:	80 91 e8 00 	lds	r24, 0x00E8
    291e:	8e 77       	andi	r24, 0x7E	; 126
    2920:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    2924:	0e 94 a3 11 	call	0x2346	; 0x2346 <Endpoint_ClearStatusStage>
    2928:	1e c0       	rjmp	.+60     	; 0x2966 <USB_Device_ProcessControlRequest+0x26c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    292a:	21 11       	cpse	r18, r1
    292c:	1c c0       	rjmp	.+56     	; 0x2966 <USB_Device_ProcessControlRequest+0x26c>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    292e:	90 91 f3 01 	lds	r25, 0x01F3
    2932:	92 30       	cpi	r25, 0x02	; 2
    2934:	c0 f4       	brcc	.+48     	; 0x2966 <USB_Device_ProcessControlRequest+0x26c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2936:	80 91 e8 00 	lds	r24, 0x00E8
    293a:	87 7f       	andi	r24, 0xF7	; 247
    293c:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    2940:	90 93 ec 01 	sts	0x01EC, r25

	Endpoint_ClearStatusStage();
    2944:	0e 94 a3 11 	call	0x2346	; 0x2346 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    2948:	80 91 ec 01 	lds	r24, 0x01EC
    294c:	81 11       	cpse	r24, r1
    294e:	04 c0       	rjmp	.+8      	; 0x2958 <USB_Device_ProcessControlRequest+0x25e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2950:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2954:	87 ff       	sbrs	r24, 7
    2956:	02 c0       	rjmp	.+4      	; 0x295c <USB_Device_ProcessControlRequest+0x262>
    2958:	84 e0       	ldi	r24, 0x04	; 4
    295a:	01 c0       	rjmp	.+2      	; 0x295e <USB_Device_ProcessControlRequest+0x264>
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	80 93 f0 01 	sts	0x01F0, r24

	EVENT_USB_Device_ConfigurationChanged();
    2962:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2966:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    296a:	83 ff       	sbrs	r24, 3
    296c:	0a c0       	rjmp	.+20     	; 0x2982 <USB_Device_ProcessControlRequest+0x288>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    296e:	80 91 e8 00 	lds	r24, 0x00E8
    2972:	87 7f       	andi	r24, 0xF7	; 247
    2974:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2978:	80 91 eb 00 	lds	r24, 0x00EB
    297c:	80 62       	ori	r24, 0x20	; 32
    297e:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    2982:	aa 96       	adiw	r28, 0x2a	; 42
    2984:	0f b6       	in	r0, 0x3f	; 63
    2986:	f8 94       	cli
    2988:	de bf       	out	0x3e, r29	; 62
    298a:	0f be       	out	0x3f, r0	; 63
    298c:	cd bf       	out	0x3d, r28	; 61
    298e:	df 91       	pop	r29
    2990:	cf 91       	pop	r28
    2992:	1f 91       	pop	r17
    2994:	08 95       	ret

00002996 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    2996:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    2998:	80 91 f0 01 	lds	r24, 0x01F0
    299c:	88 23       	and	r24, r24
    299e:	b1 f0       	breq	.+44     	; 0x29cc <USB_USBTask+0x36>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    29a0:	80 91 e9 00 	lds	r24, 0x00E9
    29a4:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    29a6:	90 91 ec 00 	lds	r25, 0x00EC
    29aa:	90 ff       	sbrs	r25, 0
    29ac:	02 c0       	rjmp	.+4      	; 0x29b2 <USB_USBTask+0x1c>
    29ae:	90 e8       	ldi	r25, 0x80	; 128
    29b0:	01 c0       	rjmp	.+2      	; 0x29b4 <USB_USBTask+0x1e>
    29b2:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    29b4:	c9 2f       	mov	r28, r25
    29b6:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    29b8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    29bc:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    29c0:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    29c2:	0e 94 7d 13 	call	0x26fa	; 0x26fa <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    29c6:	cf 70       	andi	r28, 0x0F	; 15
    29c8:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    29cc:	cf 91       	pop	r28
    29ce:	08 95       	ret

000029d0 <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    29d0:	90 93 74 01 	sts	0x0174, r25
    29d4:	80 93 73 01 	sts	0x0173, r24
    29d8:	08 95       	ret

000029da <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    29da:	e0 91 73 01 	lds	r30, 0x0173
    29de:	f0 91 74 01 	lds	r31, 0x0174
    29e2:	30 97       	sbiw	r30, 0x00	; 0
    29e4:	21 f0       	breq	.+8      	; 0x29ee <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    29e6:	01 90       	ld	r0, Z+
    29e8:	f0 81       	ld	r31, Z
    29ea:	e0 2d       	mov	r30, r0
    29ec:	09 94       	ijmp
}
    29ee:	80 e0       	ldi	r24, 0x00	; 0
    29f0:	08 95       	ret

000029f2 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    29f2:	ff 92       	push	r15
    29f4:	0f 93       	push	r16
    29f6:	1f 93       	push	r17
    29f8:	cf 93       	push	r28
    29fa:	df 93       	push	r29
    29fc:	8c 01       	movw	r16, r24
    if (!driver) return;
    29fe:	e0 91 73 01 	lds	r30, 0x0173
    2a02:	f0 91 74 01 	lds	r31, 0x0174
    2a06:	30 97       	sbiw	r30, 0x00	; 0
    2a08:	99 f1       	breq	.+102    	; 0x2a70 <host_keyboard_send+0x7e>
    (*driver->send_keyboard)(report);
    2a0a:	02 80       	ldd	r0, Z+2	; 0x02
    2a0c:	f3 81       	ldd	r31, Z+3	; 0x03
    2a0e:	e0 2d       	mov	r30, r0
    2a10:	09 95       	icall

    if (debug_keyboard) {
    2a12:	80 91 d7 01 	lds	r24, 0x01D7
    2a16:	82 ff       	sbrs	r24, 2
    2a18:	2b c0       	rjmp	.+86     	; 0x2a70 <host_keyboard_send+0x7e>
        dprint("keyboard_report: ");
    2a1a:	80 ff       	sbrs	r24, 0
    2a1c:	04 c0       	rjmp	.+8      	; 0x2a26 <host_keyboard_send+0x34>
    2a1e:	86 e9       	ldi	r24, 0x96	; 150
    2a20:	95 e0       	ldi	r25, 0x05	; 5
    2a22:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    2a26:	e8 01       	movw	r28, r16
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    2a28:	80 e1       	ldi	r24, 0x10	; 16
    2a2a:	f8 2e       	mov	r15, r24
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    2a2c:	00 e9       	ldi	r16, 0x90	; 144
    2a2e:	15 e0       	ldi	r17, 0x05	; 5
    2a30:	80 91 d7 01 	lds	r24, 0x01D7
    2a34:	80 ff       	sbrs	r24, 0
    2a36:	0b c0       	rjmp	.+22     	; 0x2a4e <host_keyboard_send+0x5c>
    2a38:	88 81       	ld	r24, Y
    2a3a:	1f 92       	push	r1
    2a3c:	8f 93       	push	r24
    2a3e:	1f 93       	push	r17
    2a40:	0f 93       	push	r16
    2a42:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    2a46:	0f 90       	pop	r0
    2a48:	0f 90       	pop	r0
    2a4a:	0f 90       	pop	r0
    2a4c:	0f 90       	pop	r0
    2a4e:	fa 94       	dec	r15
    2a50:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    2a52:	f1 10       	cpse	r15, r1
    2a54:	ed cf       	rjmp	.-38     	; 0x2a30 <host_keyboard_send+0x3e>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    2a56:	80 91 d7 01 	lds	r24, 0x01D7
    2a5a:	80 ff       	sbrs	r24, 0
    2a5c:	09 c0       	rjmp	.+18     	; 0x2a70 <host_keyboard_send+0x7e>
    2a5e:	8e e8       	ldi	r24, 0x8E	; 142
    2a60:	95 e0       	ldi	r25, 0x05	; 5
    }
}
    2a62:	df 91       	pop	r29
    2a64:	cf 91       	pop	r28
    2a66:	1f 91       	pop	r17
    2a68:	0f 91       	pop	r16
    2a6a:	ff 90       	pop	r15
    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    2a6c:	0c 94 5b 07 	jmp	0xeb6	; 0xeb6 <xputs>
    }
}
    2a70:	df 91       	pop	r29
    2a72:	cf 91       	pop	r28
    2a74:	1f 91       	pop	r17
    2a76:	0f 91       	pop	r16
    2a78:	ff 90       	pop	r15
    2a7a:	08 95       	ret

00002a7c <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    2a7c:	e0 91 73 01 	lds	r30, 0x0173
    2a80:	f0 91 74 01 	lds	r31, 0x0174
    2a84:	30 97       	sbiw	r30, 0x00	; 0
    2a86:	21 f0       	breq	.+8      	; 0x2a90 <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    2a88:	04 80       	ldd	r0, Z+4	; 0x04
    2a8a:	f5 81       	ldd	r31, Z+5	; 0x05
    2a8c:	e0 2d       	mov	r30, r0
    2a8e:	09 94       	ijmp
    2a90:	08 95       	ret

00002a92 <host_system_send>:
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    2a92:	20 91 71 01 	lds	r18, 0x0171
    2a96:	30 91 72 01 	lds	r19, 0x0172
    2a9a:	82 17       	cp	r24, r18
    2a9c:	93 07       	cpc	r25, r19
    2a9e:	71 f0       	breq	.+28     	; 0x2abc <host_system_send+0x2a>
    last_system_report = report;
    2aa0:	90 93 72 01 	sts	0x0172, r25
    2aa4:	80 93 71 01 	sts	0x0171, r24

    if (!driver) return;
    2aa8:	e0 91 73 01 	lds	r30, 0x0173
    2aac:	f0 91 74 01 	lds	r31, 0x0174
    2ab0:	30 97       	sbiw	r30, 0x00	; 0
    2ab2:	21 f0       	breq	.+8      	; 0x2abc <host_system_send+0x2a>
    (*driver->send_system)(report);
    2ab4:	06 80       	ldd	r0, Z+6	; 0x06
    2ab6:	f7 81       	ldd	r31, Z+7	; 0x07
    2ab8:	e0 2d       	mov	r30, r0
    2aba:	09 94       	ijmp
    2abc:	08 95       	ret

00002abe <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    2abe:	20 91 6f 01 	lds	r18, 0x016F
    2ac2:	30 91 70 01 	lds	r19, 0x0170
    2ac6:	82 17       	cp	r24, r18
    2ac8:	93 07       	cpc	r25, r19
    2aca:	71 f0       	breq	.+28     	; 0x2ae8 <host_consumer_send+0x2a>
    last_consumer_report = report;
    2acc:	90 93 70 01 	sts	0x0170, r25
    2ad0:	80 93 6f 01 	sts	0x016F, r24

    if (!driver) return;
    2ad4:	e0 91 73 01 	lds	r30, 0x0173
    2ad8:	f0 91 74 01 	lds	r31, 0x0174
    2adc:	30 97       	sbiw	r30, 0x00	; 0
    2ade:	21 f0       	breq	.+8      	; 0x2ae8 <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    2ae0:	00 84       	ldd	r0, Z+8	; 0x08
    2ae2:	f1 85       	ldd	r31, Z+9	; 0x09
    2ae4:	e0 2d       	mov	r30, r0
    2ae6:	09 94       	ijmp
    2ae8:	08 95       	ret

00002aea <matrix_setup>:
    return false;
}
#endif


__attribute__ ((weak)) void matrix_setup(void) {}
    2aea:	08 95       	ret

00002aec <keyboard_setup>:
void keyboard_setup(void)
{
    matrix_setup();
    2aec:	0c 94 75 15 	jmp	0x2aea	; 0x2aea <matrix_setup>

00002af0 <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    2af0:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <timer_init>
    matrix_init();
    2af4:	0e 94 76 09 	call	0x12ec	; 0x12ec <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    2af8:	0c 94 a6 22 	jmp	0x454c	; 0x454c <bootmagic>

00002afc <keyboard_set_leds>:
        keyboard_set_leds(led_status);
    }
}

void keyboard_set_leds(uint8_t leds)
{
    2afc:	cf 93       	push	r28
    2afe:	c8 2f       	mov	r28, r24
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    2b00:	80 91 d7 01 	lds	r24, 0x01D7
    2b04:	82 ff       	sbrs	r24, 2
    2b06:	1e c0       	rjmp	.+60     	; 0x2b44 <keyboard_set_leds+0x48>
    2b08:	80 ff       	sbrs	r24, 0
    2b0a:	04 c0       	rjmp	.+8      	; 0x2b14 <keyboard_set_leds+0x18>
    2b0c:	8f ea       	ldi	r24, 0xAF	; 175
    2b0e:	95 e0       	ldi	r25, 0x05	; 5
    2b10:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    2b14:	80 91 d7 01 	lds	r24, 0x01D7
    2b18:	80 ff       	sbrs	r24, 0
    2b1a:	0c c0       	rjmp	.+24     	; 0x2b34 <keyboard_set_leds+0x38>
    2b1c:	1f 92       	push	r1
    2b1e:	cf 93       	push	r28
    2b20:	2a ea       	ldi	r18, 0xAA	; 170
    2b22:	35 e0       	ldi	r19, 0x05	; 5
    2b24:	3f 93       	push	r19
    2b26:	2f 93       	push	r18
    2b28:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    2b2c:	0f 90       	pop	r0
    2b2e:	0f 90       	pop	r0
    2b30:	0f 90       	pop	r0
    2b32:	0f 90       	pop	r0
    2b34:	80 91 d7 01 	lds	r24, 0x01D7
    2b38:	80 ff       	sbrs	r24, 0
    2b3a:	04 c0       	rjmp	.+8      	; 0x2b44 <keyboard_set_leds+0x48>
    2b3c:	88 ea       	ldi	r24, 0xA8	; 168
    2b3e:	95 e0       	ldi	r25, 0x05	; 5
    2b40:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    led_set(leds);
    2b44:	8c 2f       	mov	r24, r28
}
    2b46:	cf 91       	pop	r28
}

void keyboard_set_leds(uint8_t leds)
{
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    led_set(leds);
    2b48:	0c 94 2b 0d 	jmp	0x1a56	; 0x1a56 <led_set>

00002b4c <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    2b4c:	cf 92       	push	r12
    2b4e:	df 92       	push	r13
    2b50:	ef 92       	push	r14
    2b52:	ff 92       	push	r15
    2b54:	0f 93       	push	r16
    2b56:	1f 93       	push	r17
    2b58:	cf 93       	push	r28
    2b5a:	df 93       	push	r29
    2b5c:	cd b7       	in	r28, 0x3d	; 61
    2b5e:	de b7       	in	r29, 0x3e	; 62
    2b60:	2b 97       	sbiw	r28, 0x0b	; 11
    2b62:	0f b6       	in	r0, 0x3f	; 63
    2b64:	f8 94       	cli
    2b66:	de bf       	out	0x3e, r29	; 62
    2b68:	0f be       	out	0x3f, r0	; 63
    2b6a:	cd bf       	out	0x3d, r28	; 61
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    2b6c:	0e 94 93 09 	call	0x1326	; 0x1326 <matrix_scan>
    2b70:	36 e7       	ldi	r19, 0x76	; 118
    2b72:	e3 2e       	mov	r14, r19
    2b74:	31 e0       	ldi	r19, 0x01	; 1
    2b76:	f3 2e       	mov	r15, r19
    2b78:	00 e0       	ldi	r16, 0x00	; 0
    2b7a:	10 e0       	ldi	r17, 0x00	; 0
    2b7c:	c0 2e       	mov	r12, r16
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    2b7e:	80 2f       	mov	r24, r16
    2b80:	0e 94 be 0a 	call	0x157c	; 0x157c <matrix_get_row>
        matrix_change = matrix_row ^ matrix_prev[r];
    2b84:	f7 01       	movw	r30, r14
    2b86:	d1 90       	ld	r13, Z+
    2b88:	7f 01       	movw	r14, r30
    2b8a:	d8 26       	eor	r13, r24
        if (matrix_change) {
    2b8c:	b1 f4       	brne	.+44     	; 0x2bba <keyboard_task+0x6e>
    2b8e:	0f 5f       	subi	r16, 0xFF	; 255
    2b90:	1f 4f       	sbci	r17, 0xFF	; 255
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2b92:	0e 30       	cpi	r16, 0x0E	; 14
    2b94:	11 05       	cpc	r17, r1
    2b96:	91 f7       	brne	.-28     	; 0x2b7c <keyboard_task+0x30>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    2b98:	8f ef       	ldi	r24, 0xFF	; 255
    2b9a:	89 83       	std	Y+1, r24	; 0x01
    2b9c:	8a 83       	std	Y+2, r24	; 0x02
    2b9e:	1b 82       	std	Y+3, r1	; 0x03
    2ba0:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <timer_read>
    2ba4:	81 60       	ori	r24, 0x01	; 1
    2ba6:	78 2f       	mov	r23, r24
    2ba8:	9d 83       	std	Y+5, r25	; 0x05
    2baa:	8c 83       	std	Y+4, r24	; 0x04
    2bac:	49 81       	ldd	r20, Y+1	; 0x01
    2bae:	5a 81       	ldd	r21, Y+2	; 0x02
    2bb0:	6b 81       	ldd	r22, Y+3	; 0x03
    2bb2:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb4:	0e 94 49 16 	call	0x2c92	; 0x2c92 <action_exec>
    2bb8:	41 c0       	rjmp	.+130    	; 0x2c3c <keyboard_task+0xf0>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    2bba:	90 91 d7 01 	lds	r25, 0x01D7
    2bbe:	91 ff       	sbrs	r25, 1
    2bc0:	04 c0       	rjmp	.+8      	; 0x2bca <keyboard_task+0x7e>
    2bc2:	8b 87       	std	Y+11, r24	; 0x0b
    2bc4:	0e 94 c4 0a 	call	0x1588	; 0x1588 <matrix_print>
    2bc8:	8b 85       	ldd	r24, Y+11	; 0x0b
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    2bce:	4d 2d       	mov	r20, r13
    2bd0:	50 e0       	ldi	r21, 0x00	; 0
    2bd2:	92 2f       	mov	r25, r18
    2bd4:	ba 01       	movw	r22, r20
    2bd6:	02 2e       	mov	r0, r18
    2bd8:	02 c0       	rjmp	.+4      	; 0x2bde <keyboard_task+0x92>
    2bda:	75 95       	asr	r23
    2bdc:	67 95       	ror	r22
    2bde:	0a 94       	dec	r0
    2be0:	e2 f7       	brpl	.-8      	; 0x2bda <keyboard_task+0x8e>
    2be2:	60 ff       	sbrs	r22, 0
    2be4:	25 c0       	rjmp	.+74     	; 0x2c30 <keyboard_task+0xe4>
                    action_exec((keyevent_t){
    2be6:	2e 83       	std	Y+6, r18	; 0x06
    2be8:	cf 82       	std	Y+7, r12	; 0x07
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    2bea:	ee 24       	eor	r14, r14
    2bec:	e3 94       	inc	r14
    2bee:	f1 2c       	mov	r15, r1
    2bf0:	02 c0       	rjmp	.+4      	; 0x2bf6 <keyboard_task+0xaa>
    2bf2:	ee 0c       	add	r14, r14
    2bf4:	ff 1c       	adc	r15, r15
    2bf6:	9a 95       	dec	r25
    2bf8:	e2 f7       	brpl	.-8      	; 0x2bf2 <keyboard_task+0xa6>
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	8e 21       	and	r24, r14
    2bfe:	9f 21       	and	r25, r15
    2c00:	21 e0       	ldi	r18, 0x01	; 1
    2c02:	89 2b       	or	r24, r25
    2c04:	09 f4       	brne	.+2      	; 0x2c08 <keyboard_task+0xbc>
    2c06:	20 e0       	ldi	r18, 0x00	; 0
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    2c08:	28 87       	std	Y+8, r18	; 0x08
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    2c0a:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <timer_read>
    2c0e:	81 60       	ori	r24, 0x01	; 1
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    2c10:	78 2f       	mov	r23, r24
    2c12:	9a 87       	std	Y+10, r25	; 0x0a
    2c14:	89 87       	std	Y+9, r24	; 0x09
    2c16:	4e 81       	ldd	r20, Y+6	; 0x06
    2c18:	5f 81       	ldd	r21, Y+7	; 0x07
    2c1a:	68 85       	ldd	r22, Y+8	; 0x08
    2c1c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c1e:	0e 94 49 16 	call	0x2c92	; 0x2c92 <action_exec>
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    2c22:	f8 01       	movw	r30, r16
    2c24:	ea 58       	subi	r30, 0x8A	; 138
    2c26:	fe 4f       	sbci	r31, 0xFE	; 254
    2c28:	80 81       	ld	r24, Z
    2c2a:	8e 25       	eor	r24, r14
    2c2c:	80 83       	st	Z, r24
                    // process a key per task call
                    goto MATRIX_LOOP_END;
    2c2e:	06 c0       	rjmp	.+12     	; 0x2c3c <keyboard_task+0xf0>
    2c30:	2f 5f       	subi	r18, 0xFF	; 255
    2c32:	3f 4f       	sbci	r19, 0xFF	; 255
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    2c34:	26 30       	cpi	r18, 0x06	; 6
    2c36:	31 05       	cpc	r19, r1
    2c38:	61 f6       	brne	.-104    	; 0x2bd2 <keyboard_task+0x86>
    2c3a:	a9 cf       	rjmp	.-174    	; 0x2b8e <keyboard_task+0x42>

MATRIX_LOOP_END:

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    2c3c:	0e 94 14 26 	call	0x4c28	; 0x4c28 <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    2c40:	10 91 75 01 	lds	r17, 0x0175
    2c44:	0e 94 ed 14 	call	0x29da	; 0x29da <host_keyboard_leds>
    2c48:	18 17       	cp	r17, r24
    2c4a:	a1 f0       	breq	.+40     	; 0x2c74 <keyboard_task+0x128>
        led_status = host_keyboard_leds();
    2c4c:	0e 94 ed 14 	call	0x29da	; 0x29da <host_keyboard_leds>
    2c50:	80 93 75 01 	sts	0x0175, r24
        keyboard_set_leds(led_status);
    }
}
    2c54:	2b 96       	adiw	r28, 0x0b	; 11
    2c56:	0f b6       	in	r0, 0x3f	; 63
    2c58:	f8 94       	cli
    2c5a:	de bf       	out	0x3e, r29	; 62
    2c5c:	0f be       	out	0x3f, r0	; 63
    2c5e:	cd bf       	out	0x3d, r28	; 61
    2c60:	df 91       	pop	r29
    2c62:	cf 91       	pop	r28
    2c64:	1f 91       	pop	r17
    2c66:	0f 91       	pop	r16
    2c68:	ff 90       	pop	r15
    2c6a:	ef 90       	pop	r14
    2c6c:	df 90       	pop	r13
    2c6e:	cf 90       	pop	r12
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        keyboard_set_leds(led_status);
    2c70:	0c 94 7e 15 	jmp	0x2afc	; 0x2afc <keyboard_set_leds>
    }
}
    2c74:	2b 96       	adiw	r28, 0x0b	; 11
    2c76:	0f b6       	in	r0, 0x3f	; 63
    2c78:	f8 94       	cli
    2c7a:	de bf       	out	0x3e, r29	; 62
    2c7c:	0f be       	out	0x3f, r0	; 63
    2c7e:	cd bf       	out	0x3d, r28	; 61
    2c80:	df 91       	pop	r29
    2c82:	cf 91       	pop	r28
    2c84:	1f 91       	pop	r17
    2c86:	0f 91       	pop	r16
    2c88:	ff 90       	pop	r15
    2c8a:	ef 90       	pop	r14
    2c8c:	df 90       	pop	r13
    2c8e:	cf 90       	pop	r12
    2c90:	08 95       	ret

00002c92 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    2c92:	cf 93       	push	r28
    2c94:	df 93       	push	r29
    2c96:	cd b7       	in	r28, 0x3d	; 61
    2c98:	de b7       	in	r29, 0x3e	; 62
    2c9a:	2b 97       	sbiw	r28, 0x0b	; 11
    2c9c:	0f b6       	in	r0, 0x3f	; 63
    2c9e:	f8 94       	cli
    2ca0:	de bf       	out	0x3e, r29	; 62
    2ca2:	0f be       	out	0x3f, r0	; 63
    2ca4:	cd bf       	out	0x3d, r28	; 61
    2ca6:	4f 83       	std	Y+7, r20	; 0x07
    2ca8:	58 87       	std	Y+8, r21	; 0x08
    2caa:	69 87       	std	Y+9, r22	; 0x09
    2cac:	7a 87       	std	Y+10, r23	; 0x0a
    2cae:	8b 87       	std	Y+11, r24	; 0x0b
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
    }

    keyrecord_t record = { .event = event };
    2cb0:	de 01       	movw	r26, r28
    2cb2:	11 96       	adiw	r26, 0x01	; 1
    2cb4:	86 e0       	ldi	r24, 0x06	; 6
    2cb6:	fd 01       	movw	r30, r26
    2cb8:	11 92       	st	Z+, r1
    2cba:	8a 95       	dec	r24
    2cbc:	e9 f7       	brne	.-6      	; 0x2cb8 <action_exec+0x26>
    2cbe:	85 e0       	ldi	r24, 0x05	; 5
    2cc0:	fe 01       	movw	r30, r28
    2cc2:	37 96       	adiw	r30, 0x07	; 7
    2cc4:	01 90       	ld	r0, Z+
    2cc6:	0d 92       	st	X+, r0
    2cc8:	8a 95       	dec	r24
    2cca:	e1 f7       	brne	.-8      	; 0x2cc4 <action_exec+0x32>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    2ccc:	49 81       	ldd	r20, Y+1	; 0x01
    2cce:	5a 81       	ldd	r21, Y+2	; 0x02
    2cd0:	6b 81       	ldd	r22, Y+3	; 0x03
    2cd2:	7c 81       	ldd	r23, Y+4	; 0x04
    2cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd8:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    2cdc:	2b 96       	adiw	r28, 0x0b	; 11
    2cde:	0f b6       	in	r0, 0x3f	; 63
    2ce0:	f8 94       	cli
    2ce2:	de bf       	out	0x3e, r29	; 62
    2ce4:	0f be       	out	0x3f, r0	; 63
    2ce6:	cd bf       	out	0x3d, r28	; 61
    2ce8:	df 91       	pop	r29
    2cea:	cf 91       	pop	r28
    2cec:	08 95       	ret

00002cee <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    2cee:	cf 93       	push	r28
    2cf0:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    2cf2:	88 23       	and	r24, r24
    2cf4:	09 f4       	brne	.+2      	; 0x2cf8 <register_code+0xa>
    2cf6:	c1 c0       	rjmp	.+386    	; 0x2e7a <register_code+0x18c>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2cf8:	82 38       	cpi	r24, 0x82	; 130
    2cfa:	59 f4       	brne	.+22     	; 0x2d12 <register_code+0x24>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    2cfc:	0e 94 ed 14 	call	0x29da	; 0x29da <host_keyboard_leds>
    2d00:	81 fd       	sbrc	r24, 1
    2d02:	bb c0       	rjmp	.+374    	; 0x2e7a <register_code+0x18c>
#endif
        add_key(KC_CAPSLOCK);
    2d04:	89 e3       	ldi	r24, 0x39	; 57
    2d06:	0e 94 1b 20 	call	0x4036	; 0x4036 <add_key>
        send_keyboard_report();
    2d0a:	0e 94 f7 20 	call	0x41ee	; 0x41ee <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    2d0e:	89 e3       	ldi	r24, 0x39	; 57
    2d10:	0c c0       	rjmp	.+24     	; 0x2d2a <register_code+0x3c>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    2d12:	83 38       	cpi	r24, 0x83	; 131
    2d14:	79 f4       	brne	.+30     	; 0x2d34 <register_code+0x46>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    2d16:	0e 94 ed 14 	call	0x29da	; 0x29da <host_keyboard_leds>
    2d1a:	80 fd       	sbrc	r24, 0
    2d1c:	ae c0       	rjmp	.+348    	; 0x2e7a <register_code+0x18c>
#endif
        add_key(KC_NUMLOCK);
    2d1e:	83 e5       	ldi	r24, 0x53	; 83
    2d20:	0e 94 1b 20 	call	0x4036	; 0x4036 <add_key>
        send_keyboard_report();
    2d24:	0e 94 f7 20 	call	0x41ee	; 0x41ee <send_keyboard_report>
        del_key(KC_NUMLOCK);
    2d28:	83 e5       	ldi	r24, 0x53	; 83
    2d2a:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <del_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2d2e:	cf 91       	pop	r28
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        del_key(KC_NUMLOCK);
        send_keyboard_report();
    2d30:	0c 94 f7 20 	jmp	0x41ee	; 0x41ee <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    2d34:	84 38       	cpi	r24, 0x84	; 132
    2d36:	59 f4       	brne	.+22     	; 0x2d4e <register_code+0x60>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    2d38:	0e 94 ed 14 	call	0x29da	; 0x29da <host_keyboard_leds>
    2d3c:	82 fd       	sbrc	r24, 2
    2d3e:	9d c0       	rjmp	.+314    	; 0x2e7a <register_code+0x18c>
#endif
        add_key(KC_SCROLLLOCK);
    2d40:	87 e4       	ldi	r24, 0x47	; 71
    2d42:	0e 94 1b 20 	call	0x4036	; 0x4036 <add_key>
        send_keyboard_report();
    2d46:	0e 94 f7 20 	call	0x41ee	; 0x41ee <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    2d4a:	87 e4       	ldi	r24, 0x47	; 71
    2d4c:	ee cf       	rjmp	.-36     	; 0x2d2a <register_code+0x3c>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2d4e:	8c ef       	ldi	r24, 0xFC	; 252
    2d50:	8c 0f       	add	r24, r28
    2d52:	81 3a       	cpi	r24, 0xA1	; 161
    2d54:	48 f4       	brcc	.+18     	; 0x2d68 <register_code+0x7a>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    2d56:	8c 2f       	mov	r24, r28
    2d58:	0e 94 9d 2a 	call	0x553a	; 0x553a <command_proc>
    2d5c:	81 11       	cpse	r24, r1
    2d5e:	8d c0       	rjmp	.+282    	; 0x2e7a <register_code+0x18c>
            oneshot_cancel();
        } else
*/
#endif
        {
            add_key(code);
    2d60:	8c 2f       	mov	r24, r28
    2d62:	0e 94 1b 20 	call	0x4036	; 0x4036 <add_key>
    2d66:	e3 cf       	rjmp	.-58     	; 0x2d2e <register_code+0x40>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    2d68:	80 e2       	ldi	r24, 0x20	; 32
    2d6a:	8c 0f       	add	r24, r28
    2d6c:	88 30       	cpi	r24, 0x08	; 8
    2d6e:	48 f4       	brcc	.+18     	; 0x2d82 <register_code+0x94>
        add_mods(MOD_BIT(code));
    2d70:	c7 70       	andi	r28, 0x07	; 7
    2d72:	81 e0       	ldi	r24, 0x01	; 1
    2d74:	01 c0       	rjmp	.+2      	; 0x2d78 <register_code+0x8a>
    2d76:	88 0f       	add	r24, r24
    2d78:	ca 95       	dec	r28
    2d7a:	ea f7       	brpl	.-6      	; 0x2d76 <register_code+0x88>
    2d7c:	0e 94 be 20 	call	0x417c	; 0x417c <add_mods>
    2d80:	d6 cf       	rjmp	.-84     	; 0x2d2e <register_code+0x40>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    2d82:	8b e5       	ldi	r24, 0x5B	; 91
    2d84:	8c 0f       	add	r24, r28
    2d86:	83 30       	cpi	r24, 0x03	; 3
    2d88:	78 f4       	brcc	.+30     	; 0x2da8 <register_code+0xba>
        host_system_send(KEYCODE2SYSTEM(code));
    2d8a:	c5 3a       	cpi	r28, 0xA5	; 165
    2d8c:	29 f0       	breq	.+10     	; 0x2d98 <register_code+0xaa>
    2d8e:	c6 3a       	cpi	r28, 0xA6	; 166
    2d90:	31 f4       	brne	.+12     	; 0x2d9e <register_code+0xb0>
    2d92:	82 e8       	ldi	r24, 0x82	; 130
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	05 c0       	rjmp	.+10     	; 0x2da2 <register_code+0xb4>
    2d98:	81 e8       	ldi	r24, 0x81	; 129
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	02 c0       	rjmp	.+4      	; 0x2da2 <register_code+0xb4>
    2d9e:	83 e8       	ldi	r24, 0x83	; 131
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2da2:	cf 91       	pop	r28
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    2da4:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    2da8:	88 e5       	ldi	r24, 0x58	; 88
    2daa:	8c 0f       	add	r24, r28
    2dac:	83 31       	cpi	r24, 0x13	; 19
    2dae:	08 f0       	brcs	.+2      	; 0x2db2 <register_code+0xc4>
    2db0:	64 c0       	rjmp	.+200    	; 0x2e7a <register_code+0x18c>
        host_consumer_send(KEYCODE2CONSUMER(code));
    2db2:	c8 3a       	cpi	r28, 0xA8	; 168
    2db4:	39 f1       	breq	.+78     	; 0x2e04 <register_code+0x116>
    2db6:	c9 3a       	cpi	r28, 0xA9	; 169
    2db8:	41 f1       	breq	.+80     	; 0x2e0a <register_code+0x11c>
    2dba:	ca 3a       	cpi	r28, 0xAA	; 170
    2dbc:	49 f1       	breq	.+82     	; 0x2e10 <register_code+0x122>
    2dbe:	cb 3a       	cpi	r28, 0xAB	; 171
    2dc0:	51 f1       	breq	.+84     	; 0x2e16 <register_code+0x128>
    2dc2:	cc 3a       	cpi	r28, 0xAC	; 172
    2dc4:	59 f1       	breq	.+86     	; 0x2e1c <register_code+0x12e>
    2dc6:	cd 3a       	cpi	r28, 0xAD	; 173
    2dc8:	61 f1       	breq	.+88     	; 0x2e22 <register_code+0x134>
    2dca:	c0 3b       	cpi	r28, 0xB0	; 176
    2dcc:	69 f1       	breq	.+90     	; 0x2e28 <register_code+0x13a>
    2dce:	ce 3a       	cpi	r28, 0xAE	; 174
    2dd0:	71 f1       	breq	.+92     	; 0x2e2e <register_code+0x140>
    2dd2:	cf 3a       	cpi	r28, 0xAF	; 175
    2dd4:	79 f1       	breq	.+94     	; 0x2e34 <register_code+0x146>
    2dd6:	c1 3b       	cpi	r28, 0xB1	; 177
    2dd8:	81 f1       	breq	.+96     	; 0x2e3a <register_code+0x14c>
    2dda:	c2 3b       	cpi	r28, 0xB2	; 178
    2ddc:	89 f1       	breq	.+98     	; 0x2e40 <register_code+0x152>
    2dde:	c3 3b       	cpi	r28, 0xB3	; 179
    2de0:	91 f1       	breq	.+100    	; 0x2e46 <register_code+0x158>
    2de2:	c4 3b       	cpi	r28, 0xB4	; 180
    2de4:	99 f1       	breq	.+102    	; 0x2e4c <register_code+0x15e>
    2de6:	c5 3b       	cpi	r28, 0xB5	; 181
    2de8:	a1 f1       	breq	.+104    	; 0x2e52 <register_code+0x164>
    2dea:	c6 3b       	cpi	r28, 0xB6	; 182
    2dec:	a9 f1       	breq	.+106    	; 0x2e58 <register_code+0x16a>
    2dee:	c7 3b       	cpi	r28, 0xB7	; 183
    2df0:	b1 f1       	breq	.+108    	; 0x2e5e <register_code+0x170>
    2df2:	c8 3b       	cpi	r28, 0xB8	; 184
    2df4:	b9 f1       	breq	.+110    	; 0x2e64 <register_code+0x176>
    2df6:	c9 3b       	cpi	r28, 0xB9	; 185
    2df8:	c1 f1       	breq	.+112    	; 0x2e6a <register_code+0x17c>
    2dfa:	ca 3b       	cpi	r28, 0xBA	; 186
    2dfc:	c9 f5       	brne	.+114    	; 0x2e70 <register_code+0x182>
    2dfe:	8a e2       	ldi	r24, 0x2A	; 42
    2e00:	92 e0       	ldi	r25, 0x02	; 2
    2e02:	38 c0       	rjmp	.+112    	; 0x2e74 <register_code+0x186>
    2e04:	82 ee       	ldi	r24, 0xE2	; 226
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	35 c0       	rjmp	.+106    	; 0x2e74 <register_code+0x186>
    2e0a:	89 ee       	ldi	r24, 0xE9	; 233
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	32 c0       	rjmp	.+100    	; 0x2e74 <register_code+0x186>
    2e10:	8a ee       	ldi	r24, 0xEA	; 234
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	2f c0       	rjmp	.+94     	; 0x2e74 <register_code+0x186>
    2e16:	85 eb       	ldi	r24, 0xB5	; 181
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	2c c0       	rjmp	.+88     	; 0x2e74 <register_code+0x186>
    2e1c:	86 eb       	ldi	r24, 0xB6	; 182
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	29 c0       	rjmp	.+82     	; 0x2e74 <register_code+0x186>
    2e22:	87 eb       	ldi	r24, 0xB7	; 183
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	26 c0       	rjmp	.+76     	; 0x2e74 <register_code+0x186>
    2e28:	8c ec       	ldi	r24, 0xCC	; 204
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	23 c0       	rjmp	.+70     	; 0x2e74 <register_code+0x186>
    2e2e:	8d ec       	ldi	r24, 0xCD	; 205
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	20 c0       	rjmp	.+64     	; 0x2e74 <register_code+0x186>
    2e34:	83 e8       	ldi	r24, 0x83	; 131
    2e36:	91 e0       	ldi	r25, 0x01	; 1
    2e38:	1d c0       	rjmp	.+58     	; 0x2e74 <register_code+0x186>
    2e3a:	8a e8       	ldi	r24, 0x8A	; 138
    2e3c:	91 e0       	ldi	r25, 0x01	; 1
    2e3e:	1a c0       	rjmp	.+52     	; 0x2e74 <register_code+0x186>
    2e40:	82 e9       	ldi	r24, 0x92	; 146
    2e42:	91 e0       	ldi	r25, 0x01	; 1
    2e44:	17 c0       	rjmp	.+46     	; 0x2e74 <register_code+0x186>
    2e46:	84 e9       	ldi	r24, 0x94	; 148
    2e48:	91 e0       	ldi	r25, 0x01	; 1
    2e4a:	14 c0       	rjmp	.+40     	; 0x2e74 <register_code+0x186>
    2e4c:	81 e2       	ldi	r24, 0x21	; 33
    2e4e:	92 e0       	ldi	r25, 0x02	; 2
    2e50:	11 c0       	rjmp	.+34     	; 0x2e74 <register_code+0x186>
    2e52:	83 e2       	ldi	r24, 0x23	; 35
    2e54:	92 e0       	ldi	r25, 0x02	; 2
    2e56:	0e c0       	rjmp	.+28     	; 0x2e74 <register_code+0x186>
    2e58:	84 e2       	ldi	r24, 0x24	; 36
    2e5a:	92 e0       	ldi	r25, 0x02	; 2
    2e5c:	0b c0       	rjmp	.+22     	; 0x2e74 <register_code+0x186>
    2e5e:	85 e2       	ldi	r24, 0x25	; 37
    2e60:	92 e0       	ldi	r25, 0x02	; 2
    2e62:	08 c0       	rjmp	.+16     	; 0x2e74 <register_code+0x186>
    2e64:	86 e2       	ldi	r24, 0x26	; 38
    2e66:	92 e0       	ldi	r25, 0x02	; 2
    2e68:	05 c0       	rjmp	.+10     	; 0x2e74 <register_code+0x186>
    2e6a:	87 e2       	ldi	r24, 0x27	; 39
    2e6c:	92 e0       	ldi	r25, 0x02	; 2
    2e6e:	02 c0       	rjmp	.+4      	; 0x2e74 <register_code+0x186>
    2e70:	80 e0       	ldi	r24, 0x00	; 0
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    2e74:	cf 91       	pop	r28
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    2e76:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <host_consumer_send>
    }
}
    2e7a:	cf 91       	pop	r28
    2e7c:	08 95       	ret

00002e7e <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    2e7e:	88 23       	and	r24, r24
    2e80:	09 f4       	brne	.+2      	; 0x2e84 <unregister_code+0x6>
    2e82:	4b c0       	rjmp	.+150    	; 0x2f1a <unregister_code+0x9c>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2e84:	82 38       	cpi	r24, 0x82	; 130
    2e86:	59 f4       	brne	.+22     	; 0x2e9e <unregister_code+0x20>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    2e88:	0e 94 ed 14 	call	0x29da	; 0x29da <host_keyboard_leds>
    2e8c:	81 ff       	sbrs	r24, 1
    2e8e:	45 c0       	rjmp	.+138    	; 0x2f1a <unregister_code+0x9c>
#endif
        add_key(KC_CAPSLOCK);
    2e90:	89 e3       	ldi	r24, 0x39	; 57
    2e92:	0e 94 1b 20 	call	0x4036	; 0x4036 <add_key>
        send_keyboard_report();
    2e96:	0e 94 f7 20 	call	0x41ee	; 0x41ee <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    2e9a:	89 e3       	ldi	r24, 0x39	; 57
    2e9c:	0c c0       	rjmp	.+24     	; 0x2eb6 <unregister_code+0x38>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    2e9e:	83 38       	cpi	r24, 0x83	; 131
    2ea0:	71 f4       	brne	.+28     	; 0x2ebe <unregister_code+0x40>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    2ea2:	0e 94 ed 14 	call	0x29da	; 0x29da <host_keyboard_leds>
    2ea6:	80 ff       	sbrs	r24, 0
    2ea8:	38 c0       	rjmp	.+112    	; 0x2f1a <unregister_code+0x9c>
#endif
        add_key(KC_NUMLOCK);
    2eaa:	83 e5       	ldi	r24, 0x53	; 83
    2eac:	0e 94 1b 20 	call	0x4036	; 0x4036 <add_key>
        send_keyboard_report();
    2eb0:	0e 94 f7 20 	call	0x41ee	; 0x41ee <send_keyboard_report>
        del_key(KC_NUMLOCK);
    2eb4:	83 e5       	ldi	r24, 0x53	; 83
    2eb6:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <del_key>
        send_keyboard_report();
    2eba:	0c 94 f7 20 	jmp	0x41ee	; 0x41ee <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    2ebe:	84 38       	cpi	r24, 0x84	; 132
    2ec0:	59 f4       	brne	.+22     	; 0x2ed8 <unregister_code+0x5a>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    2ec2:	0e 94 ed 14 	call	0x29da	; 0x29da <host_keyboard_leds>
    2ec6:	82 ff       	sbrs	r24, 2
    2ec8:	28 c0       	rjmp	.+80     	; 0x2f1a <unregister_code+0x9c>
#endif
        add_key(KC_SCROLLLOCK);
    2eca:	87 e4       	ldi	r24, 0x47	; 71
    2ecc:	0e 94 1b 20 	call	0x4036	; 0x4036 <add_key>
        send_keyboard_report();
    2ed0:	0e 94 f7 20 	call	0x41ee	; 0x41ee <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    2ed4:	87 e4       	ldi	r24, 0x47	; 71
    2ed6:	ef cf       	rjmp	.-34     	; 0x2eb6 <unregister_code+0x38>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2ed8:	9c ef       	ldi	r25, 0xFC	; 252
    2eda:	98 0f       	add	r25, r24
    2edc:	91 3a       	cpi	r25, 0xA1	; 161
    2ede:	58 f3       	brcs	.-42     	; 0x2eb6 <unregister_code+0x38>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    2ee0:	90 e2       	ldi	r25, 0x20	; 32
    2ee2:	98 0f       	add	r25, r24
    2ee4:	98 30       	cpi	r25, 0x08	; 8
    2ee6:	50 f4       	brcc	.+20     	; 0x2efc <unregister_code+0x7e>
        del_mods(MOD_BIT(code));
    2ee8:	87 70       	andi	r24, 0x07	; 7
    2eea:	91 e0       	ldi	r25, 0x01	; 1
    2eec:	01 c0       	rjmp	.+2      	; 0x2ef0 <unregister_code+0x72>
    2eee:	99 0f       	add	r25, r25
    2ef0:	8a 95       	dec	r24
    2ef2:	ea f7       	brpl	.-6      	; 0x2eee <unregister_code+0x70>
    2ef4:	89 2f       	mov	r24, r25
    2ef6:	0e 94 c4 20 	call	0x4188	; 0x4188 <del_mods>
    2efa:	df cf       	rjmp	.-66     	; 0x2eba <unregister_code+0x3c>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    2efc:	9b e5       	ldi	r25, 0x5B	; 91
    2efe:	98 0f       	add	r25, r24
    2f00:	93 30       	cpi	r25, 0x03	; 3
    2f02:	20 f4       	brcc	.+8      	; 0x2f0c <unregister_code+0x8e>
        host_system_send(0);
    2f04:	80 e0       	ldi	r24, 0x00	; 0
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    2f0c:	88 5a       	subi	r24, 0xA8	; 168
    2f0e:	83 31       	cpi	r24, 0x13	; 19
    2f10:	20 f4       	brcc	.+8      	; 0x2f1a <unregister_code+0x9c>
        host_consumer_send(0);
    2f12:	80 e0       	ldi	r24, 0x00	; 0
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <host_consumer_send>
    2f1a:	08 95       	ret

00002f1c <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    2f1c:	88 23       	and	r24, r24
    2f1e:	21 f0       	breq	.+8      	; 0x2f28 <register_mods+0xc>
        add_mods(mods);
    2f20:	0e 94 be 20 	call	0x417c	; 0x417c <add_mods>
        send_keyboard_report();
    2f24:	0c 94 f7 20 	jmp	0x41ee	; 0x41ee <send_keyboard_report>
    2f28:	08 95       	ret

00002f2a <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    2f2a:	88 23       	and	r24, r24
    2f2c:	21 f0       	breq	.+8      	; 0x2f36 <unregister_mods+0xc>
        del_mods(mods);
    2f2e:	0e 94 c4 20 	call	0x4188	; 0x4188 <del_mods>
        send_keyboard_report();
    2f32:	0c 94 f7 20 	jmp	0x41ee	; 0x41ee <send_keyboard_report>
    2f36:	08 95       	ret

00002f38 <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    2f38:	cf 92       	push	r12
    2f3a:	df 92       	push	r13
    2f3c:	ef 92       	push	r14
    2f3e:	ff 92       	push	r15
    2f40:	0f 93       	push	r16
    2f42:	1f 93       	push	r17
    2f44:	cf 93       	push	r28
    2f46:	df 93       	push	r29
    2f48:	cd b7       	in	r28, 0x3d	; 61
    2f4a:	de b7       	in	r29, 0x3e	; 62
    2f4c:	28 97       	sbiw	r28, 0x08	; 8
    2f4e:	0f b6       	in	r0, 0x3f	; 63
    2f50:	f8 94       	cli
    2f52:	de bf       	out	0x3e, r29	; 62
    2f54:	0f be       	out	0x3f, r0	; 63
    2f56:	cd bf       	out	0x3d, r28	; 61
    2f58:	8c 01       	movw	r16, r24
    keyevent_t event = record->event;
    2f5a:	85 e0       	ldi	r24, 0x05	; 5
    2f5c:	f8 01       	movw	r30, r16
    2f5e:	de 01       	movw	r26, r28
    2f60:	11 96       	adiw	r26, 0x01	; 1
    2f62:	01 90       	ld	r0, Z+
    2f64:	0d 92       	st	X+, r0
    2f66:	8a 95       	dec	r24
    2f68:	e1 f7       	brne	.-8      	; 0x2f62 <process_action+0x2a>
    2f6a:	f8 01       	movw	r30, r16
    2f6c:	40 81       	ld	r20, Z
    2f6e:	31 81       	ldd	r19, Z+1	; 0x01
    2f70:	f2 80       	ldd	r15, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    2f72:	25 81       	ldd	r18, Z+5	; 0x05
    2f74:	22 95       	swap	r18
    2f76:	2f 70       	andi	r18, 0x0F	; 15

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2f78:	83 81       	ldd	r24, Z+3	; 0x03
    2f7a:	94 81       	ldd	r25, Z+4	; 0x04
    2f7c:	89 2b       	or	r24, r25
    2f7e:	31 f0       	breq	.+12     	; 0x2f8c <process_action+0x54>
    2f80:	3f 3f       	cpi	r19, 0xFF	; 255
    2f82:	31 f4       	brne	.+12     	; 0x2f90 <process_action+0x58>
    2f84:	81 e0       	ldi	r24, 0x01	; 1
    2f86:	4f 3f       	cpi	r20, 0xFF	; 255
    2f88:	19 f4       	brne	.+6      	; 0x2f90 <process_action+0x58>
    2f8a:	03 c0       	rjmp	.+6      	; 0x2f92 <process_action+0x5a>
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	01 c0       	rjmp	.+2      	; 0x2f92 <process_action+0x5a>
    2f90:	80 e0       	ldi	r24, 0x00	; 0
#endif

    if (IS_NOEVENT(event)) { return; }
    2f92:	80 fd       	sbrc	r24, 0
    2f94:	c6 c2       	rjmp	.+1420   	; 0x3522 <process_action+0x5ea>

    action_t action = layer_switch_get_action(event.key);
    2f96:	49 83       	std	Y+1, r20	; 0x01
    2f98:	3a 83       	std	Y+2, r19	; 0x02
    2f9a:	89 81       	ldd	r24, Y+1	; 0x01
    2f9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f9e:	2f 83       	std	Y+7, r18	; 0x07
    2fa0:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <layer_switch_get_action>
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    2fa4:	9e 83       	std	Y+6, r25	; 0x06
    2fa6:	88 87       	std	Y+8, r24	; 0x08
    2fa8:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    2fac:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    2fb0:	4e 81       	ldd	r20, Y+6	; 0x06
    2fb2:	e4 2f       	mov	r30, r20
    2fb4:	e2 95       	swap	r30
    2fb6:	ef 70       	andi	r30, 0x0F	; 15
    2fb8:	f0 e0       	ldi	r31, 0x00	; 0
    2fba:	e0 5a       	subi	r30, 0xA0	; 160
    2fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbe:	2f 81       	ldd	r18, Y+7	; 0x07
    2fc0:	68 85       	ldd	r22, Y+8	; 0x08
    2fc2:	0c 94 98 2d 	jmp	0x5b30	; 0x5b30 <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    2fc6:	84 2f       	mov	r24, r20
    2fc8:	80 7f       	andi	r24, 0xF0	; 240
    2fca:	14 2f       	mov	r17, r20
    2fcc:	1f 70       	andi	r17, 0x0F	; 15
    2fce:	88 23       	and	r24, r24
    2fd0:	11 f0       	breq	.+4      	; 0x2fd6 <process_action+0x9e>
    2fd2:	12 95       	swap	r17
    2fd4:	10 7f       	andi	r17, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    2fd6:	ff 20       	and	r15, r15
    2fd8:	59 f0       	breq	.+22     	; 0x2ff0 <process_action+0xb8>
                    if (mods) {
    2fda:	11 23       	and	r17, r17
    2fdc:	09 f4       	brne	.+2      	; 0x2fe0 <process_action+0xa8>
    2fde:	56 c2       	rjmp	.+1196   	; 0x348c <process_action+0x554>
                        add_weak_mods(mods);
    2fe0:	81 2f       	mov	r24, r17
    2fe2:	68 87       	std	Y+8, r22	; 0x08
    2fe4:	0e 94 ce 20 	call	0x419c	; 0x419c <add_weak_mods>
                        send_keyboard_report();
    2fe8:	0e 94 f7 20 	call	0x41ee	; 0x41ee <send_keyboard_report>
    2fec:	68 85       	ldd	r22, Y+8	; 0x08
    2fee:	4e c2       	rjmp	.+1180   	; 0x348c <process_action+0x554>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    2ff0:	86 2f       	mov	r24, r22
    2ff2:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <unregister_code>
                    if (mods) {
    2ff6:	11 23       	and	r17, r17
    2ff8:	09 f4       	brne	.+2      	; 0x2ffc <process_action+0xc4>
    2ffa:	93 c2       	rjmp	.+1318   	; 0x3522 <process_action+0x5ea>
                        del_weak_mods(mods);
    2ffc:	81 2f       	mov	r24, r17
    2ffe:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    3002:	28 96       	adiw	r28, 0x08	; 8
    3004:	0f b6       	in	r0, 0x3f	; 63
    3006:	f8 94       	cli
    3008:	de bf       	out	0x3e, r29	; 62
    300a:	0f be       	out	0x3f, r0	; 63
    300c:	cd bf       	out	0x3d, r28	; 61
    300e:	df 91       	pop	r29
    3010:	cf 91       	pop	r28
    3012:	1f 91       	pop	r17
    3014:	0f 91       	pop	r16
    3016:	ff 90       	pop	r15
    3018:	ef 90       	pop	r14
    301a:	df 90       	pop	r13
    301c:	cf 90       	pop	r12
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    301e:	0c 94 f7 20 	jmp	0x41ee	; 0x41ee <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    3022:	34 2f       	mov	r19, r20
    3024:	30 7f       	andi	r19, 0xF0	; 240
    3026:	84 2f       	mov	r24, r20
    3028:	8f 70       	andi	r24, 0x0F	; 15
    302a:	30 32       	cpi	r19, 0x20	; 32
    302c:	11 f0       	breq	.+4      	; 0x3032 <process_action+0xfa>
    302e:	82 95       	swap	r24
    3030:	80 7f       	andi	r24, 0xF0	; 240
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    3032:	66 23       	and	r22, r22
    3034:	19 f0       	breq	.+6      	; 0x303c <process_action+0x104>
    3036:	61 30       	cpi	r22, 0x01	; 1
    3038:	19 f1       	breq	.+70     	; 0x3080 <process_action+0x148>
    303a:	2c c0       	rjmp	.+88     	; 0x3094 <process_action+0x15c>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    303c:	ff 20       	and	r15, r15
    303e:	b1 f0       	breq	.+44     	; 0x306c <process_action+0x134>
                            if (tap_count == 0) {
    3040:	22 23       	and	r18, r18
    3042:	09 f4       	brne	.+2      	; 0x3046 <process_action+0x10e>
    3044:	94 c1       	rjmp	.+808    	; 0x336e <process_action+0x436>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    3046:	21 30       	cpi	r18, 0x01	; 1
    3048:	09 f0       	breq	.+2      	; 0x304c <process_action+0x114>
    304a:	91 c1       	rjmp	.+802    	; 0x336e <process_action+0x436>
            break;
#endif
        default:
            break;
    }
}
    304c:	28 96       	adiw	r28, 0x08	; 8
    304e:	0f b6       	in	r0, 0x3f	; 63
    3050:	f8 94       	cli
    3052:	de bf       	out	0x3e, r29	; 62
    3054:	0f be       	out	0x3f, r0	; 63
    3056:	cd bf       	out	0x3d, r28	; 61
    3058:	df 91       	pop	r29
    305a:	cf 91       	pop	r28
    305c:	1f 91       	pop	r17
    305e:	0f 91       	pop	r16
    3060:	ff 90       	pop	r15
    3062:	ef 90       	pop	r14
    3064:	df 90       	pop	r13
    3066:	cf 90       	pop	r12
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    3068:	0c 94 de 20 	jmp	0x41bc	; 0x41bc <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    306c:	22 23       	and	r18, r18
    306e:	19 f0       	breq	.+6      	; 0x3076 <process_action+0x13e>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    3070:	21 30       	cpi	r18, 0x01	; 1
    3072:	09 f4       	brne	.+2      	; 0x3076 <process_action+0x13e>
    3074:	56 c2       	rjmp	.+1196   	; 0x3522 <process_action+0x5ea>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    3076:	8e 83       	std	Y+6, r24	; 0x06
    3078:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <clear_oneshot_mods>
                                unregister_mods(mods);
    307c:	8e 81       	ldd	r24, Y+6	; 0x06
    307e:	8a c1       	rjmp	.+788    	; 0x3394 <process_action+0x45c>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    3080:	ff 20       	and	r15, r15
    3082:	21 f0       	breq	.+8      	; 0x308c <process_action+0x154>
                            if (tap_count <= TAPPING_TOGGLE) {
    3084:	26 30       	cpi	r18, 0x06	; 6
    3086:	08 f0       	brcs	.+2      	; 0x308a <process_action+0x152>
    3088:	4c c2       	rjmp	.+1176   	; 0x3522 <process_action+0x5ea>
    308a:	71 c1       	rjmp	.+738    	; 0x336e <process_action+0x436>
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    308c:	25 30       	cpi	r18, 0x05	; 5
    308e:	08 f0       	brcs	.+2      	; 0x3092 <process_action+0x15a>
    3090:	48 c2       	rjmp	.+1168   	; 0x3522 <process_action+0x5ea>
    3092:	80 c1       	rjmp	.+768    	; 0x3394 <process_action+0x45c>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    3094:	ff 20       	and	r15, r15
    3096:	21 f0       	breq	.+8      	; 0x30a0 <process_action+0x168>
                            if (tap_count > 0) {
    3098:	22 23       	and	r18, r18
    309a:	09 f4       	brne	.+2      	; 0x309e <process_action+0x166>
    309c:	68 c1       	rjmp	.+720    	; 0x336e <process_action+0x436>
    309e:	f6 c1       	rjmp	.+1004   	; 0x348c <process_action+0x554>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    30a0:	22 23       	and	r18, r18
    30a2:	09 f4       	brne	.+2      	; 0x30a6 <process_action+0x16e>
    30a4:	77 c1       	rjmp	.+750    	; 0x3394 <process_action+0x45c>
    30a6:	06 c2       	rjmp	.+1036   	; 0x34b4 <process_action+0x57c>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    30a8:	24 2f       	mov	r18, r20
    30aa:	26 95       	lsr	r18
    30ac:	26 95       	lsr	r18
    30ae:	23 70       	andi	r18, 0x03	; 3
    30b0:	30 e0       	ldi	r19, 0x00	; 0
    30b2:	21 15       	cp	r18, r1
    30b4:	31 05       	cpc	r19, r1
    30b6:	21 f0       	breq	.+8      	; 0x30c0 <process_action+0x188>
    30b8:	21 30       	cpi	r18, 0x01	; 1
    30ba:	31 05       	cpc	r19, r1
    30bc:	c9 f0       	breq	.+50     	; 0x30f0 <process_action+0x1b8>
    30be:	31 c2       	rjmp	.+1122   	; 0x3522 <process_action+0x5ea>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    30c0:	ff 20       	and	r15, r15
    30c2:	21 f0       	breq	.+8      	; 0x30cc <process_action+0x194>
                        host_system_send(action.usage.code);
    30c4:	86 2f       	mov	r24, r22
    30c6:	94 2f       	mov	r25, r20
    30c8:	93 70       	andi	r25, 0x03	; 3
    30ca:	02 c0       	rjmp	.+4      	; 0x30d0 <process_action+0x198>
                    } else {
                        host_system_send(0);
    30cc:	80 e0       	ldi	r24, 0x00	; 0
    30ce:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    30d0:	28 96       	adiw	r28, 0x08	; 8
    30d2:	0f b6       	in	r0, 0x3f	; 63
    30d4:	f8 94       	cli
    30d6:	de bf       	out	0x3e, r29	; 62
    30d8:	0f be       	out	0x3f, r0	; 63
    30da:	cd bf       	out	0x3d, r28	; 61
    30dc:	df 91       	pop	r29
    30de:	cf 91       	pop	r28
    30e0:	1f 91       	pop	r17
    30e2:	0f 91       	pop	r16
    30e4:	ff 90       	pop	r15
    30e6:	ef 90       	pop	r14
    30e8:	df 90       	pop	r13
    30ea:	cf 90       	pop	r12
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    30ec:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    30f0:	ff 20       	and	r15, r15
    30f2:	21 f0       	breq	.+8      	; 0x30fc <process_action+0x1c4>
                        host_consumer_send(action.usage.code);
    30f4:	86 2f       	mov	r24, r22
    30f6:	94 2f       	mov	r25, r20
    30f8:	93 70       	andi	r25, 0x03	; 3
    30fa:	02 c0       	rjmp	.+4      	; 0x3100 <process_action+0x1c8>
                    } else {
                        host_consumer_send(0);
    30fc:	80 e0       	ldi	r24, 0x00	; 0
    30fe:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    3100:	28 96       	adiw	r28, 0x08	; 8
    3102:	0f b6       	in	r0, 0x3f	; 63
    3104:	f8 94       	cli
    3106:	de bf       	out	0x3e, r29	; 62
    3108:	0f be       	out	0x3f, r0	; 63
    310a:	cd bf       	out	0x3d, r28	; 61
    310c:	df 91       	pop	r29
    310e:	cf 91       	pop	r28
    3110:	1f 91       	pop	r17
    3112:	0f 91       	pop	r16
    3114:	ff 90       	pop	r15
    3116:	ef 90       	pop	r14
    3118:	df 90       	pop	r13
    311a:	cf 90       	pop	r12
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    311c:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <host_consumer_send>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    3120:	86 2f       	mov	r24, r22
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    3122:	ff 20       	and	r15, r15
    3124:	19 f0       	breq	.+6      	; 0x312c <process_action+0x1f4>
                mousekey_on(action.key.code);
    3126:	0e 94 9a 24 	call	0x4934	; 0x4934 <mousekey_on>
    312a:	02 c0       	rjmp	.+4      	; 0x3130 <process_action+0x1f8>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    312c:	0e 94 02 25 	call	0x4a04	; 0x4a04 <mousekey_off>
            break;
#endif
        default:
            break;
    }
}
    3130:	28 96       	adiw	r28, 0x08	; 8
    3132:	0f b6       	in	r0, 0x3f	; 63
    3134:	f8 94       	cli
    3136:	de bf       	out	0x3e, r29	; 62
    3138:	0f be       	out	0x3f, r0	; 63
    313a:	cd bf       	out	0x3d, r28	; 61
    313c:	df 91       	pop	r29
    313e:	cf 91       	pop	r28
    3140:	1f 91       	pop	r17
    3142:	0f 91       	pop	r16
    3144:	ff 90       	pop	r15
    3146:	ef 90       	pop	r14
    3148:	df 90       	pop	r13
    314a:	cf 90       	pop	r12
            if (event.pressed) {
                mousekey_on(action.key.code);
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
                mousekey_send();
    314c:	0c 94 87 25 	jmp	0x4b0e	; 0x4b0e <mousekey_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    3150:	84 2f       	mov	r24, r20
    3152:	83 70       	andi	r24, 0x03	; 3
    3154:	09 f0       	breq	.+2      	; 0x3158 <process_action+0x220>
    3156:	76 c0       	rjmp	.+236    	; 0x3244 <process_action+0x30c>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    3158:	f1 10       	cpse	r15, r1
    315a:	e3 c1       	rjmp	.+966    	; 0x3522 <process_action+0x5ea>
                    uint8_t shift = action.layer_bitop.part*4;
    315c:	26 2f       	mov	r18, r22
    315e:	22 95       	swap	r18
    3160:	26 95       	lsr	r18
    3162:	27 70       	andi	r18, 0x07	; 7
    3164:	22 0f       	add	r18, r18
    3166:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    3168:	86 2f       	mov	r24, r22
    316a:	8f 70       	andi	r24, 0x0F	; 15
    316c:	c8 2e       	mov	r12, r24
    316e:	d1 2c       	mov	r13, r1
    3170:	e1 2c       	mov	r14, r1
    3172:	f1 2c       	mov	r15, r1
    3174:	02 2e       	mov	r0, r18
    3176:	04 c0       	rjmp	.+8      	; 0x3180 <process_action+0x248>
    3178:	cc 0c       	add	r12, r12
    317a:	dd 1c       	adc	r13, r13
    317c:	ee 1c       	adc	r14, r14
    317e:	ff 1c       	adc	r15, r15
    3180:	0a 94       	dec	r0
    3182:	d2 f7       	brpl	.-12     	; 0x3178 <process_action+0x240>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    3184:	64 ff       	sbrs	r22, 4
    3186:	10 c0       	rjmp	.+32     	; 0x31a8 <process_action+0x270>
    3188:	6f e0       	ldi	r22, 0x0F	; 15
    318a:	70 e0       	ldi	r23, 0x00	; 0
    318c:	80 e0       	ldi	r24, 0x00	; 0
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	04 c0       	rjmp	.+8      	; 0x319a <process_action+0x262>
    3192:	66 0f       	add	r22, r22
    3194:	77 1f       	adc	r23, r23
    3196:	88 1f       	adc	r24, r24
    3198:	99 1f       	adc	r25, r25
    319a:	2a 95       	dec	r18
    319c:	d2 f7       	brpl	.-12     	; 0x3192 <process_action+0x25a>
    319e:	60 95       	com	r22
    31a0:	70 95       	com	r23
    31a2:	80 95       	com	r24
    31a4:	90 95       	com	r25
    31a6:	03 c0       	rjmp	.+6      	; 0x31ae <process_action+0x276>
    31a8:	60 e0       	ldi	r22, 0x00	; 0
    31aa:	70 e0       	ldi	r23, 0x00	; 0
    31ac:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    31ae:	24 2f       	mov	r18, r20
    31b0:	26 95       	lsr	r18
    31b2:	26 95       	lsr	r18
    31b4:	23 70       	andi	r18, 0x03	; 3
    31b6:	42 2f       	mov	r20, r18
    31b8:	50 e0       	ldi	r21, 0x00	; 0
    31ba:	42 30       	cpi	r20, 0x02	; 2
    31bc:	51 05       	cpc	r21, r1
    31be:	d1 f0       	breq	.+52     	; 0x31f4 <process_action+0x2bc>
    31c0:	43 30       	cpi	r20, 0x03	; 3
    31c2:	51 05       	cpc	r21, r1
    31c4:	59 f1       	breq	.+86     	; 0x321c <process_action+0x2e4>
    31c6:	6c 29       	or	r22, r12
    31c8:	7d 29       	or	r23, r13
    31ca:	8e 29       	or	r24, r14
    31cc:	9f 29       	or	r25, r15
    31ce:	41 30       	cpi	r20, 0x01	; 1
    31d0:	51 05       	cpc	r21, r1
    31d2:	41 f1       	breq	.+80     	; 0x3224 <process_action+0x2ec>
            break;
#endif
        default:
            break;
    }
}
    31d4:	28 96       	adiw	r28, 0x08	; 8
    31d6:	0f b6       	in	r0, 0x3f	; 63
    31d8:	f8 94       	cli
    31da:	de bf       	out	0x3e, r29	; 62
    31dc:	0f be       	out	0x3f, r0	; 63
    31de:	cd bf       	out	0x3d, r28	; 61
    31e0:	df 91       	pop	r29
    31e2:	cf 91       	pop	r28
    31e4:	1f 91       	pop	r17
    31e6:	0f 91       	pop	r16
    31e8:	ff 90       	pop	r15
    31ea:	ef 90       	pop	r14
    31ec:	df 90       	pop	r13
    31ee:	cf 90       	pop	r12
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    31f0:	0c 94 d0 1e 	jmp	0x3da0	; 0x3da0 <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    31f4:	6c 29       	or	r22, r12
    31f6:	7d 29       	or	r23, r13
    31f8:	8e 29       	or	r24, r14
    31fa:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    31fc:	28 96       	adiw	r28, 0x08	; 8
    31fe:	0f b6       	in	r0, 0x3f	; 63
    3200:	f8 94       	cli
    3202:	de bf       	out	0x3e, r29	; 62
    3204:	0f be       	out	0x3f, r0	; 63
    3206:	cd bf       	out	0x3d, r28	; 61
    3208:	df 91       	pop	r29
    320a:	cf 91       	pop	r28
    320c:	1f 91       	pop	r17
    320e:	0f 91       	pop	r16
    3210:	ff 90       	pop	r15
    3212:	ef 90       	pop	r14
    3214:	df 90       	pop	r13
    3216:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    3218:	0c 94 ea 1e 	jmp	0x3dd4	; 0x3dd4 <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    321c:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <default_layer_and>
    3220:	c7 01       	movw	r24, r14
    3222:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    3224:	28 96       	adiw	r28, 0x08	; 8
    3226:	0f b6       	in	r0, 0x3f	; 63
    3228:	f8 94       	cli
    322a:	de bf       	out	0x3e, r29	; 62
    322c:	0f be       	out	0x3f, r0	; 63
    322e:	cd bf       	out	0x3d, r28	; 61
    3230:	df 91       	pop	r29
    3232:	cf 91       	pop	r28
    3234:	1f 91       	pop	r17
    3236:	0f 91       	pop	r16
    3238:	ff 90       	pop	r15
    323a:	ef 90       	pop	r14
    323c:	df 90       	pop	r13
    323e:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    3240:	0c 94 b6 1e 	jmp	0x3d6c	; 0x3d6c <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    3244:	ff 20       	and	r15, r15
    3246:	19 f0       	breq	.+6      	; 0x324e <process_action+0x316>
    3248:	84 2f       	mov	r24, r20
    324a:	81 70       	andi	r24, 0x01	; 1
    324c:	01 c0       	rjmp	.+2      	; 0x3250 <process_action+0x318>
    324e:	86 95       	lsr	r24
    3250:	88 23       	and	r24, r24
    3252:	09 f4       	brne	.+2      	; 0x3256 <process_action+0x31e>
    3254:	66 c1       	rjmp	.+716    	; 0x3522 <process_action+0x5ea>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    3256:	26 2f       	mov	r18, r22
    3258:	22 95       	swap	r18
    325a:	26 95       	lsr	r18
    325c:	27 70       	andi	r18, 0x07	; 7
    325e:	22 0f       	add	r18, r18
    3260:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    3262:	86 2f       	mov	r24, r22
    3264:	8f 70       	andi	r24, 0x0F	; 15
    3266:	c8 2e       	mov	r12, r24
    3268:	d1 2c       	mov	r13, r1
    326a:	e1 2c       	mov	r14, r1
    326c:	f1 2c       	mov	r15, r1
    326e:	02 2e       	mov	r0, r18
    3270:	04 c0       	rjmp	.+8      	; 0x327a <process_action+0x342>
    3272:	cc 0c       	add	r12, r12
    3274:	dd 1c       	adc	r13, r13
    3276:	ee 1c       	adc	r14, r14
    3278:	ff 1c       	adc	r15, r15
    327a:	0a 94       	dec	r0
    327c:	d2 f7       	brpl	.-12     	; 0x3272 <process_action+0x33a>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    327e:	64 ff       	sbrs	r22, 4
    3280:	10 c0       	rjmp	.+32     	; 0x32a2 <process_action+0x36a>
    3282:	6f e0       	ldi	r22, 0x0F	; 15
    3284:	70 e0       	ldi	r23, 0x00	; 0
    3286:	80 e0       	ldi	r24, 0x00	; 0
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	04 c0       	rjmp	.+8      	; 0x3294 <process_action+0x35c>
    328c:	66 0f       	add	r22, r22
    328e:	77 1f       	adc	r23, r23
    3290:	88 1f       	adc	r24, r24
    3292:	99 1f       	adc	r25, r25
    3294:	2a 95       	dec	r18
    3296:	d2 f7       	brpl	.-12     	; 0x328c <process_action+0x354>
    3298:	60 95       	com	r22
    329a:	70 95       	com	r23
    329c:	80 95       	com	r24
    329e:	90 95       	com	r25
    32a0:	03 c0       	rjmp	.+6      	; 0x32a8 <process_action+0x370>
    32a2:	60 e0       	ldi	r22, 0x00	; 0
    32a4:	70 e0       	ldi	r23, 0x00	; 0
    32a6:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    32a8:	24 2f       	mov	r18, r20
    32aa:	26 95       	lsr	r18
    32ac:	26 95       	lsr	r18
    32ae:	23 70       	andi	r18, 0x03	; 3
    32b0:	42 2f       	mov	r20, r18
    32b2:	50 e0       	ldi	r21, 0x00	; 0
    32b4:	42 30       	cpi	r20, 0x02	; 2
    32b6:	51 05       	cpc	r21, r1
    32b8:	d1 f0       	breq	.+52     	; 0x32ee <process_action+0x3b6>
    32ba:	43 30       	cpi	r20, 0x03	; 3
    32bc:	51 05       	cpc	r21, r1
    32be:	59 f1       	breq	.+86     	; 0x3316 <process_action+0x3de>
    32c0:	6c 29       	or	r22, r12
    32c2:	7d 29       	or	r23, r13
    32c4:	8e 29       	or	r24, r14
    32c6:	9f 29       	or	r25, r15
    32c8:	41 30       	cpi	r20, 0x01	; 1
    32ca:	51 05       	cpc	r21, r1
    32cc:	41 f1       	breq	.+80     	; 0x331e <process_action+0x3e6>
            break;
#endif
        default:
            break;
    }
}
    32ce:	28 96       	adiw	r28, 0x08	; 8
    32d0:	0f b6       	in	r0, 0x3f	; 63
    32d2:	f8 94       	cli
    32d4:	de bf       	out	0x3e, r29	; 62
    32d6:	0f be       	out	0x3f, r0	; 63
    32d8:	cd bf       	out	0x3d, r28	; 61
    32da:	df 91       	pop	r29
    32dc:	cf 91       	pop	r28
    32de:	1f 91       	pop	r17
    32e0:	0f 91       	pop	r16
    32e2:	ff 90       	pop	r15
    32e4:	ef 90       	pop	r14
    32e6:	df 90       	pop	r13
    32e8:	cf 90       	pop	r12
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    32ea:	0c 94 a4 1f 	jmp	0x3f48	; 0x3f48 <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    32ee:	6c 29       	or	r22, r12
    32f0:	7d 29       	or	r23, r13
    32f2:	8e 29       	or	r24, r14
    32f4:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    32f6:	28 96       	adiw	r28, 0x08	; 8
    32f8:	0f b6       	in	r0, 0x3f	; 63
    32fa:	f8 94       	cli
    32fc:	de bf       	out	0x3e, r29	; 62
    32fe:	0f be       	out	0x3f, r0	; 63
    3300:	cd bf       	out	0x3d, r28	; 61
    3302:	df 91       	pop	r29
    3304:	cf 91       	pop	r28
    3306:	1f 91       	pop	r17
    3308:	0f 91       	pop	r16
    330a:	ff 90       	pop	r15
    330c:	ef 90       	pop	r14
    330e:	df 90       	pop	r13
    3310:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    3312:	0c 94 be 1f 	jmp	0x3f7c	; 0x3f7c <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    3316:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <layer_and>
    331a:	c7 01       	movw	r24, r14
    331c:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    331e:	28 96       	adiw	r28, 0x08	; 8
    3320:	0f b6       	in	r0, 0x3f	; 63
    3322:	f8 94       	cli
    3324:	de bf       	out	0x3e, r29	; 62
    3326:	0f be       	out	0x3f, r0	; 63
    3328:	cd bf       	out	0x3d, r28	; 61
    332a:	df 91       	pop	r29
    332c:	cf 91       	pop	r28
    332e:	1f 91       	pop	r17
    3330:	0f 91       	pop	r16
    3332:	ff 90       	pop	r15
    3334:	ef 90       	pop	r14
    3336:	df 90       	pop	r13
    3338:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    333a:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    333e:	60 3f       	cpi	r22, 0xF0	; 240
    3340:	c9 f1       	breq	.+114    	; 0x33b4 <process_action+0x47c>
    3342:	18 f4       	brcc	.+6      	; 0x334a <process_action+0x412>
    3344:	60 3e       	cpi	r22, 0xE0	; 224
    3346:	50 f4       	brcc	.+20     	; 0x335c <process_action+0x424>
    3348:	9c c0       	rjmp	.+312    	; 0x3482 <process_action+0x54a>
    334a:	62 3f       	cpi	r22, 0xF2	; 242
    334c:	09 f4       	brne	.+2      	; 0x3350 <process_action+0x418>
    334e:	61 c0       	rjmp	.+194    	; 0x3412 <process_action+0x4da>
    3350:	08 f4       	brcc	.+2      	; 0x3354 <process_action+0x41c>
    3352:	4b c0       	rjmp	.+150    	; 0x33ea <process_action+0x4b2>
    3354:	63 3f       	cpi	r22, 0xF3	; 243
    3356:	09 f4       	brne	.+2      	; 0x335a <process_action+0x422>
    3358:	70 c0       	rjmp	.+224    	; 0x343a <process_action+0x502>
    335a:	93 c0       	rjmp	.+294    	; 0x3482 <process_action+0x54a>
    335c:	16 2f       	mov	r17, r22
    335e:	1f 70       	andi	r17, 0x0F	; 15
    3360:	84 2f       	mov	r24, r20
    3362:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    3364:	ff 20       	and	r15, r15
    3366:	99 f0       	breq	.+38     	; 0x338e <process_action+0x456>
                        layer_on(action.layer_tap.val);
    3368:	0e 94 23 1f 	call	0x3e46	; 0x3e46 <layer_on>
                        register_mods(action.layer_tap.code & 0x0f);
    336c:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    336e:	28 96       	adiw	r28, 0x08	; 8
    3370:	0f b6       	in	r0, 0x3f	; 63
    3372:	f8 94       	cli
    3374:	de bf       	out	0x3e, r29	; 62
    3376:	0f be       	out	0x3f, r0	; 63
    3378:	cd bf       	out	0x3d, r28	; 61
    337a:	df 91       	pop	r29
    337c:	cf 91       	pop	r28
    337e:	1f 91       	pop	r17
    3380:	0f 91       	pop	r16
    3382:	ff 90       	pop	r15
    3384:	ef 90       	pop	r14
    3386:	df 90       	pop	r13
    3388:	cf 90       	pop	r12
            switch (action.layer_tap.code) {
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
                        register_mods(action.layer_tap.code & 0x0f);
    338a:	0c 94 8e 17 	jmp	0x2f1c	; 0x2f1c <register_mods>
                    } else {
                        layer_off(action.layer_tap.val);
    338e:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    3392:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    3394:	28 96       	adiw	r28, 0x08	; 8
    3396:	0f b6       	in	r0, 0x3f	; 63
    3398:	f8 94       	cli
    339a:	de bf       	out	0x3e, r29	; 62
    339c:	0f be       	out	0x3f, r0	; 63
    339e:	cd bf       	out	0x3d, r28	; 61
    33a0:	df 91       	pop	r29
    33a2:	cf 91       	pop	r28
    33a4:	1f 91       	pop	r17
    33a6:	0f 91       	pop	r16
    33a8:	ff 90       	pop	r15
    33aa:	ef 90       	pop	r14
    33ac:	df 90       	pop	r13
    33ae:	cf 90       	pop	r12
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods(action.layer_tap.code & 0x0f);
    33b0:	0c 94 95 17 	jmp	0x2f2a	; 0x2f2a <unregister_mods>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    33b4:	ff 20       	and	r15, r15
    33b6:	a9 f0       	breq	.+42     	; 0x33e2 <process_action+0x4aa>
                        if (tap_count < TAPPING_TOGGLE) {
    33b8:	25 30       	cpi	r18, 0x05	; 5
    33ba:	08 f0       	brcs	.+2      	; 0x33be <process_action+0x486>
    33bc:	b2 c0       	rjmp	.+356    	; 0x3522 <process_action+0x5ea>
                            layer_invert(action.layer_tap.val);
    33be:	84 2f       	mov	r24, r20
    33c0:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    33c2:	28 96       	adiw	r28, 0x08	; 8
    33c4:	0f b6       	in	r0, 0x3f	; 63
    33c6:	f8 94       	cli
    33c8:	de bf       	out	0x3e, r29	; 62
    33ca:	0f be       	out	0x3f, r0	; 63
    33cc:	cd bf       	out	0x3d, r28	; 61
    33ce:	df 91       	pop	r29
    33d0:	cf 91       	pop	r28
    33d2:	1f 91       	pop	r17
    33d4:	0f 91       	pop	r16
    33d6:	ff 90       	pop	r15
    33d8:	ef 90       	pop	r14
    33da:	df 90       	pop	r13
    33dc:	cf 90       	pop	r12
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    33de:	0c 94 69 1f 	jmp	0x3ed2	; 0x3ed2 <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    33e2:	26 30       	cpi	r18, 0x06	; 6
    33e4:	08 f0       	brcs	.+2      	; 0x33e8 <process_action+0x4b0>
    33e6:	9d c0       	rjmp	.+314    	; 0x3522 <process_action+0x5ea>
    33e8:	ea cf       	rjmp	.-44     	; 0x33be <process_action+0x486>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    33ea:	ff 20       	and	r15, r15
    33ec:	a1 f0       	breq	.+40     	; 0x3416 <process_action+0x4de>
    33ee:	84 2f       	mov	r24, r20
    33f0:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    33f2:	28 96       	adiw	r28, 0x08	; 8
    33f4:	0f b6       	in	r0, 0x3f	; 63
    33f6:	f8 94       	cli
    33f8:	de bf       	out	0x3e, r29	; 62
    33fa:	0f be       	out	0x3f, r0	; 63
    33fc:	cd bf       	out	0x3d, r28	; 61
    33fe:	df 91       	pop	r29
    3400:	cf 91       	pop	r28
    3402:	1f 91       	pop	r17
    3404:	0f 91       	pop	r16
    3406:	ff 90       	pop	r15
    3408:	ef 90       	pop	r14
    340a:	df 90       	pop	r13
    340c:	cf 90       	pop	r12
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    340e:	0c 94 23 1f 	jmp	0x3e46	; 0x3e46 <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    3412:	ff 20       	and	r15, r15
    3414:	61 f3       	breq	.-40     	; 0x33ee <process_action+0x4b6>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    3416:	84 2f       	mov	r24, r20
    3418:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    341a:	28 96       	adiw	r28, 0x08	; 8
    341c:	0f b6       	in	r0, 0x3f	; 63
    341e:	f8 94       	cli
    3420:	de bf       	out	0x3e, r29	; 62
    3422:	0f be       	out	0x3f, r0	; 63
    3424:	cd bf       	out	0x3d, r28	; 61
    3426:	df 91       	pop	r29
    3428:	cf 91       	pop	r28
    342a:	1f 91       	pop	r17
    342c:	0f 91       	pop	r16
    342e:	ff 90       	pop	r15
    3430:	ef 90       	pop	r14
    3432:	df 90       	pop	r13
    3434:	cf 90       	pop	r12
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    3436:	0c 94 44 1f 	jmp	0x3e88	; 0x3e88 <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    343a:	ff 20       	and	r15, r15
    343c:	91 f0       	breq	.+36     	; 0x3462 <process_action+0x52a>
    343e:	84 2f       	mov	r24, r20
    3440:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    3442:	28 96       	adiw	r28, 0x08	; 8
    3444:	0f b6       	in	r0, 0x3f	; 63
    3446:	f8 94       	cli
    3448:	de bf       	out	0x3e, r29	; 62
    344a:	0f be       	out	0x3f, r0	; 63
    344c:	cd bf       	out	0x3d, r28	; 61
    344e:	df 91       	pop	r29
    3450:	cf 91       	pop	r28
    3452:	1f 91       	pop	r17
    3454:	0f 91       	pop	r16
    3456:	ff 90       	pop	r15
    3458:	ef 90       	pop	r14
    345a:	df 90       	pop	r13
    345c:	cf 90       	pop	r12
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    345e:	0c 94 0e 1f 	jmp	0x3e1c	; 0x3e1c <layer_move>
            break;
#endif
        default:
            break;
    }
}
    3462:	28 96       	adiw	r28, 0x08	; 8
    3464:	0f b6       	in	r0, 0x3f	; 63
    3466:	f8 94       	cli
    3468:	de bf       	out	0x3e, r29	; 62
    346a:	0f be       	out	0x3f, r0	; 63
    346c:	cd bf       	out	0x3d, r28	; 61
    346e:	df 91       	pop	r29
    3470:	cf 91       	pop	r28
    3472:	1f 91       	pop	r17
    3474:	0f 91       	pop	r16
    3476:	ff 90       	pop	r15
    3478:	ef 90       	pop	r14
    347a:	df 90       	pop	r13
    347c:	cf 90       	pop	r12
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    347e:	0c 94 04 1f 	jmp	0x3e08	; 0x3e08 <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    3482:	ff 20       	and	r15, r15
    3484:	a1 f0       	breq	.+40     	; 0x34ae <process_action+0x576>
                        if (tap_count > 0) {
    3486:	22 23       	and	r18, r18
    3488:	09 f4       	brne	.+2      	; 0x348c <process_action+0x554>
    348a:	b1 cf       	rjmp	.-158    	; 0x33ee <process_action+0x4b6>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    348c:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    348e:	28 96       	adiw	r28, 0x08	; 8
    3490:	0f b6       	in	r0, 0x3f	; 63
    3492:	f8 94       	cli
    3494:	de bf       	out	0x3e, r29	; 62
    3496:	0f be       	out	0x3f, r0	; 63
    3498:	cd bf       	out	0x3d, r28	; 61
    349a:	df 91       	pop	r29
    349c:	cf 91       	pop	r28
    349e:	1f 91       	pop	r17
    34a0:	0f 91       	pop	r16
    34a2:	ff 90       	pop	r15
    34a4:	ef 90       	pop	r14
    34a6:	df 90       	pop	r13
    34a8:	cf 90       	pop	r12
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    34aa:	0c 94 77 16 	jmp	0x2cee	; 0x2cee <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    34ae:	22 23       	and	r18, r18
    34b0:	09 f4       	brne	.+2      	; 0x34b4 <process_action+0x57c>
    34b2:	b1 cf       	rjmp	.-158    	; 0x3416 <process_action+0x4de>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    34b4:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    34b6:	28 96       	adiw	r28, 0x08	; 8
    34b8:	0f b6       	in	r0, 0x3f	; 63
    34ba:	f8 94       	cli
    34bc:	de bf       	out	0x3e, r29	; 62
    34be:	0f be       	out	0x3f, r0	; 63
    34c0:	cd bf       	out	0x3d, r28	; 61
    34c2:	df 91       	pop	r29
    34c4:	cf 91       	pop	r28
    34c6:	1f 91       	pop	r17
    34c8:	0f 91       	pop	r16
    34ca:	ff 90       	pop	r15
    34cc:	ef 90       	pop	r14
    34ce:	df 90       	pop	r13
    34d0:	cf 90       	pop	r12
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    34d2:	0c 94 3f 17 	jmp	0x2e7e	; 0x2e7e <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    34d6:	4f 70       	andi	r20, 0x0F	; 15
    34d8:	c8 01       	movw	r24, r16
    34da:	0e 94 fd 07 	call	0xffa	; 0xffa <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    34de:	28 96       	adiw	r28, 0x08	; 8
    34e0:	0f b6       	in	r0, 0x3f	; 63
    34e2:	f8 94       	cli
    34e4:	de bf       	out	0x3e, r29	; 62
    34e6:	0f be       	out	0x3f, r0	; 63
    34e8:	cd bf       	out	0x3d, r28	; 61
    34ea:	df 91       	pop	r29
    34ec:	cf 91       	pop	r28
    34ee:	1f 91       	pop	r17
    34f0:	0f 91       	pop	r16
    34f2:	ff 90       	pop	r15
    34f4:	ef 90       	pop	r14
    34f6:	df 90       	pop	r13
    34f8:	cf 90       	pop	r12
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    34fa:	0c 94 2b 1e 	jmp	0x3c56	; 0x3c56 <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    34fe:	4f 70       	andi	r20, 0x0F	; 15
    3500:	c8 01       	movw	r24, r16
            break;
#endif
        default:
            break;
    }
}
    3502:	28 96       	adiw	r28, 0x08	; 8
    3504:	0f b6       	in	r0, 0x3f	; 63
    3506:	f8 94       	cli
    3508:	de bf       	out	0x3e, r29	; 62
    350a:	0f be       	out	0x3f, r0	; 63
    350c:	cd bf       	out	0x3d, r28	; 61
    350e:	df 91       	pop	r29
    3510:	cf 91       	pop	r28
    3512:	1f 91       	pop	r17
    3514:	0f 91       	pop	r16
    3516:	ff 90       	pop	r15
    3518:	ef 90       	pop	r14
    351a:	df 90       	pop	r13
    351c:	cf 90       	pop	r12
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    351e:	0c 94 ca 0b 	jmp	0x1794	; 0x1794 <action_function>
            break;
#endif
        default:
            break;
    }
}
    3522:	28 96       	adiw	r28, 0x08	; 8
    3524:	0f b6       	in	r0, 0x3f	; 63
    3526:	f8 94       	cli
    3528:	de bf       	out	0x3e, r29	; 62
    352a:	0f be       	out	0x3f, r0	; 63
    352c:	cd bf       	out	0x3d, r28	; 61
    352e:	df 91       	pop	r29
    3530:	cf 91       	pop	r28
    3532:	1f 91       	pop	r17
    3534:	0f 91       	pop	r16
    3536:	ff 90       	pop	r15
    3538:	ef 90       	pop	r14
    353a:	df 90       	pop	r13
    353c:	cf 90       	pop	r12
    353e:	08 95       	ret

00003540 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    3540:	0e 94 db 20 	call	0x41b6	; 0x41b6 <clear_weak_mods>
    clear_keys();
    3544:	0e 94 b0 20 	call	0x4160	; 0x4160 <clear_keys>
    send_keyboard_report();
    3548:	0e 94 f7 20 	call	0x41ee	; 0x41ee <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    354c:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <mousekey_clear>
    mousekey_send();
    3550:	0e 94 87 25 	call	0x4b0e	; 0x4b0e <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    3554:	80 e0       	ldi	r24, 0x00	; 0
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	0e 94 49 15 	call	0x2a92	; 0x2a92 <host_system_send>
    host_consumer_send(0);
    355c:	80 e0       	ldi	r24, 0x00	; 0
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <host_consumer_send>

00003564 <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    3564:	0e 94 cb 20 	call	0x4196	; 0x4196 <clear_mods>
    clear_keyboard_but_mods();
    3568:	0c 94 a0 1a 	jmp	0x3540	; 0x3540 <clear_keyboard_but_mods>

0000356c <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    356c:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <layer_switch_get_action>

    switch (action.kind.id) {
    3570:	29 2f       	mov	r18, r25
    3572:	22 95       	swap	r18
    3574:	2f 70       	andi	r18, 0x0F	; 15
    3576:	30 e0       	ldi	r19, 0x00	; 0
    3578:	2c 30       	cpi	r18, 0x0C	; 12
    357a:	31 05       	cpc	r19, r1
    357c:	4c f4       	brge	.+18     	; 0x3590 <is_tap_key+0x24>
    357e:	2a 30       	cpi	r18, 0x0A	; 10
    3580:	31 05       	cpc	r19, r1
    3582:	6c f4       	brge	.+26     	; 0x359e <is_tap_key+0x32>
    3584:	22 50       	subi	r18, 0x02	; 2
    3586:	31 09       	sbc	r19, r1
    3588:	22 30       	cpi	r18, 0x02	; 2
    358a:	31 05       	cpc	r19, r1
    358c:	90 f4       	brcc	.+36     	; 0x35b2 <is_tap_key+0x46>
    358e:	07 c0       	rjmp	.+14     	; 0x359e <is_tap_key+0x32>
    3590:	2c 30       	cpi	r18, 0x0C	; 12
    3592:	31 05       	cpc	r19, r1
    3594:	51 f0       	breq	.+20     	; 0x35aa <is_tap_key+0x3e>
    3596:	2f 30       	cpi	r18, 0x0F	; 15
    3598:	31 05       	cpc	r19, r1
    359a:	39 f0       	breq	.+14     	; 0x35aa <is_tap_key+0x3e>
    359c:	0a c0       	rjmp	.+20     	; 0x35b2 <is_tap_key+0x46>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    359e:	80 3e       	cpi	r24, 0xE0	; 224
    35a0:	10 f0       	brcs	.+4      	; 0x35a6 <is_tap_key+0x3a>
    35a2:	80 3f       	cpi	r24, 0xF0	; 240
    35a4:	31 f4       	brne	.+12     	; 0x35b2 <is_tap_key+0x46>
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
    35a6:	81 e0       	ldi	r24, 0x01	; 1
    35a8:	08 95       	ret
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    35aa:	93 fb       	bst	r25, 3
    35ac:	88 27       	eor	r24, r24
    35ae:	80 f9       	bld	r24, 0
    35b0:	08 95       	ret
            switch (action.layer_tap.code) {
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
            }
            return false;
    35b2:	80 e0       	ldi	r24, 0x00	; 0
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    35b4:	08 95       	ret

000035b6 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    35b6:	cf 93       	push	r28
    35b8:	df 93       	push	r29
    35ba:	00 d0       	rcall	.+0      	; 0x35bc <debug_event+0x6>
    35bc:	00 d0       	rcall	.+0      	; 0x35be <debug_event+0x8>
    35be:	1f 92       	push	r1
    35c0:	cd b7       	in	r28, 0x3d	; 61
    35c2:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    35c4:	0f 90       	pop	r0
    35c6:	0f 90       	pop	r0
    35c8:	0f 90       	pop	r0
    35ca:	0f 90       	pop	r0
    35cc:	0f 90       	pop	r0
    35ce:	df 91       	pop	r29
    35d0:	cf 91       	pop	r28
    35d2:	08 95       	ret

000035d4 <debug_record>:

void debug_record(keyrecord_t record)
{
    35d4:	cf 93       	push	r28
    35d6:	df 93       	push	r29
    35d8:	00 d0       	rcall	.+0      	; 0x35da <debug_record+0x6>
    35da:	00 d0       	rcall	.+0      	; 0x35dc <debug_record+0x8>
    35dc:	00 d0       	rcall	.+0      	; 0x35de <debug_record+0xa>
    35de:	cd b7       	in	r28, 0x3d	; 61
    35e0:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    35e2:	26 96       	adiw	r28, 0x06	; 6
    35e4:	0f b6       	in	r0, 0x3f	; 63
    35e6:	f8 94       	cli
    35e8:	de bf       	out	0x3e, r29	; 62
    35ea:	0f be       	out	0x3f, r0	; 63
    35ec:	cd bf       	out	0x3d, r28	; 61
    35ee:	df 91       	pop	r29
    35f0:	cf 91       	pop	r28
    35f2:	08 95       	ret

000035f4 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    35f4:	1f 93       	push	r17
    35f6:	cf 93       	push	r28
    35f8:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    35fa:	c0 91 84 01 	lds	r28, 0x0184
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    35fe:	16 e0       	ldi	r17, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3600:	80 91 85 01 	lds	r24, 0x0185
    3604:	c8 17       	cp	r28, r24
    3606:	99 f0       	breq	.+38     	; 0x362e <debug_waiting_buffer+0x3a>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    3608:	d0 e0       	ldi	r29, 0x00	; 0
    360a:	1c 9f       	mul	r17, r28
    360c:	f0 01       	movw	r30, r0
    360e:	1d 9f       	mul	r17, r29
    3610:	f0 0d       	add	r31, r0
    3612:	11 24       	eor	r1, r1
    3614:	ea 57       	subi	r30, 0x7A	; 122
    3616:	fe 4f       	sbci	r31, 0xFE	; 254
    3618:	40 81       	ld	r20, Z
    361a:	51 81       	ldd	r21, Z+1	; 0x01
    361c:	62 81       	ldd	r22, Z+2	; 0x02
    361e:	73 81       	ldd	r23, Z+3	; 0x03
    3620:	84 81       	ldd	r24, Z+4	; 0x04
    3622:	95 81       	ldd	r25, Z+5	; 0x05
    3624:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3628:	21 96       	adiw	r28, 0x01	; 1
    362a:	c7 70       	andi	r28, 0x07	; 7
    362c:	e9 cf       	rjmp	.-46     	; 0x3600 <debug_waiting_buffer+0xc>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    362e:	df 91       	pop	r29
    3630:	cf 91       	pop	r28
    3632:	1f 91       	pop	r17
    3634:	08 95       	ret

00003636 <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    3636:	40 91 b6 01 	lds	r20, 0x01B6
    363a:	50 91 b7 01 	lds	r21, 0x01B7
    363e:	60 91 b8 01 	lds	r22, 0x01B8
    3642:	70 91 b9 01 	lds	r23, 0x01B9
    3646:	80 91 ba 01 	lds	r24, 0x01BA
    364a:	90 91 bb 01 	lds	r25, 0x01BB
    364e:	0c 94 ea 1a 	jmp	0x35d4	; 0x35d4 <debug_record>

00003652 <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    3652:	cf 93       	push	r28
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    3654:	80 91 bb 01 	lds	r24, 0x01BB
    3658:	82 95       	swap	r24
    365a:	8f 70       	andi	r24, 0x0F	; 15
    365c:	09 f0       	breq	.+2      	; 0x3660 <waiting_buffer_scan_tap+0xe>
    365e:	5f c0       	rjmp	.+190    	; 0x371e <waiting_buffer_scan_tap+0xcc>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    3660:	80 91 b8 01 	lds	r24, 0x01B8
    3664:	88 23       	and	r24, r24
    3666:	09 f4       	brne	.+2      	; 0x366a <waiting_buffer_scan_tap+0x18>
    3668:	5a c0       	rjmp	.+180    	; 0x371e <waiting_buffer_scan_tap+0xcc>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    366a:	20 91 84 01 	lds	r18, 0x0184
    366e:	a0 91 85 01 	lds	r26, 0x0185
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    3672:	60 91 b6 01 	lds	r22, 0x01B6
    3676:	70 91 b7 01 	lds	r23, 0x01B7
    367a:	80 91 b9 01 	lds	r24, 0x01B9
    367e:	90 91 ba 01 	lds	r25, 0x01BA
    3682:	31 e0       	ldi	r19, 0x01	; 1
    3684:	6f 3f       	cpi	r22, 0xFF	; 255
    3686:	09 f0       	breq	.+2      	; 0x368a <waiting_buffer_scan_tap+0x38>
    3688:	30 e0       	ldi	r19, 0x00	; 0
    368a:	b3 2f       	mov	r27, r19
    368c:	c6 e0       	ldi	r28, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    368e:	2a 17       	cp	r18, r26
    3690:	09 f4       	brne	.+2      	; 0x3694 <waiting_buffer_scan_tap+0x42>
    3692:	45 c0       	rjmp	.+138    	; 0x371e <waiting_buffer_scan_tap+0xcc>
    3694:	00 97       	sbiw	r24, 0x00	; 0
    3696:	21 f0       	breq	.+8      	; 0x36a0 <waiting_buffer_scan_tap+0x4e>
    3698:	7f 3f       	cpi	r23, 0xFF	; 255
    369a:	21 f4       	brne	.+8      	; 0x36a4 <waiting_buffer_scan_tap+0x52>
    369c:	4b 2f       	mov	r20, r27
    369e:	03 c0       	rjmp	.+6      	; 0x36a6 <waiting_buffer_scan_tap+0x54>
    36a0:	41 e0       	ldi	r20, 0x01	; 1
    36a2:	01 c0       	rjmp	.+2      	; 0x36a6 <waiting_buffer_scan_tap+0x54>
    36a4:	40 e0       	ldi	r20, 0x00	; 0
    36a6:	30 e0       	ldi	r19, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    36a8:	40 fd       	sbrc	r20, 0
    36aa:	35 c0       	rjmp	.+106    	; 0x3716 <waiting_buffer_scan_tap+0xc4>
    36ac:	c2 9f       	mul	r28, r18
    36ae:	f0 01       	movw	r30, r0
    36b0:	c3 9f       	mul	r28, r19
    36b2:	f0 0d       	add	r31, r0
    36b4:	11 24       	eor	r1, r1
    36b6:	ea 57       	subi	r30, 0x7A	; 122
    36b8:	fe 4f       	sbci	r31, 0xFE	; 254
    36ba:	41 81       	ldd	r20, Z+1	; 0x01
    36bc:	74 13       	cpse	r23, r20
    36be:	2b c0       	rjmp	.+86     	; 0x3716 <waiting_buffer_scan_tap+0xc4>
    36c0:	40 81       	ld	r20, Z
    36c2:	64 13       	cpse	r22, r20
    36c4:	28 c0       	rjmp	.+80     	; 0x3716 <waiting_buffer_scan_tap+0xc4>
    36c6:	42 81       	ldd	r20, Z+2	; 0x02
    36c8:	41 11       	cpse	r20, r1
    36ca:	25 c0       	rjmp	.+74     	; 0x3716 <waiting_buffer_scan_tap+0xc4>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    36cc:	43 81       	ldd	r20, Z+3	; 0x03
    36ce:	54 81       	ldd	r21, Z+4	; 0x04
    36d0:	48 17       	cp	r20, r24
    36d2:	59 07       	cpc	r21, r25
    36d4:	10 f4       	brcc	.+4      	; 0x36da <waiting_buffer_scan_tap+0x88>
    36d6:	41 50       	subi	r20, 0x01	; 1
    36d8:	51 09       	sbc	r21, r1
    36da:	48 1b       	sub	r20, r24
    36dc:	59 0b       	sbc	r21, r25
    36de:	48 3c       	cpi	r20, 0xC8	; 200
    36e0:	51 05       	cpc	r21, r1
    36e2:	c8 f4       	brcc	.+50     	; 0x3716 <waiting_buffer_scan_tap+0xc4>
            tapping_key.tap.count = 1;
    36e4:	80 91 bb 01 	lds	r24, 0x01BB
    36e8:	8f 70       	andi	r24, 0x0F	; 15
    36ea:	80 61       	ori	r24, 0x10	; 16
    36ec:	80 93 bb 01 	sts	0x01BB, r24
            waiting_buffer[i].tap.count = 1;
    36f0:	86 e0       	ldi	r24, 0x06	; 6
    36f2:	82 9f       	mul	r24, r18
    36f4:	f0 01       	movw	r30, r0
    36f6:	83 9f       	mul	r24, r19
    36f8:	f0 0d       	add	r31, r0
    36fa:	11 24       	eor	r1, r1
    36fc:	e5 57       	subi	r30, 0x75	; 117
    36fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3700:	80 81       	ld	r24, Z
    3702:	8f 70       	andi	r24, 0x0F	; 15
    3704:	80 61       	ori	r24, 0x10	; 16
    3706:	80 83       	st	Z, r24
            process_action(&tapping_key);
    3708:	86 eb       	ldi	r24, 0xB6	; 182
    370a:	91 e0       	ldi	r25, 0x01	; 1
    370c:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <process_action>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    3710:	cf 91       	pop	r28
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    3712:	0c 94 fa 1a 	jmp	0x35f4	; 0x35f4 <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3716:	2f 5f       	subi	r18, 0xFF	; 255
    3718:	3f 4f       	sbci	r19, 0xFF	; 255
    371a:	27 70       	andi	r18, 0x07	; 7
    371c:	b8 cf       	rjmp	.-144    	; 0x368e <waiting_buffer_scan_tap+0x3c>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    371e:	cf 91       	pop	r28
    3720:	08 95       	ret

00003722 <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    3722:	cf 92       	push	r12
    3724:	df 92       	push	r13
    3726:	ef 92       	push	r14
    3728:	ff 92       	push	r15
    372a:	0f 93       	push	r16
    372c:	1f 93       	push	r17
    372e:	cf 93       	push	r28
    3730:	df 93       	push	r29
    3732:	cd b7       	in	r28, 0x3d	; 61
    3734:	de b7       	in	r29, 0x3e	; 62
    3736:	62 97       	sbiw	r28, 0x12	; 18
    3738:	0f b6       	in	r0, 0x3f	; 63
    373a:	f8 94       	cli
    373c:	de bf       	out	0x3e, r29	; 62
    373e:	0f be       	out	0x3f, r0	; 63
    3740:	cd bf       	out	0x3d, r28	; 61
    3742:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    3744:	85 e0       	ldi	r24, 0x05	; 5
    3746:	f8 01       	movw	r30, r16
    3748:	de 01       	movw	r26, r28
    374a:	1d 96       	adiw	r26, 0x0d	; 13
    374c:	01 90       	ld	r0, Z+
    374e:	0d 92       	st	X+, r0
    3750:	8a 95       	dec	r24
    3752:	e1 f7       	brne	.-8      	; 0x374c <process_tapping+0x2a>
    3754:	d8 01       	movw	r26, r16
    3756:	4c 91       	ld	r20, X
    3758:	11 96       	adiw	r26, 0x01	; 1
    375a:	5c 91       	ld	r21, X
    375c:	11 97       	sbiw	r26, 0x01	; 1
    375e:	12 96       	adiw	r26, 0x02	; 2
    3760:	6c 91       	ld	r22, X
    3762:	12 97       	sbiw	r26, 0x02	; 2
    3764:	13 96       	adiw	r26, 0x03	; 3
    3766:	ed 90       	ld	r14, X+
    3768:	fc 90       	ld	r15, X
    376a:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    376c:	70 91 b6 01 	lds	r23, 0x01B6
    3770:	e0 91 b7 01 	lds	r30, 0x01B7
    3774:	20 91 b9 01 	lds	r18, 0x01B9
    3778:	30 91 ba 01 	lds	r19, 0x01BA
    377c:	21 15       	cp	r18, r1
    377e:	31 05       	cpc	r19, r1
    3780:	31 f0       	breq	.+12     	; 0x378e <process_tapping+0x6c>
    3782:	ef 3f       	cpi	r30, 0xFF	; 255
    3784:	31 f4       	brne	.+12     	; 0x3792 <process_tapping+0x70>
    3786:	81 e0       	ldi	r24, 0x01	; 1
    3788:	7f 3f       	cpi	r23, 0xFF	; 255
    378a:	19 f4       	brne	.+6      	; 0x3792 <process_tapping+0x70>
    378c:	03 c0       	rjmp	.+6      	; 0x3794 <process_tapping+0x72>
    378e:	81 e0       	ldi	r24, 0x01	; 1
    3790:	01 c0       	rjmp	.+2      	; 0x3794 <process_tapping+0x72>
    3792:	80 e0       	ldi	r24, 0x00	; 0
    3794:	b8 2f       	mov	r27, r24
    3796:	b1 70       	andi	r27, 0x01	; 1
    3798:	cb 2e       	mov	r12, r27
    379a:	80 fd       	sbrc	r24, 0
    379c:	6c c1       	rjmp	.+728    	; 0x3a76 <process_tapping+0x354>
    379e:	d0 90 b8 01 	lds	r13, 0x01B8
    37a2:	dd 20       	and	r13, r13
    37a4:	09 f4       	brne	.+2      	; 0x37a8 <process_tapping+0x86>
    37a6:	f5 c0       	rjmp	.+490    	; 0x3992 <process_tapping+0x270>
    37a8:	f0 91 bb 01 	lds	r31, 0x01BB
        if (WITHIN_TAPPING_TERM(event)) {
    37ac:	e2 16       	cp	r14, r18
    37ae:	f3 06       	cpc	r15, r19
    37b0:	38 f0       	brcs	.+14     	; 0x37c0 <process_tapping+0x9e>
    37b2:	c7 01       	movw	r24, r14
    37b4:	82 1b       	sub	r24, r18
    37b6:	93 0b       	sbc	r25, r19
    37b8:	88 3c       	cpi	r24, 0xC8	; 200
    37ba:	91 05       	cpc	r25, r1
    37bc:	48 f0       	brcs	.+18     	; 0x37d0 <process_tapping+0xae>
    37be:	9b c0       	rjmp	.+310    	; 0x38f6 <process_tapping+0x1d4>
    37c0:	20 95       	com	r18
    37c2:	30 95       	com	r19
    37c4:	2e 0d       	add	r18, r14
    37c6:	3f 1d       	adc	r19, r15
    37c8:	28 3c       	cpi	r18, 0xC8	; 200
    37ca:	31 05       	cpc	r19, r1
    37cc:	08 f0       	brcs	.+2      	; 0x37d0 <process_tapping+0xae>
    37ce:	93 c0       	rjmp	.+294    	; 0x38f6 <process_tapping+0x1d4>
            if (tapping_key.tap.count == 0) {
    37d0:	8f 2f       	mov	r24, r31
    37d2:	80 7f       	andi	r24, 0xF0	; 240
    37d4:	09 f0       	breq	.+2      	; 0x37d8 <process_tapping+0xb6>
    37d6:	52 c0       	rjmp	.+164    	; 0x387c <process_tapping+0x15a>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    37d8:	e5 13       	cpse	r30, r21
    37da:	14 c0       	rjmp	.+40     	; 0x3804 <process_tapping+0xe2>
    37dc:	74 13       	cpse	r23, r20
    37de:	12 c0       	rjmp	.+36     	; 0x3804 <process_tapping+0xe2>
    37e0:	d6 2e       	mov	r13, r22
    37e2:	61 11       	cpse	r22, r1
    37e4:	0f c0       	rjmp	.+30     	; 0x3804 <process_tapping+0xe2>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    37e6:	ff 70       	andi	r31, 0x0F	; 15
    37e8:	f0 61       	ori	r31, 0x10	; 16
    37ea:	f0 93 bb 01 	sts	0x01BB, r31
                    debug_tapping_key();
    37ee:	0e 94 1b 1b 	call	0x3636	; 0x3636 <debug_tapping_key>
                    process_action(&tapping_key);
    37f2:	86 eb       	ldi	r24, 0xB6	; 182
    37f4:	91 e0       	ldi	r25, 0x01	; 1
    37f6:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    37fa:	80 91 bb 01 	lds	r24, 0x01BB
    37fe:	f8 01       	movw	r30, r16
    3800:	85 83       	std	Z+5, r24	; 0x05
                    // enqueue
                    return false;
    3802:	6c c1       	rjmp	.+728    	; 0x3adc <process_tapping+0x3ba>
    3804:	ef 28       	or	r14, r15
    3806:	31 f0       	breq	.+12     	; 0x3814 <process_tapping+0xf2>
    3808:	5f 3f       	cpi	r21, 0xFF	; 255
    380a:	31 f4       	brne	.+12     	; 0x3818 <process_tapping+0xf6>
    380c:	81 e0       	ldi	r24, 0x01	; 1
    380e:	4f 3f       	cpi	r20, 0xFF	; 255
    3810:	19 f4       	brne	.+6      	; 0x3818 <process_tapping+0xf6>
    3812:	03 c0       	rjmp	.+6      	; 0x381a <process_tapping+0xf8>
    3814:	81 e0       	ldi	r24, 0x01	; 1
    3816:	01 c0       	rjmp	.+2      	; 0x381a <process_tapping+0xf8>
    3818:	80 e0       	ldi	r24, 0x00	; 0
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    381a:	80 fd       	sbrc	r24, 0
    381c:	03 c0       	rjmp	.+6      	; 0x3824 <process_tapping+0x102>
    381e:	81 e0       	ldi	r24, 0x01	; 1
    3820:	86 27       	eor	r24, r22
    3822:	01 c0       	rjmp	.+2      	; 0x3826 <process_tapping+0x104>
    3824:	80 e0       	ldi	r24, 0x00	; 0
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    3826:	f8 2f       	mov	r31, r24
    3828:	f1 70       	andi	r31, 0x01	; 1
    382a:	ff 2e       	mov	r15, r31
    382c:	80 ff       	sbrs	r24, 0
    382e:	1c c0       	rjmp	.+56     	; 0x3868 <process_tapping+0x146>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3830:	80 91 84 01 	lds	r24, 0x0184
    3834:	20 91 85 01 	lds	r18, 0x0185
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    3838:	36 e0       	ldi	r19, 0x06	; 6
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    383a:	82 17       	cp	r24, r18
    383c:	09 f4       	brne	.+2      	; 0x3840 <process_tapping+0x11e>
    383e:	28 c1       	rjmp	.+592    	; 0x3a90 <process_tapping+0x36e>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    3840:	90 e0       	ldi	r25, 0x00	; 0
    3842:	38 9f       	mul	r19, r24
    3844:	f0 01       	movw	r30, r0
    3846:	39 9f       	mul	r19, r25
    3848:	f0 0d       	add	r31, r0
    384a:	11 24       	eor	r1, r1
    384c:	ea 57       	subi	r30, 0x7A	; 122
    384e:	fe 4f       	sbci	r31, 0xFE	; 254
    3850:	71 81       	ldd	r23, Z+1	; 0x01
    3852:	57 13       	cpse	r21, r23
    3854:	06 c0       	rjmp	.+12     	; 0x3862 <process_tapping+0x140>
    3856:	70 81       	ld	r23, Z
    3858:	47 13       	cpse	r20, r23
    385a:	03 c0       	rjmp	.+6      	; 0x3862 <process_tapping+0x140>
    385c:	72 81       	ldd	r23, Z+2	; 0x02
    385e:	67 13       	cpse	r22, r23
    3860:	03 c0       	rjmp	.+6      	; 0x3868 <process_tapping+0x146>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3862:	01 96       	adiw	r24, 0x01	; 1
    3864:	87 70       	andi	r24, 0x07	; 7
    3866:	e9 cf       	rjmp	.-46     	; 0x383a <process_tapping+0x118>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    3868:	d6 2e       	mov	r13, r22
    386a:	66 23       	and	r22, r22
    386c:	09 f4       	brne	.+2      	; 0x3870 <process_tapping+0x14e>
    386e:	36 c1       	rjmp	.+620    	; 0x3adc <process_tapping+0x3ba>
                        tapping_key.tap.interrupted = true;
    3870:	80 91 bb 01 	lds	r24, 0x01BB
    3874:	81 60       	ori	r24, 0x01	; 1
    3876:	80 93 bb 01 	sts	0x01BB, r24
    387a:	53 c0       	rjmp	.+166    	; 0x3922 <process_tapping+0x200>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    387c:	e5 13       	cpse	r30, r21
    387e:	08 c0       	rjmp	.+16     	; 0x3890 <process_tapping+0x16e>
    3880:	74 13       	cpse	r23, r20
    3882:	06 c0       	rjmp	.+12     	; 0x3890 <process_tapping+0x16e>
    3884:	61 11       	cpse	r22, r1
    3886:	04 c0       	rjmp	.+8      	; 0x3890 <process_tapping+0x16e>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    3888:	d8 01       	movw	r26, r16
    388a:	15 96       	adiw	r26, 0x05	; 5
    388c:	fc 93       	st	X, r31
    388e:	ae c0       	rjmp	.+348    	; 0x39ec <process_tapping+0x2ca>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    3890:	4d 87       	std	Y+13, r20	; 0x0d
    3892:	5e 87       	std	Y+14, r21	; 0x0e
    3894:	8d 85       	ldd	r24, Y+13	; 0x0d
    3896:	9e 85       	ldd	r25, Y+14	; 0x0e
    3898:	6a 8b       	std	Y+18, r22	; 0x12
    389a:	0e 94 b6 1a 	call	0x356c	; 0x356c <is_tap_key>
    389e:	6a 89       	ldd	r22, Y+18	; 0x12
    38a0:	88 23       	and	r24, r24
    38a2:	29 f1       	breq	.+74     	; 0x38ee <process_tapping+0x1cc>
    38a4:	d6 2e       	mov	r13, r22
    38a6:	66 23       	and	r22, r22
    38a8:	11 f1       	breq	.+68     	; 0x38ee <process_tapping+0x1cc>
                    if (tapping_key.tap.count > 1) {
    38aa:	20 91 bb 01 	lds	r18, 0x01BB
    38ae:	82 2f       	mov	r24, r18
    38b0:	82 95       	swap	r24
    38b2:	8f 70       	andi	r24, 0x0F	; 15
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	02 97       	sbiw	r24, 0x02	; 2
    38b8:	0c f4       	brge	.+2      	; 0x38bc <process_tapping+0x19a>
    38ba:	60 c0       	rjmp	.+192    	; 0x397c <process_tapping+0x25a>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    38bc:	80 91 b6 01 	lds	r24, 0x01B6
    38c0:	90 91 b7 01 	lds	r25, 0x01B7
    38c4:	98 87       	std	Y+8, r25	; 0x08
    38c6:	8f 83       	std	Y+7, r24	; 0x07
    38c8:	19 86       	std	Y+9, r1	; 0x09
    38ca:	fb 86       	std	Y+11, r15	; 0x0b
    38cc:	ea 86       	std	Y+10, r14	; 0x0a
    38ce:	2c 87       	std	Y+12, r18	; 0x0c
    38d0:	ce 01       	movw	r24, r28
    38d2:	07 96       	adiw	r24, 0x07	; 7
    38d4:	51 c0       	rjmp	.+162    	; 0x3978 <process_tapping+0x256>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    38d6:	e5 17       	cp	r30, r21
    38d8:	31 f1       	breq	.+76     	; 0x3926 <process_tapping+0x204>
                    keyp->tap = tapping_key.tap;
                    process_action(keyp);
                    tapping_key = (keyrecord_t){};
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    38da:	4d 87       	std	Y+13, r20	; 0x0d
    38dc:	5e 87       	std	Y+14, r21	; 0x0e
    38de:	8d 85       	ldd	r24, Y+13	; 0x0d
    38e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    38e2:	6a 8b       	std	Y+18, r22	; 0x12
    38e4:	0e 94 b6 1a 	call	0x356c	; 0x356c <is_tap_key>
    38e8:	6a 89       	ldd	r22, Y+18	; 0x12
    38ea:	81 11       	cpse	r24, r1
    38ec:	2e c0       	rjmp	.+92     	; 0x394a <process_tapping+0x228>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    38ee:	c8 01       	movw	r24, r16
    38f0:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <process_action>
    38f4:	a4 c0       	rjmp	.+328    	; 0x3a3e <process_tapping+0x31c>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    38f6:	8f 2f       	mov	r24, r31
    38f8:	80 7f       	andi	r24, 0xF0	; 240
    38fa:	69 f7       	brne	.-38     	; 0x38d6 <process_tapping+0x1b4>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    38fc:	7e 2d       	mov	r23, r14
    38fe:	f9 8a       	std	Y+17, r15	; 0x11
    3900:	e8 8a       	std	Y+16, r14	; 0x10
    3902:	89 89       	ldd	r24, Y+17	; 0x11
    3904:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <debug_event>
                process_action(&tapping_key);
    3908:	86 eb       	ldi	r24, 0xB6	; 182
    390a:	91 e0       	ldi	r25, 0x01	; 1
    390c:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <process_action>
                tapping_key = (keyrecord_t){};
    3910:	e6 eb       	ldi	r30, 0xB6	; 182
    3912:	f1 e0       	ldi	r31, 0x01	; 1
    3914:	86 e0       	ldi	r24, 0x06	; 6
    3916:	df 01       	movw	r26, r30
    3918:	1d 92       	st	X+, r1
    391a:	8a 95       	dec	r24
    391c:	e9 f7       	brne	.-6      	; 0x3918 <process_tapping+0x1f6>
                debug_tapping_key();
    391e:	0e 94 1b 1b 	call	0x3636	; 0x3636 <debug_tapping_key>
                return false;
    3922:	d1 2c       	mov	r13, r1
    3924:	db c0       	rjmp	.+438    	; 0x3adc <process_tapping+0x3ba>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3926:	74 13       	cpse	r23, r20
    3928:	d8 cf       	rjmp	.-80     	; 0x38da <process_tapping+0x1b8>
    392a:	61 11       	cpse	r22, r1
    392c:	d6 cf       	rjmp	.-84     	; 0x38da <process_tapping+0x1b8>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    392e:	d8 01       	movw	r26, r16
    3930:	15 96       	adiw	r26, 0x05	; 5
    3932:	fc 93       	st	X, r31
                    process_action(keyp);
    3934:	c8 01       	movw	r24, r16
    3936:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <process_action>
                    tapping_key = (keyrecord_t){};
    393a:	e6 eb       	ldi	r30, 0xB6	; 182
    393c:	f1 e0       	ldi	r31, 0x01	; 1
    393e:	86 e0       	ldi	r24, 0x06	; 6
    3940:	df 01       	movw	r26, r30
    3942:	1d 92       	st	X+, r1
    3944:	8a 95       	dec	r24
    3946:	e9 f7       	brne	.-6      	; 0x3942 <process_tapping+0x220>
                    return true;
    3948:	c9 c0       	rjmp	.+402    	; 0x3adc <process_tapping+0x3ba>
                }
                else if (is_tap_key(event.key) && event.pressed) {
    394a:	d6 2e       	mov	r13, r22
    394c:	66 23       	and	r22, r22
    394e:	79 f2       	breq	.-98     	; 0x38ee <process_tapping+0x1cc>
                    if (tapping_key.tap.count > 1) {
    3950:	20 91 bb 01 	lds	r18, 0x01BB
    3954:	82 2f       	mov	r24, r18
    3956:	82 95       	swap	r24
    3958:	8f 70       	andi	r24, 0x0F	; 15
    395a:	90 e0       	ldi	r25, 0x00	; 0
    395c:	02 97       	sbiw	r24, 0x02	; 2
    395e:	74 f0       	brlt	.+28     	; 0x397c <process_tapping+0x25a>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    3960:	80 91 b6 01 	lds	r24, 0x01B6
    3964:	90 91 b7 01 	lds	r25, 0x01B7
    3968:	9a 83       	std	Y+2, r25	; 0x02
    396a:	89 83       	std	Y+1, r24	; 0x01
    396c:	1b 82       	std	Y+3, r1	; 0x03
    396e:	fd 82       	std	Y+5, r15	; 0x05
    3970:	ec 82       	std	Y+4, r14	; 0x04
    3972:	2e 83       	std	Y+6, r18	; 0x06
    3974:	ce 01       	movw	r24, r28
    3976:	01 96       	adiw	r24, 0x01	; 1
    3978:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last timeout tap(1).\n");
                    }
                    tapping_key = *keyp;
    397c:	86 e0       	ldi	r24, 0x06	; 6
    397e:	f8 01       	movw	r30, r16
    3980:	a6 eb       	ldi	r26, 0xB6	; 182
    3982:	b1 e0       	ldi	r27, 0x01	; 1
    3984:	01 90       	ld	r0, Z+
    3986:	0d 92       	st	X+, r0
    3988:	8a 95       	dec	r24
    398a:	e1 f7       	brne	.-8      	; 0x3984 <process_tapping+0x262>
                    waiting_buffer_scan_tap();
    398c:	0e 94 29 1b 	call	0x3652	; 0x3652 <waiting_buffer_scan_tap>
    3990:	6f c0       	rjmp	.+222    	; 0x3a70 <process_tapping+0x34e>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    3992:	e2 16       	cp	r14, r18
    3994:	f3 06       	cpc	r15, r19
    3996:	28 f0       	brcs	.+10     	; 0x39a2 <process_tapping+0x280>
    3998:	c7 01       	movw	r24, r14
    399a:	82 1b       	sub	r24, r18
    399c:	93 0b       	sbc	r25, r19
    399e:	9c 01       	movw	r18, r24
    39a0:	04 c0       	rjmp	.+8      	; 0x39aa <process_tapping+0x288>
    39a2:	20 95       	com	r18
    39a4:	30 95       	com	r19
    39a6:	2e 0d       	add	r18, r14
    39a8:	3f 1d       	adc	r19, r15
    39aa:	28 3c       	cpi	r18, 0xC8	; 200
    39ac:	31 05       	cpc	r19, r1
    39ae:	08 f0       	brcs	.+2      	; 0x39b2 <process_tapping+0x290>
    39b0:	52 c0       	rjmp	.+164    	; 0x3a56 <process_tapping+0x334>
            if (event.pressed) {
    39b2:	d6 2e       	mov	r13, r22
    39b4:	66 23       	and	r22, r22
    39b6:	09 f4       	brne	.+2      	; 0x39ba <process_tapping+0x298>
    39b8:	9a cf       	rjmp	.-204    	; 0x38ee <process_tapping+0x1cc>
                if (IS_TAPPING_KEY(event.key)) {
    39ba:	e5 13       	cpse	r30, r21
    39bc:	2c c0       	rjmp	.+88     	; 0x3a16 <process_tapping+0x2f4>
    39be:	74 13       	cpse	r23, r20
    39c0:	2a c0       	rjmp	.+84     	; 0x3a16 <process_tapping+0x2f4>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    39c2:	80 91 bb 01 	lds	r24, 0x01BB
    39c6:	80 fd       	sbrc	r24, 0
    39c8:	1d c0       	rjmp	.+58     	; 0x3a04 <process_tapping+0x2e2>
    39ca:	98 2f       	mov	r25, r24
    39cc:	92 95       	swap	r25
    39ce:	9f 70       	andi	r25, 0x0F	; 15
    39d0:	c9 f0       	breq	.+50     	; 0x3a04 <process_tapping+0x2e2>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    39d2:	d8 01       	movw	r26, r16
    39d4:	15 96       	adiw	r26, 0x05	; 5
    39d6:	8c 93       	st	X, r24
    39d8:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    39da:	9f 30       	cpi	r25, 0x0F	; 15
    39dc:	39 f0       	breq	.+14     	; 0x39ec <process_tapping+0x2ca>
    39de:	9f 5f       	subi	r25, 0xFF	; 255
    39e0:	92 95       	swap	r25
    39e2:	90 7f       	andi	r25, 0xF0	; 240
    39e4:	8f 70       	andi	r24, 0x0F	; 15
    39e6:	89 2b       	or	r24, r25
    39e8:	15 96       	adiw	r26, 0x05	; 5
    39ea:	8c 93       	st	X, r24
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    39ec:	c8 01       	movw	r24, r16
    39ee:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <process_action>
                        tapping_key = *keyp;
    39f2:	86 e0       	ldi	r24, 0x06	; 6
    39f4:	f8 01       	movw	r30, r16
    39f6:	a6 eb       	ldi	r26, 0xB6	; 182
    39f8:	b1 e0       	ldi	r27, 0x01	; 1
    39fa:	01 90       	ld	r0, Z+
    39fc:	0d 92       	st	X+, r0
    39fe:	8a 95       	dec	r24
    3a00:	e1 f7       	brne	.-8      	; 0x39fa <process_tapping+0x2d8>
    3a02:	36 c0       	rjmp	.+108    	; 0x3a70 <process_tapping+0x34e>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    3a04:	86 e0       	ldi	r24, 0x06	; 6
    3a06:	f8 01       	movw	r30, r16
    3a08:	a6 eb       	ldi	r26, 0xB6	; 182
    3a0a:	b1 e0       	ldi	r27, 0x01	; 1
    3a0c:	01 90       	ld	r0, Z+
    3a0e:	0d 92       	st	X+, r0
    3a10:	8a 95       	dec	r24
    3a12:	e1 f7       	brne	.-8      	; 0x3a0c <process_tapping+0x2ea>
                        return true;
    3a14:	63 c0       	rjmp	.+198    	; 0x3adc <process_tapping+0x3ba>
                    }
                } else if (is_tap_key(event.key)) {
    3a16:	4d 87       	std	Y+13, r20	; 0x0d
    3a18:	5e 87       	std	Y+14, r21	; 0x0e
    3a1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a1e:	0e 94 b6 1a 	call	0x356c	; 0x356c <is_tap_key>
    3a22:	88 23       	and	r24, r24
    3a24:	79 f0       	breq	.+30     	; 0x3a44 <process_tapping+0x322>
                    // Sequential tap can be interfered with other tap key.
                    debug("Tapping: Start with interfering other tap.\n");
                    tapping_key = *keyp;
    3a26:	86 e0       	ldi	r24, 0x06	; 6
    3a28:	f8 01       	movw	r30, r16
    3a2a:	a6 eb       	ldi	r26, 0xB6	; 182
    3a2c:	b1 e0       	ldi	r27, 0x01	; 1
    3a2e:	01 90       	ld	r0, Z+
    3a30:	0d 92       	st	X+, r0
    3a32:	8a 95       	dec	r24
    3a34:	e1 f7       	brne	.-8      	; 0x3a2e <process_tapping+0x30c>
                    waiting_buffer_scan_tap();
    3a36:	0e 94 29 1b 	call	0x3652	; 0x3652 <waiting_buffer_scan_tap>
                    debug_tapping_key();
    3a3a:	0e 94 1b 1b 	call	0x3636	; 0x3636 <debug_tapping_key>
                    return true;
    3a3e:	dd 24       	eor	r13, r13
    3a40:	d3 94       	inc	r13
    3a42:	4c c0       	rjmp	.+152    	; 0x3adc <process_tapping+0x3ba>
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    3a44:	80 91 bb 01 	lds	r24, 0x01BB
    3a48:	81 60       	ori	r24, 0x01	; 1
    3a4a:	80 93 bb 01 	sts	0x01BB, r24
                    process_action(keyp);
    3a4e:	c8 01       	movw	r24, r16
    3a50:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <process_action>
                    return true;
    3a54:	43 c0       	rjmp	.+134    	; 0x3adc <process_tapping+0x3ba>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    3a56:	7e 2d       	mov	r23, r14
    3a58:	f9 8a       	std	Y+17, r15	; 0x11
    3a5a:	e8 8a       	std	Y+16, r14	; 0x10
    3a5c:	89 89       	ldd	r24, Y+17	; 0x11
    3a5e:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <debug_event>
            tapping_key = (keyrecord_t){};
    3a62:	e6 eb       	ldi	r30, 0xB6	; 182
    3a64:	f1 e0       	ldi	r31, 0x01	; 1
    3a66:	86 e0       	ldi	r24, 0x06	; 6
    3a68:	df 01       	movw	r26, r30
    3a6a:	1d 92       	st	X+, r1
    3a6c:	8a 95       	dec	r24
    3a6e:	e9 f7       	brne	.-6      	; 0x3a6a <process_tapping+0x348>
            debug_tapping_key();
    3a70:	0e 94 1b 1b 	call	0x3636	; 0x3636 <debug_tapping_key>
            return false;
    3a74:	33 c0       	rjmp	.+102    	; 0x3adc <process_tapping+0x3ba>
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    3a76:	66 23       	and	r22, r22
    3a78:	09 f4       	brne	.+2      	; 0x3a7c <process_tapping+0x35a>
    3a7a:	39 cf       	rjmp	.-398    	; 0x38ee <process_tapping+0x1cc>
    3a7c:	4d 87       	std	Y+13, r20	; 0x0d
    3a7e:	5e 87       	std	Y+14, r21	; 0x0e
    3a80:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a82:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a84:	0e 94 b6 1a 	call	0x356c	; 0x356c <is_tap_key>
    3a88:	88 23       	and	r24, r24
    3a8a:	09 f4       	brne	.+2      	; 0x3a8e <process_tapping+0x36c>
    3a8c:	30 cf       	rjmp	.-416    	; 0x38ee <process_tapping+0x1cc>
    3a8e:	cb cf       	rjmp	.-106    	; 0x3a26 <process_tapping+0x304>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    3a90:	4d 87       	std	Y+13, r20	; 0x0d
    3a92:	5e 87       	std	Y+14, r21	; 0x0e
    3a94:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a96:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a98:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <layer_switch_get_action>
                    switch (action.kind.id) {
    3a9c:	29 2f       	mov	r18, r25
    3a9e:	22 95       	swap	r18
    3aa0:	2f 70       	andi	r18, 0x0F	; 15
    3aa2:	30 e0       	ldi	r19, 0x00	; 0
    3aa4:	22 30       	cpi	r18, 0x02	; 2
    3aa6:	31 05       	cpc	r19, r1
    3aa8:	2c f4       	brge	.+10     	; 0x3ab4 <process_tapping+0x392>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    3aaa:	9f 70       	andi	r25, 0x0F	; 15
    3aac:	41 f0       	breq	.+16     	; 0x3abe <process_tapping+0x39c>
    3aae:	81 11       	cpse	r24, r1
    3ab0:	06 c0       	rjmp	.+12     	; 0x3abe <process_tapping+0x39c>
    3ab2:	0c c0       	rjmp	.+24     	; 0x3acc <process_tapping+0x3aa>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
    3ab4:	24 30       	cpi	r18, 0x04	; 4
    3ab6:	31 05       	cpc	r19, r1
    3ab8:	2c f4       	brge	.+10     	; 0x3ac4 <process_tapping+0x3a2>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    3aba:	9f 70       	andi	r25, 0x0F	; 15
    3abc:	49 f4       	brne	.+18     	; 0x3ad0 <process_tapping+0x3ae>
                            if (IS_MOD(action.key.code)) return false;
    3abe:	80 5e       	subi	r24, 0xE0	; 224
    3ac0:	88 30       	cpi	r24, 0x08	; 8
    3ac2:	20 f0       	brcs	.+8      	; 0x3acc <process_tapping+0x3aa>
                            break;
                    }
                    // Release of key should be process immediately.
                    debug("Tapping: release event of a key pressed before tapping\n");
                    process_action(keyp);
    3ac4:	c8 01       	movw	r24, r16
    3ac6:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <process_action>
                    return true;
    3aca:	cf 2c       	mov	r12, r15
    3acc:	dc 2c       	mov	r13, r12
    3ace:	06 c0       	rjmp	.+12     	; 0x3adc <process_tapping+0x3ba>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    3ad0:	d8 01       	movw	r26, r16
    3ad2:	15 96       	adiw	r26, 0x05	; 5
    3ad4:	9c 91       	ld	r25, X
    3ad6:	90 7f       	andi	r25, 0xF0	; 240
    3ad8:	91 f7       	brne	.-28     	; 0x3abe <process_tapping+0x39c>
    3ada:	f8 cf       	rjmp	.-16     	; 0x3acc <process_tapping+0x3aa>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    3adc:	8d 2d       	mov	r24, r13
    3ade:	62 96       	adiw	r28, 0x12	; 18
    3ae0:	0f b6       	in	r0, 0x3f	; 63
    3ae2:	f8 94       	cli
    3ae4:	de bf       	out	0x3e, r29	; 62
    3ae6:	0f be       	out	0x3f, r0	; 63
    3ae8:	cd bf       	out	0x3d, r28	; 61
    3aea:	df 91       	pop	r29
    3aec:	cf 91       	pop	r28
    3aee:	1f 91       	pop	r17
    3af0:	0f 91       	pop	r16
    3af2:	ff 90       	pop	r15
    3af4:	ef 90       	pop	r14
    3af6:	df 90       	pop	r13
    3af8:	cf 90       	pop	r12
    3afa:	08 95       	ret

00003afc <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    3afc:	1f 93       	push	r17
    3afe:	cf 93       	push	r28
    3b00:	df 93       	push	r29
    3b02:	cd b7       	in	r28, 0x3d	; 61
    3b04:	de b7       	in	r29, 0x3e	; 62
    3b06:	2c 97       	sbiw	r28, 0x0c	; 12
    3b08:	0f b6       	in	r0, 0x3f	; 63
    3b0a:	f8 94       	cli
    3b0c:	de bf       	out	0x3e, r29	; 62
    3b0e:	0f be       	out	0x3f, r0	; 63
    3b10:	cd bf       	out	0x3d, r28	; 61
    3b12:	4f 83       	std	Y+7, r20	; 0x07
    3b14:	58 87       	std	Y+8, r21	; 0x08
    3b16:	69 87       	std	Y+9, r22	; 0x09
    3b18:	7a 87       	std	Y+10, r23	; 0x0a
    3b1a:	8b 87       	std	Y+11, r24	; 0x0b
    3b1c:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    3b1e:	ce 01       	movw	r24, r28
    3b20:	07 96       	adiw	r24, 0x07	; 7
    3b22:	0e 94 91 1b 	call	0x3722	; 0x3722 <process_tapping>
    3b26:	88 23       	and	r24, r24
    3b28:	c1 f0       	breq	.+48     	; 0x3b5a <action_tapping_process+0x5e>
        if (!IS_NOEVENT(record.event)) {
    3b2a:	2f 81       	ldd	r18, Y+7	; 0x07
    3b2c:	38 85       	ldd	r19, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    3b2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b30:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b32:	89 2b       	or	r24, r25
    3b34:	31 f0       	breq	.+12     	; 0x3b42 <action_tapping_process+0x46>
    3b36:	3f 3f       	cpi	r19, 0xFF	; 255
    3b38:	11 f0       	breq	.+4      	; 0x3b3e <action_tapping_process+0x42>
    3b3a:	80 e0       	ldi	r24, 0x00	; 0
    3b3c:	03 c0       	rjmp	.+6      	; 0x3b44 <action_tapping_process+0x48>
    3b3e:	2f 3f       	cpi	r18, 0xFF	; 255
    3b40:	e1 f7       	brne	.-8      	; 0x3b3a <action_tapping_process+0x3e>
    3b42:	81 e0       	ldi	r24, 0x01	; 1
    3b44:	81 11       	cpse	r24, r1
    3b46:	47 c0       	rjmp	.+142    	; 0x3bd6 <action_tapping_process+0xda>
            debug("processed: "); debug_record(record); debug("\n");
    3b48:	4f 81       	ldd	r20, Y+7	; 0x07
    3b4a:	58 85       	ldd	r21, Y+8	; 0x08
    3b4c:	69 85       	ldd	r22, Y+9	; 0x09
    3b4e:	7a 85       	ldd	r23, Y+10	; 0x0a
    3b50:	8b 85       	ldd	r24, Y+11	; 0x0b
    3b52:	9c 85       	ldd	r25, Y+12	; 0x0c
    3b54:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <debug_record>
    3b58:	3e c0       	rjmp	.+124    	; 0x3bd6 <action_tapping_process+0xda>
    3b5a:	86 e0       	ldi	r24, 0x06	; 6
    3b5c:	fe 01       	movw	r30, r28
    3b5e:	37 96       	adiw	r30, 0x07	; 7
    3b60:	de 01       	movw	r26, r28
    3b62:	11 96       	adiw	r26, 0x01	; 1
    3b64:	01 90       	ld	r0, Z+
    3b66:	0d 92       	st	X+, r0
    3b68:	8a 95       	dec	r24
    3b6a:	e1 f7       	brne	.-8      	; 0x3b64 <action_tapping_process+0x68>
    3b6c:	ff 81       	ldd	r31, Y+7	; 0x07
    3b6e:	e8 85       	ldd	r30, Y+8	; 0x08
    3b70:	4a 85       	ldd	r20, Y+10	; 0x0a
    3b72:	5b 85       	ldd	r21, Y+11	; 0x0b
    3b74:	41 15       	cp	r20, r1
    3b76:	51 05       	cpc	r21, r1
    3b78:	31 f0       	breq	.+12     	; 0x3b86 <action_tapping_process+0x8a>
    3b7a:	ef 3f       	cpi	r30, 0xFF	; 255
    3b7c:	31 f4       	brne	.+12     	; 0x3b8a <action_tapping_process+0x8e>
    3b7e:	81 e0       	ldi	r24, 0x01	; 1
    3b80:	ff 3f       	cpi	r31, 0xFF	; 255
    3b82:	19 f4       	brne	.+6      	; 0x3b8a <action_tapping_process+0x8e>
    3b84:	03 c0       	rjmp	.+6      	; 0x3b8c <action_tapping_process+0x90>
    3b86:	81 e0       	ldi	r24, 0x01	; 1
    3b88:	01 c0       	rjmp	.+2      	; 0x3b8c <action_tapping_process+0x90>
    3b8a:	80 e0       	ldi	r24, 0x00	; 0
/*
 * Waiting buffer
 */
bool waiting_buffer_enq(keyrecord_t record)
{
    if (IS_NOEVENT(record.event)) {
    3b8c:	80 fd       	sbrc	r24, 0
    3b8e:	23 c0       	rjmp	.+70     	; 0x3bd6 <action_tapping_process+0xda>
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    3b90:	20 91 85 01 	lds	r18, 0x0185
    3b94:	30 e0       	ldi	r19, 0x00	; 0
    3b96:	c9 01       	movw	r24, r18
    3b98:	01 96       	adiw	r24, 0x01	; 1
    3b9a:	87 70       	andi	r24, 0x07	; 7
    3b9c:	99 27       	eor	r25, r25
    3b9e:	60 91 84 01 	lds	r22, 0x0184
    3ba2:	70 e0       	ldi	r23, 0x00	; 0
    3ba4:	86 17       	cp	r24, r22
    3ba6:	97 07       	cpc	r25, r23
    3ba8:	f1 f1       	breq	.+124    	; 0x3c26 <action_tapping_process+0x12a>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    3baa:	f9 83       	std	Y+1, r31	; 0x01
    3bac:	ea 83       	std	Y+2, r30	; 0x02
    3bae:	5d 83       	std	Y+5, r21	; 0x05
    3bb0:	4c 83       	std	Y+4, r20	; 0x04
    3bb2:	96 e0       	ldi	r25, 0x06	; 6
    3bb4:	92 9f       	mul	r25, r18
    3bb6:	d0 01       	movw	r26, r0
    3bb8:	93 9f       	mul	r25, r19
    3bba:	b0 0d       	add	r27, r0
    3bbc:	11 24       	eor	r1, r1
    3bbe:	aa 57       	subi	r26, 0x7A	; 122
    3bc0:	be 4f       	sbci	r27, 0xFE	; 254
    3bc2:	fe 01       	movw	r30, r28
    3bc4:	31 96       	adiw	r30, 0x01	; 1
    3bc6:	01 90       	ld	r0, Z+
    3bc8:	0d 92       	st	X+, r0
    3bca:	9a 95       	dec	r25
    3bcc:	e1 f7       	brne	.-8      	; 0x3bc6 <action_tapping_process+0xca>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    3bce:	80 93 85 01 	sts	0x0185, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    3bd2:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <debug_waiting_buffer>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3bd6:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3bd8:	80 91 84 01 	lds	r24, 0x0184
    3bdc:	90 91 85 01 	lds	r25, 0x0185
    3be0:	89 17       	cp	r24, r25
    3be2:	79 f1       	breq	.+94     	; 0x3c42 <action_tapping_process+0x146>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3be4:	18 9f       	mul	r17, r24
    3be6:	c0 01       	movw	r24, r0
    3be8:	11 24       	eor	r1, r1
    3bea:	8a 57       	subi	r24, 0x7A	; 122
    3bec:	9e 4f       	sbci	r25, 0xFE	; 254
    3bee:	0e 94 91 1b 	call	0x3722	; 0x3722 <process_tapping>
    3bf2:	88 23       	and	r24, r24
    3bf4:	31 f1       	breq	.+76     	; 0x3c42 <action_tapping_process+0x146>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    3bf6:	e0 91 84 01 	lds	r30, 0x0184
    3bfa:	1e 9f       	mul	r17, r30
    3bfc:	f0 01       	movw	r30, r0
    3bfe:	11 24       	eor	r1, r1
    3c00:	ea 57       	subi	r30, 0x7A	; 122
    3c02:	fe 4f       	sbci	r31, 0xFE	; 254
    3c04:	40 81       	ld	r20, Z
    3c06:	51 81       	ldd	r21, Z+1	; 0x01
    3c08:	62 81       	ldd	r22, Z+2	; 0x02
    3c0a:	73 81       	ldd	r23, Z+3	; 0x03
    3c0c:	84 81       	ldd	r24, Z+4	; 0x04
    3c0e:	95 81       	ldd	r25, Z+5	; 0x05
    3c10:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3c14:	80 91 84 01 	lds	r24, 0x0184
    3c18:	90 e0       	ldi	r25, 0x00	; 0
    3c1a:	01 96       	adiw	r24, 0x01	; 1
    3c1c:	87 70       	andi	r24, 0x07	; 7
    3c1e:	99 27       	eor	r25, r25
    3c20:	80 93 84 01 	sts	0x0184, r24
    3c24:	d9 cf       	rjmp	.-78     	; 0x3bd8 <action_tapping_process+0xdc>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    3c26:	0e 94 b2 1a 	call	0x3564	; 0x3564 <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    3c2a:	10 92 85 01 	sts	0x0185, r1
    waiting_buffer_tail = 0;
    3c2e:	10 92 84 01 	sts	0x0184, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    3c32:	e6 eb       	ldi	r30, 0xB6	; 182
    3c34:	f1 e0       	ldi	r31, 0x01	; 1
    3c36:	86 e0       	ldi	r24, 0x06	; 6
    3c38:	df 01       	movw	r26, r30
    3c3a:	1d 92       	st	X+, r1
    3c3c:	8a 95       	dec	r24
    3c3e:	e9 f7       	brne	.-6      	; 0x3c3a <action_tapping_process+0x13e>
    3c40:	ca cf       	rjmp	.-108    	; 0x3bd6 <action_tapping_process+0xda>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    3c42:	2c 96       	adiw	r28, 0x0c	; 12
    3c44:	0f b6       	in	r0, 0x3f	; 63
    3c46:	f8 94       	cli
    3c48:	de bf       	out	0x3e, r29	; 62
    3c4a:	0f be       	out	0x3f, r0	; 63
    3c4c:	cd bf       	out	0x3d, r28	; 61
    3c4e:	df 91       	pop	r29
    3c50:	cf 91       	pop	r28
    3c52:	1f 91       	pop	r17
    3c54:	08 95       	ret

00003c56 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    3c56:	ef 92       	push	r14
    3c58:	ff 92       	push	r15
    3c5a:	0f 93       	push	r16
    3c5c:	1f 93       	push	r17
    3c5e:	cf 93       	push	r28
    3c60:	df 93       	push	r29
    3c62:	fc 01       	movw	r30, r24
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    3c64:	00 97       	sbiw	r24, 0x00	; 0
    3c66:	09 f4       	brne	.+2      	; 0x3c6a <action_macro_play+0x14>
    3c68:	6f c0       	rjmp	.+222    	; 0x3d48 <action_macro_play+0xf2>
    3c6a:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    3c6c:	ee 24       	eor	r14, r14
    3c6e:	e3 94       	inc	r14
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    3c70:	ef 01       	movw	r28, r30
    3c72:	21 96       	adiw	r28, 0x01	; 1
    3c74:	84 91       	lpm	r24, Z
    3c76:	84 37       	cpi	r24, 0x74	; 116
    3c78:	40 f4       	brcc	.+16     	; 0x3c8a <action_macro_play+0x34>
    3c7a:	84 30       	cpi	r24, 0x04	; 4
    3c7c:	08 f0       	brcs	.+2      	; 0x3c80 <action_macro_play+0x2a>
    3c7e:	55 c0       	rjmp	.+170    	; 0x3d2a <action_macro_play+0xd4>
    3c80:	81 30       	cpi	r24, 0x01	; 1
    3c82:	81 f0       	breq	.+32     	; 0x3ca4 <action_macro_play+0x4e>
    3c84:	82 30       	cpi	r24, 0x02	; 2
    3c86:	21 f1       	breq	.+72     	; 0x3cd0 <action_macro_play+0x7a>
    3c88:	5f c0       	rjmp	.+190    	; 0x3d48 <action_macro_play+0xf2>
    3c8a:	85 37       	cpi	r24, 0x75	; 117
    3c8c:	09 f4       	brne	.+2      	; 0x3c90 <action_macro_play+0x3a>
    3c8e:	47 c0       	rjmp	.+142    	; 0x3d1e <action_macro_play+0xc8>
    3c90:	c0 f1       	brcs	.+112    	; 0x3d02 <action_macro_play+0xac>
    3c92:	9c e7       	ldi	r25, 0x7C	; 124
    3c94:	98 0f       	add	r25, r24
    3c96:	90 37       	cpi	r25, 0x70	; 112
    3c98:	08 f0       	brcs	.+2      	; 0x3c9c <action_macro_play+0x46>
    3c9a:	56 c0       	rjmp	.+172    	; 0x3d48 <action_macro_play+0xf2>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    3c9c:	8f 77       	andi	r24, 0x7F	; 127
    3c9e:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <unregister_code>
                break;
    3ca2:	45 c0       	rjmp	.+138    	; 0x3d2e <action_macro_play+0xd8>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    3ca4:	8f 01       	movw	r16, r30
    3ca6:	0e 5f       	subi	r16, 0xFE	; 254
    3ca8:	1f 4f       	sbci	r17, 0xFF	; 255
    3caa:	fe 01       	movw	r30, r28
    3cac:	84 91       	lpm	r24, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    3cae:	90 e2       	ldi	r25, 0x20	; 32
    3cb0:	98 0f       	add	r25, r24
    3cb2:	98 30       	cpi	r25, 0x08	; 8
    3cb4:	50 f4       	brcc	.+20     	; 0x3cca <action_macro_play+0x74>
                    add_weak_mods(MOD_BIT(macro));
    3cb6:	87 70       	andi	r24, 0x07	; 7
    3cb8:	fe 2d       	mov	r31, r14
    3cba:	01 c0       	rjmp	.+2      	; 0x3cbe <action_macro_play+0x68>
    3cbc:	ff 0f       	add	r31, r31
    3cbe:	8a 95       	dec	r24
    3cc0:	ea f7       	brpl	.-6      	; 0x3cbc <action_macro_play+0x66>
    3cc2:	8f 2f       	mov	r24, r31
    3cc4:	0e 94 ce 20 	call	0x419c	; 0x419c <add_weak_mods>
    3cc8:	15 c0       	rjmp	.+42     	; 0x3cf4 <action_macro_play+0x9e>
                    send_keyboard_report();
                } else {
                    register_code(macro);
    3cca:	0e 94 77 16 	call	0x2cee	; 0x2cee <register_code>
    3cce:	14 c0       	rjmp	.+40     	; 0x3cf8 <action_macro_play+0xa2>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    3cd0:	8f 01       	movw	r16, r30
    3cd2:	0e 5f       	subi	r16, 0xFE	; 254
    3cd4:	1f 4f       	sbci	r17, 0xFF	; 255
    3cd6:	fe 01       	movw	r30, r28
    3cd8:	84 91       	lpm	r24, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    3cda:	90 e2       	ldi	r25, 0x20	; 32
    3cdc:	98 0f       	add	r25, r24
    3cde:	98 30       	cpi	r25, 0x08	; 8
    3ce0:	68 f4       	brcc	.+26     	; 0x3cfc <action_macro_play+0xa6>
                    del_weak_mods(MOD_BIT(macro));
    3ce2:	87 70       	andi	r24, 0x07	; 7
    3ce4:	fe 2d       	mov	r31, r14
    3ce6:	01 c0       	rjmp	.+2      	; 0x3cea <action_macro_play+0x94>
    3ce8:	ff 0f       	add	r31, r31
    3cea:	8a 95       	dec	r24
    3cec:	ea f7       	brpl	.-6      	; 0x3ce8 <action_macro_play+0x92>
    3cee:	8f 2f       	mov	r24, r31
    3cf0:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <del_weak_mods>
                    send_keyboard_report();
    3cf4:	0e 94 f7 20 	call	0x41ee	; 0x41ee <send_keyboard_report>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    3cf8:	e8 01       	movw	r28, r16
    3cfa:	19 c0       	rjmp	.+50     	; 0x3d2e <action_macro_play+0xd8>
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    del_weak_mods(MOD_BIT(macro));
                    send_keyboard_report();
                } else {
                    unregister_code(macro);
    3cfc:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <unregister_code>
    3d00:	fb cf       	rjmp	.-10     	; 0x3cf8 <action_macro_play+0xa2>
                }
                break;
            case WAIT:
                MACRO_READ();
    3d02:	cf 01       	movw	r24, r30
    3d04:	02 96       	adiw	r24, 0x02	; 2
    3d06:	fe 01       	movw	r30, r28
    3d08:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    3d0a:	cc 23       	and	r28, r28
    3d0c:	61 f0       	breq	.+24     	; 0x3d26 <action_macro_play+0xd0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3d0e:	ef e9       	ldi	r30, 0x9F	; 159
    3d10:	ff e0       	ldi	r31, 0x0F	; 15
    3d12:	31 97       	sbiw	r30, 0x01	; 1
    3d14:	f1 f7       	brne	.-4      	; 0x3d12 <action_macro_play+0xbc>
    3d16:	00 c0       	rjmp	.+0      	; 0x3d18 <action_macro_play+0xc2>
    3d18:	00 00       	nop
    3d1a:	c1 50       	subi	r28, 0x01	; 1
    3d1c:	f6 cf       	rjmp	.-20     	; 0x3d0a <action_macro_play+0xb4>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    3d1e:	cf 01       	movw	r24, r30
    3d20:	02 96       	adiw	r24, 0x02	; 2
    3d22:	fe 01       	movw	r30, r28
    3d24:	f4 90       	lpm	r15, Z
    3d26:	ec 01       	movw	r28, r24
                dprintf("INTERVAL(%u)\n", interval);
                break;
    3d28:	02 c0       	rjmp	.+4      	; 0x3d2e <action_macro_play+0xd8>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    3d2a:	0e 94 77 16 	call	0x2cee	; 0x2cee <register_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    3d2e:	8f 2d       	mov	r24, r15
    3d30:	88 23       	and	r24, r24
    3d32:	41 f0       	breq	.+16     	; 0x3d44 <action_macro_play+0xee>
    3d34:	ef e9       	ldi	r30, 0x9F	; 159
    3d36:	ff e0       	ldi	r31, 0x0F	; 15
    3d38:	31 97       	sbiw	r30, 0x01	; 1
    3d3a:	f1 f7       	brne	.-4      	; 0x3d38 <action_macro_play+0xe2>
    3d3c:	00 c0       	rjmp	.+0      	; 0x3d3e <action_macro_play+0xe8>
    3d3e:	00 00       	nop
    3d40:	81 50       	subi	r24, 0x01	; 1
    3d42:	f6 cf       	rjmp	.-20     	; 0x3d30 <action_macro_play+0xda>
    3d44:	fe 01       	movw	r30, r28
    3d46:	94 cf       	rjmp	.-216    	; 0x3c70 <action_macro_play+0x1a>
    }
}
    3d48:	df 91       	pop	r29
    3d4a:	cf 91       	pop	r28
    3d4c:	1f 91       	pop	r17
    3d4e:	0f 91       	pop	r16
    3d50:	ff 90       	pop	r15
    3d52:	ef 90       	pop	r14
    3d54:	08 95       	ret

00003d56 <default_layer_debug>:
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void default_layer_debug(void)
{
    3d56:	08 95       	ret

00003d58 <default_layer_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3d58:	60 93 c0 01 	sts	0x01C0, r22
    3d5c:	70 93 c1 01 	sts	0x01C1, r23
    3d60:	80 93 c2 01 	sts	0x01C2, r24
    3d64:	90 93 c3 01 	sts	0x01C3, r25
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3d68:	0c 94 a0 1a 	jmp	0x3540	; 0x3540 <clear_keyboard_but_mods>

00003d6c <default_layer_or>:
    default_layer_state_set(state);
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    3d6c:	0f 93       	push	r16
    3d6e:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    3d70:	00 91 c0 01 	lds	r16, 0x01C0
    3d74:	10 91 c1 01 	lds	r17, 0x01C1
    3d78:	20 91 c2 01 	lds	r18, 0x01C2
    3d7c:	30 91 c3 01 	lds	r19, 0x01C3
    3d80:	06 2b       	or	r16, r22
    3d82:	17 2b       	or	r17, r23
    3d84:	28 2b       	or	r18, r24
    3d86:	39 2b       	or	r19, r25

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3d88:	00 93 c0 01 	sts	0x01C0, r16
    3d8c:	10 93 c1 01 	sts	0x01C1, r17
    3d90:	20 93 c2 01 	sts	0x01C2, r18
    3d94:	30 93 c3 01 	sts	0x01C3, r19

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
    3d98:	1f 91       	pop	r17
    3d9a:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3d9c:	0c 94 a0 1a 	jmp	0x3540	; 0x3540 <clear_keyboard_but_mods>

00003da0 <default_layer_and>:
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    3da0:	0f 93       	push	r16
    3da2:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    3da4:	00 91 c0 01 	lds	r16, 0x01C0
    3da8:	10 91 c1 01 	lds	r17, 0x01C1
    3dac:	20 91 c2 01 	lds	r18, 0x01C2
    3db0:	30 91 c3 01 	lds	r19, 0x01C3
    3db4:	06 23       	and	r16, r22
    3db6:	17 23       	and	r17, r23
    3db8:	28 23       	and	r18, r24
    3dba:	39 23       	and	r19, r25

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3dbc:	00 93 c0 01 	sts	0x01C0, r16
    3dc0:	10 93 c1 01 	sts	0x01C1, r17
    3dc4:	20 93 c2 01 	sts	0x01C2, r18
    3dc8:	30 93 c3 01 	sts	0x01C3, r19
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
    3dcc:	1f 91       	pop	r17
    3dce:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3dd0:	0c 94 a0 1a 	jmp	0x3540	; 0x3540 <clear_keyboard_but_mods>

00003dd4 <default_layer_xor>:
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    3dd4:	0f 93       	push	r16
    3dd6:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    3dd8:	00 91 c0 01 	lds	r16, 0x01C0
    3ddc:	10 91 c1 01 	lds	r17, 0x01C1
    3de0:	20 91 c2 01 	lds	r18, 0x01C2
    3de4:	30 91 c3 01 	lds	r19, 0x01C3
    3de8:	06 27       	eor	r16, r22
    3dea:	17 27       	eor	r17, r23
    3dec:	28 27       	eor	r18, r24
    3dee:	39 27       	eor	r19, r25

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3df0:	00 93 c0 01 	sts	0x01C0, r16
    3df4:	10 93 c1 01 	sts	0x01C1, r17
    3df8:	20 93 c2 01 	sts	0x01C2, r18
    3dfc:	30 93 c3 01 	sts	0x01C3, r19
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
}
    3e00:	1f 91       	pop	r17
    3e02:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3e04:	0c 94 a0 1a 	jmp	0x3540	; 0x3540 <clear_keyboard_but_mods>

00003e08 <layer_clear>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3e08:	10 92 bc 01 	sts	0x01BC, r1
    3e0c:	10 92 bd 01 	sts	0x01BD, r1
    3e10:	10 92 be 01 	sts	0x01BE, r1
    3e14:	10 92 bf 01 	sts	0x01BF, r1
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3e18:	0c 94 a0 1a 	jmp	0x3540	; 0x3540 <clear_keyboard_but_mods>

00003e1c <layer_move>:
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    3e1c:	41 e0       	ldi	r20, 0x01	; 1
    3e1e:	50 e0       	ldi	r21, 0x00	; 0
    3e20:	60 e0       	ldi	r22, 0x00	; 0
    3e22:	70 e0       	ldi	r23, 0x00	; 0
    3e24:	04 c0       	rjmp	.+8      	; 0x3e2e <layer_move+0x12>
    3e26:	44 0f       	add	r20, r20
    3e28:	55 1f       	adc	r21, r21
    3e2a:	66 1f       	adc	r22, r22
    3e2c:	77 1f       	adc	r23, r23
    3e2e:	8a 95       	dec	r24
    3e30:	d2 f7       	brpl	.-12     	; 0x3e26 <layer_move+0xa>

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3e32:	40 93 bc 01 	sts	0x01BC, r20
    3e36:	50 93 bd 01 	sts	0x01BD, r21
    3e3a:	60 93 be 01 	sts	0x01BE, r22
    3e3e:	70 93 bf 01 	sts	0x01BF, r23
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3e42:	0c 94 a0 1a 	jmp	0x3540	; 0x3540 <clear_keyboard_but_mods>

00003e46 <layer_on>:
    layer_state_set(1UL<<layer);
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    3e46:	41 e0       	ldi	r20, 0x01	; 1
    3e48:	50 e0       	ldi	r21, 0x00	; 0
    3e4a:	60 e0       	ldi	r22, 0x00	; 0
    3e4c:	70 e0       	ldi	r23, 0x00	; 0
    3e4e:	04 c0       	rjmp	.+8      	; 0x3e58 <layer_on+0x12>
    3e50:	44 0f       	add	r20, r20
    3e52:	55 1f       	adc	r21, r21
    3e54:	66 1f       	adc	r22, r22
    3e56:	77 1f       	adc	r23, r23
    3e58:	8a 95       	dec	r24
    3e5a:	d2 f7       	brpl	.-12     	; 0x3e50 <layer_on+0xa>
    3e5c:	80 91 bc 01 	lds	r24, 0x01BC
    3e60:	90 91 bd 01 	lds	r25, 0x01BD
    3e64:	a0 91 be 01 	lds	r26, 0x01BE
    3e68:	b0 91 bf 01 	lds	r27, 0x01BF
    3e6c:	84 2b       	or	r24, r20
    3e6e:	95 2b       	or	r25, r21
    3e70:	a6 2b       	or	r26, r22
    3e72:	b7 2b       	or	r27, r23

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3e74:	80 93 bc 01 	sts	0x01BC, r24
    3e78:	90 93 bd 01 	sts	0x01BD, r25
    3e7c:	a0 93 be 01 	sts	0x01BE, r26
    3e80:	b0 93 bf 01 	sts	0x01BF, r27
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3e84:	0c 94 a0 1a 	jmp	0x3540	; 0x3540 <clear_keyboard_but_mods>

00003e88 <layer_off>:
    layer_state_set(layer_state | (1UL<<layer));
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    3e88:	41 e0       	ldi	r20, 0x01	; 1
    3e8a:	50 e0       	ldi	r21, 0x00	; 0
    3e8c:	60 e0       	ldi	r22, 0x00	; 0
    3e8e:	70 e0       	ldi	r23, 0x00	; 0
    3e90:	04 c0       	rjmp	.+8      	; 0x3e9a <layer_off+0x12>
    3e92:	44 0f       	add	r20, r20
    3e94:	55 1f       	adc	r21, r21
    3e96:	66 1f       	adc	r22, r22
    3e98:	77 1f       	adc	r23, r23
    3e9a:	8a 95       	dec	r24
    3e9c:	d2 f7       	brpl	.-12     	; 0x3e92 <layer_off+0xa>
    3e9e:	40 95       	com	r20
    3ea0:	50 95       	com	r21
    3ea2:	60 95       	com	r22
    3ea4:	70 95       	com	r23
    3ea6:	80 91 bc 01 	lds	r24, 0x01BC
    3eaa:	90 91 bd 01 	lds	r25, 0x01BD
    3eae:	a0 91 be 01 	lds	r26, 0x01BE
    3eb2:	b0 91 bf 01 	lds	r27, 0x01BF
    3eb6:	84 23       	and	r24, r20
    3eb8:	95 23       	and	r25, r21
    3eba:	a6 23       	and	r26, r22
    3ebc:	b7 23       	and	r27, r23

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3ebe:	80 93 bc 01 	sts	0x01BC, r24
    3ec2:	90 93 bd 01 	sts	0x01BD, r25
    3ec6:	a0 93 be 01 	sts	0x01BE, r26
    3eca:	b0 93 bf 01 	sts	0x01BF, r27
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3ece:	0c 94 a0 1a 	jmp	0x3540	; 0x3540 <clear_keyboard_but_mods>

00003ed2 <layer_invert>:
    layer_state_set(layer_state & ~(1UL<<layer));
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    3ed2:	41 e0       	ldi	r20, 0x01	; 1
    3ed4:	50 e0       	ldi	r21, 0x00	; 0
    3ed6:	60 e0       	ldi	r22, 0x00	; 0
    3ed8:	70 e0       	ldi	r23, 0x00	; 0
    3eda:	04 c0       	rjmp	.+8      	; 0x3ee4 <layer_invert+0x12>
    3edc:	44 0f       	add	r20, r20
    3ede:	55 1f       	adc	r21, r21
    3ee0:	66 1f       	adc	r22, r22
    3ee2:	77 1f       	adc	r23, r23
    3ee4:	8a 95       	dec	r24
    3ee6:	d2 f7       	brpl	.-12     	; 0x3edc <layer_invert+0xa>
    3ee8:	80 91 bc 01 	lds	r24, 0x01BC
    3eec:	90 91 bd 01 	lds	r25, 0x01BD
    3ef0:	a0 91 be 01 	lds	r26, 0x01BE
    3ef4:	b0 91 bf 01 	lds	r27, 0x01BF
    3ef8:	84 27       	eor	r24, r20
    3efa:	95 27       	eor	r25, r21
    3efc:	a6 27       	eor	r26, r22
    3efe:	b7 27       	eor	r27, r23

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3f00:	80 93 bc 01 	sts	0x01BC, r24
    3f04:	90 93 bd 01 	sts	0x01BD, r25
    3f08:	a0 93 be 01 	sts	0x01BE, r26
    3f0c:	b0 93 bf 01 	sts	0x01BF, r27
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3f10:	0c 94 a0 1a 	jmp	0x3540	; 0x3540 <clear_keyboard_but_mods>

00003f14 <layer_or>:
{
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    3f14:	0f 93       	push	r16
    3f16:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    3f18:	00 91 bc 01 	lds	r16, 0x01BC
    3f1c:	10 91 bd 01 	lds	r17, 0x01BD
    3f20:	20 91 be 01 	lds	r18, 0x01BE
    3f24:	30 91 bf 01 	lds	r19, 0x01BF
    3f28:	06 2b       	or	r16, r22
    3f2a:	17 2b       	or	r17, r23
    3f2c:	28 2b       	or	r18, r24
    3f2e:	39 2b       	or	r19, r25

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3f30:	00 93 bc 01 	sts	0x01BC, r16
    3f34:	10 93 bd 01 	sts	0x01BD, r17
    3f38:	20 93 be 01 	sts	0x01BE, r18
    3f3c:	30 93 bf 01 	sts	0x01BF, r19
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
    3f40:	1f 91       	pop	r17
    3f42:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3f44:	0c 94 a0 1a 	jmp	0x3540	; 0x3540 <clear_keyboard_but_mods>

00003f48 <layer_and>:
void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    3f48:	0f 93       	push	r16
    3f4a:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    3f4c:	00 91 bc 01 	lds	r16, 0x01BC
    3f50:	10 91 bd 01 	lds	r17, 0x01BD
    3f54:	20 91 be 01 	lds	r18, 0x01BE
    3f58:	30 91 bf 01 	lds	r19, 0x01BF
    3f5c:	06 23       	and	r16, r22
    3f5e:	17 23       	and	r17, r23
    3f60:	28 23       	and	r18, r24
    3f62:	39 23       	and	r19, r25

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3f64:	00 93 bc 01 	sts	0x01BC, r16
    3f68:	10 93 bd 01 	sts	0x01BD, r17
    3f6c:	20 93 be 01 	sts	0x01BE, r18
    3f70:	30 93 bf 01 	sts	0x01BF, r19
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
    3f74:	1f 91       	pop	r17
    3f76:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3f78:	0c 94 a0 1a 	jmp	0x3540	; 0x3540 <clear_keyboard_but_mods>

00003f7c <layer_xor>:
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    3f7c:	0f 93       	push	r16
    3f7e:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    3f80:	00 91 bc 01 	lds	r16, 0x01BC
    3f84:	10 91 bd 01 	lds	r17, 0x01BD
    3f88:	20 91 be 01 	lds	r18, 0x01BE
    3f8c:	30 91 bf 01 	lds	r19, 0x01BF
    3f90:	06 27       	eor	r16, r22
    3f92:	17 27       	eor	r17, r23
    3f94:	28 27       	eor	r18, r24
    3f96:	39 27       	eor	r19, r25

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3f98:	00 93 bc 01 	sts	0x01BC, r16
    3f9c:	10 93 bd 01 	sts	0x01BD, r17
    3fa0:	20 93 be 01 	sts	0x01BE, r18
    3fa4:	30 93 bf 01 	sts	0x01BF, r19
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
}
    3fa8:	1f 91       	pop	r17
    3faa:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3fac:	0c 94 a0 1a 	jmp	0x3540	; 0x3540 <clear_keyboard_but_mods>

00003fb0 <layer_debug>:
{
    layer_state_set(layer_state ^ state);
}

void layer_debug(void)
{
    3fb0:	08 95       	ret

00003fb2 <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    3fb2:	cf 92       	push	r12
    3fb4:	df 92       	push	r13
    3fb6:	ef 92       	push	r14
    3fb8:	ff 92       	push	r15
    3fba:	0f 93       	push	r16
    3fbc:	1f 93       	push	r17
    3fbe:	cf 93       	push	r28
    3fc0:	df 93       	push	r29
    3fc2:	ec 01       	movw	r28, r24
    action_t action;
    action.code = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    3fc4:	c0 90 c0 01 	lds	r12, 0x01C0
    3fc8:	d0 90 c1 01 	lds	r13, 0x01C1
    3fcc:	e0 90 c2 01 	lds	r14, 0x01C2
    3fd0:	f0 90 c3 01 	lds	r15, 0x01C3
    3fd4:	80 91 bc 01 	lds	r24, 0x01BC
    3fd8:	90 91 bd 01 	lds	r25, 0x01BD
    3fdc:	a0 91 be 01 	lds	r26, 0x01BE
    3fe0:	b0 91 bf 01 	lds	r27, 0x01BF
    3fe4:	c8 2a       	or	r12, r24
    3fe6:	d9 2a       	or	r13, r25
    3fe8:	ea 2a       	or	r14, r26
    3fea:	fb 2a       	or	r15, r27
    3fec:	0f e1       	ldi	r16, 0x1F	; 31
    3fee:	10 e0       	ldi	r17, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    3ff0:	b7 01       	movw	r22, r14
    3ff2:	a6 01       	movw	r20, r12
    3ff4:	00 2e       	mov	r0, r16
    3ff6:	04 c0       	rjmp	.+8      	; 0x4000 <layer_switch_get_action+0x4e>
    3ff8:	76 95       	lsr	r23
    3ffa:	67 95       	ror	r22
    3ffc:	57 95       	ror	r21
    3ffe:	47 95       	ror	r20
    4000:	0a 94       	dec	r0
    4002:	d2 f7       	brpl	.-12     	; 0x3ff8 <layer_switch_get_action+0x46>
    4004:	40 ff       	sbrs	r20, 0
    4006:	07 c0       	rjmp	.+14     	; 0x4016 <layer_switch_get_action+0x64>
            action = action_for_key(i, key);
    4008:	be 01       	movw	r22, r28
    400a:	80 2f       	mov	r24, r16
    400c:	0e 94 ed 0b 	call	0x17da	; 0x17da <action_for_key>
            if (action.code != ACTION_TRANSPARENT) {
    4010:	81 30       	cpi	r24, 0x01	; 1
    4012:	91 05       	cpc	r25, r1
    4014:	39 f4       	brne	.+14     	; 0x4024 <layer_switch_get_action+0x72>
    4016:	01 50       	subi	r16, 0x01	; 1
    4018:	11 09       	sbc	r17, r1
    401a:	50 f7       	brcc	.-44     	; 0x3ff0 <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    401c:	be 01       	movw	r22, r28
    401e:	80 e0       	ldi	r24, 0x00	; 0
    4020:	0e 94 ed 0b 	call	0x17da	; 0x17da <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    4024:	df 91       	pop	r29
    4026:	cf 91       	pop	r28
    4028:	1f 91       	pop	r17
    402a:	0f 91       	pop	r16
    402c:	ff 90       	pop	r15
    402e:	ef 90       	pop	r14
    4030:	df 90       	pop	r13
    4032:	cf 90       	pop	r12
    4034:	08 95       	ret

00004036 <add_key>:

/* key */
void add_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    4036:	90 91 0c 01 	lds	r25, 0x010C
    403a:	99 23       	and	r25, r25
    403c:	61 f1       	breq	.+88     	; 0x4096 <add_key+0x60>
    403e:	90 91 0d 01 	lds	r25, 0x010D
    4042:	99 23       	and	r25, r25
    4044:	41 f1       	breq	.+80     	; 0x4096 <add_key+0x60>
}

#ifdef NKRO_ENABLE
static inline void add_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    4046:	98 2f       	mov	r25, r24
    4048:	96 95       	lsr	r25
    404a:	96 95       	lsr	r25
    404c:	96 95       	lsr	r25
    404e:	9f 30       	cpi	r25, 0x0F	; 15
    4050:	88 f4       	brcc	.+34     	; 0x4074 <add_key+0x3e>
        keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
    4052:	e0 91 0e 01 	lds	r30, 0x010E
    4056:	f0 91 0f 01 	lds	r31, 0x010F
    405a:	e9 0f       	add	r30, r25
    405c:	f1 1d       	adc	r31, r1
    405e:	87 70       	andi	r24, 0x07	; 7
    4060:	21 e0       	ldi	r18, 0x01	; 1
    4062:	30 e0       	ldi	r19, 0x00	; 0
    4064:	01 c0       	rjmp	.+2      	; 0x4068 <add_key+0x32>
    4066:	22 0f       	add	r18, r18
    4068:	8a 95       	dec	r24
    406a:	ea f7       	brpl	.-6      	; 0x4066 <add_key+0x30>
    406c:	81 81       	ldd	r24, Z+1	; 0x01
    406e:	82 2b       	or	r24, r18
    4070:	81 83       	std	Z+1, r24	; 0x01
    4072:	08 95       	ret
    } else {
        dprintf("add_key_bit: can't add: %02X\n", code);
    4074:	90 91 d7 01 	lds	r25, 0x01D7
    4078:	90 ff       	sbrs	r25, 0
    407a:	2d c0       	rjmp	.+90     	; 0x40d6 <add_key+0xa0>
    407c:	1f 92       	push	r1
    407e:	8f 93       	push	r24
    4080:	80 ee       	ldi	r24, 0xE0	; 224
    4082:	95 e0       	ldi	r25, 0x05	; 5
    4084:	9f 93       	push	r25
    4086:	8f 93       	push	r24
    4088:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    408c:	0f 90       	pop	r0
    408e:	0f 90       	pop	r0
    4090:	0f 90       	pop	r0
    4092:	0f 90       	pop	r0
    4094:	08 95       	ret
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    4096:	40 91 0e 01 	lds	r20, 0x010E
    409a:	50 91 0f 01 	lds	r21, 0x010F
    409e:	20 e0       	ldi	r18, 0x00	; 0
    40a0:	30 e0       	ldi	r19, 0x00	; 0
    40a2:	9f ef       	ldi	r25, 0xFF	; 255
    40a4:	fa 01       	movw	r30, r20
    40a6:	e2 0f       	add	r30, r18
    40a8:	f3 1f       	adc	r31, r19
    40aa:	62 81       	ldd	r22, Z+2	; 0x02
    40ac:	68 17       	cp	r22, r24
    40ae:	99 f0       	breq	.+38     	; 0x40d6 <add_key+0xa0>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    40b0:	9f 3f       	cpi	r25, 0xFF	; 255
    40b2:	19 f4       	brne	.+6      	; 0x40ba <add_key+0x84>
    40b4:	61 11       	cpse	r22, r1
    40b6:	01 c0       	rjmp	.+2      	; 0x40ba <add_key+0x84>
    40b8:	92 2f       	mov	r25, r18
    40ba:	2f 5f       	subi	r18, 0xFF	; 255
    40bc:	3f 4f       	sbci	r19, 0xFF	; 255
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    40be:	2e 30       	cpi	r18, 0x0E	; 14
    40c0:	31 05       	cpc	r19, r1
    40c2:	81 f7       	brne	.-32     	; 0x40a4 <add_key+0x6e>
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    40c4:	9f 3f       	cpi	r25, 0xFF	; 255
    40c6:	39 f0       	breq	.+14     	; 0x40d6 <add_key+0xa0>
            keyboard_report->keys[empty] = code;
    40c8:	fa 01       	movw	r30, r20
    40ca:	e9 0f       	add	r30, r25
    40cc:	f1 1d       	adc	r31, r1
    40ce:	97 fd       	sbrc	r25, 7
    40d0:	fa 95       	dec	r31
    40d2:	82 83       	std	Z+2, r24	; 0x02
    40d4:	08 95       	ret
    40d6:	08 95       	ret

000040d8 <del_key>:
}

void del_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    40d8:	90 91 0c 01 	lds	r25, 0x010C
    40dc:	99 23       	and	r25, r25
    40de:	69 f1       	breq	.+90     	; 0x413a <del_key+0x62>
    40e0:	90 91 0d 01 	lds	r25, 0x010D
    40e4:	99 23       	and	r25, r25
    40e6:	49 f1       	breq	.+82     	; 0x413a <del_key+0x62>
    }
}

static inline void del_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    40e8:	98 2f       	mov	r25, r24
    40ea:	96 95       	lsr	r25
    40ec:	96 95       	lsr	r25
    40ee:	96 95       	lsr	r25
    40f0:	9f 30       	cpi	r25, 0x0F	; 15
    40f2:	90 f4       	brcc	.+36     	; 0x4118 <del_key+0x40>
        keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
    40f4:	e0 91 0e 01 	lds	r30, 0x010E
    40f8:	f0 91 0f 01 	lds	r31, 0x010F
    40fc:	e9 0f       	add	r30, r25
    40fe:	f1 1d       	adc	r31, r1
    4100:	87 70       	andi	r24, 0x07	; 7
    4102:	21 e0       	ldi	r18, 0x01	; 1
    4104:	30 e0       	ldi	r19, 0x00	; 0
    4106:	01 c0       	rjmp	.+2      	; 0x410a <del_key+0x32>
    4108:	22 0f       	add	r18, r18
    410a:	8a 95       	dec	r24
    410c:	ea f7       	brpl	.-6      	; 0x4108 <del_key+0x30>
    410e:	20 95       	com	r18
    4110:	81 81       	ldd	r24, Z+1	; 0x01
    4112:	28 23       	and	r18, r24
    4114:	21 83       	std	Z+1, r18	; 0x01
    4116:	08 95       	ret
    } else {
        dprintf("del_key_bit: can't del: %02X\n", code);
    4118:	90 91 d7 01 	lds	r25, 0x01D7
    411c:	90 ff       	sbrs	r25, 0
    411e:	1f c0       	rjmp	.+62     	; 0x415e <del_key+0x86>
    4120:	1f 92       	push	r1
    4122:	8f 93       	push	r24
    4124:	82 ec       	ldi	r24, 0xC2	; 194
    4126:	95 e0       	ldi	r25, 0x05	; 5
    4128:	9f 93       	push	r25
    412a:	8f 93       	push	r24
    412c:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    4130:	0f 90       	pop	r0
    4132:	0f 90       	pop	r0
    4134:	0f 90       	pop	r0
    4136:	0f 90       	pop	r0
    4138:	08 95       	ret
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    413a:	40 91 0e 01 	lds	r20, 0x010E
    413e:	50 91 0f 01 	lds	r21, 0x010F
    4142:	20 e0       	ldi	r18, 0x00	; 0
    4144:	30 e0       	ldi	r19, 0x00	; 0
    4146:	fa 01       	movw	r30, r20
    4148:	e2 0f       	add	r30, r18
    414a:	f3 1f       	adc	r31, r19
    414c:	92 81       	ldd	r25, Z+2	; 0x02
    414e:	98 13       	cpse	r25, r24
    4150:	01 c0       	rjmp	.+2      	; 0x4154 <del_key+0x7c>
            keyboard_report->keys[i] = 0;
    4152:	12 82       	std	Z+2, r1	; 0x02
    4154:	2f 5f       	subi	r18, 0xFF	; 255
    4156:	3f 4f       	sbci	r19, 0xFF	; 255
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    4158:	2e 30       	cpi	r18, 0x0E	; 14
    415a:	31 05       	cpc	r19, r1
    415c:	a1 f7       	brne	.-24     	; 0x4146 <del_key+0x6e>
    415e:	08 95       	ret

00004160 <clear_keys>:
#endif
    del_key_byte(key);
}

void clear_keys(void)
{
    4160:	81 e0       	ldi	r24, 0x01	; 1
    4162:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    4164:	e0 91 0e 01 	lds	r30, 0x010E
    4168:	f0 91 0f 01 	lds	r31, 0x010F
    416c:	e8 0f       	add	r30, r24
    416e:	f9 1f       	adc	r31, r25
    4170:	10 82       	st	Z, r1
    4172:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    4174:	80 31       	cpi	r24, 0x10	; 16
    4176:	91 05       	cpc	r25, r1
    4178:	a9 f7       	brne	.-22     	; 0x4164 <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    417a:	08 95       	ret

0000417c <add_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
void add_mods(uint8_t mods) { real_mods |= mods; }
    417c:	90 91 d6 01 	lds	r25, 0x01D6
    4180:	98 2b       	or	r25, r24
    4182:	90 93 d6 01 	sts	0x01D6, r25
    4186:	08 95       	ret

00004188 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    4188:	80 95       	com	r24
    418a:	90 91 d6 01 	lds	r25, 0x01D6
    418e:	98 23       	and	r25, r24
    4190:	90 93 d6 01 	sts	0x01D6, r25
    4194:	08 95       	ret

00004196 <clear_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
void clear_mods(void) { real_mods = 0; }
    4196:	10 92 d6 01 	sts	0x01D6, r1
    419a:	08 95       	ret

0000419c <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    419c:	90 91 d5 01 	lds	r25, 0x01D5
    41a0:	98 2b       	or	r25, r24
    41a2:	90 93 d5 01 	sts	0x01D5, r25
    41a6:	08 95       	ret

000041a8 <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    41a8:	80 95       	com	r24
    41aa:	90 91 d5 01 	lds	r25, 0x01D5
    41ae:	98 23       	and	r25, r24
    41b0:	90 93 d5 01 	sts	0x01D5, r25
    41b4:	08 95       	ret

000041b6 <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    41b6:	10 92 d5 01 	sts	0x01D5, r1
    41ba:	08 95       	ret

000041bc <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    41bc:	80 93 c4 01 	sts	0x01C4, r24
    41c0:	08 95       	ret

000041c2 <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    41c2:	10 92 c4 01 	sts	0x01C4, r1
    41c6:	08 95       	ret

000041c8 <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    41c8:	40 91 0e 01 	lds	r20, 0x010E
    41cc:	50 91 0f 01 	lds	r21, 0x010F
    41d0:	20 e0       	ldi	r18, 0x00	; 0
    41d2:	30 e0       	ldi	r19, 0x00	; 0
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    41d4:	80 e0       	ldi	r24, 0x00	; 0
    41d6:	fa 01       	movw	r30, r20
    41d8:	e2 0f       	add	r30, r18
    41da:	f3 1f       	adc	r31, r19
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    41dc:	91 81       	ldd	r25, Z+1	; 0x01
    41de:	91 11       	cpse	r25, r1
            cnt++;
    41e0:	8f 5f       	subi	r24, 0xFF	; 255
    41e2:	2f 5f       	subi	r18, 0xFF	; 255
    41e4:	3f 4f       	sbci	r19, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    41e6:	2f 30       	cpi	r18, 0x0F	; 15
    41e8:	31 05       	cpc	r19, r1
    41ea:	a9 f7       	brne	.-22     	; 0x41d6 <has_anykey+0xe>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    41ec:	08 95       	ret

000041ee <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    41ee:	e0 91 0e 01 	lds	r30, 0x010E
    41f2:	f0 91 0f 01 	lds	r31, 0x010F
    41f6:	80 91 d6 01 	lds	r24, 0x01D6
    41fa:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    41fc:	e0 91 0e 01 	lds	r30, 0x010E
    4200:	f0 91 0f 01 	lds	r31, 0x010F
    4204:	80 81       	ld	r24, Z
    4206:	90 91 d5 01 	lds	r25, 0x01D5
    420a:	89 2b       	or	r24, r25
    420c:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    420e:	90 91 c4 01 	lds	r25, 0x01C4
    4212:	99 23       	and	r25, r25
    4214:	61 f0       	breq	.+24     	; 0x422e <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    4216:	e0 91 0e 01 	lds	r30, 0x010E
    421a:	f0 91 0f 01 	lds	r31, 0x010F
    421e:	80 81       	ld	r24, Z
    4220:	89 2b       	or	r24, r25
    4222:	80 83       	st	Z, r24
        if (has_anykey()) {
    4224:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <has_anykey>
    4228:	81 11       	cpse	r24, r1
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    422a:	10 92 c4 01 	sts	0x01C4, r1
        if (has_anykey()) {
            clear_oneshot_mods();
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    422e:	80 91 0e 01 	lds	r24, 0x010E
    4232:	90 91 0f 01 	lds	r25, 0x010F
    4236:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <host_keyboard_send>

0000423a <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    423a:	90 93 3b 01 	sts	0x013B, r25
    423e:	80 93 3a 01 	sts	0x013A, r24
    4242:	08 95       	ret

00004244 <biton32>:
    if (bits >> 1) { bits >>= 1; n += 1;}
    return n;
}

uint8_t biton32(uint32_t bits)
{
    4244:	cf 92       	push	r12
    4246:	df 92       	push	r13
    4248:	ef 92       	push	r14
    424a:	ff 92       	push	r15
    424c:	0f 93       	push	r16
    424e:	1f 93       	push	r17
    uint8_t n = 0;
    if (bits >>16) { bits >>=16; n +=16;}
    4250:	6c 01       	movw	r12, r24
    4252:	ee 24       	eor	r14, r14
    4254:	ff 24       	eor	r15, r15
    4256:	c1 14       	cp	r12, r1
    4258:	d1 04       	cpc	r13, r1
    425a:	e1 04       	cpc	r14, r1
    425c:	f1 04       	cpc	r15, r1
    425e:	21 f4       	brne	.+8      	; 0x4268 <biton32+0x24>
    4260:	6b 01       	movw	r12, r22
    4262:	7c 01       	movw	r14, r24
    return n;
}

uint8_t biton32(uint32_t bits)
{
    uint8_t n = 0;
    4264:	80 e0       	ldi	r24, 0x00	; 0
    4266:	01 c0       	rjmp	.+2      	; 0x426a <biton32+0x26>
    if (bits >>16) { bits >>=16; n +=16;}
    4268:	80 e1       	ldi	r24, 0x10	; 16
    if (bits >> 8) { bits >>= 8; n += 8;}
    426a:	33 27       	eor	r19, r19
    426c:	2f 2d       	mov	r18, r15
    426e:	1e 2d       	mov	r17, r14
    4270:	0d 2d       	mov	r16, r13
    4272:	01 15       	cp	r16, r1
    4274:	11 05       	cpc	r17, r1
    4276:	21 05       	cpc	r18, r1
    4278:	31 05       	cpc	r19, r1
    427a:	19 f0       	breq	.+6      	; 0x4282 <biton32+0x3e>
    427c:	88 5f       	subi	r24, 0xF8	; 248
    427e:	68 01       	movw	r12, r16
    4280:	79 01       	movw	r14, r18
    if (bits >> 4) { bits >>= 4; n += 4;}
    4282:	97 01       	movw	r18, r14
    4284:	86 01       	movw	r16, r12
    4286:	a4 e0       	ldi	r26, 0x04	; 4
    4288:	36 95       	lsr	r19
    428a:	27 95       	ror	r18
    428c:	17 95       	ror	r17
    428e:	07 95       	ror	r16
    4290:	aa 95       	dec	r26
    4292:	d1 f7       	brne	.-12     	; 0x4288 <biton32+0x44>
    4294:	01 15       	cp	r16, r1
    4296:	11 05       	cpc	r17, r1
    4298:	21 05       	cpc	r18, r1
    429a:	31 05       	cpc	r19, r1
    429c:	19 f0       	breq	.+6      	; 0x42a4 <biton32+0x60>
    429e:	8c 5f       	subi	r24, 0xFC	; 252
    42a0:	68 01       	movw	r12, r16
    42a2:	79 01       	movw	r14, r18
    if (bits >> 2) { bits >>= 2; n += 2;}
    42a4:	97 01       	movw	r18, r14
    42a6:	86 01       	movw	r16, r12
    42a8:	f2 e0       	ldi	r31, 0x02	; 2
    42aa:	36 95       	lsr	r19
    42ac:	27 95       	ror	r18
    42ae:	17 95       	ror	r17
    42b0:	07 95       	ror	r16
    42b2:	fa 95       	dec	r31
    42b4:	d1 f7       	brne	.-12     	; 0x42aa <biton32+0x66>
    42b6:	01 15       	cp	r16, r1
    42b8:	11 05       	cpc	r17, r1
    42ba:	21 05       	cpc	r18, r1
    42bc:	31 05       	cpc	r19, r1
    42be:	19 f0       	breq	.+6      	; 0x42c6 <biton32+0x82>
    42c0:	8e 5f       	subi	r24, 0xFE	; 254
    42c2:	68 01       	movw	r12, r16
    42c4:	79 01       	movw	r14, r18
    if (bits >> 1) { bits >>= 1; n += 1;}
    42c6:	b7 01       	movw	r22, r14
    42c8:	a6 01       	movw	r20, r12
    42ca:	76 95       	lsr	r23
    42cc:	67 95       	ror	r22
    42ce:	57 95       	ror	r21
    42d0:	47 95       	ror	r20
    42d2:	45 2b       	or	r20, r21
    42d4:	46 2b       	or	r20, r22
    42d6:	47 2b       	or	r20, r23
    42d8:	09 f0       	breq	.+2      	; 0x42dc <biton32+0x98>
    42da:	8f 5f       	subi	r24, 0xFF	; 255
    return n;
}
    42dc:	1f 91       	pop	r17
    42de:	0f 91       	pop	r16
    42e0:	ff 90       	pop	r15
    42e2:	ef 90       	pop	r14
    42e4:	df 90       	pop	r13
    42e6:	cf 90       	pop	r12
    42e8:	08 95       	ret

000042ea <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    42ea:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    42ec:	98 2f       	mov	r25, r24
    42ee:	9c 7c       	andi	r25, 0xCC	; 204
    42f0:	96 95       	lsr	r25
    42f2:	96 95       	lsr	r25
    42f4:	83 73       	andi	r24, 0x33	; 51
    42f6:	44 e0       	ldi	r20, 0x04	; 4
    42f8:	84 9f       	mul	r24, r20
    42fa:	90 01       	movw	r18, r0
    42fc:	11 24       	eor	r1, r1
    42fe:	92 2b       	or	r25, r18
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    4300:	89 2f       	mov	r24, r25
    4302:	8a 7a       	andi	r24, 0xAA	; 170
    4304:	86 95       	lsr	r24
    4306:	95 75       	andi	r25, 0x55	; 85
    4308:	99 0f       	add	r25, r25
    return bits;
}
    430a:	89 2b       	or	r24, r25
    430c:	08 95       	ret

0000430e <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    430e:	1f 93       	push	r17
    4310:	cf 93       	push	r28
    4312:	df 93       	push	r29
    4314:	1f 92       	push	r1
    4316:	cd b7       	in	r28, 0x3d	; 61
    4318:	de b7       	in	r29, 0x3e	; 62
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    431a:	99 83       	std	Y+1, r25	; 0x01
    431c:	0e 94 75 21 	call	0x42ea	; 0x42ea <bitrev>
    4320:	18 2f       	mov	r17, r24
    4322:	99 81       	ldd	r25, Y+1	; 0x01
    4324:	89 2f       	mov	r24, r25
    4326:	0e 94 75 21 	call	0x42ea	; 0x42ea <bitrev>
    432a:	21 2f       	mov	r18, r17
    432c:	30 e0       	ldi	r19, 0x00	; 0
    432e:	32 2f       	mov	r19, r18
    4330:	22 27       	eor	r18, r18
    return bits;
}
    4332:	a9 01       	movw	r20, r18
    4334:	48 2b       	or	r20, r24
    4336:	ca 01       	movw	r24, r20
    4338:	0f 90       	pop	r0
    433a:	df 91       	pop	r29
    433c:	cf 91       	pop	r28
    433e:	1f 91       	pop	r17
    4340:	08 95       	ret

00004342 <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    4342:	80 91 f0 01 	lds	r24, 0x01F0
    4346:	84 30       	cpi	r24, 0x04	; 4
    4348:	09 f1       	breq	.+66     	; 0x438c <suspend_power_down+0x4a>
#endif
    wdt_timeout = wdto;
    434a:	10 92 d8 01 	sts	0x01D8, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    434e:	20 e4       	ldi	r18, 0x40	; 64
    4350:	88 e1       	ldi	r24, 0x18	; 24
    4352:	90 e0       	ldi	r25, 0x00	; 0
    4354:	0f b6       	in	r0, 0x3f	; 63
    4356:	f8 94       	cli
    4358:	a8 95       	wdr
    435a:	80 93 60 00 	sts	0x0060, r24
    435e:	0f be       	out	0x3f, r0	; 63
    4360:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    4364:	83 b7       	in	r24, 0x33	; 51
    4366:	81 7f       	andi	r24, 0xF1	; 241
    4368:	84 60       	ori	r24, 0x04	; 4
    436a:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    436c:	83 b7       	in	r24, 0x33	; 51
    436e:	81 60       	ori	r24, 0x01	; 1
    4370:	83 bf       	out	0x33, r24	; 51
    sei();
    4372:	78 94       	sei
    sleep_cpu();
    4374:	88 95       	sleep
    sleep_disable();
    4376:	83 b7       	in	r24, 0x33	; 51
    4378:	8e 7f       	andi	r24, 0xFE	; 254
    437a:	83 bf       	out	0x33, r24	; 51

    // Disable watchdog after sleep
    wdt_disable();
    437c:	88 e1       	ldi	r24, 0x18	; 24
    437e:	0f b6       	in	r0, 0x3f	; 63
    4380:	f8 94       	cli
    4382:	80 93 60 00 	sts	0x0060, r24
    4386:	10 92 60 00 	sts	0x0060, r1
    438a:	0f be       	out	0x3f, r0	; 63
    438c:	08 95       	ret

0000438e <matrix_power_up>:
void suspend_power_down(void)
{
    power_down(WDTO_15MS);
}

__attribute__ ((weak)) void matrix_power_up(void) {}
    438e:	08 95       	ret

00004390 <matrix_power_down>:
__attribute__ ((weak)) void matrix_power_down(void) {}
    4390:	08 95       	ret

00004392 <suspend_wakeup_condition>:
bool suspend_wakeup_condition(void)
{
    4392:	cf 93       	push	r28
    matrix_power_up();
    4394:	0e 94 c7 21 	call	0x438e	; 0x438e <matrix_power_up>
    matrix_scan();
    4398:	0e 94 93 09 	call	0x1326	; 0x1326 <matrix_scan>
    matrix_power_down();
    439c:	0e 94 c8 21 	call	0x4390	; 0x4390 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    43a0:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    43a2:	8c 2f       	mov	r24, r28
    43a4:	0e 94 be 0a 	call	0x157c	; 0x157c <matrix_get_row>
    43a8:	81 11       	cpse	r24, r1
    43aa:	05 c0       	rjmp	.+10     	; 0x43b6 <suspend_wakeup_condition+0x24>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    43ac:	cf 5f       	subi	r28, 0xFF	; 255
    43ae:	ce 30       	cpi	r28, 0x0E	; 14
    43b0:	c1 f7       	brne	.-16     	; 0x43a2 <suspend_wakeup_condition+0x10>
        if (matrix_get_row(r)) return true;
    }
    return false;
    43b2:	80 e0       	ldi	r24, 0x00	; 0
    43b4:	01 c0       	rjmp	.+2      	; 0x43b8 <suspend_wakeup_condition+0x26>
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    43b6:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    43b8:	cf 91       	pop	r28
    43ba:	08 95       	ret

000043bc <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    43bc:	0c 94 b2 1a 	jmp	0x3564	; 0x3564 <clear_keyboard>

000043c0 <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    43c0:	82 e0       	ldi	r24, 0x02	; 2
    43c2:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    43c4:	93 e0       	ldi	r25, 0x03	; 3
    43c6:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    43c8:	9a ef       	ldi	r25, 0xFA	; 250
    43ca:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    43cc:	80 93 6e 00 	sts	0x006E, r24
    43d0:	08 95       	ret

000043d2 <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    43d2:	2f b7       	in	r18, 0x3f	; 63
    cli();
    43d4:	f8 94       	cli
    t = timer_count;
    43d6:	80 91 d9 01 	lds	r24, 0x01D9
    43da:	90 91 da 01 	lds	r25, 0x01DA
    43de:	a0 91 db 01 	lds	r26, 0x01DB
    43e2:	b0 91 dc 01 	lds	r27, 0x01DC
    SREG = sreg;
    43e6:	2f bf       	out	0x3f, r18	; 63

    return (t & 0xFFFF);
}
    43e8:	08 95       	ret

000043ea <timer_elapsed>:
    return t;
}

inline
uint16_t timer_elapsed(uint16_t last)
{
    43ea:	cf 92       	push	r12
    43ec:	df 92       	push	r13
    43ee:	ef 92       	push	r14
    43f0:	ff 92       	push	r15
    43f2:	0f 93       	push	r16
    43f4:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    43f6:	2f b7       	in	r18, 0x3f	; 63
    cli();
    43f8:	f8 94       	cli
    t = timer_count;
    43fa:	40 91 d9 01 	lds	r20, 0x01D9
    43fe:	50 91 da 01 	lds	r21, 0x01DA
    4402:	60 91 db 01 	lds	r22, 0x01DB
    4406:	70 91 dc 01 	lds	r23, 0x01DC
    SREG = sreg;
    440a:	2f bf       	out	0x3f, r18	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    440c:	6a 01       	movw	r12, r20
    440e:	7b 01       	movw	r14, r22
    4410:	ee 24       	eor	r14, r14
    4412:	ff 24       	eor	r15, r15
    4414:	8c 01       	movw	r16, r24
    4416:	20 e0       	ldi	r18, 0x00	; 0
    4418:	30 e0       	ldi	r19, 0x00	; 0
    441a:	c0 16       	cp	r12, r16
    441c:	d1 06       	cpc	r13, r17
    441e:	e2 06       	cpc	r14, r18
    4420:	f3 06       	cpc	r15, r19
    4422:	10 f4       	brcc	.+4      	; 0x4428 <timer_elapsed+0x3e>
    4424:	41 50       	subi	r20, 0x01	; 1
    4426:	51 09       	sbc	r21, r1
    4428:	48 1b       	sub	r20, r24
    442a:	59 0b       	sbc	r21, r25
}
    442c:	ca 01       	movw	r24, r20
    442e:	1f 91       	pop	r17
    4430:	0f 91       	pop	r16
    4432:	ff 90       	pop	r15
    4434:	ef 90       	pop	r14
    4436:	df 90       	pop	r13
    4438:	cf 90       	pop	r12
    443a:	08 95       	ret

0000443c <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    443c:	1f 92       	push	r1
    443e:	0f 92       	push	r0
    4440:	0f b6       	in	r0, 0x3f	; 63
    4442:	0f 92       	push	r0
    4444:	11 24       	eor	r1, r1
    4446:	8f 93       	push	r24
    4448:	9f 93       	push	r25
    444a:	af 93       	push	r26
    444c:	bf 93       	push	r27
    timer_count++;
    444e:	80 91 d9 01 	lds	r24, 0x01D9
    4452:	90 91 da 01 	lds	r25, 0x01DA
    4456:	a0 91 db 01 	lds	r26, 0x01DB
    445a:	b0 91 dc 01 	lds	r27, 0x01DC
    445e:	01 96       	adiw	r24, 0x01	; 1
    4460:	a1 1d       	adc	r26, r1
    4462:	b1 1d       	adc	r27, r1
    4464:	80 93 d9 01 	sts	0x01D9, r24
    4468:	90 93 da 01 	sts	0x01DA, r25
    446c:	a0 93 db 01 	sts	0x01DB, r26
    4470:	b0 93 dc 01 	sts	0x01DC, r27
}
    4474:	bf 91       	pop	r27
    4476:	af 91       	pop	r26
    4478:	9f 91       	pop	r25
    447a:	8f 91       	pop	r24
    447c:	0f 90       	pop	r0
    447e:	0f be       	out	0x3f, r0	; 63
    4480:	0f 90       	pop	r0
    4482:	1f 90       	pop	r1
    4484:	18 95       	reti

00004486 <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    4486:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <USB_Disable>
    cli();
    448a:	f8 94       	cli
    448c:	2f ef       	ldi	r18, 0xFF	; 255
    448e:	87 ea       	ldi	r24, 0xA7	; 167
    4490:	91 e6       	ldi	r25, 0x61	; 97
    4492:	21 50       	subi	r18, 0x01	; 1
    4494:	80 40       	sbci	r24, 0x00	; 0
    4496:	90 40       	sbci	r25, 0x00	; 0
    4498:	e1 f7       	brne	.-8      	; 0x4492 <bootloader_jump+0xc>
    449a:	00 c0       	rjmp	.+0      	; 0x449c <bootloader_jump+0x16>
    449c:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    449e:	87 e0       	ldi	r24, 0x07	; 7
    44a0:	90 eb       	ldi	r25, 0xB0	; 176
    44a2:	dc 01       	movw	r26, r24
    44a4:	80 93 f9 01 	sts	0x01F9, r24
    44a8:	90 93 fa 01 	sts	0x01FA, r25
    44ac:	a0 93 fb 01 	sts	0x01FB, r26
    44b0:	b0 93 fc 01 	sts	0x01FC, r27
    wdt_enable(WDTO_250MS);
    44b4:	2c e0       	ldi	r18, 0x0C	; 12
    44b6:	88 e1       	ldi	r24, 0x18	; 24
    44b8:	90 e0       	ldi	r25, 0x00	; 0
    44ba:	0f b6       	in	r0, 0x3f	; 63
    44bc:	f8 94       	cli
    44be:	a8 95       	wdr
    44c0:	80 93 60 00 	sts	0x0060, r24
    44c4:	0f be       	out	0x3f, r0	; 63
    44c6:	20 93 60 00 	sts	0x0060, r18
    44ca:	ff cf       	rjmp	.-2      	; 0x44ca <bootloader_jump+0x44>

000044cc <scan_keycode>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_keycode(uint8_t keycode)
{
    44cc:	ef 92       	push	r14
    44ce:	ff 92       	push	r15
    44d0:	0f 93       	push	r16
    44d2:	1f 93       	push	r17
    44d4:	cf 93       	push	r28
    44d6:	df 93       	push	r29
    44d8:	e8 2e       	mov	r14, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    44da:	f1 2c       	mov	r15, r1
        matrix_row_t matrix_row = matrix_get_row(r);
    44dc:	8f 2d       	mov	r24, r15
    44de:	0e 94 be 0a 	call	0x157c	; 0x157c <matrix_get_row>
    44e2:	c0 e0       	ldi	r28, 0x00	; 0
    44e4:	d0 e0       	ldi	r29, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    44e6:	08 2f       	mov	r16, r24
    44e8:	10 e0       	ldi	r17, 0x00	; 0
    44ea:	98 01       	movw	r18, r16
    44ec:	0c 2e       	mov	r0, r28
    44ee:	02 c0       	rjmp	.+4      	; 0x44f4 <scan_keycode+0x28>
    44f0:	35 95       	asr	r19
    44f2:	27 95       	ror	r18
    44f4:	0a 94       	dec	r0
    44f6:	e2 f7       	brpl	.-8      	; 0x44f0 <scan_keycode+0x24>
    44f8:	20 fd       	sbrc	r18, 0
    44fa:	05 c0       	rjmp	.+10     	; 0x4506 <scan_keycode+0x3a>
    44fc:	21 96       	adiw	r28, 0x01	; 1

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    44fe:	c6 30       	cpi	r28, 0x06	; 6
    4500:	d1 05       	cpc	r29, r1
    4502:	99 f7       	brne	.-26     	; 0x44ea <scan_keycode+0x1e>
    4504:	09 c0       	rjmp	.+18     	; 0x4518 <scan_keycode+0x4c>
            if (matrix_row & ((matrix_row_t)1<<c)) {
                if (keycode == keymap_key_to_keycode(0, (keypos_t){ .row = r, .col = c })) {
    4506:	6c 2f       	mov	r22, r28
    4508:	7f 2d       	mov	r23, r15
    450a:	80 e0       	ldi	r24, 0x00	; 0
    450c:	0e 94 cb 0b 	call	0x1796	; 0x1796 <keymap_key_to_keycode>
    4510:	e8 12       	cpse	r14, r24
    4512:	f4 cf       	rjmp	.-24     	; 0x44fc <scan_keycode+0x30>
                    return true;
    4514:	81 e0       	ldi	r24, 0x01	; 1
    4516:	05 c0       	rjmp	.+10     	; 0x4522 <scan_keycode+0x56>
    }
}

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    4518:	f3 94       	inc	r15
    451a:	8e e0       	ldi	r24, 0x0E	; 14
    451c:	f8 12       	cpse	r15, r24
    451e:	de cf       	rjmp	.-68     	; 0x44dc <scan_keycode+0x10>
                    return true;
                }
            }
        }
    }
    return false;
    4520:	80 e0       	ldi	r24, 0x00	; 0
}
    4522:	df 91       	pop	r29
    4524:	cf 91       	pop	r28
    4526:	1f 91       	pop	r17
    4528:	0f 91       	pop	r16
    452a:	ff 90       	pop	r15
    452c:	ef 90       	pop	r14
    452e:	08 95       	ret

00004530 <bootmagic_scan_keycode>:

bool bootmagic_scan_keycode(uint8_t keycode)
{
    4530:	cf 93       	push	r28
    4532:	c8 2f       	mov	r28, r24
    if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;
    4534:	8c e2       	ldi	r24, 0x2C	; 44
    4536:	0e 94 66 22 	call	0x44cc	; 0x44cc <scan_keycode>
    453a:	88 23       	and	r24, r24
    453c:	21 f0       	breq	.+8      	; 0x4546 <bootmagic_scan_keycode+0x16>

    return scan_keycode(keycode);
    453e:	8c 2f       	mov	r24, r28
}
    4540:	cf 91       	pop	r28

bool bootmagic_scan_keycode(uint8_t keycode)
{
    if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;

    return scan_keycode(keycode);
    4542:	0c 94 66 22 	jmp	0x44cc	; 0x44cc <scan_keycode>
}
    4546:	80 e0       	ldi	r24, 0x00	; 0
    4548:	cf 91       	pop	r28
    454a:	08 95       	ret

0000454c <bootmagic>:
#include "eeconfig.h"
#include "bootmagic.h"


void bootmagic(void)
{
    454c:	cf 93       	push	r28
    /* check signature */
    if (!eeconfig_is_enabled()) {
    454e:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <eeconfig_is_enabled>
    4552:	81 11       	cpse	r24, r1
    4554:	02 c0       	rjmp	.+4      	; 0x455a <bootmagic+0xe>
        eeconfig_init();
    4556:	0e 94 d9 23 	call	0x47b2	; 0x47b2 <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("boogmagic scan: ... ");
    455a:	85 e0       	ldi	r24, 0x05	; 5
    455c:	96 e0       	ldi	r25, 0x06	; 6
    455e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); _delay_ms(10); }
    4562:	c5 e6       	ldi	r28, 0x65	; 101
    4564:	c1 50       	subi	r28, 0x01	; 1
    4566:	49 f0       	breq	.+18     	; 0x457a <bootmagic+0x2e>
    4568:	0e 94 93 09 	call	0x1326	; 0x1326 <matrix_scan>
    456c:	8f e3       	ldi	r24, 0x3F	; 63
    456e:	9c e9       	ldi	r25, 0x9C	; 156
    4570:	01 97       	sbiw	r24, 0x01	; 1
    4572:	f1 f7       	brne	.-4      	; 0x4570 <bootmagic+0x24>
    4574:	00 c0       	rjmp	.+0      	; 0x4576 <bootmagic+0x2a>
    4576:	00 00       	nop
    4578:	f5 cf       	rjmp	.-22     	; 0x4564 <bootmagic+0x18>
    print("done.\n");
    457a:	8e ef       	ldi	r24, 0xFE	; 254
    457c:	95 e0       	ldi	r25, 0x05	; 5
    457e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SKIP)) {
    4582:	89 e2       	ldi	r24, 0x29	; 41
    4584:	0e 94 98 22 	call	0x4530	; 0x4530 <bootmagic_scan_keycode>
    4588:	81 11       	cpse	r24, r1
    458a:	11 c1       	rjmp	.+546    	; 0x47ae <bootmagic+0x262>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    458c:	8a e2       	ldi	r24, 0x2A	; 42
    458e:	0e 94 98 22 	call	0x4530	; 0x4530 <bootmagic_scan_keycode>
    4592:	81 11       	cpse	r24, r1
        eeconfig_init();
    4594:	0e 94 d9 23 	call	0x47b2	; 0x47b2 <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_BOOTLOADER)) {
    4598:	85 e0       	ldi	r24, 0x05	; 5
    459a:	0e 94 98 22 	call	0x4530	; 0x4530 <bootmagic_scan_keycode>
    459e:	81 11       	cpse	r24, r1
        bootloader_jump();
    45a0:	0e 94 43 22 	call	0x4486	; 0x4486 <bootloader_jump>
    }

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    45a4:	0e 94 fe 23 	call	0x47fc	; 0x47fc <eeconfig_read_debug>
    45a8:	80 93 d7 01 	sts	0x01D7, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    45ac:	87 e0       	ldi	r24, 0x07	; 7
    45ae:	0e 94 98 22 	call	0x4530	; 0x4530 <bootmagic_scan_keycode>
    45b2:	88 23       	and	r24, r24
    45b4:	99 f1       	breq	.+102    	; 0x461c <bootmagic+0xd0>
        if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    45b6:	8b e1       	ldi	r24, 0x1B	; 27
    45b8:	0e 94 98 22 	call	0x4530	; 0x4530 <bootmagic_scan_keycode>
    45bc:	88 23       	and	r24, r24
    45be:	51 f0       	breq	.+20     	; 0x45d4 <bootmagic+0x88>
            debug_config.matrix = !debug_config.matrix;
    45c0:	90 91 d7 01 	lds	r25, 0x01D7
    45c4:	91 fb       	bst	r25, 1
    45c6:	88 27       	eor	r24, r24
    45c8:	80 f9       	bld	r24, 0
    45ca:	21 e0       	ldi	r18, 0x01	; 1
    45cc:	82 27       	eor	r24, r18
    45ce:	80 fb       	bst	r24, 0
    45d0:	91 f9       	bld	r25, 1
    45d2:	22 c0       	rjmp	.+68     	; 0x4618 <bootmagic+0xcc>
        } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    45d4:	8e e0       	ldi	r24, 0x0E	; 14
    45d6:	0e 94 98 22 	call	0x4530	; 0x4530 <bootmagic_scan_keycode>
    45da:	88 23       	and	r24, r24
    45dc:	51 f0       	breq	.+20     	; 0x45f2 <bootmagic+0xa6>
            debug_config.keyboard = !debug_config.keyboard;
    45de:	90 91 d7 01 	lds	r25, 0x01D7
    45e2:	92 fb       	bst	r25, 2
    45e4:	88 27       	eor	r24, r24
    45e6:	80 f9       	bld	r24, 0
    45e8:	21 e0       	ldi	r18, 0x01	; 1
    45ea:	82 27       	eor	r24, r18
    45ec:	80 fb       	bst	r24, 0
    45ee:	92 f9       	bld	r25, 2
    45f0:	13 c0       	rjmp	.+38     	; 0x4618 <bootmagic+0xcc>
        } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    45f2:	80 e1       	ldi	r24, 0x10	; 16
    45f4:	0e 94 98 22 	call	0x4530	; 0x4530 <bootmagic_scan_keycode>
    45f8:	90 91 d7 01 	lds	r25, 0x01D7
    45fc:	88 23       	and	r24, r24
    45fe:	41 f0       	breq	.+16     	; 0x4610 <bootmagic+0xc4>
            debug_config.mouse = !debug_config.mouse;
    4600:	93 fb       	bst	r25, 3
    4602:	88 27       	eor	r24, r24
    4604:	80 f9       	bld	r24, 0
    4606:	21 e0       	ldi	r18, 0x01	; 1
    4608:	82 27       	eor	r24, r18
    460a:	80 fb       	bst	r24, 0
    460c:	93 f9       	bld	r25, 3
    460e:	04 c0       	rjmp	.+8      	; 0x4618 <bootmagic+0xcc>
        } else {
            debug_config.enable = !debug_config.enable;
    4610:	89 2f       	mov	r24, r25
    4612:	80 95       	com	r24
    4614:	80 fb       	bst	r24, 0
    4616:	90 f9       	bld	r25, 0
    4618:	90 93 d7 01 	sts	0x01D7, r25
        }
    }
    eeconfig_write_debug(debug_config.raw);
    461c:	80 91 d7 01 	lds	r24, 0x01D7
    4620:	0e 94 02 24 	call	0x4804	; 0x4804 <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    4624:	0e 94 10 24 	call	0x4820	; 0x4820 <eeconfig_read_keymap>
    4628:	80 93 ea 01 	sts	0x01EA, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    462c:	80 ee       	ldi	r24, 0xE0	; 224
    462e:	0e 94 98 22 	call	0x4530	; 0x4530 <bootmagic_scan_keycode>
    4632:	88 23       	and	r24, r24
    4634:	41 f0       	breq	.+16     	; 0x4646 <bootmagic+0xfa>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    4636:	80 91 ea 01 	lds	r24, 0x01EA
    463a:	98 2f       	mov	r25, r24
    463c:	90 95       	com	r25
    463e:	90 fb       	bst	r25, 0
    4640:	80 f9       	bld	r24, 0
    4642:	80 93 ea 01 	sts	0x01EA, r24
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    4646:	89 e3       	ldi	r24, 0x39	; 57
    4648:	0e 94 98 22 	call	0x4530	; 0x4530 <bootmagic_scan_keycode>
    464c:	88 23       	and	r24, r24
    464e:	59 f0       	breq	.+22     	; 0x4666 <bootmagic+0x11a>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    4650:	90 91 ea 01 	lds	r25, 0x01EA
    4654:	91 fb       	bst	r25, 1
    4656:	88 27       	eor	r24, r24
    4658:	80 f9       	bld	r24, 0
    465a:	21 e0       	ldi	r18, 0x01	; 1
    465c:	82 27       	eor	r24, r18
    465e:	80 fb       	bst	r24, 0
    4660:	91 f9       	bld	r25, 1
    4662:	90 93 ea 01 	sts	0x01EA, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    4666:	82 ee       	ldi	r24, 0xE2	; 226
    4668:	0e 94 98 22 	call	0x4530	; 0x4530 <bootmagic_scan_keycode>
    466c:	88 23       	and	r24, r24
    466e:	59 f0       	breq	.+22     	; 0x4686 <bootmagic+0x13a>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    4670:	90 91 ea 01 	lds	r25, 0x01EA
    4674:	92 fb       	bst	r25, 2
    4676:	88 27       	eor	r24, r24
    4678:	80 f9       	bld	r24, 0
    467a:	21 e0       	ldi	r18, 0x01	; 1
    467c:	82 27       	eor	r24, r18
    467e:	80 fb       	bst	r24, 0
    4680:	92 f9       	bld	r25, 2
    4682:	90 93 ea 01 	sts	0x01EA, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    4686:	86 ee       	ldi	r24, 0xE6	; 230
    4688:	0e 94 98 22 	call	0x4530	; 0x4530 <bootmagic_scan_keycode>
    468c:	88 23       	and	r24, r24
    468e:	59 f0       	breq	.+22     	; 0x46a6 <bootmagic+0x15a>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    4690:	90 91 ea 01 	lds	r25, 0x01EA
    4694:	93 fb       	bst	r25, 3
    4696:	88 27       	eor	r24, r24
    4698:	80 f9       	bld	r24, 0
    469a:	21 e0       	ldi	r18, 0x01	; 1
    469c:	82 27       	eor	r24, r18
    469e:	80 fb       	bst	r24, 0
    46a0:	93 f9       	bld	r25, 3
    46a2:	90 93 ea 01 	sts	0x01EA, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_NO_GUI)) {
    46a6:	83 ee       	ldi	r24, 0xE3	; 227
    46a8:	0e 94 98 22 	call	0x4530	; 0x4530 <bootmagic_scan_keycode>
    46ac:	88 23       	and	r24, r24
    46ae:	59 f0       	breq	.+22     	; 0x46c6 <bootmagic+0x17a>
        keymap_config.no_gui = !keymap_config.no_gui;
    46b0:	90 91 ea 01 	lds	r25, 0x01EA
    46b4:	94 fb       	bst	r25, 4
    46b6:	88 27       	eor	r24, r24
    46b8:	80 f9       	bld	r24, 0
    46ba:	21 e0       	ldi	r18, 0x01	; 1
    46bc:	82 27       	eor	r24, r18
    46be:	80 fb       	bst	r24, 0
    46c0:	94 f9       	bld	r25, 4
    46c2:	90 93 ea 01 	sts	0x01EA, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    46c6:	85 e3       	ldi	r24, 0x35	; 53
    46c8:	0e 94 98 22 	call	0x4530	; 0x4530 <bootmagic_scan_keycode>
    46cc:	88 23       	and	r24, r24
    46ce:	59 f0       	breq	.+22     	; 0x46e6 <bootmagic+0x19a>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    46d0:	90 91 ea 01 	lds	r25, 0x01EA
    46d4:	95 fb       	bst	r25, 5
    46d6:	88 27       	eor	r24, r24
    46d8:	80 f9       	bld	r24, 0
    46da:	21 e0       	ldi	r18, 0x01	; 1
    46dc:	82 27       	eor	r24, r18
    46de:	80 fb       	bst	r24, 0
    46e0:	95 f9       	bld	r25, 5
    46e2:	90 93 ea 01 	sts	0x01EA, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    46e6:	81 e3       	ldi	r24, 0x31	; 49
    46e8:	0e 94 98 22 	call	0x4530	; 0x4530 <bootmagic_scan_keycode>
    46ec:	88 23       	and	r24, r24
    46ee:	59 f0       	breq	.+22     	; 0x4706 <bootmagic+0x1ba>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    46f0:	90 91 ea 01 	lds	r25, 0x01EA
    46f4:	96 fb       	bst	r25, 6
    46f6:	88 27       	eor	r24, r24
    46f8:	80 f9       	bld	r24, 0
    46fa:	21 e0       	ldi	r18, 0x01	; 1
    46fc:	82 27       	eor	r24, r18
    46fe:	80 fb       	bst	r24, 0
    4700:	96 f9       	bld	r25, 6
    4702:	90 93 ea 01 	sts	0x01EA, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_HOST_NKRO)) {
    4706:	81 e1       	ldi	r24, 0x11	; 17
    4708:	0e 94 98 22 	call	0x4530	; 0x4530 <bootmagic_scan_keycode>
    470c:	88 23       	and	r24, r24
    470e:	59 f0       	breq	.+22     	; 0x4726 <bootmagic+0x1da>
        keymap_config.nkro = !keymap_config.nkro;
    4710:	90 91 ea 01 	lds	r25, 0x01EA
    4714:	97 fb       	bst	r25, 7
    4716:	88 27       	eor	r24, r24
    4718:	80 f9       	bld	r24, 0
    471a:	21 e0       	ldi	r18, 0x01	; 1
    471c:	82 27       	eor	r24, r18
    471e:	80 fb       	bst	r24, 0
    4720:	97 f9       	bld	r25, 7
    4722:	90 93 ea 01 	sts	0x01EA, r25
    }
    eeconfig_write_keymap(keymap_config.raw);
    4726:	80 91 ea 01 	lds	r24, 0x01EA
    472a:	0e 94 14 24 	call	0x4828	; 0x4828 <eeconfig_write_keymap>

#ifdef NKRO_ENABLE
    keyboard_nkro = keymap_config.nkro;
    472e:	80 91 ea 01 	lds	r24, 0x01EA
    4732:	87 fb       	bst	r24, 7
    4734:	88 27       	eor	r24, r24
    4736:	80 f9       	bld	r24, 0
    4738:	80 93 0d 01 	sts	0x010D, r24
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    473c:	87 e2       	ldi	r24, 0x27	; 39
    473e:	0e 94 98 22 	call	0x4530	; 0x4530 <bootmagic_scan_keycode>
    4742:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    4744:	8e e1       	ldi	r24, 0x1E	; 30
    4746:	0e 94 98 22 	call	0x4530	; 0x4530 <bootmagic_scan_keycode>
    474a:	81 11       	cpse	r24, r1
    474c:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    474e:	8f e1       	ldi	r24, 0x1F	; 31
    4750:	0e 94 98 22 	call	0x4530	; 0x4530 <bootmagic_scan_keycode>
    4754:	81 11       	cpse	r24, r1
    4756:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    4758:	80 e2       	ldi	r24, 0x20	; 32
    475a:	0e 94 98 22 	call	0x4530	; 0x4530 <bootmagic_scan_keycode>
    475e:	81 11       	cpse	r24, r1
    4760:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    4762:	81 e2       	ldi	r24, 0x21	; 33
    4764:	0e 94 98 22 	call	0x4530	; 0x4530 <bootmagic_scan_keycode>
    4768:	81 11       	cpse	r24, r1
    476a:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    476c:	82 e2       	ldi	r24, 0x22	; 34
    476e:	0e 94 98 22 	call	0x4530	; 0x4530 <bootmagic_scan_keycode>
    4772:	81 11       	cpse	r24, r1
    4774:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    4776:	83 e2       	ldi	r24, 0x23	; 35
    4778:	0e 94 98 22 	call	0x4530	; 0x4530 <bootmagic_scan_keycode>
    477c:	81 11       	cpse	r24, r1
    477e:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    4780:	84 e2       	ldi	r24, 0x24	; 36
    4782:	0e 94 98 22 	call	0x4530	; 0x4530 <bootmagic_scan_keycode>
    4786:	88 23       	and	r24, r24
    4788:	11 f0       	breq	.+4      	; 0x478e <bootmagic+0x242>
    478a:	c0 68       	ori	r28, 0x80	; 128
    478c:	02 c0       	rjmp	.+4      	; 0x4792 <bootmagic+0x246>
    if (default_layer) {
    478e:	cc 23       	and	r28, r28
    4790:	29 f0       	breq	.+10     	; 0x479c <bootmagic+0x250>
        eeconfig_write_default_layer(default_layer);
    4792:	8c 2f       	mov	r24, r28
    4794:	0e 94 0b 24 	call	0x4816	; 0x4816 <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    4798:	6c 2f       	mov	r22, r28
    479a:	03 c0       	rjmp	.+6      	; 0x47a2 <bootmagic+0x256>
    } else {
        default_layer = eeconfig_read_default_layer();
    479c:	0e 94 07 24 	call	0x480e	; 0x480e <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    47a0:	68 2f       	mov	r22, r24
    47a2:	70 e0       	ldi	r23, 0x00	; 0
    47a4:	80 e0       	ldi	r24, 0x00	; 0
    47a6:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    47a8:	cf 91       	pop	r28
    if (default_layer) {
        eeconfig_write_default_layer(default_layer);
        default_layer_set((uint32_t)default_layer);
    } else {
        default_layer = eeconfig_read_default_layer();
        default_layer_set((uint32_t)default_layer);
    47aa:	0c 94 ac 1e 	jmp	0x3d58	; 0x3d58 <default_layer_set>
    }
}
    47ae:	cf 91       	pop	r28
    47b0:	08 95       	ret

000047b2 <eeconfig_init>:
#include <avr/eeprom.h>
#include "eeconfig.h"

void eeconfig_init(void)
{
    eeprom_write_word(EECONFIG_MAGIC,          EECONFIG_MAGIC_NUMBER);
    47b2:	6d ee       	ldi	r22, 0xED	; 237
    47b4:	7e ef       	ldi	r23, 0xFE	; 254
    47b6:	80 e0       	ldi	r24, 0x00	; 0
    47b8:	90 e0       	ldi	r25, 0x00	; 0
    47ba:	0e 94 ce 2d 	call	0x5b9c	; 0x5b9c <__eewr_word_m32u4>
    eeprom_write_byte(EECONFIG_DEBUG,          0);
    47be:	60 e0       	ldi	r22, 0x00	; 0
    47c0:	82 e0       	ldi	r24, 0x02	; 2
    47c2:	90 e0       	ldi	r25, 0x00	; 0
    47c4:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_DEFAULT_LAYER,  0);
    47c8:	60 e0       	ldi	r22, 0x00	; 0
    47ca:	83 e0       	ldi	r24, 0x03	; 3
    47cc:	90 e0       	ldi	r25, 0x00	; 0
    47ce:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_KEYMAP,         0);
    47d2:	60 e0       	ldi	r22, 0x00	; 0
    47d4:	84 e0       	ldi	r24, 0x04	; 4
    47d6:	90 e0       	ldi	r25, 0x00	; 0
    47d8:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_MOUSEKEY_ACCEL, 0);
    47dc:	60 e0       	ldi	r22, 0x00	; 0
    47de:	85 e0       	ldi	r24, 0x05	; 5
    47e0:	90 e0       	ldi	r25, 0x00	; 0
    47e2:	0c 94 c0 2d 	jmp	0x5b80	; 0x5b80 <__eewr_byte_m32u4>

000047e6 <eeconfig_is_enabled>:
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    47e6:	80 e0       	ldi	r24, 0x00	; 0
    47e8:	90 e0       	ldi	r25, 0x00	; 0
    47ea:	0e 94 ba 2d 	call	0x5b74	; 0x5b74 <__eerd_word_m32u4>
    47ee:	21 e0       	ldi	r18, 0x01	; 1
    47f0:	8d 3e       	cpi	r24, 0xED	; 237
    47f2:	9e 4f       	sbci	r25, 0xFE	; 254
    47f4:	09 f0       	breq	.+2      	; 0x47f8 <eeconfig_is_enabled+0x12>
    47f6:	20 e0       	ldi	r18, 0x00	; 0
}
    47f8:	82 2f       	mov	r24, r18
    47fa:	08 95       	ret

000047fc <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    47fc:	82 e0       	ldi	r24, 0x02	; 2
    47fe:	90 e0       	ldi	r25, 0x00	; 0
    4800:	0c 94 b2 2d 	jmp	0x5b64	; 0x5b64 <__eerd_byte_m32u4>

00004804 <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    4804:	68 2f       	mov	r22, r24
    4806:	82 e0       	ldi	r24, 0x02	; 2
    4808:	90 e0       	ldi	r25, 0x00	; 0
    480a:	0c 94 c0 2d 	jmp	0x5b80	; 0x5b80 <__eewr_byte_m32u4>

0000480e <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    480e:	83 e0       	ldi	r24, 0x03	; 3
    4810:	90 e0       	ldi	r25, 0x00	; 0
    4812:	0c 94 b2 2d 	jmp	0x5b64	; 0x5b64 <__eerd_byte_m32u4>

00004816 <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    4816:	68 2f       	mov	r22, r24
    4818:	83 e0       	ldi	r24, 0x03	; 3
    481a:	90 e0       	ldi	r25, 0x00	; 0
    481c:	0c 94 c0 2d 	jmp	0x5b80	; 0x5b80 <__eewr_byte_m32u4>

00004820 <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    4820:	84 e0       	ldi	r24, 0x04	; 4
    4822:	90 e0       	ldi	r25, 0x00	; 0
    4824:	0c 94 b2 2d 	jmp	0x5b64	; 0x5b64 <__eerd_byte_m32u4>

00004828 <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    4828:	68 2f       	mov	r22, r24
    482a:	84 e0       	ldi	r24, 0x04	; 4
    482c:	90 e0       	ldi	r25, 0x00	; 0
    482e:	0c 94 c0 2d 	jmp	0x5b80	; 0x5b80 <__eewr_byte_m32u4>

00004832 <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4832:	80 91 df 01 	lds	r24, 0x01DF
    4836:	80 ff       	sbrs	r24, 0
    4838:	0b c0       	rjmp	.+22     	; 0x4850 <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    483a:	60 91 13 01 	lds	r22, 0x0113
    483e:	85 e0       	ldi	r24, 0x05	; 5
    4840:	68 9f       	mul	r22, r24
    4842:	b0 01       	movw	r22, r0
    4844:	11 24       	eor	r1, r1
    4846:	75 95       	asr	r23
    4848:	67 95       	ror	r22
    484a:	75 95       	asr	r23
    484c:	67 95       	ror	r22
    484e:	2a c0       	rjmp	.+84     	; 0x48a4 <move_unit+0x72>
    } else if (mousekey_accel & (1<<1)) {
    4850:	81 ff       	sbrs	r24, 1
    4852:	09 c0       	rjmp	.+18     	; 0x4866 <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    4854:	60 91 13 01 	lds	r22, 0x0113
    4858:	85 e0       	ldi	r24, 0x05	; 5
    485a:	68 9f       	mul	r22, r24
    485c:	b0 01       	movw	r22, r0
    485e:	11 24       	eor	r1, r1
    4860:	75 95       	asr	r23
    4862:	67 95       	ror	r22
    4864:	1f c0       	rjmp	.+62     	; 0x48a4 <move_unit+0x72>
    } else if (mousekey_accel & (1<<2)) {
    4866:	82 ff       	sbrs	r24, 2
    4868:	07 c0       	rjmp	.+14     	; 0x4878 <move_unit+0x46>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    486a:	60 91 13 01 	lds	r22, 0x0113
    486e:	85 e0       	ldi	r24, 0x05	; 5
    4870:	68 9f       	mul	r22, r24
    4872:	b0 01       	movw	r22, r0
    4874:	11 24       	eor	r1, r1
    4876:	16 c0       	rjmp	.+44     	; 0x48a4 <move_unit+0x72>
    } else if (mousekey_repeat == 0) {
    4878:	40 91 e0 01 	lds	r20, 0x01E0
    487c:	44 23       	and	r20, r20
    487e:	c9 f0       	breq	.+50     	; 0x48b2 <move_unit+0x80>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    4880:	60 91 12 01 	lds	r22, 0x0112
    4884:	46 17       	cp	r20, r22
    4886:	88 f7       	brcc	.-30     	; 0x486a <move_unit+0x38>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    4888:	20 91 13 01 	lds	r18, 0x0113
    488c:	85 e0       	ldi	r24, 0x05	; 5
    488e:	28 9f       	mul	r18, r24
    4890:	90 01       	movw	r18, r0
    4892:	11 24       	eor	r1, r1
    4894:	42 9f       	mul	r20, r18
    4896:	c0 01       	movw	r24, r0
    4898:	43 9f       	mul	r20, r19
    489a:	90 0d       	add	r25, r0
    489c:	11 24       	eor	r1, r1
    489e:	70 e0       	ldi	r23, 0x00	; 0
    48a0:	0e 94 84 2d 	call	0x5b08	; 0x5b08 <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    48a4:	60 38       	cpi	r22, 0x80	; 128
    48a6:	71 05       	cpc	r23, r1
    48a8:	40 f4       	brcc	.+16     	; 0x48ba <move_unit+0x88>
    48aa:	61 15       	cp	r22, r1
    48ac:	71 05       	cpc	r23, r1
    48ae:	39 f0       	breq	.+14     	; 0x48be <move_unit+0x8c>
    48b0:	02 c0       	rjmp	.+4      	; 0x48b6 <move_unit+0x84>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    48b2:	65 e0       	ldi	r22, 0x05	; 5
    48b4:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    48b6:	86 2f       	mov	r24, r22
    48b8:	08 95       	ret
    48ba:	8f e7       	ldi	r24, 0x7F	; 127
    48bc:	08 95       	ret
    48be:	81 e0       	ldi	r24, 0x01	; 1
}
    48c0:	08 95       	ret

000048c2 <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    48c2:	80 91 df 01 	lds	r24, 0x01DF
    48c6:	80 ff       	sbrs	r24, 0
    48c8:	08 c0       	rjmp	.+16     	; 0x48da <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    48ca:	60 91 11 01 	lds	r22, 0x0111
    48ce:	70 e0       	ldi	r23, 0x00	; 0
    48d0:	75 95       	asr	r23
    48d2:	67 95       	ror	r22
    48d4:	75 95       	asr	r23
    48d6:	67 95       	ror	r22
    48d8:	21 c0       	rjmp	.+66     	; 0x491c <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<1)) {
    48da:	81 ff       	sbrs	r24, 1
    48dc:	06 c0       	rjmp	.+12     	; 0x48ea <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    48de:	60 91 11 01 	lds	r22, 0x0111
    48e2:	70 e0       	ldi	r23, 0x00	; 0
    48e4:	75 95       	asr	r23
    48e6:	67 95       	ror	r22
    48e8:	19 c0       	rjmp	.+50     	; 0x491c <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<2)) {
    48ea:	82 ff       	sbrs	r24, 2
    48ec:	04 c0       	rjmp	.+8      	; 0x48f6 <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    48ee:	60 91 11 01 	lds	r22, 0x0111
    48f2:	70 e0       	ldi	r23, 0x00	; 0
    48f4:	10 c0       	rjmp	.+32     	; 0x4916 <wheel_unit+0x54>
    } else if (mousekey_repeat == 0) {
    48f6:	80 91 e0 01 	lds	r24, 0x01E0
    48fa:	88 23       	and	r24, r24
    48fc:	c1 f0       	breq	.+48     	; 0x492e <wheel_unit+0x6c>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    48fe:	60 91 10 01 	lds	r22, 0x0110
    4902:	86 17       	cp	r24, r22
    4904:	a0 f7       	brcc	.-24     	; 0x48ee <wheel_unit+0x2c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    4906:	90 91 11 01 	lds	r25, 0x0111
    490a:	98 9f       	mul	r25, r24
    490c:	c0 01       	movw	r24, r0
    490e:	11 24       	eor	r1, r1
    4910:	70 e0       	ldi	r23, 0x00	; 0
    4912:	0e 94 84 2d 	call	0x5b08	; 0x5b08 <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    4916:	60 38       	cpi	r22, 0x80	; 128
    4918:	71 05       	cpc	r23, r1
    491a:	28 f4       	brcc	.+10     	; 0x4926 <wheel_unit+0x64>
    491c:	61 15       	cp	r22, r1
    491e:	71 05       	cpc	r23, r1
    4920:	21 f0       	breq	.+8      	; 0x492a <wheel_unit+0x68>
    4922:	86 2f       	mov	r24, r22
    4924:	08 95       	ret
    4926:	8f e7       	ldi	r24, 0x7F	; 127
    4928:	08 95       	ret
    492a:	81 e0       	ldi	r24, 0x01	; 1
    492c:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    492e:	61 e0       	ldi	r22, 0x01	; 1
    4930:	70 e0       	ldi	r23, 0x00	; 0
    4932:	f4 cf       	rjmp	.-24     	; 0x491c <wheel_unit+0x5a>

00004934 <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    4934:	80 3f       	cpi	r24, 0xF0	; 240
    4936:	21 f4       	brne	.+8      	; 0x4940 <mousekey_on+0xc>
    4938:	0e 94 19 24 	call	0x4832	; 0x4832 <move_unit>
    493c:	81 95       	neg	r24
    493e:	04 c0       	rjmp	.+8      	; 0x4948 <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    4940:	81 3f       	cpi	r24, 0xF1	; 241
    4942:	29 f4       	brne	.+10     	; 0x494e <mousekey_on+0x1a>
    4944:	0e 94 19 24 	call	0x4832	; 0x4832 <move_unit>
    4948:	80 93 e3 01 	sts	0x01E3, r24
    494c:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    494e:	82 3f       	cpi	r24, 0xF2	; 242
    4950:	21 f4       	brne	.+8      	; 0x495a <mousekey_on+0x26>
    4952:	0e 94 19 24 	call	0x4832	; 0x4832 <move_unit>
    4956:	81 95       	neg	r24
    4958:	04 c0       	rjmp	.+8      	; 0x4962 <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    495a:	83 3f       	cpi	r24, 0xF3	; 243
    495c:	29 f4       	brne	.+10     	; 0x4968 <mousekey_on+0x34>
    495e:	0e 94 19 24 	call	0x4832	; 0x4832 <move_unit>
    4962:	80 93 e2 01 	sts	0x01E2, r24
    4966:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    4968:	89 3f       	cpi	r24, 0xF9	; 249
    496a:	19 f4       	brne	.+6      	; 0x4972 <mousekey_on+0x3e>
    496c:	0e 94 61 24 	call	0x48c2	; 0x48c2 <wheel_unit>
    4970:	05 c0       	rjmp	.+10     	; 0x497c <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    4972:	8a 3f       	cpi	r24, 0xFA	; 250
    4974:	31 f4       	brne	.+12     	; 0x4982 <mousekey_on+0x4e>
    4976:	0e 94 61 24 	call	0x48c2	; 0x48c2 <wheel_unit>
    497a:	81 95       	neg	r24
    497c:	80 93 e4 01 	sts	0x01E4, r24
    4980:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    4982:	8b 3f       	cpi	r24, 0xFB	; 251
    4984:	21 f4       	brne	.+8      	; 0x498e <mousekey_on+0x5a>
    4986:	0e 94 61 24 	call	0x48c2	; 0x48c2 <wheel_unit>
    498a:	81 95       	neg	r24
    498c:	04 c0       	rjmp	.+8      	; 0x4996 <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    498e:	8c 3f       	cpi	r24, 0xFC	; 252
    4990:	29 f4       	brne	.+10     	; 0x499c <mousekey_on+0x68>
    4992:	0e 94 61 24 	call	0x48c2	; 0x48c2 <wheel_unit>
    4996:	80 93 e5 01 	sts	0x01E5, r24
    499a:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    499c:	84 3f       	cpi	r24, 0xF4	; 244
    499e:	21 f4       	brne	.+8      	; 0x49a8 <mousekey_on+0x74>
    49a0:	80 91 e1 01 	lds	r24, 0x01E1
    49a4:	81 60       	ori	r24, 0x01	; 1
    49a6:	17 c0       	rjmp	.+46     	; 0x49d6 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    49a8:	85 3f       	cpi	r24, 0xF5	; 245
    49aa:	21 f4       	brne	.+8      	; 0x49b4 <mousekey_on+0x80>
    49ac:	80 91 e1 01 	lds	r24, 0x01E1
    49b0:	82 60       	ori	r24, 0x02	; 2
    49b2:	11 c0       	rjmp	.+34     	; 0x49d6 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    49b4:	86 3f       	cpi	r24, 0xF6	; 246
    49b6:	21 f4       	brne	.+8      	; 0x49c0 <mousekey_on+0x8c>
    49b8:	80 91 e1 01 	lds	r24, 0x01E1
    49bc:	84 60       	ori	r24, 0x04	; 4
    49be:	0b c0       	rjmp	.+22     	; 0x49d6 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    49c0:	87 3f       	cpi	r24, 0xF7	; 247
    49c2:	21 f4       	brne	.+8      	; 0x49cc <mousekey_on+0x98>
    49c4:	80 91 e1 01 	lds	r24, 0x01E1
    49c8:	88 60       	ori	r24, 0x08	; 8
    49ca:	05 c0       	rjmp	.+10     	; 0x49d6 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    49cc:	88 3f       	cpi	r24, 0xF8	; 248
    49ce:	31 f4       	brne	.+12     	; 0x49dc <mousekey_on+0xa8>
    49d0:	80 91 e1 01 	lds	r24, 0x01E1
    49d4:	80 61       	ori	r24, 0x10	; 16
    49d6:	80 93 e1 01 	sts	0x01E1, r24
    49da:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    49dc:	8d 3f       	cpi	r24, 0xFD	; 253
    49de:	21 f4       	brne	.+8      	; 0x49e8 <mousekey_on+0xb4>
    49e0:	80 91 df 01 	lds	r24, 0x01DF
    49e4:	81 60       	ori	r24, 0x01	; 1
    49e6:	0b c0       	rjmp	.+22     	; 0x49fe <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    49e8:	8e 3f       	cpi	r24, 0xFE	; 254
    49ea:	21 f4       	brne	.+8      	; 0x49f4 <mousekey_on+0xc0>
    49ec:	80 91 df 01 	lds	r24, 0x01DF
    49f0:	82 60       	ori	r24, 0x02	; 2
    49f2:	05 c0       	rjmp	.+10     	; 0x49fe <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    49f4:	8f 3f       	cpi	r24, 0xFF	; 255
    49f6:	29 f4       	brne	.+10     	; 0x4a02 <mousekey_on+0xce>
    49f8:	80 91 df 01 	lds	r24, 0x01DF
    49fc:	84 60       	ori	r24, 0x04	; 4
    49fe:	80 93 df 01 	sts	0x01DF, r24
    4a02:	08 95       	ret

00004a04 <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    4a04:	80 3f       	cpi	r24, 0xF0	; 240
    4a06:	39 f4       	brne	.+14     	; 0x4a16 <mousekey_off+0x12>
    4a08:	80 91 e3 01 	lds	r24, 0x01E3
    4a0c:	87 ff       	sbrs	r24, 7
    4a0e:	6c c0       	rjmp	.+216    	; 0x4ae8 <mousekey_off+0xe4>
    4a10:	10 92 e3 01 	sts	0x01E3, r1
    4a14:	69 c0       	rjmp	.+210    	; 0x4ae8 <mousekey_off+0xe4>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    4a16:	81 3f       	cpi	r24, 0xF1	; 241
    4a18:	29 f4       	brne	.+10     	; 0x4a24 <mousekey_off+0x20>
    4a1a:	80 91 e3 01 	lds	r24, 0x01E3
    4a1e:	18 16       	cp	r1, r24
    4a20:	bc f3       	brlt	.-18     	; 0x4a10 <mousekey_off+0xc>
    4a22:	62 c0       	rjmp	.+196    	; 0x4ae8 <mousekey_off+0xe4>
    4a24:	90 91 e2 01 	lds	r25, 0x01E2
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    4a28:	82 3f       	cpi	r24, 0xF2	; 242
    4a2a:	29 f4       	brne	.+10     	; 0x4a36 <mousekey_off+0x32>
    4a2c:	97 ff       	sbrs	r25, 7
    4a2e:	5c c0       	rjmp	.+184    	; 0x4ae8 <mousekey_off+0xe4>
    4a30:	10 92 e2 01 	sts	0x01E2, r1
    4a34:	59 c0       	rjmp	.+178    	; 0x4ae8 <mousekey_off+0xe4>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    4a36:	83 3f       	cpi	r24, 0xF3	; 243
    4a38:	19 f4       	brne	.+6      	; 0x4a40 <mousekey_off+0x3c>
    4a3a:	19 16       	cp	r1, r25
    4a3c:	cc f3       	brlt	.-14     	; 0x4a30 <mousekey_off+0x2c>
    4a3e:	54 c0       	rjmp	.+168    	; 0x4ae8 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    4a40:	89 3f       	cpi	r24, 0xF9	; 249
    4a42:	41 f4       	brne	.+16     	; 0x4a54 <mousekey_off+0x50>
    4a44:	80 91 e4 01 	lds	r24, 0x01E4
    4a48:	18 16       	cp	r1, r24
    4a4a:	0c f0       	brlt	.+2      	; 0x4a4e <mousekey_off+0x4a>
    4a4c:	4d c0       	rjmp	.+154    	; 0x4ae8 <mousekey_off+0xe4>
    4a4e:	10 92 e4 01 	sts	0x01E4, r1
    4a52:	4a c0       	rjmp	.+148    	; 0x4ae8 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    4a54:	8a 3f       	cpi	r24, 0xFA	; 250
    4a56:	29 f4       	brne	.+10     	; 0x4a62 <mousekey_off+0x5e>
    4a58:	80 91 e4 01 	lds	r24, 0x01E4
    4a5c:	87 ff       	sbrs	r24, 7
    4a5e:	44 c0       	rjmp	.+136    	; 0x4ae8 <mousekey_off+0xe4>
    4a60:	f6 cf       	rjmp	.-20     	; 0x4a4e <mousekey_off+0x4a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    4a62:	8b 3f       	cpi	r24, 0xFB	; 251
    4a64:	39 f4       	brne	.+14     	; 0x4a74 <mousekey_off+0x70>
    4a66:	80 91 e5 01 	lds	r24, 0x01E5
    4a6a:	87 ff       	sbrs	r24, 7
    4a6c:	3d c0       	rjmp	.+122    	; 0x4ae8 <mousekey_off+0xe4>
    4a6e:	10 92 e5 01 	sts	0x01E5, r1
    4a72:	3a c0       	rjmp	.+116    	; 0x4ae8 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    4a74:	8c 3f       	cpi	r24, 0xFC	; 252
    4a76:	29 f4       	brne	.+10     	; 0x4a82 <mousekey_off+0x7e>
    4a78:	80 91 e5 01 	lds	r24, 0x01E5
    4a7c:	18 16       	cp	r1, r24
    4a7e:	bc f3       	brlt	.-18     	; 0x4a6e <mousekey_off+0x6a>
    4a80:	33 c0       	rjmp	.+102    	; 0x4ae8 <mousekey_off+0xe4>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    4a82:	84 3f       	cpi	r24, 0xF4	; 244
    4a84:	21 f4       	brne	.+8      	; 0x4a8e <mousekey_off+0x8a>
    4a86:	80 91 e1 01 	lds	r24, 0x01E1
    4a8a:	8e 7f       	andi	r24, 0xFE	; 254
    4a8c:	17 c0       	rjmp	.+46     	; 0x4abc <mousekey_off+0xb8>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    4a8e:	85 3f       	cpi	r24, 0xF5	; 245
    4a90:	21 f4       	brne	.+8      	; 0x4a9a <mousekey_off+0x96>
    4a92:	80 91 e1 01 	lds	r24, 0x01E1
    4a96:	8d 7f       	andi	r24, 0xFD	; 253
    4a98:	11 c0       	rjmp	.+34     	; 0x4abc <mousekey_off+0xb8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    4a9a:	86 3f       	cpi	r24, 0xF6	; 246
    4a9c:	21 f4       	brne	.+8      	; 0x4aa6 <mousekey_off+0xa2>
    4a9e:	80 91 e1 01 	lds	r24, 0x01E1
    4aa2:	8b 7f       	andi	r24, 0xFB	; 251
    4aa4:	0b c0       	rjmp	.+22     	; 0x4abc <mousekey_off+0xb8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    4aa6:	87 3f       	cpi	r24, 0xF7	; 247
    4aa8:	21 f4       	brne	.+8      	; 0x4ab2 <mousekey_off+0xae>
    4aaa:	80 91 e1 01 	lds	r24, 0x01E1
    4aae:	87 7f       	andi	r24, 0xF7	; 247
    4ab0:	05 c0       	rjmp	.+10     	; 0x4abc <mousekey_off+0xb8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    4ab2:	88 3f       	cpi	r24, 0xF8	; 248
    4ab4:	31 f4       	brne	.+12     	; 0x4ac2 <mousekey_off+0xbe>
    4ab6:	80 91 e1 01 	lds	r24, 0x01E1
    4aba:	8f 7e       	andi	r24, 0xEF	; 239
    4abc:	80 93 e1 01 	sts	0x01E1, r24
    4ac0:	13 c0       	rjmp	.+38     	; 0x4ae8 <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    4ac2:	8d 3f       	cpi	r24, 0xFD	; 253
    4ac4:	21 f4       	brne	.+8      	; 0x4ace <mousekey_off+0xca>
    4ac6:	80 91 df 01 	lds	r24, 0x01DF
    4aca:	8e 7f       	andi	r24, 0xFE	; 254
    4acc:	0b c0       	rjmp	.+22     	; 0x4ae4 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    4ace:	8e 3f       	cpi	r24, 0xFE	; 254
    4ad0:	21 f4       	brne	.+8      	; 0x4ada <mousekey_off+0xd6>
    4ad2:	80 91 df 01 	lds	r24, 0x01DF
    4ad6:	8d 7f       	andi	r24, 0xFD	; 253
    4ad8:	05 c0       	rjmp	.+10     	; 0x4ae4 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    4ada:	8f 3f       	cpi	r24, 0xFF	; 255
    4adc:	29 f4       	brne	.+10     	; 0x4ae8 <mousekey_off+0xe4>
    4ade:	80 91 df 01 	lds	r24, 0x01DF
    4ae2:	8b 7f       	andi	r24, 0xFB	; 251
    4ae4:	80 93 df 01 	sts	0x01DF, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4ae8:	80 91 e2 01 	lds	r24, 0x01E2
    4aec:	81 11       	cpse	r24, r1
    4aee:	0e c0       	rjmp	.+28     	; 0x4b0c <mousekey_off+0x108>
    4af0:	80 91 e3 01 	lds	r24, 0x01E3
    4af4:	81 11       	cpse	r24, r1
    4af6:	0a c0       	rjmp	.+20     	; 0x4b0c <mousekey_off+0x108>
    4af8:	80 91 e4 01 	lds	r24, 0x01E4
    4afc:	81 11       	cpse	r24, r1
    4afe:	06 c0       	rjmp	.+12     	; 0x4b0c <mousekey_off+0x108>
    4b00:	80 91 e5 01 	lds	r24, 0x01E5
    4b04:	81 11       	cpse	r24, r1
    4b06:	02 c0       	rjmp	.+4      	; 0x4b0c <mousekey_off+0x108>
        mousekey_repeat = 0;
    4b08:	10 92 e0 01 	sts	0x01E0, r1
    4b0c:	08 95       	ret

00004b0e <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    4b0e:	80 91 d7 01 	lds	r24, 0x01D7
    4b12:	83 ff       	sbrs	r24, 3
    4b14:	7e c0       	rjmp	.+252    	; 0x4c12 <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    4b16:	81 e4       	ldi	r24, 0x41	; 65
    4b18:	96 e0       	ldi	r25, 0x06	; 6
    4b1a:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    phex(mouse_report.buttons); print("|");
    4b1e:	80 91 e1 01 	lds	r24, 0x01E1
    4b22:	1f 92       	push	r1
    4b24:	8f 93       	push	r24
    4b26:	8c e3       	ldi	r24, 0x3C	; 60
    4b28:	96 e0       	ldi	r25, 0x06	; 6
    4b2a:	9f 93       	push	r25
    4b2c:	8f 93       	push	r24
    4b2e:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    4b32:	8a e3       	ldi	r24, 0x3A	; 58
    4b34:	96 e0       	ldi	r25, 0x06	; 6
    4b36:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    print_decs(mouse_report.x); print(" ");
    4b3a:	20 91 e2 01 	lds	r18, 0x01E2
    4b3e:	82 2f       	mov	r24, r18
    4b40:	99 27       	eor	r25, r25
    4b42:	87 fd       	sbrc	r24, 7
    4b44:	90 95       	com	r25
    4b46:	9f 93       	push	r25
    4b48:	2f 93       	push	r18
    4b4a:	87 e3       	ldi	r24, 0x37	; 55
    4b4c:	96 e0       	ldi	r25, 0x06	; 6
    4b4e:	9f 93       	push	r25
    4b50:	8f 93       	push	r24
    4b52:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    4b56:	85 e3       	ldi	r24, 0x35	; 53
    4b58:	96 e0       	ldi	r25, 0x06	; 6
    4b5a:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    print_decs(mouse_report.y); print(" ");
    4b5e:	20 91 e3 01 	lds	r18, 0x01E3
    4b62:	82 2f       	mov	r24, r18
    4b64:	99 27       	eor	r25, r25
    4b66:	87 fd       	sbrc	r24, 7
    4b68:	90 95       	com	r25
    4b6a:	9f 93       	push	r25
    4b6c:	2f 93       	push	r18
    4b6e:	82 e3       	ldi	r24, 0x32	; 50
    4b70:	96 e0       	ldi	r25, 0x06	; 6
    4b72:	9f 93       	push	r25
    4b74:	8f 93       	push	r24
    4b76:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    4b7a:	80 e3       	ldi	r24, 0x30	; 48
    4b7c:	96 e0       	ldi	r25, 0x06	; 6
    4b7e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    print_decs(mouse_report.v); print(" ");
    4b82:	20 91 e4 01 	lds	r18, 0x01E4
    4b86:	82 2f       	mov	r24, r18
    4b88:	99 27       	eor	r25, r25
    4b8a:	87 fd       	sbrc	r24, 7
    4b8c:	90 95       	com	r25
    4b8e:	9f 93       	push	r25
    4b90:	2f 93       	push	r18
    4b92:	8d e2       	ldi	r24, 0x2D	; 45
    4b94:	96 e0       	ldi	r25, 0x06	; 6
    4b96:	9f 93       	push	r25
    4b98:	8f 93       	push	r24
    4b9a:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    4b9e:	8b e2       	ldi	r24, 0x2B	; 43
    4ba0:	96 e0       	ldi	r25, 0x06	; 6
    4ba2:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    print_decs(mouse_report.h); print("](");
    4ba6:	20 91 e5 01 	lds	r18, 0x01E5
    4baa:	82 2f       	mov	r24, r18
    4bac:	99 27       	eor	r25, r25
    4bae:	87 fd       	sbrc	r24, 7
    4bb0:	90 95       	com	r25
    4bb2:	9f 93       	push	r25
    4bb4:	2f 93       	push	r18
    4bb6:	88 e2       	ldi	r24, 0x28	; 40
    4bb8:	96 e0       	ldi	r25, 0x06	; 6
    4bba:	9f 93       	push	r25
    4bbc:	8f 93       	push	r24
    4bbe:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    4bc2:	85 e2       	ldi	r24, 0x25	; 37
    4bc4:	96 e0       	ldi	r25, 0x06	; 6
    4bc6:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    print_dec(mousekey_repeat); print("/");
    4bca:	80 91 e0 01 	lds	r24, 0x01E0
    4bce:	1f 92       	push	r1
    4bd0:	8f 93       	push	r24
    4bd2:	82 e2       	ldi	r24, 0x22	; 34
    4bd4:	96 e0       	ldi	r25, 0x06	; 6
    4bd6:	9f 93       	push	r25
    4bd8:	8f 93       	push	r24
    4bda:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    4bde:	80 e2       	ldi	r24, 0x20	; 32
    4be0:	96 e0       	ldi	r25, 0x06	; 6
    4be2:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    print_dec(mousekey_accel); print(")\n");
    4be6:	80 91 df 01 	lds	r24, 0x01DF
    4bea:	1f 92       	push	r1
    4bec:	8f 93       	push	r24
    4bee:	8d e1       	ldi	r24, 0x1D	; 29
    4bf0:	96 e0       	ldi	r25, 0x06	; 6
    4bf2:	9f 93       	push	r25
    4bf4:	8f 93       	push	r24
    4bf6:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    4bfa:	8a e1       	ldi	r24, 0x1A	; 26
    4bfc:	96 e0       	ldi	r25, 0x06	; 6
    4bfe:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    4c02:	8d b7       	in	r24, 0x3d	; 61
    4c04:	9e b7       	in	r25, 0x3e	; 62
    4c06:	4c 96       	adiw	r24, 0x1c	; 28
    4c08:	0f b6       	in	r0, 0x3f	; 63
    4c0a:	f8 94       	cli
    4c0c:	9e bf       	out	0x3e, r25	; 62
    4c0e:	0f be       	out	0x3f, r0	; 63
    4c10:	8d bf       	out	0x3d, r24	; 61
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    4c12:	81 ee       	ldi	r24, 0xE1	; 225
    4c14:	91 e0       	ldi	r25, 0x01	; 1
    4c16:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <host_mouse_send>
    last_timer = timer_read();
    4c1a:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <timer_read>
    4c1e:	90 93 de 01 	sts	0x01DE, r25
    4c22:	80 93 dd 01 	sts	0x01DD, r24
    4c26:	08 95       	ret

00004c28 <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    4c28:	1f 93       	push	r17
    4c2a:	cf 93       	push	r28
    4c2c:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    4c2e:	80 91 dd 01 	lds	r24, 0x01DD
    4c32:	90 91 de 01 	lds	r25, 0x01DE
    4c36:	0e 94 f5 21 	call	0x43ea	; 0x43ea <timer_elapsed>
    4c3a:	40 91 e0 01 	lds	r20, 0x01E0
    4c3e:	44 23       	and	r20, r20
    4c40:	21 f0       	breq	.+8      	; 0x4c4a <mousekey_task+0x22>
    4c42:	20 91 14 01 	lds	r18, 0x0114
    4c46:	30 e0       	ldi	r19, 0x00	; 0
    4c48:	06 c0       	rjmp	.+12     	; 0x4c56 <mousekey_task+0x2e>
    4c4a:	20 91 15 01 	lds	r18, 0x0115
    4c4e:	5a e0       	ldi	r21, 0x0A	; 10
    4c50:	25 9f       	mul	r18, r21
    4c52:	90 01       	movw	r18, r0
    4c54:	11 24       	eor	r1, r1
    4c56:	82 17       	cp	r24, r18
    4c58:	93 07       	cpc	r25, r19
    4c5a:	08 f4       	brcc	.+2      	; 0x4c5e <mousekey_task+0x36>
    4c5c:	82 c0       	rjmp	.+260    	; 0x4d62 <mousekey_task+0x13a>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4c5e:	80 91 e2 01 	lds	r24, 0x01E2
    4c62:	10 91 e3 01 	lds	r17, 0x01E3
    4c66:	d0 91 e4 01 	lds	r29, 0x01E4
    4c6a:	c0 91 e5 01 	lds	r28, 0x01E5
    4c6e:	81 11       	cpse	r24, r1
    4c70:	07 c0       	rjmp	.+14     	; 0x4c80 <mousekey_task+0x58>
    4c72:	11 11       	cpse	r17, r1
    4c74:	05 c0       	rjmp	.+10     	; 0x4c80 <mousekey_task+0x58>
    4c76:	d1 11       	cpse	r29, r1
    4c78:	03 c0       	rjmp	.+6      	; 0x4c80 <mousekey_task+0x58>
    4c7a:	cc 23       	and	r28, r28
    4c7c:	09 f4       	brne	.+2      	; 0x4c80 <mousekey_task+0x58>
    4c7e:	71 c0       	rjmp	.+226    	; 0x4d62 <mousekey_task+0x13a>
        return;

    if (mousekey_repeat != UINT8_MAX)
    4c80:	4f 3f       	cpi	r20, 0xFF	; 255
    4c82:	19 f0       	breq	.+6      	; 0x4c8a <mousekey_task+0x62>
        mousekey_repeat++;
    4c84:	4f 5f       	subi	r20, 0xFF	; 255
    4c86:	40 93 e0 01 	sts	0x01E0, r20


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    4c8a:	18 16       	cp	r1, r24
    4c8c:	24 f4       	brge	.+8      	; 0x4c96 <mousekey_task+0x6e>
    4c8e:	0e 94 19 24 	call	0x4832	; 0x4832 <move_unit>
    4c92:	80 93 e2 01 	sts	0x01E2, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    4c96:	80 91 e2 01 	lds	r24, 0x01E2
    4c9a:	87 ff       	sbrs	r24, 7
    4c9c:	05 c0       	rjmp	.+10     	; 0x4ca8 <mousekey_task+0x80>
    4c9e:	0e 94 19 24 	call	0x4832	; 0x4832 <move_unit>
    4ca2:	81 95       	neg	r24
    4ca4:	80 93 e2 01 	sts	0x01E2, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    4ca8:	11 16       	cp	r1, r17
    4caa:	24 f4       	brge	.+8      	; 0x4cb4 <mousekey_task+0x8c>
    4cac:	0e 94 19 24 	call	0x4832	; 0x4832 <move_unit>
    4cb0:	80 93 e3 01 	sts	0x01E3, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    4cb4:	80 91 e3 01 	lds	r24, 0x01E3
    4cb8:	87 ff       	sbrs	r24, 7
    4cba:	05 c0       	rjmp	.+10     	; 0x4cc6 <mousekey_task+0x9e>
    4cbc:	0e 94 19 24 	call	0x4832	; 0x4832 <move_unit>
    4cc0:	81 95       	neg	r24
    4cc2:	80 93 e3 01 	sts	0x01E3, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    4cc6:	60 91 e2 01 	lds	r22, 0x01E2
    4cca:	66 23       	and	r22, r22
    4ccc:	39 f1       	breq	.+78     	; 0x4d1c <mousekey_task+0xf4>
    4cce:	10 91 e3 01 	lds	r17, 0x01E3
    4cd2:	11 23       	and	r17, r17
    4cd4:	19 f1       	breq	.+70     	; 0x4d1c <mousekey_task+0xf4>
        mouse_report.x *= 0.7;
    4cd6:	77 27       	eor	r23, r23
    4cd8:	67 fd       	sbrc	r22, 7
    4cda:	70 95       	com	r23
    4cdc:	87 2f       	mov	r24, r23
    4cde:	97 2f       	mov	r25, r23
    4ce0:	0e 94 89 2c 	call	0x5912	; 0x5912 <__floatsisf>
    4ce4:	23 e3       	ldi	r18, 0x33	; 51
    4ce6:	33 e3       	ldi	r19, 0x33	; 51
    4ce8:	43 e3       	ldi	r20, 0x33	; 51
    4cea:	5f e3       	ldi	r21, 0x3F	; 63
    4cec:	0e 94 ed 2c 	call	0x59da	; 0x59da <__mulsf3>
    4cf0:	0e 94 56 2c 	call	0x58ac	; 0x58ac <__fixsfsi>
    4cf4:	60 93 e2 01 	sts	0x01E2, r22
        mouse_report.y *= 0.7;
    4cf8:	61 2f       	mov	r22, r17
    4cfa:	77 27       	eor	r23, r23
    4cfc:	67 fd       	sbrc	r22, 7
    4cfe:	70 95       	com	r23
    4d00:	87 2f       	mov	r24, r23
    4d02:	97 2f       	mov	r25, r23
    4d04:	0e 94 89 2c 	call	0x5912	; 0x5912 <__floatsisf>
    4d08:	23 e3       	ldi	r18, 0x33	; 51
    4d0a:	33 e3       	ldi	r19, 0x33	; 51
    4d0c:	43 e3       	ldi	r20, 0x33	; 51
    4d0e:	5f e3       	ldi	r21, 0x3F	; 63
    4d10:	0e 94 ed 2c 	call	0x59da	; 0x59da <__mulsf3>
    4d14:	0e 94 56 2c 	call	0x58ac	; 0x58ac <__fixsfsi>
    4d18:	60 93 e3 01 	sts	0x01E3, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    4d1c:	1d 16       	cp	r1, r29
    4d1e:	24 f4       	brge	.+8      	; 0x4d28 <mousekey_task+0x100>
    4d20:	0e 94 61 24 	call	0x48c2	; 0x48c2 <wheel_unit>
    4d24:	80 93 e4 01 	sts	0x01E4, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    4d28:	80 91 e4 01 	lds	r24, 0x01E4
    4d2c:	87 ff       	sbrs	r24, 7
    4d2e:	05 c0       	rjmp	.+10     	; 0x4d3a <mousekey_task+0x112>
    4d30:	0e 94 61 24 	call	0x48c2	; 0x48c2 <wheel_unit>
    4d34:	81 95       	neg	r24
    4d36:	80 93 e4 01 	sts	0x01E4, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    4d3a:	1c 16       	cp	r1, r28
    4d3c:	24 f4       	brge	.+8      	; 0x4d46 <mousekey_task+0x11e>
    4d3e:	0e 94 61 24 	call	0x48c2	; 0x48c2 <wheel_unit>
    4d42:	80 93 e5 01 	sts	0x01E5, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    4d46:	80 91 e5 01 	lds	r24, 0x01E5
    4d4a:	87 ff       	sbrs	r24, 7
    4d4c:	05 c0       	rjmp	.+10     	; 0x4d58 <mousekey_task+0x130>
    4d4e:	0e 94 61 24 	call	0x48c2	; 0x48c2 <wheel_unit>
    4d52:	81 95       	neg	r24
    4d54:	80 93 e5 01 	sts	0x01E5, r24

    mousekey_send();
}
    4d58:	df 91       	pop	r29
    4d5a:	cf 91       	pop	r28
    4d5c:	1f 91       	pop	r17
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
    4d5e:	0c 94 87 25 	jmp	0x4b0e	; 0x4b0e <mousekey_send>
}
    4d62:	df 91       	pop	r29
    4d64:	cf 91       	pop	r28
    4d66:	1f 91       	pop	r17
    4d68:	08 95       	ret

00004d6a <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    4d6a:	e1 ee       	ldi	r30, 0xE1	; 225
    4d6c:	f1 e0       	ldi	r31, 0x01	; 1
    4d6e:	85 e0       	ldi	r24, 0x05	; 5
    4d70:	df 01       	movw	r26, r30
    4d72:	1d 92       	st	X+, r1
    4d74:	8a 95       	dec	r24
    4d76:	e9 f7       	brne	.-6      	; 0x4d72 <mousekey_clear+0x8>
    mousekey_repeat = 0;
    4d78:	10 92 e0 01 	sts	0x01E0, r1
    mousekey_accel = 0;
    4d7c:	10 92 df 01 	sts	0x01DF, r1
    4d80:	08 95       	ret

00004d82 <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    4d82:	84 e6       	ldi	r24, 0x64	; 100
    4d84:	98 e0       	ldi	r25, 0x08	; 8
    4d86:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    4d8a:	1f 92       	push	r1
    4d8c:	81 e0       	ldi	r24, 0x01	; 1
    4d8e:	8f 93       	push	r24
    4d90:	1f 92       	push	r1
    4d92:	85 e0       	ldi	r24, 0x05	; 5
    4d94:	8f 93       	push	r24
    4d96:	86 e1       	ldi	r24, 0x16	; 22
    4d98:	98 e0       	ldi	r25, 0x08	; 8
    4d9a:	9f 93       	push	r25
    4d9c:	8f 93       	push	r24
    4d9e:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    4da2:	0f 90       	pop	r0
    4da4:	0f 90       	pop	r0
    4da6:	0f 90       	pop	r0
    4da8:	0f 90       	pop	r0
    4daa:	0f 90       	pop	r0
    4dac:	0f 90       	pop	r0
    4dae:	08 95       	ret

00004db0 <mousekey_param_inc>:

//#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
#define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    4db0:	83 30       	cpi	r24, 0x03	; 3
    4db2:	e9 f1       	breq	.+122    	; 0x4e2e <mousekey_param_inc+0x7e>
    4db4:	28 f4       	brcc	.+10     	; 0x4dc0 <mousekey_param_inc+0x10>
    4db6:	81 30       	cpi	r24, 0x01	; 1
    4db8:	61 f0       	breq	.+24     	; 0x4dd2 <mousekey_param_inc+0x22>
    4dba:	82 30       	cpi	r24, 0x02	; 2
    4dbc:	09 f1       	breq	.+66     	; 0x4e00 <mousekey_param_inc+0x50>
    4dbe:	08 95       	ret
    4dc0:	85 30       	cpi	r24, 0x05	; 5
    4dc2:	09 f4       	brne	.+2      	; 0x4dc6 <mousekey_param_inc+0x16>
    4dc4:	62 c0       	rjmp	.+196    	; 0x4e8a <mousekey_param_inc+0xda>
    4dc6:	08 f4       	brcc	.+2      	; 0x4dca <mousekey_param_inc+0x1a>
    4dc8:	49 c0       	rjmp	.+146    	; 0x4e5c <mousekey_param_inc+0xac>
    4dca:	86 30       	cpi	r24, 0x06	; 6
    4dcc:	09 f4       	brne	.+2      	; 0x4dd0 <mousekey_param_inc+0x20>
    4dce:	74 c0       	rjmp	.+232    	; 0x4eb8 <mousekey_param_inc+0x108>
    4dd0:	08 95       	ret
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    4dd2:	20 91 15 01 	lds	r18, 0x0115
    4dd6:	86 2f       	mov	r24, r22
    4dd8:	90 e0       	ldi	r25, 0x00	; 0
    4dda:	82 0f       	add	r24, r18
    4ddc:	91 1d       	adc	r25, r1
    4dde:	8f 3f       	cpi	r24, 0xFF	; 255
    4de0:	91 05       	cpc	r25, r1
    4de2:	20 f4       	brcc	.+8      	; 0x4dec <mousekey_param_inc+0x3c>
                mk_delay += inc;
    4de4:	62 0f       	add	r22, r18
    4de6:	60 93 15 01 	sts	0x0115, r22
    4dea:	03 c0       	rjmp	.+6      	; 0x4df2 <mousekey_param_inc+0x42>
            else
                mk_delay = UINT8_MAX;
    4dec:	8f ef       	ldi	r24, 0xFF	; 255
    4dee:	80 93 15 01 	sts	0x0115, r24
            PRINT_SET_VAL(mk_delay);
    4df2:	80 91 15 01 	lds	r24, 0x0115
    4df6:	1f 92       	push	r1
    4df8:	8f 93       	push	r24
    4dfa:	8f e4       	ldi	r24, 0x4F	; 79
    4dfc:	97 e0       	ldi	r25, 0x07	; 7
    4dfe:	72 c0       	rjmp	.+228    	; 0x4ee4 <mousekey_param_inc+0x134>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    4e00:	20 91 14 01 	lds	r18, 0x0114
    4e04:	86 2f       	mov	r24, r22
    4e06:	90 e0       	ldi	r25, 0x00	; 0
    4e08:	82 0f       	add	r24, r18
    4e0a:	91 1d       	adc	r25, r1
    4e0c:	8f 3f       	cpi	r24, 0xFF	; 255
    4e0e:	91 05       	cpc	r25, r1
    4e10:	20 f4       	brcc	.+8      	; 0x4e1a <mousekey_param_inc+0x6a>
                mk_interval += inc;
    4e12:	62 0f       	add	r22, r18
    4e14:	60 93 14 01 	sts	0x0114, r22
    4e18:	03 c0       	rjmp	.+6      	; 0x4e20 <mousekey_param_inc+0x70>
            else
                mk_interval = UINT8_MAX;
    4e1a:	8f ef       	ldi	r24, 0xFF	; 255
    4e1c:	80 93 14 01 	sts	0x0114, r24
            PRINT_SET_VAL(mk_interval);
    4e20:	80 91 14 01 	lds	r24, 0x0114
    4e24:	1f 92       	push	r1
    4e26:	8f 93       	push	r24
    4e28:	8d e3       	ldi	r24, 0x3D	; 61
    4e2a:	97 e0       	ldi	r25, 0x07	; 7
    4e2c:	5b c0       	rjmp	.+182    	; 0x4ee4 <mousekey_param_inc+0x134>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    4e2e:	20 91 13 01 	lds	r18, 0x0113
    4e32:	86 2f       	mov	r24, r22
    4e34:	90 e0       	ldi	r25, 0x00	; 0
    4e36:	82 0f       	add	r24, r18
    4e38:	91 1d       	adc	r25, r1
    4e3a:	8f 3f       	cpi	r24, 0xFF	; 255
    4e3c:	91 05       	cpc	r25, r1
    4e3e:	20 f4       	brcc	.+8      	; 0x4e48 <mousekey_param_inc+0x98>
                mk_max_speed += inc;
    4e40:	62 0f       	add	r22, r18
    4e42:	60 93 13 01 	sts	0x0113, r22
    4e46:	03 c0       	rjmp	.+6      	; 0x4e4e <mousekey_param_inc+0x9e>
            else
                mk_max_speed = UINT8_MAX;
    4e48:	8f ef       	ldi	r24, 0xFF	; 255
    4e4a:	80 93 13 01 	sts	0x0113, r24
            PRINT_SET_VAL(mk_max_speed);
    4e4e:	80 91 13 01 	lds	r24, 0x0113
    4e52:	1f 92       	push	r1
    4e54:	8f 93       	push	r24
    4e56:	8a e2       	ldi	r24, 0x2A	; 42
    4e58:	97 e0       	ldi	r25, 0x07	; 7
    4e5a:	44 c0       	rjmp	.+136    	; 0x4ee4 <mousekey_param_inc+0x134>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    4e5c:	20 91 12 01 	lds	r18, 0x0112
    4e60:	86 2f       	mov	r24, r22
    4e62:	90 e0       	ldi	r25, 0x00	; 0
    4e64:	82 0f       	add	r24, r18
    4e66:	91 1d       	adc	r25, r1
    4e68:	8f 3f       	cpi	r24, 0xFF	; 255
    4e6a:	91 05       	cpc	r25, r1
    4e6c:	20 f4       	brcc	.+8      	; 0x4e76 <mousekey_param_inc+0xc6>
                mk_time_to_max += inc;
    4e6e:	62 0f       	add	r22, r18
    4e70:	60 93 12 01 	sts	0x0112, r22
    4e74:	03 c0       	rjmp	.+6      	; 0x4e7c <mousekey_param_inc+0xcc>
            else
                mk_time_to_max = UINT8_MAX;
    4e76:	8f ef       	ldi	r24, 0xFF	; 255
    4e78:	80 93 12 01 	sts	0x0112, r24
            PRINT_SET_VAL(mk_time_to_max);
    4e7c:	80 91 12 01 	lds	r24, 0x0112
    4e80:	1f 92       	push	r1
    4e82:	8f 93       	push	r24
    4e84:	85 e1       	ldi	r24, 0x15	; 21
    4e86:	97 e0       	ldi	r25, 0x07	; 7
    4e88:	2d c0       	rjmp	.+90     	; 0x4ee4 <mousekey_param_inc+0x134>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    4e8a:	20 91 11 01 	lds	r18, 0x0111
    4e8e:	86 2f       	mov	r24, r22
    4e90:	90 e0       	ldi	r25, 0x00	; 0
    4e92:	82 0f       	add	r24, r18
    4e94:	91 1d       	adc	r25, r1
    4e96:	8f 3f       	cpi	r24, 0xFF	; 255
    4e98:	91 05       	cpc	r25, r1
    4e9a:	20 f4       	brcc	.+8      	; 0x4ea4 <mousekey_param_inc+0xf4>
                mk_wheel_max_speed += inc;
    4e9c:	62 0f       	add	r22, r18
    4e9e:	60 93 11 01 	sts	0x0111, r22
    4ea2:	03 c0       	rjmp	.+6      	; 0x4eaa <mousekey_param_inc+0xfa>
            else
                mk_wheel_max_speed = UINT8_MAX;
    4ea4:	8f ef       	ldi	r24, 0xFF	; 255
    4ea6:	80 93 11 01 	sts	0x0111, r24
            PRINT_SET_VAL(mk_wheel_max_speed);
    4eaa:	80 91 11 01 	lds	r24, 0x0111
    4eae:	1f 92       	push	r1
    4eb0:	8f 93       	push	r24
    4eb2:	8c ef       	ldi	r24, 0xFC	; 252
    4eb4:	96 e0       	ldi	r25, 0x06	; 6
    4eb6:	16 c0       	rjmp	.+44     	; 0x4ee4 <mousekey_param_inc+0x134>
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    4eb8:	20 91 10 01 	lds	r18, 0x0110
    4ebc:	86 2f       	mov	r24, r22
    4ebe:	90 e0       	ldi	r25, 0x00	; 0
    4ec0:	82 0f       	add	r24, r18
    4ec2:	91 1d       	adc	r25, r1
    4ec4:	8f 3f       	cpi	r24, 0xFF	; 255
    4ec6:	91 05       	cpc	r25, r1
    4ec8:	20 f4       	brcc	.+8      	; 0x4ed2 <mousekey_param_inc+0x122>
                mk_wheel_time_to_max += inc;
    4eca:	62 0f       	add	r22, r18
    4ecc:	60 93 10 01 	sts	0x0110, r22
    4ed0:	03 c0       	rjmp	.+6      	; 0x4ed8 <mousekey_param_inc+0x128>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    4ed2:	8f ef       	ldi	r24, 0xFF	; 255
    4ed4:	80 93 10 01 	sts	0x0110, r24
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4ed8:	80 91 10 01 	lds	r24, 0x0110
    4edc:	1f 92       	push	r1
    4ede:	8f 93       	push	r24
    4ee0:	81 ee       	ldi	r24, 0xE1	; 225
    4ee2:	96 e0       	ldi	r25, 0x06	; 6
    4ee4:	9f 93       	push	r25
    4ee6:	8f 93       	push	r24
    4ee8:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
            break;
    4eec:	0f 90       	pop	r0
    4eee:	0f 90       	pop	r0
    4ef0:	0f 90       	pop	r0
    4ef2:	0f 90       	pop	r0
    4ef4:	08 95       	ret

00004ef6 <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    4ef6:	83 30       	cpi	r24, 0x03	; 3
    4ef8:	81 f1       	breq	.+96     	; 0x4f5a <mousekey_param_dec+0x64>
    4efa:	28 f4       	brcc	.+10     	; 0x4f06 <mousekey_param_dec+0x10>
    4efc:	81 30       	cpi	r24, 0x01	; 1
    4efe:	59 f0       	breq	.+22     	; 0x4f16 <mousekey_param_dec+0x20>
    4f00:	82 30       	cpi	r24, 0x02	; 2
    4f02:	d1 f0       	breq	.+52     	; 0x4f38 <mousekey_param_dec+0x42>
    4f04:	08 95       	ret
    4f06:	85 30       	cpi	r24, 0x05	; 5
    4f08:	09 f4       	brne	.+2      	; 0x4f0c <mousekey_param_dec+0x16>
    4f0a:	49 c0       	rjmp	.+146    	; 0x4f9e <mousekey_param_dec+0xa8>
    4f0c:	b8 f1       	brcs	.+110    	; 0x4f7c <mousekey_param_dec+0x86>
    4f0e:	86 30       	cpi	r24, 0x06	; 6
    4f10:	09 f4       	brne	.+2      	; 0x4f14 <mousekey_param_dec+0x1e>
    4f12:	56 c0       	rjmp	.+172    	; 0x4fc0 <mousekey_param_dec+0xca>
    4f14:	08 95       	ret
        case 1:
            if (mk_delay > dec)
    4f16:	80 91 15 01 	lds	r24, 0x0115
    4f1a:	68 17       	cp	r22, r24
    4f1c:	20 f4       	brcc	.+8      	; 0x4f26 <mousekey_param_dec+0x30>
                mk_delay -= dec;
    4f1e:	86 1b       	sub	r24, r22
    4f20:	80 93 15 01 	sts	0x0115, r24
    4f24:	02 c0       	rjmp	.+4      	; 0x4f2a <mousekey_param_dec+0x34>
            else
                mk_delay = 0;
    4f26:	10 92 15 01 	sts	0x0115, r1
            PRINT_SET_VAL(mk_delay);
    4f2a:	80 91 15 01 	lds	r24, 0x0115
    4f2e:	1f 92       	push	r1
    4f30:	8f 93       	push	r24
    4f32:	82 ed       	ldi	r24, 0xD2	; 210
    4f34:	96 e0       	ldi	r25, 0x06	; 6
    4f36:	54 c0       	rjmp	.+168    	; 0x4fe0 <mousekey_param_dec+0xea>
            break;
        case 2:
            if (mk_interval > dec)
    4f38:	80 91 14 01 	lds	r24, 0x0114
    4f3c:	68 17       	cp	r22, r24
    4f3e:	20 f4       	brcc	.+8      	; 0x4f48 <mousekey_param_dec+0x52>
                mk_interval -= dec;
    4f40:	86 1b       	sub	r24, r22
    4f42:	80 93 14 01 	sts	0x0114, r24
    4f46:	02 c0       	rjmp	.+4      	; 0x4f4c <mousekey_param_dec+0x56>
            else
                mk_interval = 0;
    4f48:	10 92 14 01 	sts	0x0114, r1
            PRINT_SET_VAL(mk_interval);
    4f4c:	80 91 14 01 	lds	r24, 0x0114
    4f50:	1f 92       	push	r1
    4f52:	8f 93       	push	r24
    4f54:	80 ec       	ldi	r24, 0xC0	; 192
    4f56:	96 e0       	ldi	r25, 0x06	; 6
    4f58:	43 c0       	rjmp	.+134    	; 0x4fe0 <mousekey_param_dec+0xea>
            break;
        case 3:
            if (mk_max_speed > dec)
    4f5a:	80 91 13 01 	lds	r24, 0x0113
    4f5e:	68 17       	cp	r22, r24
    4f60:	20 f4       	brcc	.+8      	; 0x4f6a <mousekey_param_dec+0x74>
                mk_max_speed -= dec;
    4f62:	86 1b       	sub	r24, r22
    4f64:	80 93 13 01 	sts	0x0113, r24
    4f68:	02 c0       	rjmp	.+4      	; 0x4f6e <mousekey_param_dec+0x78>
            else
                mk_max_speed = 0;
    4f6a:	10 92 13 01 	sts	0x0113, r1
            PRINT_SET_VAL(mk_max_speed);
    4f6e:	80 91 13 01 	lds	r24, 0x0113
    4f72:	1f 92       	push	r1
    4f74:	8f 93       	push	r24
    4f76:	8d ea       	ldi	r24, 0xAD	; 173
    4f78:	96 e0       	ldi	r25, 0x06	; 6
    4f7a:	32 c0       	rjmp	.+100    	; 0x4fe0 <mousekey_param_dec+0xea>
            break;
        case 4:
            if (mk_time_to_max > dec)
    4f7c:	80 91 12 01 	lds	r24, 0x0112
    4f80:	68 17       	cp	r22, r24
    4f82:	20 f4       	brcc	.+8      	; 0x4f8c <mousekey_param_dec+0x96>
                mk_time_to_max -= dec;
    4f84:	86 1b       	sub	r24, r22
    4f86:	80 93 12 01 	sts	0x0112, r24
    4f8a:	02 c0       	rjmp	.+4      	; 0x4f90 <mousekey_param_dec+0x9a>
            else
                mk_time_to_max = 0;
    4f8c:	10 92 12 01 	sts	0x0112, r1
            PRINT_SET_VAL(mk_time_to_max);
    4f90:	80 91 12 01 	lds	r24, 0x0112
    4f94:	1f 92       	push	r1
    4f96:	8f 93       	push	r24
    4f98:	88 e9       	ldi	r24, 0x98	; 152
    4f9a:	96 e0       	ldi	r25, 0x06	; 6
    4f9c:	21 c0       	rjmp	.+66     	; 0x4fe0 <mousekey_param_dec+0xea>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    4f9e:	80 91 11 01 	lds	r24, 0x0111
    4fa2:	68 17       	cp	r22, r24
    4fa4:	20 f4       	brcc	.+8      	; 0x4fae <mousekey_param_dec+0xb8>
                mk_wheel_max_speed -= dec;
    4fa6:	86 1b       	sub	r24, r22
    4fa8:	80 93 11 01 	sts	0x0111, r24
    4fac:	02 c0       	rjmp	.+4      	; 0x4fb2 <mousekey_param_dec+0xbc>
            else
                mk_wheel_max_speed = 0;
    4fae:	10 92 11 01 	sts	0x0111, r1
            PRINT_SET_VAL(mk_wheel_max_speed);
    4fb2:	80 91 11 01 	lds	r24, 0x0111
    4fb6:	1f 92       	push	r1
    4fb8:	8f 93       	push	r24
    4fba:	8f e7       	ldi	r24, 0x7F	; 127
    4fbc:	96 e0       	ldi	r25, 0x06	; 6
    4fbe:	10 c0       	rjmp	.+32     	; 0x4fe0 <mousekey_param_dec+0xea>
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    4fc0:	80 91 10 01 	lds	r24, 0x0110
    4fc4:	68 17       	cp	r22, r24
    4fc6:	20 f4       	brcc	.+8      	; 0x4fd0 <mousekey_param_dec+0xda>
                mk_wheel_time_to_max -= dec;
    4fc8:	86 1b       	sub	r24, r22
    4fca:	80 93 10 01 	sts	0x0110, r24
    4fce:	02 c0       	rjmp	.+4      	; 0x4fd4 <mousekey_param_dec+0xde>
            else
                mk_wheel_time_to_max = 0;
    4fd0:	10 92 10 01 	sts	0x0110, r1
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4fd4:	80 91 10 01 	lds	r24, 0x0110
    4fd8:	1f 92       	push	r1
    4fda:	8f 93       	push	r24
    4fdc:	84 e6       	ldi	r24, 0x64	; 100
    4fde:	96 e0       	ldi	r25, 0x06	; 6
    4fe0:	9f 93       	push	r25
    4fe2:	8f 93       	push	r24
    4fe4:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
            break;
    4fe8:	0f 90       	pop	r0
    4fea:	0f 90       	pop	r0
    4fec:	0f 90       	pop	r0
    4fee:	0f 90       	pop	r0
    4ff0:	08 95       	ret

00004ff2 <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    4ff2:	cf 93       	push	r28
    4ff4:	c8 2f       	mov	r28, r24
    xprintf("L%d\n", layer);
    4ff6:	1f 92       	push	r1
    4ff8:	8f 93       	push	r24
    4ffa:	29 e6       	ldi	r18, 0x69	; 105
    4ffc:	39 e0       	ldi	r19, 0x09	; 9
    4ffe:	3f 93       	push	r19
    5000:	2f 93       	push	r18
    5002:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    default_layer_set(1UL<<layer);
    5006:	61 e0       	ldi	r22, 0x01	; 1
    5008:	70 e0       	ldi	r23, 0x00	; 0
    500a:	80 e0       	ldi	r24, 0x00	; 0
    500c:	90 e0       	ldi	r25, 0x00	; 0
    500e:	04 c0       	rjmp	.+8      	; 0x5018 <switch_default_layer+0x26>
    5010:	66 0f       	add	r22, r22
    5012:	77 1f       	adc	r23, r23
    5014:	88 1f       	adc	r24, r24
    5016:	99 1f       	adc	r25, r25
    5018:	ca 95       	dec	r28
    501a:	d2 f7       	brpl	.-12     	; 0x5010 <switch_default_layer+0x1e>
    501c:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <default_layer_set>
    clear_keyboard();
    5020:	0f 90       	pop	r0
    5022:	0f 90       	pop	r0
    5024:	0f 90       	pop	r0
    5026:	0f 90       	pop	r0
}
    5028:	cf 91       	pop	r28

static void switch_default_layer(uint8_t layer)
{
    xprintf("L%d\n", layer);
    default_layer_set(1UL<<layer);
    clear_keyboard();
    502a:	0c 94 b2 1a 	jmp	0x3564	; 0x3564 <clear_keyboard>

0000502e <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    502e:	cf 93       	push	r28
    static host_driver_t *host_driver = 0;
    switch (code) {
    5030:	8d 31       	cpi	r24, 0x1D	; 29
    5032:	09 f4       	brne	.+2      	; 0x5036 <command_common+0x8>
    5034:	65 c0       	rjmp	.+202    	; 0x5100 <command_common+0xd2>
    5036:	b0 f5       	brcc	.+108    	; 0x50a4 <command_common+0x76>
    5038:	8e 30       	cpi	r24, 0x0E	; 14
    503a:	09 f4       	brne	.+2      	; 0x503e <command_common+0x10>
    503c:	cb c1       	rjmp	.+918    	; 0x53d4 <command_common+0x3a6>
    503e:	00 f5       	brcc	.+64     	; 0x5080 <command_common+0x52>
    5040:	87 30       	cpi	r24, 0x07	; 7
    5042:	09 f4       	brne	.+2      	; 0x5046 <command_common+0x18>
    5044:	9b c1       	rjmp	.+822    	; 0x537c <command_common+0x34e>
    5046:	a8 f4       	brcc	.+42     	; 0x5072 <command_common+0x44>
    5048:	86 30       	cpi	r24, 0x06	; 6
    504a:	09 f0       	breq	.+2      	; 0x504e <command_common+0x20>
    504c:	6a c2       	rjmp	.+1236   	; 0x5522 <command_common+0x4f4>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    504e:	80 91 d7 01 	lds	r24, 0x01D7
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    5052:	81 7f       	andi	r24, 0xF1	; 241
    5054:	8e 7f       	andi	r24, 0xFE	; 254
    5056:	80 93 d7 01 	sts	0x01D7, r24
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    505a:	8e e6       	ldi	r24, 0x6E	; 110
    505c:	99 e0       	ldi	r25, 0x09	; 9
    505e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
            debug_matrix   = false;
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
            command_console_help();
            print("C> ");
    5062:	83 eb       	ldi	r24, 0xB3	; 179
    5064:	9d e0       	ldi	r25, 0x0D	; 13
    5066:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
            command_state = CONSOLE;
    506a:	81 e0       	ldi	r24, 0x01	; 1
    506c:	80 93 e7 01 	sts	0x01E7, r24
    5070:	80 c1       	rjmp	.+768    	; 0x5372 <command_common+0x344>
#endif

static bool command_common(uint8_t code)
{
    static host_driver_t *host_driver = 0;
    switch (code) {
    5072:	88 30       	cpi	r24, 0x08	; 8
    5074:	09 f4       	brne	.+2      	; 0x5078 <command_common+0x4a>
    5076:	4f c0       	rjmp	.+158    	; 0x5116 <command_common+0xe8>
    5078:	8b 30       	cpi	r24, 0x0B	; 11
    507a:	09 f4       	brne	.+2      	; 0x507e <command_common+0x50>
    507c:	7c c1       	rjmp	.+760    	; 0x5376 <command_common+0x348>
    507e:	51 c2       	rjmp	.+1186   	; 0x5522 <command_common+0x4f4>
    5080:	86 31       	cpi	r24, 0x16	; 22
    5082:	09 f4       	brne	.+2      	; 0x5086 <command_common+0x58>
    5084:	ed c1       	rjmp	.+986    	; 0x5460 <command_common+0x432>
    5086:	38 f4       	brcc	.+14     	; 0x5096 <command_common+0x68>
    5088:	80 31       	cpi	r24, 0x10	; 16
    508a:	09 f4       	brne	.+2      	; 0x508e <command_common+0x60>
    508c:	b6 c1       	rjmp	.+876    	; 0x53fa <command_common+0x3cc>
    508e:	81 31       	cpi	r24, 0x11	; 17
    5090:	09 f4       	brne	.+2      	; 0x5094 <command_common+0x66>
    5092:	2d c2       	rjmp	.+1114   	; 0x54ee <command_common+0x4c0>
    5094:	46 c2       	rjmp	.+1164   	; 0x5522 <command_common+0x4f4>
    5096:	89 31       	cpi	r24, 0x19	; 25
    5098:	09 f4       	brne	.+2      	; 0x509c <command_common+0x6e>
    509a:	cb c1       	rjmp	.+918    	; 0x5432 <command_common+0x404>
    509c:	8b 31       	cpi	r24, 0x1B	; 27
    509e:	09 f4       	brne	.+2      	; 0x50a2 <command_common+0x74>
    50a0:	86 c1       	rjmp	.+780    	; 0x53ae <command_common+0x380>
    50a2:	3f c2       	rjmp	.+1150   	; 0x5522 <command_common+0x4f4>
    50a4:	85 33       	cpi	r24, 0x35	; 53
    50a6:	09 f4       	brne	.+2      	; 0x50aa <command_common+0x7c>
    50a8:	34 c2       	rjmp	.+1128   	; 0x5512 <command_common+0x4e4>
    50aa:	48 f4       	brcc	.+18     	; 0x50be <command_common+0x90>
    50ac:	87 32       	cpi	r24, 0x27	; 39
    50ae:	09 f4       	brne	.+2      	; 0x50b2 <command_common+0x84>
    50b0:	30 c2       	rjmp	.+1120   	; 0x5512 <command_common+0x4e4>
    50b2:	08 f4       	brcc	.+2      	; 0x50b6 <command_common+0x88>
    50b4:	30 c2       	rjmp	.+1120   	; 0x5516 <command_common+0x4e8>
    50b6:	89 32       	cpi	r24, 0x29	; 41
    50b8:	09 f4       	brne	.+2      	; 0x50bc <command_common+0x8e>
    50ba:	2b c2       	rjmp	.+1110   	; 0x5512 <command_common+0x4e4>
    50bc:	32 c2       	rjmp	.+1124   	; 0x5522 <command_common+0x4f4>
    50be:	83 34       	cpi	r24, 0x43	; 67
    50c0:	38 f4       	brcc	.+14     	; 0x50d0 <command_common+0xa2>
    50c2:	8a 33       	cpi	r24, 0x3A	; 58
    50c4:	08 f0       	brcs	.+2      	; 0x50c8 <command_common+0x9a>
    50c6:	29 c2       	rjmp	.+1106   	; 0x551a <command_common+0x4ec>
    50c8:	88 33       	cpi	r24, 0x38	; 56
    50ca:	09 f4       	brne	.+2      	; 0x50ce <command_common+0xa0>
    50cc:	54 c1       	rjmp	.+680    	; 0x5376 <command_common+0x348>
    50ce:	29 c2       	rjmp	.+1106   	; 0x5522 <command_common+0x4f4>
    50d0:	83 34       	cpi	r24, 0x43	; 67
    50d2:	09 f4       	brne	.+2      	; 0x50d6 <command_common+0xa8>
    50d4:	1e c2       	rjmp	.+1084   	; 0x5512 <command_common+0x4e4>
    50d6:	88 34       	cpi	r24, 0x48	; 72
    50d8:	09 f0       	breq	.+2      	; 0x50dc <command_common+0xae>
    50da:	23 c2       	rjmp	.+1094   	; 0x5522 <command_common+0x4f4>
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
            break;
        case KC_PAUSE:
            clear_keyboard();
    50dc:	0e 94 b2 1a 	call	0x3564	; 0x3564 <clear_keyboard>
            print("\n\nbootloader... ");
    50e0:	82 ea       	ldi	r24, 0xA2	; 162
    50e2:	9d e0       	ldi	r25, 0x0D	; 13
    50e4:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    50e8:	9f ef       	ldi	r25, 0xFF	; 255
    50ea:	23 ed       	ldi	r18, 0xD3	; 211
    50ec:	80 e3       	ldi	r24, 0x30	; 48
    50ee:	91 50       	subi	r25, 0x01	; 1
    50f0:	20 40       	sbci	r18, 0x00	; 0
    50f2:	80 40       	sbci	r24, 0x00	; 0
    50f4:	e1 f7       	brne	.-8      	; 0x50ee <command_common+0xc0>
    50f6:	00 c0       	rjmp	.+0      	; 0x50f8 <command_common+0xca>
    50f8:	00 00       	nop
            _delay_ms(1000);
            bootloader_jump(); // not return
    50fa:	0e 94 43 22 	call	0x4486	; 0x4486 <bootloader_jump>
    50fe:	39 c1       	rjmp	.+626    	; 0x5372 <command_common+0x344>
    static host_driver_t *host_driver = 0;
    switch (code) {
#ifdef SLEEP_LED_ENABLE
        case KC_Z:
            // test breathing sleep LED
            print("Sleep LED test\n");
    5100:	82 ec       	ldi	r24, 0xC2	; 194
    5102:	9d e0       	ldi	r25, 0x0D	; 13
    5104:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
            sleep_led_toggle();
    5108:	0e 94 10 2c 	call	0x5820	; 0x5820 <sleep_led_toggle>
            led_set(host_keyboard_leds());
    510c:	0e 94 ed 14 	call	0x29da	; 0x29da <host_keyboard_leds>
    5110:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <led_set>
    5114:	2e c1       	rjmp	.+604    	; 0x5372 <command_common+0x344>
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    5116:	87 eb       	ldi	r24, 0xB7	; 183
    5118:	9d e0       	ldi	r25, 0x0D	; 13
    511a:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    511e:	8f e7       	ldi	r24, 0x7F	; 127
    5120:	9b e0       	ldi	r25, 0x0B	; 11
    5122:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    5126:	0e 94 07 24 	call	0x480e	; 0x480e <eeconfig_read_default_layer>
    512a:	1f 92       	push	r1
    512c:	8f 93       	push	r24
    512e:	8c e7       	ldi	r24, 0x7C	; 124
    5130:	9b e0       	ldi	r25, 0x0B	; 11
    5132:	9f 93       	push	r25
    5134:	8f 93       	push	r24
    5136:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    513a:	8a e7       	ldi	r24, 0x7A	; 122
    513c:	9b e0       	ldi	r25, 0x0B	; 11
    513e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    5142:	0e 94 fe 23 	call	0x47fc	; 0x47fc <eeconfig_read_debug>
    5146:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    5148:	87 e6       	ldi	r24, 0x67	; 103
    514a:	9b e0       	ldi	r25, 0x0B	; 11
    514c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    5150:	1f 92       	push	r1
    5152:	cf 93       	push	r28
    5154:	22 e6       	ldi	r18, 0x62	; 98
    5156:	3b e0       	ldi	r19, 0x0B	; 11
    5158:	3f 93       	push	r19
    515a:	2f 93       	push	r18
    515c:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    5160:	80 e6       	ldi	r24, 0x60	; 96
    5162:	9b e0       	ldi	r25, 0x0B	; 11
    5164:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    5168:	86 e5       	ldi	r24, 0x56	; 86
    516a:	9b e0       	ldi	r25, 0x0B	; 11
    516c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    5170:	8c 2f       	mov	r24, r28
    5172:	81 70       	andi	r24, 0x01	; 1
    5174:	1f 92       	push	r1
    5176:	8f 93       	push	r24
    5178:	23 e5       	ldi	r18, 0x53	; 83
    517a:	3b e0       	ldi	r19, 0x0B	; 11
    517c:	3f 93       	push	r19
    517e:	2f 93       	push	r18
    5180:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    5184:	81 e5       	ldi	r24, 0x51	; 81
    5186:	9b e0       	ldi	r25, 0x0B	; 11
    5188:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    518c:	87 e4       	ldi	r24, 0x47	; 71
    518e:	9b e0       	ldi	r25, 0x0B	; 11
    5190:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    5194:	c1 fb       	bst	r28, 1
    5196:	88 27       	eor	r24, r24
    5198:	80 f9       	bld	r24, 0
    519a:	1f 92       	push	r1
    519c:	8f 93       	push	r24
    519e:	24 e4       	ldi	r18, 0x44	; 68
    51a0:	3b e0       	ldi	r19, 0x0B	; 11
    51a2:	3f 93       	push	r19
    51a4:	2f 93       	push	r18
    51a6:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    51aa:	82 e4       	ldi	r24, 0x42	; 66
    51ac:	9b e0       	ldi	r25, 0x0B	; 11
    51ae:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    51b2:	86 e3       	ldi	r24, 0x36	; 54
    51b4:	9b e0       	ldi	r25, 0x0B	; 11
    51b6:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    51ba:	c2 fb       	bst	r28, 2
    51bc:	88 27       	eor	r24, r24
    51be:	80 f9       	bld	r24, 0
    51c0:	1f 92       	push	r1
    51c2:	8f 93       	push	r24
    51c4:	23 e3       	ldi	r18, 0x33	; 51
    51c6:	3b e0       	ldi	r19, 0x0B	; 11
    51c8:	3f 93       	push	r19
    51ca:	2f 93       	push	r18
    51cc:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    51d0:	81 e3       	ldi	r24, 0x31	; 49
    51d2:	9b e0       	ldi	r25, 0x0B	; 11
    51d4:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    51d8:	88 e2       	ldi	r24, 0x28	; 40
    51da:	9b e0       	ldi	r25, 0x0B	; 11
    51dc:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    51e0:	c3 fb       	bst	r28, 3
    51e2:	cc 27       	eor	r28, r28
    51e4:	c0 f9       	bld	r28, 0
    51e6:	1f 92       	push	r1
    51e8:	cf 93       	push	r28
    51ea:	85 e2       	ldi	r24, 0x25	; 37
    51ec:	9b e0       	ldi	r25, 0x0B	; 11
    51ee:	9f 93       	push	r25
    51f0:	8f 93       	push	r24
    51f2:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    51f6:	83 e2       	ldi	r24, 0x23	; 35
    51f8:	9b e0       	ldi	r25, 0x0B	; 11
    51fa:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    51fe:	0e 94 10 24 	call	0x4820	; 0x4820 <eeconfig_read_keymap>
    5202:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    5204:	8f e0       	ldi	r24, 0x0F	; 15
    5206:	9b e0       	ldi	r25, 0x0B	; 11
    5208:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    520c:	1f 92       	push	r1
    520e:	cf 93       	push	r28
    5210:	2a e0       	ldi	r18, 0x0A	; 10
    5212:	3b e0       	ldi	r19, 0x0B	; 11
    5214:	3f 93       	push	r19
    5216:	2f 93       	push	r18
    5218:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    521c:	88 e0       	ldi	r24, 0x08	; 8
    521e:	9b e0       	ldi	r25, 0x0B	; 11
    5220:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    5224:	8f ee       	ldi	r24, 0xEF	; 239
    5226:	9a e0       	ldi	r25, 0x0A	; 10
    5228:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    522c:	8c 2f       	mov	r24, r28
    522e:	81 70       	andi	r24, 0x01	; 1
    5230:	1f 92       	push	r1
    5232:	8f 93       	push	r24
    5234:	2c ee       	ldi	r18, 0xEC	; 236
    5236:	3a e0       	ldi	r19, 0x0A	; 10
    5238:	3f 93       	push	r19
    523a:	2f 93       	push	r18
    523c:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    5240:	8d b7       	in	r24, 0x3d	; 61
    5242:	9e b7       	in	r25, 0x3e	; 62
    5244:	80 96       	adiw	r24, 0x20	; 32
    5246:	0f b6       	in	r0, 0x3f	; 63
    5248:	f8 94       	cli
    524a:	9e bf       	out	0x3e, r25	; 62
    524c:	0f be       	out	0x3f, r0	; 63
    524e:	8d bf       	out	0x3d, r24	; 61
    5250:	8a ee       	ldi	r24, 0xEA	; 234
    5252:	9a e0       	ldi	r25, 0x0A	; 10
    5254:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    5258:	83 ed       	ldi	r24, 0xD3	; 211
    525a:	9a e0       	ldi	r25, 0x0A	; 10
    525c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    5260:	c1 fb       	bst	r28, 1
    5262:	88 27       	eor	r24, r24
    5264:	80 f9       	bld	r24, 0
    5266:	1f 92       	push	r1
    5268:	8f 93       	push	r24
    526a:	20 ed       	ldi	r18, 0xD0	; 208
    526c:	3a e0       	ldi	r19, 0x0A	; 10
    526e:	3f 93       	push	r19
    5270:	2f 93       	push	r18
    5272:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    5276:	8e ec       	ldi	r24, 0xCE	; 206
    5278:	9a e0       	ldi	r25, 0x0A	; 10
    527a:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    527e:	8c eb       	ldi	r24, 0xBC	; 188
    5280:	9a e0       	ldi	r25, 0x0A	; 10
    5282:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    5286:	c2 fb       	bst	r28, 2
    5288:	88 27       	eor	r24, r24
    528a:	80 f9       	bld	r24, 0
    528c:	1f 92       	push	r1
    528e:	8f 93       	push	r24
    5290:	29 eb       	ldi	r18, 0xB9	; 185
    5292:	3a e0       	ldi	r19, 0x0A	; 10
    5294:	3f 93       	push	r19
    5296:	2f 93       	push	r18
    5298:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    529c:	87 eb       	ldi	r24, 0xB7	; 183
    529e:	9a e0       	ldi	r25, 0x0A	; 10
    52a0:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    52a4:	85 ea       	ldi	r24, 0xA5	; 165
    52a6:	9a e0       	ldi	r25, 0x0A	; 10
    52a8:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    52ac:	c3 fb       	bst	r28, 3
    52ae:	88 27       	eor	r24, r24
    52b0:	80 f9       	bld	r24, 0
    52b2:	1f 92       	push	r1
    52b4:	8f 93       	push	r24
    52b6:	22 ea       	ldi	r18, 0xA2	; 162
    52b8:	3a e0       	ldi	r19, 0x0A	; 10
    52ba:	3f 93       	push	r19
    52bc:	2f 93       	push	r18
    52be:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    52c2:	80 ea       	ldi	r24, 0xA0	; 160
    52c4:	9a e0       	ldi	r25, 0x0A	; 10
    52c6:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    52ca:	86 e9       	ldi	r24, 0x96	; 150
    52cc:	9a e0       	ldi	r25, 0x0A	; 10
    52ce:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    52d2:	c4 fb       	bst	r28, 4
    52d4:	88 27       	eor	r24, r24
    52d6:	80 f9       	bld	r24, 0
    52d8:	1f 92       	push	r1
    52da:	8f 93       	push	r24
    52dc:	23 e9       	ldi	r18, 0x93	; 147
    52de:	3a e0       	ldi	r19, 0x0A	; 10
    52e0:	3f 93       	push	r19
    52e2:	2f 93       	push	r18
    52e4:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    52e8:	81 e9       	ldi	r24, 0x91	; 145
    52ea:	9a e0       	ldi	r25, 0x0A	; 10
    52ec:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    52f0:	8f e7       	ldi	r24, 0x7F	; 127
    52f2:	9a e0       	ldi	r25, 0x0A	; 10
    52f4:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    52f8:	c5 fb       	bst	r28, 5
    52fa:	88 27       	eor	r24, r24
    52fc:	80 f9       	bld	r24, 0
    52fe:	1f 92       	push	r1
    5300:	8f 93       	push	r24
    5302:	2c e7       	ldi	r18, 0x7C	; 124
    5304:	3a e0       	ldi	r19, 0x0A	; 10
    5306:	3f 93       	push	r19
    5308:	2f 93       	push	r18
    530a:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    530e:	8a e7       	ldi	r24, 0x7A	; 122
    5310:	9a e0       	ldi	r25, 0x0A	; 10
    5312:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    5316:	8e e5       	ldi	r24, 0x5E	; 94
    5318:	9a e0       	ldi	r25, 0x0A	; 10
    531a:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    531e:	c6 fb       	bst	r28, 6
    5320:	88 27       	eor	r24, r24
    5322:	80 f9       	bld	r24, 0
    5324:	1f 92       	push	r1
    5326:	8f 93       	push	r24
    5328:	2b e5       	ldi	r18, 0x5B	; 91
    532a:	3a e0       	ldi	r19, 0x0A	; 10
    532c:	3f 93       	push	r19
    532e:	2f 93       	push	r18
    5330:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    5334:	89 e5       	ldi	r24, 0x59	; 89
    5336:	9a e0       	ldi	r25, 0x0A	; 10
    5338:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    533c:	81 e5       	ldi	r24, 0x51	; 81
    533e:	9a e0       	ldi	r25, 0x0A	; 10
    5340:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    5344:	c7 fb       	bst	r28, 7
    5346:	cc 27       	eor	r28, r28
    5348:	c0 f9       	bld	r28, 0
    534a:	1f 92       	push	r1
    534c:	cf 93       	push	r28
    534e:	8e e4       	ldi	r24, 0x4E	; 78
    5350:	9a e0       	ldi	r25, 0x0A	; 10
    5352:	9f 93       	push	r25
    5354:	8f 93       	push	r24
    5356:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    535a:	8c e4       	ldi	r24, 0x4C	; 76
    535c:	9a e0       	ldi	r25, 0x0A	; 10
    535e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    5362:	8d b7       	in	r24, 0x3d	; 61
    5364:	9e b7       	in	r25, 0x3e	; 62
    5366:	4c 96       	adiw	r24, 0x1c	; 28
    5368:	0f b6       	in	r0, 0x3f	; 63
    536a:	f8 94       	cli
    536c:	9e bf       	out	0x3e, r25	; 62
    536e:	0f be       	out	0x3f, r0	; 63
    5370:	8d bf       	out	0x3d, r24	; 61
            break;
        default:
            print("?");
            return false;
    }
    return true;
    5372:	c1 e0       	ldi	r28, 0x01	; 1
    5374:	db c0       	rjmp	.+438    	; 0x552c <command_common+0x4fe>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\t- Magic -\n"
    5376:	85 e9       	ldi	r24, 0x95	; 149
    5378:	99 e0       	ldi	r25, 0x09	; 9
    537a:	58 c0       	rjmp	.+176    	; 0x542c <command_common+0x3fe>
            print("\n\nbootloader... ");
            _delay_ms(1000);
            bootloader_jump(); // not return
            break;
        case KC_D:
            if (debug_enable) {
    537c:	80 91 d7 01 	lds	r24, 0x01D7
    5380:	c8 2f       	mov	r28, r24
    5382:	c1 70       	andi	r28, 0x01	; 1
    5384:	80 ff       	sbrs	r24, 0
    5386:	09 c0       	rjmp	.+18     	; 0x539a <command_common+0x36c>
                print("\ndebug: off\n");
    5388:	85 e9       	ldi	r24, 0x95	; 149
    538a:	9d e0       	ldi	r25, 0x0D	; 13
    538c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
                debug_matrix   = false;
    5390:	80 91 d7 01 	lds	r24, 0x01D7
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    5394:	81 7f       	andi	r24, 0xF1	; 241
    5396:	8e 7f       	andi	r24, 0xFE	; 254
    5398:	44 c0       	rjmp	.+136    	; 0x5422 <command_common+0x3f4>
            } else {
                print("\ndebug: on\n");
    539a:	89 e8       	ldi	r24, 0x89	; 137
    539c:	9d e0       	ldi	r25, 0x0D	; 13
    539e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
                debug_enable   = true;
    53a2:	80 91 d7 01 	lds	r24, 0x01D7
    53a6:	81 60       	ori	r24, 0x01	; 1
    53a8:	80 93 d7 01 	sts	0x01D7, r24
    53ac:	e2 cf       	rjmp	.-60     	; 0x5372 <command_common+0x344>
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    53ae:	80 91 d7 01 	lds	r24, 0x01D7
    53b2:	81 fb       	bst	r24, 1
    53b4:	cc 27       	eor	r28, r28
    53b6:	c0 f9       	bld	r28, 0
    53b8:	91 e0       	ldi	r25, 0x01	; 1
    53ba:	c9 27       	eor	r28, r25
    53bc:	c0 fb       	bst	r28, 0
    53be:	81 f9       	bld	r24, 1
    53c0:	80 93 d7 01 	sts	0x01D7, r24
            if (debug_matrix) {
    53c4:	cc 23       	and	r28, r28
    53c6:	19 f0       	breq	.+6      	; 0x53ce <command_common+0x3a0>
                print("\nmatrix: on\n");
    53c8:	8c e7       	ldi	r24, 0x7C	; 124
    53ca:	9d e0       	ldi	r25, 0x0D	; 13
    53cc:	25 c0       	rjmp	.+74     	; 0x5418 <command_common+0x3ea>
                debug_enable = true;
            } else {
                print("\nmatrix: off\n");
    53ce:	8e e6       	ldi	r24, 0x6E	; 110
    53d0:	9d e0       	ldi	r25, 0x0D	; 13
    53d2:	2c c0       	rjmp	.+88     	; 0x542c <command_common+0x3fe>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    53d4:	80 91 d7 01 	lds	r24, 0x01D7
    53d8:	82 fb       	bst	r24, 2
    53da:	cc 27       	eor	r28, r28
    53dc:	c0 f9       	bld	r28, 0
    53de:	91 e0       	ldi	r25, 0x01	; 1
    53e0:	c9 27       	eor	r28, r25
    53e2:	c0 fb       	bst	r28, 0
    53e4:	82 f9       	bld	r24, 2
    53e6:	80 93 d7 01 	sts	0x01D7, r24
            if (debug_keyboard) {
    53ea:	cc 23       	and	r28, r28
    53ec:	19 f0       	breq	.+6      	; 0x53f4 <command_common+0x3c6>
                print("\nkeyboard: on\n");
    53ee:	8f e5       	ldi	r24, 0x5F	; 95
    53f0:	9d e0       	ldi	r25, 0x0D	; 13
    53f2:	12 c0       	rjmp	.+36     	; 0x5418 <command_common+0x3ea>
                debug_enable = true;
            } else {
                print("\nkeyboard: off\n");
    53f4:	8f e4       	ldi	r24, 0x4F	; 79
    53f6:	9d e0       	ldi	r25, 0x0D	; 13
    53f8:	19 c0       	rjmp	.+50     	; 0x542c <command_common+0x3fe>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    53fa:	80 91 d7 01 	lds	r24, 0x01D7
    53fe:	83 fb       	bst	r24, 3
    5400:	cc 27       	eor	r28, r28
    5402:	c0 f9       	bld	r28, 0
    5404:	91 e0       	ldi	r25, 0x01	; 1
    5406:	c9 27       	eor	r28, r25
    5408:	c0 fb       	bst	r28, 0
    540a:	83 f9       	bld	r24, 3
    540c:	80 93 d7 01 	sts	0x01D7, r24
            if (debug_mouse) {
    5410:	cc 23       	and	r28, r28
    5412:	51 f0       	breq	.+20     	; 0x5428 <command_common+0x3fa>
                print("\nmouse: on\n");
    5414:	83 e4       	ldi	r24, 0x43	; 67
    5416:	9d e0       	ldi	r25, 0x0D	; 13
    5418:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
                debug_enable = true;
    541c:	80 91 d7 01 	lds	r24, 0x01D7
    5420:	81 60       	ori	r24, 0x01	; 1
    5422:	80 93 d7 01 	sts	0x01D7, r24
    5426:	82 c0       	rjmp	.+260    	; 0x552c <command_common+0x4fe>
            } else {
                print("\nmouse: off\n");
    5428:	86 e3       	ldi	r24, 0x36	; 54
    542a:	9d e0       	ldi	r25, 0x0D	; 13
    542c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    5430:	a0 cf       	rjmp	.-192    	; 0x5372 <command_common+0x344>
            }
            break;
        case KC_V: // print version & information
            print("\n\t- Version -\n");
    5432:	87 e2       	ldi	r24, 0x27	; 39
    5434:	9d e0       	ldi	r25, 0x0D	; 13
    5436:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    543a:	8b ef       	ldi	r24, 0xFB	; 251
    543c:	9c e0       	ldi	r25, 0x0C	; 12
    543e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    5442:	8e eb       	ldi	r24, 0xBE	; 190
    5444:	9c e0       	ldi	r25, 0x0C	; 12
    5446:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    544a:	81 e9       	ldi	r24, 0x91	; 145
    544c:	9c e0       	ldi	r25, 0x0C	; 12
    544e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
            /* build options */
            print("OPTIONS:"
    5452:	8d e4       	ldi	r24, 0x4D	; 77
    5454:	9c e0       	ldi	r25, 0x0C	; 12
    5456:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    545a:	8f e1       	ldi	r24, 0x1F	; 31
    545c:	9c e0       	ldi	r25, 0x0C	; 12
    545e:	e6 cf       	rjmp	.-52     	; 0x542c <command_common+0x3fe>
                  " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
                  " AVR_ARCH: avr" STR(__AVR_ARCH__) "\n");
            break;
        case KC_S:
            print("\n\t- Status -\n");
    5460:	81 e1       	ldi	r24, 0x11	; 17
    5462:	9c e0       	ldi	r25, 0x0C	; 12
    5464:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
            print_val_hex8(host_keyboard_leds());
    5468:	0e 94 ed 14 	call	0x29da	; 0x29da <host_keyboard_leds>
    546c:	1f 92       	push	r1
    546e:	8f 93       	push	r24
    5470:	87 ef       	ldi	r24, 0xF7	; 247
    5472:	9b e0       	ldi	r25, 0x0B	; 11
    5474:	9f 93       	push	r25
    5476:	8f 93       	push	r24
    5478:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
            print_val_hex8(keyboard_protocol);
    547c:	80 91 0c 01 	lds	r24, 0x010C
    5480:	1f 92       	push	r1
    5482:	8f 93       	push	r24
    5484:	80 ee       	ldi	r24, 0xE0	; 224
    5486:	9b e0       	ldi	r25, 0x0B	; 11
    5488:	9f 93       	push	r25
    548a:	8f 93       	push	r24
    548c:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
            print_val_hex8(keyboard_idle);
    5490:	80 91 6e 01 	lds	r24, 0x016E
    5494:	1f 92       	push	r1
    5496:	8f 93       	push	r24
    5498:	8d ec       	ldi	r24, 0xCD	; 205
    549a:	9b e0       	ldi	r25, 0x0B	; 11
    549c:	9f 93       	push	r25
    549e:	8f 93       	push	r24
    54a0:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
#ifdef NKRO_ENABLE
            print_val_hex8(keyboard_nkro);
    54a4:	80 91 0d 01 	lds	r24, 0x010D
    54a8:	1f 92       	push	r1
    54aa:	8f 93       	push	r24
    54ac:	8a eb       	ldi	r24, 0xBA	; 186
    54ae:	9b e0       	ldi	r25, 0x0B	; 11
    54b0:	9f 93       	push	r25
    54b2:	8f 93       	push	r24
    54b4:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
#endif
            print_val_hex32(timer_count);
    54b8:	80 91 d9 01 	lds	r24, 0x01D9
    54bc:	90 91 da 01 	lds	r25, 0x01DA
    54c0:	a0 91 db 01 	lds	r26, 0x01DB
    54c4:	b0 91 dc 01 	lds	r27, 0x01DC
    54c8:	bf 93       	push	r27
    54ca:	af 93       	push	r26
    54cc:	9f 93       	push	r25
    54ce:	8f 93       	push	r24
    54d0:	86 ea       	ldi	r24, 0xA6	; 166
    54d2:	9b e0       	ldi	r25, 0x0B	; 11
    54d4:	9f 93       	push	r25
    54d6:	8f 93       	push	r24
    54d8:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    54dc:	8d b7       	in	r24, 0x3d	; 61
    54de:	9e b7       	in	r25, 0x3e	; 62
    54e0:	46 96       	adiw	r24, 0x16	; 22
    54e2:	0f b6       	in	r0, 0x3f	; 63
    54e4:	f8 94       	cli
    54e6:	9e bf       	out	0x3e, r25	; 62
    54e8:	0f be       	out	0x3f, r0	; 63
    54ea:	8d bf       	out	0x3d, r24	; 61
    54ec:	42 cf       	rjmp	.-380    	; 0x5372 <command_common+0x344>
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
    54ee:	0e 94 b2 1a 	call	0x3564	; 0x3564 <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    54f2:	c0 91 0d 01 	lds	r28, 0x010D
    54f6:	81 e0       	ldi	r24, 0x01	; 1
    54f8:	c8 27       	eor	r28, r24
    54fa:	c0 93 0d 01 	sts	0x010D, r28
            if (keyboard_nkro)
    54fe:	cc 23       	and	r28, r28
    5500:	29 f0       	breq	.+10     	; 0x550c <command_common+0x4de>
                print("NKRO: on\n");
    5502:	8c e9       	ldi	r24, 0x9C	; 156
    5504:	9b e0       	ldi	r25, 0x0B	; 11
    5506:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    550a:	10 c0       	rjmp	.+32     	; 0x552c <command_common+0x4fe>
            else
                print("NKRO: off\n");
    550c:	81 e9       	ldi	r24, 0x91	; 145
    550e:	9b e0       	ldi	r25, 0x0B	; 11
    5510:	8d cf       	rjmp	.-230    	; 0x542c <command_common+0x3fe>
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
    5512:	80 e0       	ldi	r24, 0x00	; 0
    5514:	03 c0       	rjmp	.+6      	; 0x551c <command_common+0x4ee>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    5516:	8d 51       	subi	r24, 0x1D	; 29
    5518:	01 c0       	rjmp	.+2      	; 0x551c <command_common+0x4ee>
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    551a:	89 53       	subi	r24, 0x39	; 57
    551c:	0e 94 f9 27 	call	0x4ff2	; 0x4ff2 <switch_default_layer>
    5520:	28 cf       	rjmp	.-432    	; 0x5372 <command_common+0x344>
            break;
        default:
            print("?");
    5522:	8f e8       	ldi	r24, 0x8F	; 143
    5524:	9b e0       	ldi	r25, 0x0B	; 11
    5526:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
            return false;
    552a:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return true;
}
    552c:	8c 2f       	mov	r24, r28
    552e:	cf 91       	pop	r28
    5530:	08 95       	ret

00005532 <command_extra>:
/* This allows to define extra commands. return false when not processed. */
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    return false;
}
    5532:	80 e0       	ldi	r24, 0x00	; 0
    5534:	08 95       	ret

00005536 <command_console_extra>:

bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    return false;
}
    5536:	80 e0       	ldi	r24, 0x00	; 0
    5538:	08 95       	ret

0000553a <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    553a:	cf 93       	push	r28
    553c:	c8 2f       	mov	r28, r24
    switch (command_state) {
    553e:	80 91 e7 01 	lds	r24, 0x01E7
    5542:	81 30       	cpi	r24, 0x01	; 1
    5544:	81 f0       	breq	.+32     	; 0x5566 <command_proc+0x2c>
    5546:	20 f0       	brcs	.+8      	; 0x5550 <command_proc+0x16>
    5548:	82 30       	cpi	r24, 0x02	; 2
    554a:	09 f4       	brne	.+2      	; 0x554e <command_proc+0x14>
    554c:	4c c0       	rjmp	.+152    	; 0x55e6 <command_proc+0xac>
    554e:	42 c1       	rjmp	.+644    	; 0x57d4 <command_proc+0x29a>
        case ONESHOT:
            if (!IS_COMMAND())
    5550:	a0 91 0e 01 	lds	r26, 0x010E
    5554:	b0 91 0f 01 	lds	r27, 0x010F
    5558:	8c 91       	ld	r24, X
    555a:	81 31       	cpi	r24, 0x11	; 17
    555c:	69 f0       	breq	.+26     	; 0x5578 <command_proc+0x3e>
    555e:	82 32       	cpi	r24, 0x22	; 34
    5560:	09 f0       	breq	.+2      	; 0x5564 <command_proc+0x2a>
    5562:	3a c1       	rjmp	.+628    	; 0x57d8 <command_proc+0x29e>
    5564:	09 c0       	rjmp	.+18     	; 0x5578 <command_proc+0x3e>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    5566:	a0 91 0e 01 	lds	r26, 0x010E
    556a:	b0 91 0f 01 	lds	r27, 0x010F
    556e:	8c 91       	ld	r24, X
    5570:	81 31       	cpi	r24, 0x11	; 17
    5572:	11 f0       	breq	.+4      	; 0x5578 <command_proc+0x3e>
    5574:	82 32       	cpi	r24, 0x22	; 34
    5576:	49 f4       	brne	.+18     	; 0x558a <command_proc+0x50>
                return (command_extra(code) || command_common(code));
    5578:	8c 2f       	mov	r24, r28
    557a:	0e 94 99 2a 	call	0x5532	; 0x5532 <command_extra>
    557e:	81 11       	cpse	r24, r1
    5580:	2f c0       	rjmp	.+94     	; 0x55e0 <command_proc+0xa6>
    5582:	8c 2f       	mov	r24, r28
    5584:	0e 94 17 28 	call	0x502e	; 0x502e <command_common>
    5588:	2c c0       	rjmp	.+88     	; 0x55e2 <command_proc+0xa8>
            else
                return (command_console_extra(code) || command_console(code));
    558a:	8c 2f       	mov	r24, r28
    558c:	0e 94 9b 2a 	call	0x5536	; 0x5536 <command_console_extra>
    5590:	81 11       	cpse	r24, r1
    5592:	26 c0       	rjmp	.+76     	; 0x55e0 <command_proc+0xa6>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    5594:	c4 31       	cpi	r28, 0x14	; 20
    5596:	e1 f0       	breq	.+56     	; 0x55d0 <command_proc+0x96>
    5598:	70 f4       	brcc	.+28     	; 0x55b6 <command_proc+0x7c>
    559a:	cb 30       	cpi	r28, 0x0B	; 11
    559c:	81 f0       	breq	.+32     	; 0x55be <command_proc+0x84>
    559e:	c0 31       	cpi	r28, 0x10	; 16
    55a0:	d1 f4       	brne	.+52     	; 0x55d6 <command_proc+0x9c>
        case KC_ESC:
            command_state = ONESHOT;
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    55a2:	0e 94 c1 26 	call	0x4d82	; 0x4d82 <mousekey_console_help>
            print("M> ");
    55a6:	81 e6       	ldi	r24, 0x61	; 97
    55a8:	99 e0       	ldi	r25, 0x09	; 9
    55aa:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
            command_state = MOUSEKEY;
    55ae:	82 e0       	ldi	r24, 0x02	; 2
    55b0:	80 93 e7 01 	sts	0x01E7, r24
    55b4:	15 c0       	rjmp	.+42     	; 0x55e0 <command_proc+0xa6>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    55b6:	c9 32       	cpi	r28, 0x29	; 41
    55b8:	59 f0       	breq	.+22     	; 0x55d0 <command_proc+0x96>
    55ba:	c8 33       	cpi	r28, 0x38	; 56
    55bc:	61 f4       	brne	.+24     	; 0x55d6 <command_proc+0x9c>
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    55be:	8e e6       	ldi	r24, 0x6E	; 110
    55c0:	99 e0       	ldi	r25, 0x09	; 9
    55c2:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    55c6:	85 e6       	ldi	r24, 0x65	; 101
    55c8:	99 e0       	ldi	r25, 0x09	; 9
    55ca:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    55ce:	08 c0       	rjmp	.+16     	; 0x55e0 <command_proc+0xa6>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    55d0:	10 92 e7 01 	sts	0x01E7, r1
    55d4:	03 c1       	rjmp	.+518    	; 0x57dc <command_proc+0x2a2>
            print("M> ");
            command_state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    55d6:	8f e5       	ldi	r24, 0x5F	; 95
    55d8:	99 e0       	ldi	r25, 0x09	; 9
    55da:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    55de:	fe c0       	rjmp	.+508    	; 0x57dc <command_proc+0x2a2>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    55e0:	81 e0       	ldi	r24, 0x01	; 1
    55e2:	81 70       	andi	r24, 0x01	; 1
    55e4:	fd c0       	rjmp	.+506    	; 0x57e0 <command_proc+0x2a6>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    55e6:	c4 32       	cpi	r28, 0x24	; 36
    55e8:	20 f5       	brcc	.+72     	; 0x5632 <command_proc+0xf8>
    55ea:	ce 31       	cpi	r28, 0x1E	; 30
    55ec:	08 f0       	brcs	.+2      	; 0x55f0 <command_proc+0xb6>
    55ee:	c0 c0       	rjmp	.+384    	; 0x5770 <command_proc+0x236>
    55f0:	cb 30       	cpi	r28, 0x0B	; 11
    55f2:	99 f1       	breq	.+102    	; 0x565a <command_proc+0x120>
    55f4:	c8 f4       	brcc	.+50     	; 0x5628 <command_proc+0xee>
    55f6:	c7 30       	cpi	r28, 0x07	; 7
    55f8:	09 f0       	breq	.+2      	; 0x55fc <command_proc+0xc2>
    55fa:	d2 c0       	rjmp	.+420    	; 0x57a0 <command_proc+0x266>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    55fc:	8a e0       	ldi	r24, 0x0A	; 10
    55fe:	80 93 15 01 	sts	0x0115, r24
            mk_interval = MOUSEKEY_INTERVAL;
    5602:	94 e1       	ldi	r25, 0x14	; 20
    5604:	90 93 14 01 	sts	0x0114, r25
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    5608:	93 e0       	ldi	r25, 0x03	; 3
    560a:	90 93 13 01 	sts	0x0113, r25
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    560e:	80 93 12 01 	sts	0x0112, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    5612:	88 e0       	ldi	r24, 0x08	; 8
    5614:	80 93 11 01 	sts	0x0111, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    5618:	88 e2       	ldi	r24, 0x28	; 40
    561a:	80 93 10 01 	sts	0x0110, r24
            print("set default\n");
    561e:	85 e0       	ldi	r24, 0x05	; 5
    5620:	98 e0       	ldi	r25, 0x08	; 8
    5622:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    5626:	bf c0       	rjmp	.+382    	; 0x57a6 <command_proc+0x26c>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    5628:	c3 31       	cpi	r28, 0x13	; 19
    562a:	49 f1       	breq	.+82     	; 0x567e <command_proc+0x144>
    562c:	c4 31       	cpi	r28, 0x14	; 20
    562e:	c1 f0       	breq	.+48     	; 0x5660 <command_proc+0x126>
    5630:	b7 c0       	rjmp	.+366    	; 0x57a0 <command_proc+0x266>
    5632:	cb 34       	cpi	r28, 0x4B	; 75
    5634:	09 f4       	brne	.+2      	; 0x5638 <command_proc+0xfe>
    5636:	a9 c0       	rjmp	.+338    	; 0x578a <command_proc+0x250>
    5638:	28 f4       	brcc	.+10     	; 0x5644 <command_proc+0x10a>
    563a:	c9 32       	cpi	r28, 0x29	; 41
    563c:	89 f0       	breq	.+34     	; 0x5660 <command_proc+0x126>
    563e:	c8 33       	cpi	r28, 0x38	; 56
    5640:	61 f0       	breq	.+24     	; 0x565a <command_proc+0x120>
    5642:	ae c0       	rjmp	.+348    	; 0x57a0 <command_proc+0x266>
    5644:	c1 35       	cpi	r28, 0x51	; 81
    5646:	09 f4       	brne	.+2      	; 0x564a <command_proc+0x110>
    5648:	9e c0       	rjmp	.+316    	; 0x5786 <command_proc+0x24c>
    564a:	c2 35       	cpi	r28, 0x52	; 82
    564c:	09 f4       	brne	.+2      	; 0x5650 <command_proc+0x116>
    564e:	99 c0       	rjmp	.+306    	; 0x5782 <command_proc+0x248>
    5650:	ce 34       	cpi	r28, 0x4E	; 78
    5652:	09 f0       	breq	.+2      	; 0x5656 <command_proc+0x11c>
    5654:	a5 c0       	rjmp	.+330    	; 0x57a0 <command_proc+0x266>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    5656:	6a e0       	ldi	r22, 0x0A	; 10
    5658:	9e c0       	rjmp	.+316    	; 0x5796 <command_proc+0x25c>
static bool mousekey_console(uint8_t code)
{
    switch (code) {
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    565a:	0e 94 c1 26 	call	0x4d82	; 0x4d82 <mousekey_console_help>
    565e:	a3 c0       	rjmp	.+326    	; 0x57a6 <command_proc+0x26c>
            break;
        case KC_Q:
        case KC_ESC:
            if (mousekey_param) {
    5660:	80 91 e6 01 	lds	r24, 0x01E6
    5664:	88 23       	and	r24, r24
    5666:	19 f0       	breq	.+6      	; 0x566e <command_proc+0x134>
                mousekey_param = 0;
    5668:	10 92 e6 01 	sts	0x01E6, r1
    566c:	9c c0       	rjmp	.+312    	; 0x57a6 <command_proc+0x26c>
            } else {
                print("C> ");
    566e:	82 e1       	ldi	r24, 0x12	; 18
    5670:	98 e0       	ldi	r25, 0x08	; 8
    5672:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
                command_state = CONSOLE;
    5676:	81 e0       	ldi	r24, 0x01	; 1
    5678:	80 93 e7 01 	sts	0x01E7, r24
    567c:	b1 c0       	rjmp	.+354    	; 0x57e0 <command_proc+0x2a6>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\t- Values -\n");
    567e:	8c ee       	ldi	r24, 0xEC	; 236
    5680:	97 e0       	ldi	r25, 0x07	; 7
    5682:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    5686:	8a ed       	ldi	r24, 0xDA	; 218
    5688:	97 e0       	ldi	r25, 0x07	; 7
    568a:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    568e:	80 91 15 01 	lds	r24, 0x0115
    5692:	1f 92       	push	r1
    5694:	8f 93       	push	r24
    5696:	87 ed       	ldi	r24, 0xD7	; 215
    5698:	97 e0       	ldi	r25, 0x07	; 7
    569a:	9f 93       	push	r25
    569c:	8f 93       	push	r24
    569e:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    56a2:	85 ed       	ldi	r24, 0xD5	; 213
    56a4:	97 e0       	ldi	r25, 0x07	; 7
    56a6:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    56aa:	83 ec       	ldi	r24, 0xC3	; 195
    56ac:	97 e0       	ldi	r25, 0x07	; 7
    56ae:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    56b2:	80 91 14 01 	lds	r24, 0x0114
    56b6:	1f 92       	push	r1
    56b8:	8f 93       	push	r24
    56ba:	80 ec       	ldi	r24, 0xC0	; 192
    56bc:	97 e0       	ldi	r25, 0x07	; 7
    56be:	9f 93       	push	r25
    56c0:	8f 93       	push	r24
    56c2:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    56c6:	8e eb       	ldi	r24, 0xBE	; 190
    56c8:	97 e0       	ldi	r25, 0x07	; 7
    56ca:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    56ce:	8f ea       	ldi	r24, 0xAF	; 175
    56d0:	97 e0       	ldi	r25, 0x07	; 7
    56d2:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    56d6:	80 91 13 01 	lds	r24, 0x0113
    56da:	1f 92       	push	r1
    56dc:	8f 93       	push	r24
    56de:	8c ea       	ldi	r24, 0xAC	; 172
    56e0:	97 e0       	ldi	r25, 0x07	; 7
    56e2:	9f 93       	push	r25
    56e4:	8f 93       	push	r24
    56e6:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    56ea:	8a ea       	ldi	r24, 0xAA	; 170
    56ec:	97 e0       	ldi	r25, 0x07	; 7
    56ee:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    56f2:	89 e9       	ldi	r24, 0x99	; 153
    56f4:	97 e0       	ldi	r25, 0x07	; 7
    56f6:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    56fa:	80 91 12 01 	lds	r24, 0x0112
    56fe:	1f 92       	push	r1
    5700:	8f 93       	push	r24
    5702:	86 e9       	ldi	r24, 0x96	; 150
    5704:	97 e0       	ldi	r25, 0x07	; 7
    5706:	9f 93       	push	r25
    5708:	8f 93       	push	r24
    570a:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    570e:	84 e9       	ldi	r24, 0x94	; 148
    5710:	97 e0       	ldi	r25, 0x07	; 7
    5712:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    5716:	8f e7       	ldi	r24, 0x7F	; 127
    5718:	97 e0       	ldi	r25, 0x07	; 7
    571a:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    571e:	80 91 11 01 	lds	r24, 0x0111
    5722:	1f 92       	push	r1
    5724:	8f 93       	push	r24
    5726:	8c e7       	ldi	r24, 0x7C	; 124
    5728:	97 e0       	ldi	r25, 0x07	; 7
    572a:	9f 93       	push	r25
    572c:	8f 93       	push	r24
    572e:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    5732:	8a e7       	ldi	r24, 0x7A	; 122
    5734:	97 e0       	ldi	r25, 0x07	; 7
    5736:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    573a:	83 e6       	ldi	r24, 0x63	; 99
    573c:	97 e0       	ldi	r25, 0x07	; 7
    573e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    5742:	80 91 10 01 	lds	r24, 0x0110
    5746:	1f 92       	push	r1
    5748:	8f 93       	push	r24
    574a:	80 e6       	ldi	r24, 0x60	; 96
    574c:	97 e0       	ldi	r25, 0x07	; 7
    574e:	9f 93       	push	r25
    5750:	8f 93       	push	r24
    5752:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    5756:	8e e5       	ldi	r24, 0x5E	; 94
    5758:	97 e0       	ldi	r25, 0x07	; 7
    575a:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
    575e:	8d b7       	in	r24, 0x3d	; 61
    5760:	9e b7       	in	r25, 0x3e	; 62
    5762:	48 96       	adiw	r24, 0x18	; 24
    5764:	0f b6       	in	r0, 0x3f	; 63
    5766:	f8 94       	cli
    5768:	9e bf       	out	0x3e, r25	; 62
    576a:	0f be       	out	0x3f, r0	; 63
    576c:	8d bf       	out	0x3d, r24	; 61
    576e:	1b c0       	rjmp	.+54     	; 0x57a6 <command_proc+0x26c>
    5770:	ce 51       	subi	r28, 0x1E	; 30
    5772:	ec 2f       	mov	r30, r28
    5774:	f0 e0       	ldi	r31, 0x00	; 0
    5776:	e1 5d       	subi	r30, 0xD1	; 209
    5778:	fe 4f       	sbci	r31, 0xFE	; 254
        case KC_2:
        case KC_3:
        case KC_4:
        case KC_5:
        case KC_6:
            mousekey_param = numkey2num(code);
    577a:	80 81       	ld	r24, Z
    577c:	80 93 e6 01 	sts	0x01E6, r24
    5780:	12 c0       	rjmp	.+36     	; 0x57a6 <command_proc+0x26c>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    5782:	61 e0       	ldi	r22, 0x01	; 1
    5784:	03 c0       	rjmp	.+6      	; 0x578c <command_proc+0x252>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    5786:	61 e0       	ldi	r22, 0x01	; 1
    5788:	06 c0       	rjmp	.+12     	; 0x5796 <command_proc+0x25c>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    578a:	6a e0       	ldi	r22, 0x0A	; 10
    578c:	80 91 e6 01 	lds	r24, 0x01E6
    5790:	0e 94 d8 26 	call	0x4db0	; 0x4db0 <mousekey_param_inc>
    5794:	08 c0       	rjmp	.+16     	; 0x57a6 <command_proc+0x26c>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    5796:	80 91 e6 01 	lds	r24, 0x01E6
    579a:	0e 94 7b 27 	call	0x4ef6	; 0x4ef6 <mousekey_param_dec>
    579e:	03 c0       	rjmp	.+6      	; 0x57a6 <command_proc+0x26c>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
            print("set default\n");
            break;
        default:
            print("?");
    57a0:	83 e0       	ldi	r24, 0x03	; 3
    57a2:	98 e0       	ldi	r25, 0x08	; 8
    57a4:	13 c0       	rjmp	.+38     	; 0x57cc <command_proc+0x292>
            return false;
    }
    if (mousekey_param)
    57a6:	80 91 e6 01 	lds	r24, 0x01E6
    57aa:	88 23       	and	r24, r24
    57ac:	69 f0       	breq	.+26     	; 0x57c8 <command_proc+0x28e>
        xprintf("M%d> ", mousekey_param);
    57ae:	1f 92       	push	r1
    57b0:	8f 93       	push	r24
    57b2:	8d ef       	ldi	r24, 0xFD	; 253
    57b4:	97 e0       	ldi	r25, 0x07	; 7
    57b6:	9f 93       	push	r25
    57b8:	8f 93       	push	r24
    57ba:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__xprintf>
    57be:	0f 90       	pop	r0
    57c0:	0f 90       	pop	r0
    57c2:	0f 90       	pop	r0
    57c4:	0f 90       	pop	r0
    57c6:	04 c0       	rjmp	.+8      	; 0x57d0 <command_proc+0x296>
    else
        print("M>" );
    57c8:	8a ef       	ldi	r24, 0xFA	; 250
    57ca:	97 e0       	ldi	r25, 0x07	; 7
    57cc:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <xputs>
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    57d0:	81 e0       	ldi	r24, 0x01	; 1
    57d2:	06 c0       	rjmp	.+12     	; 0x57e0 <command_proc+0x2a6>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    57d4:	10 92 e7 01 	sts	0x01E7, r1
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    57d8:	80 e0       	ldi	r24, 0x00	; 0
    57da:	02 c0       	rjmp	.+4      	; 0x57e0 <command_proc+0x2a6>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    57dc:	80 e0       	ldi	r24, 0x00	; 0
    57de:	01 cf       	rjmp	.-510    	; 0x55e2 <command_proc+0xa8>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    57e0:	cf 91       	pop	r28
    57e2:	08 95       	ret

000057e4 <sleep_led_init>:

void sleep_led_init(void)
{
    /* Timer1 setup */
    /* CTC mode */
    TCCR1B |= _BV(WGM12);
    57e4:	e1 e8       	ldi	r30, 0x81	; 129
    57e6:	f0 e0       	ldi	r31, 0x00	; 0
    57e8:	80 81       	ld	r24, Z
    57ea:	88 60       	ori	r24, 0x08	; 8
    57ec:	80 83       	st	Z, r24
    /* Clock selelct: clk/1 */
    TCCR1B |= _BV(CS10);
    57ee:	80 81       	ld	r24, Z
    57f0:	81 60       	ori	r24, 0x01	; 1
    57f2:	80 83       	st	Z, r24
    /* Set TOP value */
    uint8_t sreg = SREG;
    57f4:	8f b7       	in	r24, 0x3f	; 63
    cli();
    57f6:	f8 94       	cli
    OCR1AH = (SLEEP_LED_TIMER_TOP>>8)&0xff;
    57f8:	93 e0       	ldi	r25, 0x03	; 3
    57fa:	90 93 89 00 	sts	0x0089, r25
    OCR1AL = SLEEP_LED_TIMER_TOP&0xff;
    57fe:	90 ed       	ldi	r25, 0xD0	; 208
    5800:	90 93 88 00 	sts	0x0088, r25
    SREG = sreg;
    5804:	8f bf       	out	0x3f, r24	; 63
    5806:	08 95       	ret

00005808 <sleep_led_enable>:
}

void sleep_led_enable(void)
{
    /* Enable Compare Match Interrupt */
    TIMSK1 |= _BV(OCIE1A);
    5808:	ef e6       	ldi	r30, 0x6F	; 111
    580a:	f0 e0       	ldi	r31, 0x00	; 0
    580c:	80 81       	ld	r24, Z
    580e:	82 60       	ori	r24, 0x02	; 2
    5810:	80 83       	st	Z, r24
    5812:	08 95       	ret

00005814 <sleep_led_disable>:
}

void sleep_led_disable(void)
{
    /* Disable Compare Match Interrupt */
    TIMSK1 &= ~_BV(OCIE1A);
    5814:	ef e6       	ldi	r30, 0x6F	; 111
    5816:	f0 e0       	ldi	r31, 0x00	; 0
    5818:	80 81       	ld	r24, Z
    581a:	8d 7f       	andi	r24, 0xFD	; 253
    581c:	80 83       	st	Z, r24
    581e:	08 95       	ret

00005820 <sleep_led_toggle>:
}

void sleep_led_toggle(void)
{
    /* Disable Compare Match Interrupt */
    TIMSK1 ^= _BV(OCIE1A);
    5820:	ef e6       	ldi	r30, 0x6F	; 111
    5822:	f0 e0       	ldi	r31, 0x00	; 0
    5824:	80 81       	ld	r24, Z
    5826:	92 e0       	ldi	r25, 0x02	; 2
    5828:	89 27       	eor	r24, r25
    582a:	80 83       	st	Z, r24
    582c:	08 95       	ret

0000582e <__vector_17>:
255, 252, 245, 233, 218, 199, 179, 157, 135, 113, 93, 74, 58, 44, 32, 23,
15, 10, 6, 4, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

ISR(TIMER1_COMPA_vect)
{
    582e:	1f 92       	push	r1
    5830:	0f 92       	push	r0
    5832:	0f b6       	in	r0, 0x3f	; 63
    5834:	0f 92       	push	r0
    5836:	11 24       	eor	r1, r1
    5838:	2f 93       	push	r18
    583a:	3f 93       	push	r19
    583c:	4f 93       	push	r20
    583e:	5f 93       	push	r21
    5840:	6f 93       	push	r22
    5842:	7f 93       	push	r23
    5844:	8f 93       	push	r24
    5846:	9f 93       	push	r25
    5848:	af 93       	push	r26
    584a:	bf 93       	push	r27
    584c:	ef 93       	push	r30
    584e:	ff 93       	push	r31
            uint8_t duration:2;
            uint8_t index:6;
        } pwm;
    } timer = { .row = 0 };

    timer.row++;
    5850:	80 91 e8 01 	lds	r24, 0x01E8
    5854:	90 91 e9 01 	lds	r25, 0x01E9
    5858:	01 96       	adiw	r24, 0x01	; 1
    585a:	90 93 e9 01 	sts	0x01E9, r25
    585e:	80 93 e8 01 	sts	0x01E8, r24
    
    // LED on
    if (timer.pwm.count == 0) {
    5862:	81 11       	cpse	r24, r1
    5864:	03 c0       	rjmp	.+6      	; 0x586c <__vector_17+0x3e>
        led_set(1<<USB_LED_CAPS_LOCK);
    5866:	82 e0       	ldi	r24, 0x02	; 2
    5868:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <led_set>
    }
    // LED off
    if (timer.pwm.count == pgm_read_byte(&breathing_table[timer.pwm.index])) {
    586c:	e0 91 e9 01 	lds	r30, 0x01E9
    5870:	e6 95       	lsr	r30
    5872:	e6 95       	lsr	r30
    5874:	f0 e0       	ldi	r31, 0x00	; 0
    5876:	ee 52       	subi	r30, 0x2E	; 46
    5878:	f2 4f       	sbci	r31, 0xF2	; 242
    587a:	e4 91       	lpm	r30, Z
    587c:	80 91 e8 01 	lds	r24, 0x01E8
    5880:	8e 13       	cpse	r24, r30
    5882:	03 c0       	rjmp	.+6      	; 0x588a <__vector_17+0x5c>
        led_set(0);
    5884:	80 e0       	ldi	r24, 0x00	; 0
    5886:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <led_set>
    }
}
    588a:	ff 91       	pop	r31
    588c:	ef 91       	pop	r30
    588e:	bf 91       	pop	r27
    5890:	af 91       	pop	r26
    5892:	9f 91       	pop	r25
    5894:	8f 91       	pop	r24
    5896:	7f 91       	pop	r23
    5898:	6f 91       	pop	r22
    589a:	5f 91       	pop	r21
    589c:	4f 91       	pop	r20
    589e:	3f 91       	pop	r19
    58a0:	2f 91       	pop	r18
    58a2:	0f 90       	pop	r0
    58a4:	0f be       	out	0x3f, r0	; 63
    58a6:	0f 90       	pop	r0
    58a8:	1f 90       	pop	r1
    58aa:	18 95       	reti

000058ac <__fixsfsi>:
    58ac:	04 d0       	rcall	.+8      	; 0x58b6 <__fixunssfsi>
    58ae:	68 94       	set
    58b0:	b1 11       	cpse	r27, r1
    58b2:	8d c0       	rjmp	.+282    	; 0x59ce <__fp_szero>
    58b4:	08 95       	ret

000058b6 <__fixunssfsi>:
    58b6:	70 d0       	rcall	.+224    	; 0x5998 <__fp_splitA>
    58b8:	88 f0       	brcs	.+34     	; 0x58dc <__fixunssfsi+0x26>
    58ba:	9f 57       	subi	r25, 0x7F	; 127
    58bc:	90 f0       	brcs	.+36     	; 0x58e2 <__fixunssfsi+0x2c>
    58be:	b9 2f       	mov	r27, r25
    58c0:	99 27       	eor	r25, r25
    58c2:	b7 51       	subi	r27, 0x17	; 23
    58c4:	a0 f0       	brcs	.+40     	; 0x58ee <__fixunssfsi+0x38>
    58c6:	d1 f0       	breq	.+52     	; 0x58fc <__fixunssfsi+0x46>
    58c8:	66 0f       	add	r22, r22
    58ca:	77 1f       	adc	r23, r23
    58cc:	88 1f       	adc	r24, r24
    58ce:	99 1f       	adc	r25, r25
    58d0:	1a f0       	brmi	.+6      	; 0x58d8 <__fixunssfsi+0x22>
    58d2:	ba 95       	dec	r27
    58d4:	c9 f7       	brne	.-14     	; 0x58c8 <__fixunssfsi+0x12>
    58d6:	12 c0       	rjmp	.+36     	; 0x58fc <__fixunssfsi+0x46>
    58d8:	b1 30       	cpi	r27, 0x01	; 1
    58da:	81 f0       	breq	.+32     	; 0x58fc <__fixunssfsi+0x46>
    58dc:	77 d0       	rcall	.+238    	; 0x59cc <__fp_zero>
    58de:	b1 e0       	ldi	r27, 0x01	; 1
    58e0:	08 95       	ret
    58e2:	74 c0       	rjmp	.+232    	; 0x59cc <__fp_zero>
    58e4:	67 2f       	mov	r22, r23
    58e6:	78 2f       	mov	r23, r24
    58e8:	88 27       	eor	r24, r24
    58ea:	b8 5f       	subi	r27, 0xF8	; 248
    58ec:	39 f0       	breq	.+14     	; 0x58fc <__fixunssfsi+0x46>
    58ee:	b9 3f       	cpi	r27, 0xF9	; 249
    58f0:	cc f3       	brlt	.-14     	; 0x58e4 <__fixunssfsi+0x2e>
    58f2:	86 95       	lsr	r24
    58f4:	77 95       	ror	r23
    58f6:	67 95       	ror	r22
    58f8:	b3 95       	inc	r27
    58fa:	d9 f7       	brne	.-10     	; 0x58f2 <__fixunssfsi+0x3c>
    58fc:	3e f4       	brtc	.+14     	; 0x590c <__fixunssfsi+0x56>
    58fe:	90 95       	com	r25
    5900:	80 95       	com	r24
    5902:	70 95       	com	r23
    5904:	61 95       	neg	r22
    5906:	7f 4f       	sbci	r23, 0xFF	; 255
    5908:	8f 4f       	sbci	r24, 0xFF	; 255
    590a:	9f 4f       	sbci	r25, 0xFF	; 255
    590c:	08 95       	ret

0000590e <__floatunsisf>:
    590e:	e8 94       	clt
    5910:	09 c0       	rjmp	.+18     	; 0x5924 <__floatsisf+0x12>

00005912 <__floatsisf>:
    5912:	97 fb       	bst	r25, 7
    5914:	3e f4       	brtc	.+14     	; 0x5924 <__floatsisf+0x12>
    5916:	90 95       	com	r25
    5918:	80 95       	com	r24
    591a:	70 95       	com	r23
    591c:	61 95       	neg	r22
    591e:	7f 4f       	sbci	r23, 0xFF	; 255
    5920:	8f 4f       	sbci	r24, 0xFF	; 255
    5922:	9f 4f       	sbci	r25, 0xFF	; 255
    5924:	99 23       	and	r25, r25
    5926:	a9 f0       	breq	.+42     	; 0x5952 <__floatsisf+0x40>
    5928:	f9 2f       	mov	r31, r25
    592a:	96 e9       	ldi	r25, 0x96	; 150
    592c:	bb 27       	eor	r27, r27
    592e:	93 95       	inc	r25
    5930:	f6 95       	lsr	r31
    5932:	87 95       	ror	r24
    5934:	77 95       	ror	r23
    5936:	67 95       	ror	r22
    5938:	b7 95       	ror	r27
    593a:	f1 11       	cpse	r31, r1
    593c:	f8 cf       	rjmp	.-16     	; 0x592e <__floatsisf+0x1c>
    593e:	fa f4       	brpl	.+62     	; 0x597e <__floatsisf+0x6c>
    5940:	bb 0f       	add	r27, r27
    5942:	11 f4       	brne	.+4      	; 0x5948 <__floatsisf+0x36>
    5944:	60 ff       	sbrs	r22, 0
    5946:	1b c0       	rjmp	.+54     	; 0x597e <__floatsisf+0x6c>
    5948:	6f 5f       	subi	r22, 0xFF	; 255
    594a:	7f 4f       	sbci	r23, 0xFF	; 255
    594c:	8f 4f       	sbci	r24, 0xFF	; 255
    594e:	9f 4f       	sbci	r25, 0xFF	; 255
    5950:	16 c0       	rjmp	.+44     	; 0x597e <__floatsisf+0x6c>
    5952:	88 23       	and	r24, r24
    5954:	11 f0       	breq	.+4      	; 0x595a <__floatsisf+0x48>
    5956:	96 e9       	ldi	r25, 0x96	; 150
    5958:	11 c0       	rjmp	.+34     	; 0x597c <__floatsisf+0x6a>
    595a:	77 23       	and	r23, r23
    595c:	21 f0       	breq	.+8      	; 0x5966 <__floatsisf+0x54>
    595e:	9e e8       	ldi	r25, 0x8E	; 142
    5960:	87 2f       	mov	r24, r23
    5962:	76 2f       	mov	r23, r22
    5964:	05 c0       	rjmp	.+10     	; 0x5970 <__floatsisf+0x5e>
    5966:	66 23       	and	r22, r22
    5968:	71 f0       	breq	.+28     	; 0x5986 <__floatsisf+0x74>
    596a:	96 e8       	ldi	r25, 0x86	; 134
    596c:	86 2f       	mov	r24, r22
    596e:	70 e0       	ldi	r23, 0x00	; 0
    5970:	60 e0       	ldi	r22, 0x00	; 0
    5972:	2a f0       	brmi	.+10     	; 0x597e <__floatsisf+0x6c>
    5974:	9a 95       	dec	r25
    5976:	66 0f       	add	r22, r22
    5978:	77 1f       	adc	r23, r23
    597a:	88 1f       	adc	r24, r24
    597c:	da f7       	brpl	.-10     	; 0x5974 <__floatsisf+0x62>
    597e:	88 0f       	add	r24, r24
    5980:	96 95       	lsr	r25
    5982:	87 95       	ror	r24
    5984:	97 f9       	bld	r25, 7
    5986:	08 95       	ret

00005988 <__fp_split3>:
    5988:	57 fd       	sbrc	r21, 7
    598a:	90 58       	subi	r25, 0x80	; 128
    598c:	44 0f       	add	r20, r20
    598e:	55 1f       	adc	r21, r21
    5990:	59 f0       	breq	.+22     	; 0x59a8 <__fp_splitA+0x10>
    5992:	5f 3f       	cpi	r21, 0xFF	; 255
    5994:	71 f0       	breq	.+28     	; 0x59b2 <__fp_splitA+0x1a>
    5996:	47 95       	ror	r20

00005998 <__fp_splitA>:
    5998:	88 0f       	add	r24, r24
    599a:	97 fb       	bst	r25, 7
    599c:	99 1f       	adc	r25, r25
    599e:	61 f0       	breq	.+24     	; 0x59b8 <__fp_splitA+0x20>
    59a0:	9f 3f       	cpi	r25, 0xFF	; 255
    59a2:	79 f0       	breq	.+30     	; 0x59c2 <__fp_splitA+0x2a>
    59a4:	87 95       	ror	r24
    59a6:	08 95       	ret
    59a8:	12 16       	cp	r1, r18
    59aa:	13 06       	cpc	r1, r19
    59ac:	14 06       	cpc	r1, r20
    59ae:	55 1f       	adc	r21, r21
    59b0:	f2 cf       	rjmp	.-28     	; 0x5996 <__fp_split3+0xe>
    59b2:	46 95       	lsr	r20
    59b4:	f1 df       	rcall	.-30     	; 0x5998 <__fp_splitA>
    59b6:	08 c0       	rjmp	.+16     	; 0x59c8 <__fp_splitA+0x30>
    59b8:	16 16       	cp	r1, r22
    59ba:	17 06       	cpc	r1, r23
    59bc:	18 06       	cpc	r1, r24
    59be:	99 1f       	adc	r25, r25
    59c0:	f1 cf       	rjmp	.-30     	; 0x59a4 <__fp_splitA+0xc>
    59c2:	86 95       	lsr	r24
    59c4:	71 05       	cpc	r23, r1
    59c6:	61 05       	cpc	r22, r1
    59c8:	08 94       	sec
    59ca:	08 95       	ret

000059cc <__fp_zero>:
    59cc:	e8 94       	clt

000059ce <__fp_szero>:
    59ce:	bb 27       	eor	r27, r27
    59d0:	66 27       	eor	r22, r22
    59d2:	77 27       	eor	r23, r23
    59d4:	cb 01       	movw	r24, r22
    59d6:	97 f9       	bld	r25, 7
    59d8:	08 95       	ret

000059da <__mulsf3>:
    59da:	0b d0       	rcall	.+22     	; 0x59f2 <__mulsf3x>
    59dc:	78 c0       	rjmp	.+240    	; 0x5ace <__fp_round>
    59de:	69 d0       	rcall	.+210    	; 0x5ab2 <__fp_pscA>
    59e0:	28 f0       	brcs	.+10     	; 0x59ec <__mulsf3+0x12>
    59e2:	6e d0       	rcall	.+220    	; 0x5ac0 <__fp_pscB>
    59e4:	18 f0       	brcs	.+6      	; 0x59ec <__mulsf3+0x12>
    59e6:	95 23       	and	r25, r21
    59e8:	09 f0       	breq	.+2      	; 0x59ec <__mulsf3+0x12>
    59ea:	5a c0       	rjmp	.+180    	; 0x5aa0 <__fp_inf>
    59ec:	5f c0       	rjmp	.+190    	; 0x5aac <__fp_nan>
    59ee:	11 24       	eor	r1, r1
    59f0:	ee cf       	rjmp	.-36     	; 0x59ce <__fp_szero>

000059f2 <__mulsf3x>:
    59f2:	ca df       	rcall	.-108    	; 0x5988 <__fp_split3>
    59f4:	a0 f3       	brcs	.-24     	; 0x59de <__mulsf3+0x4>

000059f6 <__mulsf3_pse>:
    59f6:	95 9f       	mul	r25, r21
    59f8:	d1 f3       	breq	.-12     	; 0x59ee <__mulsf3+0x14>
    59fa:	95 0f       	add	r25, r21
    59fc:	50 e0       	ldi	r21, 0x00	; 0
    59fe:	55 1f       	adc	r21, r21
    5a00:	62 9f       	mul	r22, r18
    5a02:	f0 01       	movw	r30, r0
    5a04:	72 9f       	mul	r23, r18
    5a06:	bb 27       	eor	r27, r27
    5a08:	f0 0d       	add	r31, r0
    5a0a:	b1 1d       	adc	r27, r1
    5a0c:	63 9f       	mul	r22, r19
    5a0e:	aa 27       	eor	r26, r26
    5a10:	f0 0d       	add	r31, r0
    5a12:	b1 1d       	adc	r27, r1
    5a14:	aa 1f       	adc	r26, r26
    5a16:	64 9f       	mul	r22, r20
    5a18:	66 27       	eor	r22, r22
    5a1a:	b0 0d       	add	r27, r0
    5a1c:	a1 1d       	adc	r26, r1
    5a1e:	66 1f       	adc	r22, r22
    5a20:	82 9f       	mul	r24, r18
    5a22:	22 27       	eor	r18, r18
    5a24:	b0 0d       	add	r27, r0
    5a26:	a1 1d       	adc	r26, r1
    5a28:	62 1f       	adc	r22, r18
    5a2a:	73 9f       	mul	r23, r19
    5a2c:	b0 0d       	add	r27, r0
    5a2e:	a1 1d       	adc	r26, r1
    5a30:	62 1f       	adc	r22, r18
    5a32:	83 9f       	mul	r24, r19
    5a34:	a0 0d       	add	r26, r0
    5a36:	61 1d       	adc	r22, r1
    5a38:	22 1f       	adc	r18, r18
    5a3a:	74 9f       	mul	r23, r20
    5a3c:	33 27       	eor	r19, r19
    5a3e:	a0 0d       	add	r26, r0
    5a40:	61 1d       	adc	r22, r1
    5a42:	23 1f       	adc	r18, r19
    5a44:	84 9f       	mul	r24, r20
    5a46:	60 0d       	add	r22, r0
    5a48:	21 1d       	adc	r18, r1
    5a4a:	82 2f       	mov	r24, r18
    5a4c:	76 2f       	mov	r23, r22
    5a4e:	6a 2f       	mov	r22, r26
    5a50:	11 24       	eor	r1, r1
    5a52:	9f 57       	subi	r25, 0x7F	; 127
    5a54:	50 40       	sbci	r21, 0x00	; 0
    5a56:	8a f0       	brmi	.+34     	; 0x5a7a <__mulsf3_pse+0x84>
    5a58:	e1 f0       	breq	.+56     	; 0x5a92 <__mulsf3_pse+0x9c>
    5a5a:	88 23       	and	r24, r24
    5a5c:	4a f0       	brmi	.+18     	; 0x5a70 <__mulsf3_pse+0x7a>
    5a5e:	ee 0f       	add	r30, r30
    5a60:	ff 1f       	adc	r31, r31
    5a62:	bb 1f       	adc	r27, r27
    5a64:	66 1f       	adc	r22, r22
    5a66:	77 1f       	adc	r23, r23
    5a68:	88 1f       	adc	r24, r24
    5a6a:	91 50       	subi	r25, 0x01	; 1
    5a6c:	50 40       	sbci	r21, 0x00	; 0
    5a6e:	a9 f7       	brne	.-22     	; 0x5a5a <__mulsf3_pse+0x64>
    5a70:	9e 3f       	cpi	r25, 0xFE	; 254
    5a72:	51 05       	cpc	r21, r1
    5a74:	70 f0       	brcs	.+28     	; 0x5a92 <__mulsf3_pse+0x9c>
    5a76:	14 c0       	rjmp	.+40     	; 0x5aa0 <__fp_inf>
    5a78:	aa cf       	rjmp	.-172    	; 0x59ce <__fp_szero>
    5a7a:	5f 3f       	cpi	r21, 0xFF	; 255
    5a7c:	ec f3       	brlt	.-6      	; 0x5a78 <__mulsf3_pse+0x82>
    5a7e:	98 3e       	cpi	r25, 0xE8	; 232
    5a80:	dc f3       	brlt	.-10     	; 0x5a78 <__mulsf3_pse+0x82>
    5a82:	86 95       	lsr	r24
    5a84:	77 95       	ror	r23
    5a86:	67 95       	ror	r22
    5a88:	b7 95       	ror	r27
    5a8a:	f7 95       	ror	r31
    5a8c:	e7 95       	ror	r30
    5a8e:	9f 5f       	subi	r25, 0xFF	; 255
    5a90:	c1 f7       	brne	.-16     	; 0x5a82 <__mulsf3_pse+0x8c>
    5a92:	fe 2b       	or	r31, r30
    5a94:	88 0f       	add	r24, r24
    5a96:	91 1d       	adc	r25, r1
    5a98:	96 95       	lsr	r25
    5a9a:	87 95       	ror	r24
    5a9c:	97 f9       	bld	r25, 7
    5a9e:	08 95       	ret

00005aa0 <__fp_inf>:
    5aa0:	97 f9       	bld	r25, 7
    5aa2:	9f 67       	ori	r25, 0x7F	; 127
    5aa4:	80 e8       	ldi	r24, 0x80	; 128
    5aa6:	70 e0       	ldi	r23, 0x00	; 0
    5aa8:	60 e0       	ldi	r22, 0x00	; 0
    5aaa:	08 95       	ret

00005aac <__fp_nan>:
    5aac:	9f ef       	ldi	r25, 0xFF	; 255
    5aae:	80 ec       	ldi	r24, 0xC0	; 192
    5ab0:	08 95       	ret

00005ab2 <__fp_pscA>:
    5ab2:	00 24       	eor	r0, r0
    5ab4:	0a 94       	dec	r0
    5ab6:	16 16       	cp	r1, r22
    5ab8:	17 06       	cpc	r1, r23
    5aba:	18 06       	cpc	r1, r24
    5abc:	09 06       	cpc	r0, r25
    5abe:	08 95       	ret

00005ac0 <__fp_pscB>:
    5ac0:	00 24       	eor	r0, r0
    5ac2:	0a 94       	dec	r0
    5ac4:	12 16       	cp	r1, r18
    5ac6:	13 06       	cpc	r1, r19
    5ac8:	14 06       	cpc	r1, r20
    5aca:	05 06       	cpc	r0, r21
    5acc:	08 95       	ret

00005ace <__fp_round>:
    5ace:	09 2e       	mov	r0, r25
    5ad0:	03 94       	inc	r0
    5ad2:	00 0c       	add	r0, r0
    5ad4:	11 f4       	brne	.+4      	; 0x5ada <__fp_round+0xc>
    5ad6:	88 23       	and	r24, r24
    5ad8:	52 f0       	brmi	.+20     	; 0x5aee <__fp_round+0x20>
    5ada:	bb 0f       	add	r27, r27
    5adc:	40 f4       	brcc	.+16     	; 0x5aee <__fp_round+0x20>
    5ade:	bf 2b       	or	r27, r31
    5ae0:	11 f4       	brne	.+4      	; 0x5ae6 <__fp_round+0x18>
    5ae2:	60 ff       	sbrs	r22, 0
    5ae4:	04 c0       	rjmp	.+8      	; 0x5aee <__fp_round+0x20>
    5ae6:	6f 5f       	subi	r22, 0xFF	; 255
    5ae8:	7f 4f       	sbci	r23, 0xFF	; 255
    5aea:	8f 4f       	sbci	r24, 0xFF	; 255
    5aec:	9f 4f       	sbci	r25, 0xFF	; 255
    5aee:	08 95       	ret

00005af0 <__udivmodqi4>:
    5af0:	99 1b       	sub	r25, r25
    5af2:	79 e0       	ldi	r23, 0x09	; 9
    5af4:	04 c0       	rjmp	.+8      	; 0x5afe <__udivmodqi4_ep>

00005af6 <__udivmodqi4_loop>:
    5af6:	99 1f       	adc	r25, r25
    5af8:	96 17       	cp	r25, r22
    5afa:	08 f0       	brcs	.+2      	; 0x5afe <__udivmodqi4_ep>
    5afc:	96 1b       	sub	r25, r22

00005afe <__udivmodqi4_ep>:
    5afe:	88 1f       	adc	r24, r24
    5b00:	7a 95       	dec	r23
    5b02:	c9 f7       	brne	.-14     	; 0x5af6 <__udivmodqi4_loop>
    5b04:	80 95       	com	r24
    5b06:	08 95       	ret

00005b08 <__divmodhi4>:
    5b08:	97 fb       	bst	r25, 7
    5b0a:	07 2e       	mov	r0, r23
    5b0c:	16 f4       	brtc	.+4      	; 0x5b12 <__divmodhi4+0xa>
    5b0e:	00 94       	com	r0
    5b10:	07 d0       	rcall	.+14     	; 0x5b20 <__divmodhi4_neg1>
    5b12:	77 fd       	sbrc	r23, 7
    5b14:	09 d0       	rcall	.+18     	; 0x5b28 <__divmodhi4_neg2>
    5b16:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <__udivmodhi4>
    5b1a:	07 fc       	sbrc	r0, 7
    5b1c:	05 d0       	rcall	.+10     	; 0x5b28 <__divmodhi4_neg2>
    5b1e:	3e f4       	brtc	.+14     	; 0x5b2e <__divmodhi4_exit>

00005b20 <__divmodhi4_neg1>:
    5b20:	90 95       	com	r25
    5b22:	81 95       	neg	r24
    5b24:	9f 4f       	sbci	r25, 0xFF	; 255
    5b26:	08 95       	ret

00005b28 <__divmodhi4_neg2>:
    5b28:	70 95       	com	r23
    5b2a:	61 95       	neg	r22
    5b2c:	7f 4f       	sbci	r23, 0xFF	; 255

00005b2e <__divmodhi4_exit>:
    5b2e:	08 95       	ret

00005b30 <__tablejump2__>:
    5b30:	ee 0f       	add	r30, r30
    5b32:	ff 1f       	adc	r31, r31

00005b34 <__tablejump__>:
    5b34:	05 90       	lpm	r0, Z+
    5b36:	f4 91       	lpm	r31, Z
    5b38:	e0 2d       	mov	r30, r0
    5b3a:	09 94       	ijmp

00005b3c <__udivmodhi4>:
    5b3c:	aa 1b       	sub	r26, r26
    5b3e:	bb 1b       	sub	r27, r27
    5b40:	51 e1       	ldi	r21, 0x11	; 17
    5b42:	07 c0       	rjmp	.+14     	; 0x5b52 <__udivmodhi4_ep>

00005b44 <__udivmodhi4_loop>:
    5b44:	aa 1f       	adc	r26, r26
    5b46:	bb 1f       	adc	r27, r27
    5b48:	a6 17       	cp	r26, r22
    5b4a:	b7 07       	cpc	r27, r23
    5b4c:	10 f0       	brcs	.+4      	; 0x5b52 <__udivmodhi4_ep>
    5b4e:	a6 1b       	sub	r26, r22
    5b50:	b7 0b       	sbc	r27, r23

00005b52 <__udivmodhi4_ep>:
    5b52:	88 1f       	adc	r24, r24
    5b54:	99 1f       	adc	r25, r25
    5b56:	5a 95       	dec	r21
    5b58:	a9 f7       	brne	.-22     	; 0x5b44 <__udivmodhi4_loop>
    5b5a:	80 95       	com	r24
    5b5c:	90 95       	com	r25
    5b5e:	bc 01       	movw	r22, r24
    5b60:	cd 01       	movw	r24, r26
    5b62:	08 95       	ret

00005b64 <__eerd_byte_m32u4>:
    5b64:	f9 99       	sbic	0x1f, 1	; 31
    5b66:	fe cf       	rjmp	.-4      	; 0x5b64 <__eerd_byte_m32u4>
    5b68:	92 bd       	out	0x22, r25	; 34
    5b6a:	81 bd       	out	0x21, r24	; 33
    5b6c:	f8 9a       	sbi	0x1f, 0	; 31
    5b6e:	99 27       	eor	r25, r25
    5b70:	80 b5       	in	r24, 0x20	; 32
    5b72:	08 95       	ret

00005b74 <__eerd_word_m32u4>:
    5b74:	a8 e1       	ldi	r26, 0x18	; 24
    5b76:	b0 e0       	ldi	r27, 0x00	; 0
    5b78:	42 e0       	ldi	r20, 0x02	; 2
    5b7a:	50 e0       	ldi	r21, 0x00	; 0
    5b7c:	0c 94 d5 2d 	jmp	0x5baa	; 0x5baa <__eerd_blraw_m32u4>

00005b80 <__eewr_byte_m32u4>:
    5b80:	26 2f       	mov	r18, r22

00005b82 <__eewr_r18_m32u4>:
    5b82:	f9 99       	sbic	0x1f, 1	; 31
    5b84:	fe cf       	rjmp	.-4      	; 0x5b82 <__eewr_r18_m32u4>
    5b86:	1f ba       	out	0x1f, r1	; 31
    5b88:	92 bd       	out	0x22, r25	; 34
    5b8a:	81 bd       	out	0x21, r24	; 33
    5b8c:	20 bd       	out	0x20, r18	; 32
    5b8e:	0f b6       	in	r0, 0x3f	; 63
    5b90:	f8 94       	cli
    5b92:	fa 9a       	sbi	0x1f, 2	; 31
    5b94:	f9 9a       	sbi	0x1f, 1	; 31
    5b96:	0f be       	out	0x3f, r0	; 63
    5b98:	01 96       	adiw	r24, 0x01	; 1
    5b9a:	08 95       	ret

00005b9c <__eewr_word_m32u4>:
    5b9c:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <__eewr_byte_m32u4>
    5ba0:	27 2f       	mov	r18, r23
    5ba2:	0c 94 c1 2d 	jmp	0x5b82	; 0x5b82 <__eewr_r18_m32u4>

00005ba6 <__eerd_block_m32u4>:
    5ba6:	dc 01       	movw	r26, r24
    5ba8:	cb 01       	movw	r24, r22

00005baa <__eerd_blraw_m32u4>:
    5baa:	fc 01       	movw	r30, r24
    5bac:	f9 99       	sbic	0x1f, 1	; 31
    5bae:	fe cf       	rjmp	.-4      	; 0x5bac <__eerd_blraw_m32u4+0x2>
    5bb0:	06 c0       	rjmp	.+12     	; 0x5bbe <__eerd_blraw_m32u4+0x14>
    5bb2:	f2 bd       	out	0x22, r31	; 34
    5bb4:	e1 bd       	out	0x21, r30	; 33
    5bb6:	f8 9a       	sbi	0x1f, 0	; 31
    5bb8:	31 96       	adiw	r30, 0x01	; 1
    5bba:	00 b4       	in	r0, 0x20	; 32
    5bbc:	0d 92       	st	X+, r0
    5bbe:	41 50       	subi	r20, 0x01	; 1
    5bc0:	50 40       	sbci	r21, 0x00	; 0
    5bc2:	b8 f7       	brcc	.-18     	; 0x5bb2 <__eerd_blraw_m32u4+0x8>
    5bc4:	08 95       	ret

00005bc6 <_exit>:
    5bc6:	f8 94       	cli

00005bc8 <__stop_program>:
    5bc8:	ff cf       	rjmp	.-2      	; 0x5bc8 <__stop_program>
