
ergodox_ez.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00005ba6  00005c3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005ba6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000bf  0080013a  0080013a  00005c74  2**0
                  ALLOC
  3 .noinit       00000004  008001f9  008001f9  00005c74  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  00005c74  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000000a0  00000000  00000000  0000652c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  000065cc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000bd8  00000000  00000000  000065e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0001256c  00000000  00000000  000071b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004769  00000000  00000000  00019724  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000061e4  00000000  00000000  0001de8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001d6c  00000000  00000000  00024074  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00004913  00000000  00000000  00025de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000096d6  00000000  00000000  0002a6f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000d58  00000000  00000000  00033dc9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	0c 94 02 07 	jmp	0xe04	; 0xe04 <__ctors_end>
       4:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>
       8:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>
       c:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>
      10:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>
      14:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>
      18:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>
      1c:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>
      20:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>
      24:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>
      28:	0c 94 5d 12 	jmp	0x24ba	; 0x24ba <__vector_10>
      2c:	0c 94 2f 13 	jmp	0x265e	; 0x265e <__vector_11>
      30:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>
      34:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>
      3c:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>
      40:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>
      44:	0c 94 05 2c 	jmp	0x580a	; 0x580a <__vector_17>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      48:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>
      4c:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>
      50:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	0c 94 0c 22 	jmp	0x4418	; 0x4418 <__vector_21>
      58:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>
      5c:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>
      60:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      64:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>
      68:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>

	ParserData->TotalDeviceReports = 1;
      6c:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>
      70:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>
      74:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>
      78:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>
      7c:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>
      84:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>
      88:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      90:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>
      94:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
      98:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      9c:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>
      a0:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>
      a4:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      a8:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__bad_interrupt>
      ac:	94 13       	cpse	r25, r20
      ae:	b6 13       	cpse	r27, r22
      b0:	a1 14       	cp	r10, r1
      b2:	b6 13       	cpse	r27, r22
      b4:	a1 14       	cp	r10, r1
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      b6:	f8 13       	cpse	r31, r24
      b8:	1b 14       	cp	r1, r11
      ba:	a1 14       	cp	r10, r1
      bc:	70 14       	cp	r7, r0
      be:	83 14       	cp	r8, r3
      c0:	d1 17       	cp	r29, r17
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      c2:	d1 17       	cp	r29, r17
      c4:	ff 17       	cp	r31, r31
      c6:	ff 17       	cp	r31, r31
      c8:	42 18       	sub	r4, r2
      ca:	7e 18       	sub	r7, r14
      cc:	7f 1a       	sub	r7, r31
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      ce:	7f 1a       	sub	r7, r31
      d0:	96 18       	sub	r9, r6
      d2:	7f 1a       	sub	r7, r31
      d4:	8d 19       	sub	r24, r13
	{
		uint8_t  HIDReportItem  = *ReportData;
      d6:	8d 19       	sub	r24, r13
      d8:	59 1a       	sub	r5, r25
      da:	7f 1a       	sub	r7, r31
      dc:	7f 1a       	sub	r7, r31
      de:	6d 1a       	sub	r6, r29

000000e0 <__trampolines_end>:
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      e0:	00 00       	nop
      e2:	f0 a1       	ldd	r31, Z+32	; 0x20

000000e4 <keymaps>:
      e4:	2e 00 4c 00 29 71 e1 00 35 81 00 00 1e 00 14 00     ..L.)q..5.......
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
      f4:	04 00 1d 71 34 00 4d 00 1f 00 1a 00 16 00 1b 00     ...q4.M.........
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     104:	e1 04 2a 00 20 00 08 00 07 00 06 00 50 00 2c 00     ..*. .......P.,.
     114:	21 00 15 00 09 00 19 00 4f 00 4a 00 22 00 17 00     !.......O.J."...
     124:	0a 00 05 00 00 00 65 74 50 00 01 54 00 00 00 7f     ......etP..T....
     134:	00 00 e3 00 4f 00 01 54 00 00 00 77 00 00 e2 00     ....O..T...w....
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
				ReportData     += 4;
     144:	23 00 1c 00 0b 00 11 00 00 00 29 71 24 00 18 00     #.........)q$...
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     154:	0d 00 10 00 52 00 4b 00 25 00 0c 00 0e 00 36 00     ....R.K.%.....6.
				ReportSize     -= 2;
				ReportData     += 2;
				break;
     164:	51 00 28 00 26 00 12 00 0f 00 37 00 2f 00 2b 00     Q.(.&.....7./.+.

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
				ReportSize     -= 1;
     174:	27 00 13 00 33 82 38 71 30 00 4e 00 2d 00 31 00     '...3.8q0.N.-.1.
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     184:	e3 00 e5 00 c1 00 00 00 01 00 01 00 01 00 01 00     ................
     194:	01 00 00 00 3a 00 1e 02 20 02 22 02 01 00 01 00     ....:... .".....

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1a4:	3b 00 1f 02 21 02 23 02 01 00 01 00 3c 00 2f 02     ;...!.#.....<./.
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1b4:	26 02 2f 00 01 00 01 00 3d 00 30 02 27 02 30 00     &./.....=.0.'.0.
     1c4:	01 00 01 00 3e 00 31 02 35 00 35 02 00 00 01 00     ....>.1.5.5.....
     1d4:	01 00 01 00 00 00 01 00 00 00 01 00 01 00 01 00     ................
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;
     1e4:	00 00 01 00 00 00 01 00 3f 00 52 00 51 00 24 02     ........?.R.Q.$.
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1f4:	00 00 01 00 40 00 24 00 21 00 1e 00 01 00 01 00     ....@.$.!.......
     204:	41 00 25 00 22 00 1f 00 37 00 01 00 42 00 26 00     A.%."...7...B.&.
     214:	23 00 20 00 27 00 01 00 43 00 25 02 2e 02 31 00     #. .'...C.%...1.
     224:	2e 00 01 00 44 00 45 00 01 00 01 00 01 00 00 00     ....D.E.........
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     234:	01 00 01 00 01 00 01 00 01 00 00 00 01 00 01 00     ................
     244:	01 00 01 00 01 00 01 00 01 00 01 00 f2 00 01 00     ................
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     254:	01 00 01 00 01 00 f0 00 f1 00 01 00 f4 00 01 00     ................
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     264:	01 00 01 00 f3 00 01 00 f5 00 01 00 01 00 01 00     ................

				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     274:	01 00 01 00 00 00 01 00 01 00 01 00 00 00 01 00     ................

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     284:	00 00 01 00 01 00 01 00 00 00 01 00 00 00 01 00     ................
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     294:	01 00 01 00 01 00 01 00 00 00 01 00 01 00 01 00     ................
				break;

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
				break;
     2a4:	01 00 01 00 a9 00 01 00 01 00 01 00 01 00 ac 00     ................

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;
     2b4:	aa 00 b6 00 01 00 01 00 01 00 ab 00 a8 00 01 00     ................
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;
     2c4:	01 00 01 00 01 00 01 00 01 00 01 00 01 00 01 00     ................
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
     2d4:	ae 00 01 00 01 00 00 00                             ........

000002dc <__c.4827>:
     2dc:	0a 00                                               ..

000002de <__c.4825>:
     2de:	25 30 31 36 62 00                                   %016b.

000002e4 <__c.4823>:
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2e4:	3a 20 00                                            : .

000002e7 <__c.4821>:
     2e7:	25 30 32 58 00                                      %02X.

000002ec <__c.4818>:
     2ec:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41     .r/c 0123456789A
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     2fc:	42 43 44 45 46 0a 00                                BCDEF..

00000303 <__c.4796>:
     303:	0a 00                                               ..

00000305 <__c.4794>:
     305:	25 30 32 58 00                                      %02X.

0000030a <__c.4792>:
     30a:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

00000314 <__c.4788>:
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     314:	6c 65 66 74 20 73 69 64 65 20 61 74 74 61 63 68     left side attach
     324:	65 64 0a 00                                         ed..

00000328 <__c.4786>:
     328:	6c 65 66 74 20 73 69 64 65 20 6e 6f 74 20 72 65     left side not re
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     338:	73 70 6f 6e 64 69 6e 67 0a 00                       sponding..

00000342 <__c.4784>:
     342:	74 72 79 69 6e 67 20 74 6f 20 72 65 73 65 74 20     trying to reset 
     352:	6d 63 70 32 33 30 31 38 0a 00                       mcp23018..

0000035c <__c.4651>:
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     35c:	0a 44 45 42 55 47 3a 20 65 6e 61 62 6c 65 64 2e     .DEBUG: enabled.
					}
				}

				ParserData->UsingReportIDs = true;
     36c:	0a 00                                               ..

0000036e <__c.4748>:
     36e:	5b 73 5d 00                                         [s].

00000372 <__c.4746>:

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     372:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     382:	00                                                  .

00000383 <__c.4647>:
     383:	5b 57 5d 00                                         [W].

00000387 <__c.4643>:
     387:	5b 53 5d 00                                         [S].

0000038b <__c.4639>:
     38b:	5b 52 5d 00                                         [R].

0000038f <__c.4634>:
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     38f:	5b 44 5d 00                                         [D].

00000393 <__c.4629>:
     393:	5b 43 5d 00                                         [C].

00000397 <ProductString>:
     397:	16 03 45 00 72 00 67 00 6f 00 44 00 6f 00 78 00     ..E.r.g.o.D.o.x.
     3a7:	20 00 45 00 5a 00 00 00                              .E.Z...

000003af <ManufacturerString>:
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3af:	16 03 45 00 72 00 67 00 6f 00 44 00 6f 00 78 00     ..E.r.g.o.D.o.x.
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3bf:	20 00 45 00 5a 00 00 00                              .E.Z...

000003c7 <LanguageString>:
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3c7:	04 03 09 04                                         ....

000003cb <ConfigurationDescriptor>:
     3cb:	09 02 8d 00 05 01 00 a0 fa 09 04 00 00 01 03 01     ................

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3db:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3eb:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3fb:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
				}

				CurrCollectionPath->Type       = ReportItemData;
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     40b:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....

				if (UsageListSize)
     41b:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42b:	01 00 01 22 20 00 07 05 84 03 20 00 01 07 05 04     ..." ..... .....

					for (uint8_t i = 1; i < UsageListSize; i++)
     43b:	03 20 00 01 09 04 04 00 01 03 00 00 00 09 21 11     . ............!.
					  UsageList[i - 1] = UsageList[i];
     44b:	01 00 01 22 39 00 07 05 85 03 10 00 01              ..."9........

00000458 <DeviceDescriptor>:

					UsageListSize--;
     458:	12 01 10 01 00 00 00 08 ed fe 07 13 01 00 01 02     ................
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     468:	00 01                                               ..

0000046a <NKROReport>:
     46a:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     47a:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	91 02 95 01 75 03 91 01 05 07 19 00 29 77 15 00     ....u.......)w..
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49a:	25 01 95 78 75 01 81 02 c0                          %..xu....

000004a3 <ConsoleReport>:
     4a3:	06 31 ff 09 74 a1 01 09 75 15 00 25 ff 95 20 75     .1..t...u..%.. u
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4b3:	08 81 02 09 76 15 00 25 ff 95 20 75 08 91 02 c0     ....v..%.. u....

000004c3 <ExtrakeyReport>:
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4c3:	05 01 09 80 a1 01 85 02 16 01 00 26 b7 00 1a 01     ...........&....
     4d3:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e3:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f3:	10 95 01 81 00 c0                                   ......

000004f9 <MouseReport>:
     4f9:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
					NewReportItem.CollectionPath = CurrCollectionPath;
     509:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
					NewReportItem.ReportID       = CurrStateTable->ReportID;

					if (UsageListSize)
     519:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     529:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8

						for (uint8_t i = 1; i < UsageListSize; i++)
     539:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

00000546 <KeyboardReport>:
						  UsageList[i - 1] = UsageList[i];
     546:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.

						UsageListSize--;
     556:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     566:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     576:	19 00 29 ff 15 00 25 ff 95 06 75 08 81 00 c0        ..)...%...u....

00000585 <__c.4396>:
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     585:	0a 00                                               ..

00000587 <__c.4391>:
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     587:	25 30 32 58 20 00                                   %02X .

0000058d <__c.4388>:

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     58d:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:
     59d:	20 00                                                .

0000059f <__c.4737>:
     59f:	0a 00                                               ..

000005a1 <__c.4735>:
     5a1:	25 30 32 58 00                                      %02X.

000005a6 <__c.4733>:

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5a6:	6b 65 79 62 6f 61 72 64 5f 73 65 74 5f 6c 65 64     keyboard_set_led

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5b6:	3a 20 00                                            : .

000005b9 <__c.4536>:
     5b9:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can
     5c9:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

000005d7 <__c.4531>:
     5d7:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can
     5e7:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

000005f5 <__c.4677>:

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f5:	64 6f 6e 65 2e 0a 00                                done...

000005fc <__c.4671>:
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     5fc:	62 6f 6f 67 6d 61 67 69 63 20 73 63 61 6e 3a 20     boogmagic scan: 
     60c:	2e 2e 2e 20 00                                      ... .

00000611 <__c.4468>:
     611:	29 0a 00                                            )..

00000614 <__c.4466>:
     614:	25 75 00                                            %u.

00000617 <__c.4464>:
     617:	2f 00                                               /.

00000619 <__c.4462>:
     619:	25 75 00                                            %u.

0000061c <__c.4460>:
     61c:	5d 28 00                                            ](.

0000061f <__c.4458>:
     61f:	25 64 00                                            %d.

00000622 <__c.4456>:
     622:	20 00                                                .

00000624 <__c.4454>:
     624:	25 64 00                                            %d.

00000627 <__c.4452>:
     627:	20 00                                                .

00000629 <__c.4450>:
     629:	25 64 00                                            %d.

0000062c <__c.4448>:
     62c:	20 00                                                .

0000062e <__c.4446>:
     62e:	25 64 00                                            %d.

00000631 <__c.4444>:
     631:	7c 00                                               |.

00000633 <__c.4442>:
     633:	25 30 32 58 00                                      %02X.

00000638 <__c.4440>:
     638:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     648:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     658:	20 5b 00                                             [.

0000065b <__c.5075>:
     65b:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     66b:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000676 <__c.5072>:
     676:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
					  ParserData->TotalReportItems++;
     686:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

0000068f <__c.5069>:

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     68f:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
		{
			UsageMinMax.Minimum = 0;
     69f:	20 25 64 0a 00                                       %d..

000006a4 <__c.5066>:
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6a4:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
		}
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;
     6b4:	64 0a 00                                            d..

000006b7 <__c.5063>:

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6b7:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6c7:	0a 00                                               ..

000006c9 <__c.5059>:
     6c9:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

000006d8 <__c.5052>:

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d8:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     6e8:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

000006f3 <__c.5049>:
     6f3:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     703:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

0000070c <__c.5046>:
     70c:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     71c:	20 25 64 0a 00                                       %d..

00000721 <__c.5043>:
     721:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     731:	64 0a 00                                            d..

00000734 <__c.5040>:
     734:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     744:	0a 00                                               ..

00000746 <__c.5036>:
     746:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000755 <__c.5029>:
     755:	0a 00                                               ..

00000757 <__c.5027>:
     757:	25 75 00                                            %u.

0000075a <__c.5025>:
     75a:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     76a:	5f 6d 61 78 3a 20 00                                _max: .

00000771 <__c.5023>:
     771:	0a 00                                               ..

00000773 <__c.5021>:
     773:	25 75 00                                            %u.

00000776 <__c.5019>:
     776:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     786:	65 64 3a 20 00                                      ed: .

0000078b <__c.5017>:
     78b:	0a 00                                               ..

0000078d <__c.5015>:
     78d:	25 75 00                                            %u.

00000790 <__c.5013>:
     790:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     7a0:	00                                                  .

000007a1 <__c.5011>:
     7a1:	0a 00                                               ..

000007a3 <__c.5009>:
     7a3:	25 75 00                                            %u.

000007a6 <__c.5007>:
     7a6:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

000007b5 <__c.5005>:
     7b5:	0a 00                                               ..

000007b7 <__c.5003>:
     7b7:	25 75 00                                            %u.

000007ba <__c.5001>:
     7ba:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     7ca:	20 00                                                .

000007cc <__c.4999>:
     7cc:	0a 00                                               ..

000007ce <__c.4997>:
     7ce:	25 75 00                                            %u.

000007d1 <__c.4995>:
     7d1:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     7e1:	20 00                                                .

000007e3 <__c.4993>:
     7e3:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

000007f1 <__c.5113>:
     7f1:	4d 3e 00                                            M>.

000007f4 <__c.5111>:
     7f4:	4d 25 64 3e 20 00                                   M%d> .

000007fa <__c.5109>:
     7fa:	3f 00                                               ?.

000007fc <__c.5106>:
     7fc:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

00000809 <__c.5092>:
     809:	43 3e 20 00                                         C> .

0000080d <__c.5082>:
     80d:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     81d:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     82d:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     83d:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     84d:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

0000085b <__c.5080>:
     85b:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     86b:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     87b:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     88b:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     89b:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     8ab:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     8bb:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     8cb:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     8db:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     8eb:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     8fb:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     90b:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     91b:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     92b:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     93b:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     94b:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

00000956 <__c.4985>:
     956:	3f 00                                               ?.

00000958 <__c.4982>:
     958:	4d 3e 20 00                                         M> .

0000095c <__c.4987>:
     95c:	43 3e 20 00                                         C> .

00000960 <__c.5131>:
     960:	4c 25 64 0a 00                                      L%d..

00000965 <__c.4971>:
     965:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     975:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     985:	73 65 6b 65 79 0a 00                                sekey..

0000098c <__c.4792>:
     98c:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     99c:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     9ac:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     9bc:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     9cc:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     9dc:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     9ec:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     9fc:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     a0c:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     a1c:	72 0a 65 3a 09 65 65 70 72 6f 6d 0a 6e 3a 09 4e     r.e:.eeprom.n:.N
     a2c:	4b 52 4f 0a 7a 3a 09 73 6c 65 65 70 20 4c 45 44     KRO.z:.sleep LED
     a3c:	20 74 65 73 74 0a 00                                 test..

00000a43 <__c.4887>:
     a43:	0a 00                                               ..

00000a45 <__c.4885>:
     a45:	25 75 00                                            %u.

00000a48 <__c.4883>:
     a48:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

00000a50 <__c.4881>:
     a50:	0a 00                                               ..

00000a52 <__c.4879>:
     a52:	25 75 00                                            %u.

00000a55 <__c.4877>:
     a55:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     a65:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

00000a71 <__c.4875>:
     a71:	0a 00                                               ..

00000a73 <__c.4873>:
     a73:	25 75 00                                            %u.

00000a76 <__c.4871>:
     a76:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     a86:	20 00                                                .

00000a88 <__c.4869>:
     a88:	0a 00                                               ..

00000a8a <__c.4867>:
     a8a:	25 75 00                                            %u.

00000a8d <__c.4865>:
     a8d:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

00000a97 <__c.4863>:
     a97:	0a 00                                               ..

00000a99 <__c.4861>:
     a99:	25 75 00                                            %u.

00000a9c <__c.4859>:
     a9c:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     aac:	20 00                                                .

00000aae <__c.4857>:
     aae:	0a 00                                               ..

00000ab0 <__c.4855>:
     ab0:	25 75 00                                            %u.

00000ab3 <__c.4853>:
     ab3:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     ac3:	20 00                                                .

00000ac5 <__c.4851>:
     ac5:	0a 00                                               ..

00000ac7 <__c.4849>:
     ac7:	25 75 00                                            %u.

00000aca <__c.4847>:
     aca:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     ada:	74 72 6f 6c 3a 20 00                                trol: .

00000ae1 <__c.4845>:
     ae1:	0a 00                                               ..

00000ae3 <__c.4843>:
     ae3:	25 75 00                                            %u.

00000ae6 <__c.4841>:
     ae6:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     af6:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

00000aff <__c.4839>:
     aff:	0a 00                                               ..

00000b01 <__c.4837>:
     b01:	25 30 32 58 00                                      %02X.

00000b06 <__c.4835>:
     b06:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     b16:	77 3a 20 00                                         w: .

00000b1a <__c.4832>:
     b1a:	0a 00                                               ..

00000b1c <__c.4830>:
     b1c:	25 75 00                                            %u.

00000b1f <__c.4828>:
     b1f:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

00000b28 <__c.4826>:
     b28:	0a 00                                               ..

00000b2a <__c.4824>:
     b2a:	25 75 00                                            %u.

00000b2d <__c.4822>:
     b2d:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

00000b39 <__c.4820>:
     b39:	0a 00                                               ..

00000b3b <__c.4818>:
     b3b:	25 75 00                                            %u.

00000b3e <__c.4816>:
     b3e:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

00000b48 <__c.4814>:
     b48:	0a 00                                               ..

00000b4a <__c.4812>:
     b4a:	25 75 00                                            %u.

00000b4d <__c.4810>:
     b4d:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

00000b57 <__c.4808>:
     b57:	0a 00                                               ..

00000b59 <__c.4806>:
     b59:	25 30 32 58 00                                      %02X.

00000b5e <__c.4804>:
     b5e:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     b6e:	3a 20 00                                            : .

00000b71 <__c.4801>:
     b71:	0a 00                                               ..

00000b73 <__c.4799>:
     b73:	25 75 00                                            %u.

00000b76 <__c.4797>:
     b76:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

00000b86 <__c.4966>:
     b86:	3f 00                                               ?.

00000b88 <__c.4957>:
     b88:	4e 4b 52 4f 3a 20 6f 66 66 0a 00                    NKRO: off..

00000b93 <__c.4955>:
     b93:	4e 4b 52 4f 3a 20 6f 6e 0a 00                       NKRO: on..

00000b9d <__c.4952>:
     b9d:	74 69 6d 65 72 5f 63 6f 75 6e 74 3a 20 25 30 34     timer_count: %04
     bad:	6c 58 0a 00                                         lX..

00000bb1 <__c.4950>:
     bb1:	6b 65 79 62 6f 61 72 64 5f 6e 6b 72 6f 3a 20 25     keyboard_nkro: %
     bc1:	58 0a 00                                            X..

00000bc4 <__c.4948>:
     bc4:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     bd4:	58 0a 00                                            X..

00000bd7 <__c.4946>:
     bd7:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     be7:	6c 3a 20 25 58 0a 00                                l: %X..

00000bee <__c.4944>:
     bee:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     bfe:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000c08 <__c.4942>:
     c08:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

00000c16 <__c.4939>:
     c16:	47 43 43 3a 20 34 2e 38 2e 31 20 41 56 52 2d 4c     GCC: 4.8.1 AVR-L
     c26:	49 42 43 3a 20 31 2e 38 2e 30 73 76 6e 20 41 56     IBC: 1.8.0svn AV
     c36:	52 5f 41 52 43 48 3a 20 61 76 72 35 0a 00           R_ARCH: avr5..

00000c44 <__c.4937>:
     c44:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     c54:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     c64:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     c74:	45 20 43 4f 4d 4d 41 4e 44 20 4e 4b 52 4f 20 35     E COMMAND NKRO 5
     c84:	31 32 0a 00                                         12..

00000c88 <__c.4935>:
     c88:	42 55 49 4c 44 3a 20 30 66 32 63 37 37 33 20 28     BUILD: 0f2c773 (
     c98:	32 31 3a 33 30 3a 31 33 20 4a 61 6e 20 20 38 20     21:30:13 Jan  8 
     ca8:	32 30 31 36 29 0a 00                                2016)..

00000caf <__c.4933>:
     caf:	56 49 44 3a 20 30 78 46 45 45 44 28 45 72 67 6f     VID: 0xFEED(Ergo
     cbf:	44 6f 78 20 45 5a 29 20 50 49 44 3a 20 30 78 31     Dox EZ) PID: 0x1
     ccf:	33 30 37 28 45 72 67 6f 44 6f 78 20 45 5a 29 20     307(ErgoDox EZ) 
     cdf:	56 45 52 3a 20 30 78 30 30 30 31 0a 00              VER: 0x0001..

00000cec <__c.4931>:
     cec:	44 45 53 43 3a 20 74 2e 6d 2e 6b 2e 20 6b 65 79     DESC: t.m.k. key
     cfc:	62 6f 61 72 64 20 66 69 72 6d 77 61 72 65 20 66     board firmware f
     d0c:	6f 72 20 45 72 67 6f 64 6f 78 0a 00                 or Ergodox..

00000d18 <__c.4929>:
     d18:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

00000d27 <__c.4926>:
     d27:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

00000d34 <__c.4924>:
     d34:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

00000d40 <__c.4921>:
     d40:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

00000d50 <__c.4919>:
     d50:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

00000d5f <__c.4916>:
     d5f:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

00000d6d <__c.4914>:
     d6d:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000d7a <__c.4911>:
     d7a:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000d86 <__c.4909>:
     d86:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000d93 <__c.4906>:
     d93:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     da3:	00                                                  .

00000da4 <__c.4903>:
     da4:	43 3e 20 00                                         C> .

00000da8 <__c.4898>:
     da8:	65 65 63 6f 6e 66 69 67 3a 0a 00                    eeconfig:..

00000db3 <__c.4894>:
     db3:	53 6c 65 65 70 20 4c 45 44 20 74 65 73 74 0a 00     Sleep LED test..

00000dc3 <breathing_table>:
     dc3:	00 00 00 00 00 00 00 00 00 00 00 01 02 04 06 0a     ................
     dd3:	0f 17 20 2c 3a 4a 5d 71 87 9d b3 c7 da e9 f5 fc     .. ,:J]q........
     de3:	ff fc f5 e9 da c7 b3 9d 87 71 5d 4a 3a 2c 20 17     .........q]J:, .
     df3:	0f 0a 06 04 02 01 00 00 00 00 00 00 00 00 00 00     ................
     e03:	00                                                  .

00000e04 <__ctors_end>:
     e04:	11 24       	eor	r1, r1
     e06:	1f be       	out	0x3f, r1	; 63
     e08:	cf ef       	ldi	r28, 0xFF	; 255
     e0a:	da e0       	ldi	r29, 0x0A	; 10
     e0c:	de bf       	out	0x3e, r29	; 62
     e0e:	cd bf       	out	0x3d, r28	; 61

00000e10 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     e10:	04 b6       	in	r0, 0x34	; 52
     e12:	03 fe       	sbrs	r0, 3
     e14:	24 c0       	rjmp	.+72     	; 0xe5e <__do_copy_data>
     e16:	80 91 f9 01 	lds	r24, 0x01F9
     e1a:	90 91 fa 01 	lds	r25, 0x01FA
     e1e:	a0 91 fb 01 	lds	r26, 0x01FB
     e22:	b0 91 fc 01 	lds	r27, 0x01FC
     e26:	87 30       	cpi	r24, 0x07	; 7
     e28:	90 4b       	sbci	r25, 0xB0	; 176
     e2a:	a7 40       	sbci	r26, 0x07	; 7
     e2c:	b0 4b       	sbci	r27, 0xB0	; 176
     e2e:	b9 f4       	brne	.+46     	; 0xe5e <__do_copy_data>
        reset_key = 0;
     e30:	10 92 f9 01 	sts	0x01F9, r1
     e34:	10 92 fa 01 	sts	0x01FA, r1
     e38:	10 92 fb 01 	sts	0x01FB, r1
     e3c:	10 92 fc 01 	sts	0x01FC, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     e40:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     e42:	84 b7       	in	r24, 0x34	; 52
     e44:	87 7f       	andi	r24, 0xF7	; 247
     e46:	84 bf       	out	0x34, r24	; 52
        wdt_disable();
     e48:	88 e1       	ldi	r24, 0x18	; 24
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	f8 94       	cli
     e4e:	80 93 60 00 	sts	0x0060, r24
     e52:	10 92 60 00 	sts	0x0060, r1
     e56:	0f be       	out	0x3f, r0	; 63

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     e58:	e0 e0       	ldi	r30, 0x00	; 0
     e5a:	ff e3       	ldi	r31, 0x3F	; 63
     e5c:	09 95       	icall

00000e5e <__do_copy_data>:
     e5e:	11 e0       	ldi	r17, 0x01	; 1
     e60:	a0 e0       	ldi	r26, 0x00	; 0
     e62:	b1 e0       	ldi	r27, 0x01	; 1
     e64:	e6 ea       	ldi	r30, 0xA6	; 166
     e66:	fb e5       	ldi	r31, 0x5B	; 91
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <__do_copy_data+0x10>
     e6a:	05 90       	lpm	r0, Z+
     e6c:	0d 92       	st	X+, r0
     e6e:	aa 33       	cpi	r26, 0x3A	; 58
     e70:	b1 07       	cpc	r27, r17
     e72:	d9 f7       	brne	.-10     	; 0xe6a <__do_copy_data+0xc>

00000e74 <__do_clear_bss>:
     e74:	21 e0       	ldi	r18, 0x01	; 1
     e76:	aa e3       	ldi	r26, 0x3A	; 58
     e78:	b1 e0       	ldi	r27, 0x01	; 1
     e7a:	01 c0       	rjmp	.+2      	; 0xe7e <.do_clear_bss_start>

00000e7c <.do_clear_bss_loop>:
     e7c:	1d 92       	st	X+, r1

00000e7e <.do_clear_bss_start>:
     e7e:	a9 3f       	cpi	r26, 0xF9	; 249
     e80:	b2 07       	cpc	r27, r18
     e82:	e1 f7       	brne	.-8      	; 0xe7c <.do_clear_bss_loop>
     e84:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <main>
     e88:	0c 94 d1 2d 	jmp	0x5ba2	; 0x5ba2 <_exit>

00000e8c <__bad_interrupt>:
     e8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000e90 <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     e90:	ff 93       	push	r31
	push	ZL
     e92:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     e94:	e0 91 3a 01 	lds	r30, 0x013A
	lds	ZH, xfunc_out+1	;/
     e98:	f0 91 3b 01 	lds	r31, 0x013B
	sbiw	ZL, 0		;Skip if null
     e9c:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     e9e:	09 f0       	breq	.+2      	; 0xea2 <xputc+0x12>
	icall
     ea0:	09 95       	icall
2:	pop	ZL
     ea2:	ef 91       	pop	r30
	pop	ZH
     ea4:	ff 91       	pop	r31
	ret
     ea6:	08 95       	ret

00000ea8 <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     ea8:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     eaa:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     eac:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     eae:	11 f0       	breq	.+4      	; 0xeb4 <xputs+0xc>
	rcall	xputc
     eb0:	ef df       	rcall	.-34     	; 0xe90 <xputc>
	rjmp	1b
     eb2:	fb cf       	rjmp	.-10     	; 0xeaa <xputs+0x2>
2:	ret
     eb4:	08 95       	ret

00000eb6 <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     eb6:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     eb8:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     eba:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     ebc:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     ebe:	0c c0       	rjmp	.+24     	; 0xed8 <xitoa+0x22>
	neg	r20		;
     ec0:	41 95       	neg	r20
	sbrs	r25, 7		;
     ec2:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     ec4:	09 c0       	rjmp	.+18     	; 0xed8 <xitoa+0x22>
	ldi	r30, '-'	;
     ec6:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     ec8:	60 95       	com	r22
	com	r23		;
     eca:	70 95       	com	r23
	com	r24		;
     ecc:	80 95       	com	r24
	com	r25		;
     ece:	90 95       	com	r25
	adc	r22, r1		;
     ed0:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     ed2:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     ed4:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     ed6:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     ed8:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <xitoa+0x2a>
	neg	r18		;
     edc:	21 95       	neg	r18
	ldi	r19, '0'	;/
     ede:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     ee0:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     ee2:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     ee4:	66 0f       	add	r22, r22
	rol	r23		;
     ee6:	77 1f       	adc	r23, r23
	rol	r24		;
     ee8:	88 1f       	adc	r24, r24
	rol	r25		;
     eea:	99 1f       	adc	r25, r25
	rol	r26		;
     eec:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     eee:	a4 17       	cp	r26, r20
	brcs	3f		;
     ef0:	10 f0       	brcs	.+4      	; 0xef6 <xitoa+0x40>
	sub	r26, r20	;
     ef2:	a4 1b       	sub	r26, r20
	inc	r22		;
     ef4:	63 95       	inc	r22
3:	dec	r21		;
     ef6:	5a 95       	dec	r21
	brne	2b		;/
     ef8:	a9 f7       	brne	.-22     	; 0xee4 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     efa:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     efc:	08 f0       	brcs	.+2      	; 0xf00 <xitoa+0x4a>
	subi	r26, -7		;
     efe:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     f00:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     f02:	af 93       	push	r26
	inc	r31		;/
     f04:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     f06:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     f08:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     f0a:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     f0c:	91 05       	cpc	r25, r1
	brne	1b		;/
     f0e:	41 f7       	brne	.-48     	; 0xee0 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     f10:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     f12:	11 f4       	brne	.+4      	; 0xf18 <xitoa+0x62>
	push	r30		;
     f14:	ef 93       	push	r30
	inc	r31		;/
     f16:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     f18:	f2 17       	cp	r31, r18
	brcc	6f		;
     f1a:	18 f4       	brcc	.+6      	; 0xf22 <xitoa+0x6c>
	push	r19		;
     f1c:	3f 93       	push	r19
	inc	r31		;
     f1e:	f3 95       	inc	r31
	rjmp	5b		;/
     f20:	fb cf       	rjmp	.-10     	; 0xf18 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     f22:	8f 91       	pop	r24
	rcall	xputc		;
     f24:	b5 df       	rcall	.-150    	; 0xe90 <xputc>
	dec	r31		;
     f26:	fa 95       	dec	r31
	brne	6b		;/
     f28:	e1 f7       	brne	.-8      	; 0xf22 <xitoa+0x6c>

	ret
     f2a:	08 95       	ret

00000f2c <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     f2c:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     f2e:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     f30:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     f32:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     f34:	21 f0       	breq	.+8      	; 0xf3e <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     f36:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     f38:	19 f0       	breq	.+6      	; 0xf40 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     f3a:	aa df       	rcall	.-172    	; 0xe90 <xputc>
	rjmp	0b		;/
     f3c:	f9 cf       	rjmp	.-14     	; 0xf30 <xvprintf+0x4>
90:	ret
     f3e:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     f40:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     f42:	e8 94       	clt
	_LPMI	r21		;Get flags
     f44:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     f46:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     f48:	c1 f3       	breq	.-16     	; 0xf3a <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     f4a:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     f4c:	11 f4       	brne	.+4      	; 0xf52 <xvprintf+0x26>
	set			;/
     f4e:	68 94       	set
22:	_LPMI	r21		;Get width
     f50:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     f52:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     f54:	48 f4       	brcc	.+18     	; 0xf68 <xvprintf+0x3c>
	subi	r21, '0'	;
     f56:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     f58:	90 f3       	brcs	.-28     	; 0xf3e <xvprintf+0x12>
	lsl	r18		;
     f5a:	22 0f       	add	r18, r18
	mov	r0, r18		;
     f5c:	02 2e       	mov	r0, r18
	lsl	r18		;
     f5e:	22 0f       	add	r18, r18
	lsl	r18		;
     f60:	22 0f       	add	r18, r18
	add	r18, r0		;
     f62:	20 0d       	add	r18, r0
	add	r18, r21	;
     f64:	25 0f       	add	r18, r21
	rjmp	22b		;/
     f66:	f4 cf       	rjmp	.-24     	; 0xf50 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     f68:	0e f4       	brtc	.+2      	; 0xf6c <xvprintf+0x40>
	neg	r18		;
     f6a:	21 95       	neg	r18
25:	ld	r24, Y+		;
     f6c:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     f6e:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     f70:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     f72:	19 f3       	breq	.-58     	; 0xf3a <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     f74:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     f76:	29 f1       	breq	.+74     	; 0xfc2 <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     f78:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     f7a:	59 f1       	breq	.+86     	; 0xfd2 <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     f7c:	bc 01       	movw	r22, r24
	clr	r24		;
     f7e:	88 27       	eor	r24, r24
	clr	r25		;
     f80:	99 27       	eor	r25, r25
	clt			;/
     f82:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     f84:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     f86:	21 f4       	brne	.+8      	; 0xf90 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     f88:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     f8a:	99 91       	ld	r25, Y+
	set			;
     f8c:	68 94       	set
	_LPMI	r21		;/
     f8e:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     f90:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     f92:	39 f4       	brne	.+14     	; 0xfa2 <xvprintf+0x76>
	ldi	r20, -10	;
     f94:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     f96:	7e f0       	brts	.+30     	; 0xfb6 <xvprintf+0x8a>
	sbrs	r23, 7		;
     f98:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     f9a:	0d c0       	rjmp	.+26     	; 0xfb6 <xvprintf+0x8a>
	ldi	r24, -1		;
     f9c:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     f9e:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     fa0:	0a c0       	rjmp	.+20     	; 0xfb6 <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     fa2:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     fa4:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     fa6:	39 f0       	breq	.+14     	; 0xfb6 <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     fa8:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     faa:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     fac:	21 f0       	breq	.+8      	; 0xfb6 <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     fae:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     fb0:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     fb2:	09 f0       	breq	.+2      	; 0xfb6 <xvprintf+0x8a>
	ret			;abort
     fb4:	08 95       	ret
40:	push	ZH		;Output the value
     fb6:	ff 93       	push	r31
	push	ZL		;
     fb8:	ef 93       	push	r30
	rcall	xitoa		;
     fba:	7d df       	rcall	.-262    	; 0xeb6 <xitoa>
42:	pop	ZL		;
     fbc:	ef 91       	pop	r30
	pop	ZH		;
     fbe:	ff 91       	pop	r31
	rjmp	0b		;/
     fc0:	b7 cf       	rjmp	.-146    	; 0xf30 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     fc2:	ff 93       	push	r31
	push	ZL
     fc4:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     fc6:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     fc8:	81 91       	ld	r24, Z+
	cpi	r24, 0
     fca:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     fcc:	b9 f3       	breq	.-18     	; 0xfbc <xvprintf+0x90>
	rcall	xputc
     fce:	60 df       	rcall	.-320    	; 0xe90 <xputc>
	rjmp	51b
     fd0:	fb cf       	rjmp	.-10     	; 0xfc8 <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     fd2:	ff 93       	push	r31
	push	ZL
     fd4:	ef 93       	push	r30
	rcall	xputs
     fd6:	68 df       	rcall	.-304    	; 0xea8 <xputs>
	rjmp	42b
     fd8:	f1 cf       	rjmp	.-30     	; 0xfbc <xvprintf+0x90>

00000fda <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     fda:	df 93       	push	r29
	push	YL
     fdc:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     fde:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     fe0:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     fe2:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     fe4:	a3 df       	rcall	.-186    	; 0xf2c <xvprintf>
	pop	YL
     fe6:	cf 91       	pop	r28
	pop	YH
     fe8:	df 91       	pop	r29
	ret
     fea:	08 95       	ret

00000fec <action_get_macro>:
};

const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
{
  // MACRODOWN only works in this function
      switch(id) {
     fec:	61 11       	cpse	r22, r1
     fee:	0b c0       	rjmp	.+22     	; 0x1006 <action_get_macro+0x1a>
        case 0:
        if (record->event.pressed) {
     ff0:	fc 01       	movw	r30, r24
     ff2:	82 81       	ldd	r24, Z+2	; 0x02
     ff4:	88 23       	and	r24, r24
     ff6:	21 f0       	breq	.+8      	; 0x1000 <action_get_macro+0x14>
          register_code(KC_RSFT);
     ff8:	85 ee       	ldi	r24, 0xE5	; 229
     ffa:	0e 94 65 16 	call	0x2cca	; 0x2cca <register_code>
     ffe:	03 c0       	rjmp	.+6      	; 0x1006 <action_get_macro+0x1a>
        } else {
          unregister_code(KC_RSFT);
    1000:	85 ee       	ldi	r24, 0xE5	; 229
    1002:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <unregister_code>
        }
        break;
      }
    return MACRO_NONE;
};
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	08 95       	ret

0000100c <matrix_init_user>:

// Runs just one time when the keyboard initializes.
void * matrix_init_user(void) {

};
    100c:	08 95       	ret

0000100e <matrix_scan_user>:

// Runs constantly in the background, in a loop.
void * matrix_scan_user(void) {

    uint8_t layer = biton32(layer_state);
    100e:	60 91 bc 01 	lds	r22, 0x01BC
    1012:	70 91 bd 01 	lds	r23, 0x01BD
    1016:	80 91 be 01 	lds	r24, 0x01BE
    101a:	90 91 bf 01 	lds	r25, 0x01BF
    101e:	0e 94 10 21 	call	0x4220	; 0x4220 <biton32>
inline void ergodox_right_led_1_on(void)    { DDRB |=  (1<<5); PORTB |=  (1<<5); }
inline void ergodox_right_led_2_on(void)    { DDRB |=  (1<<6); PORTB |=  (1<<6); }
inline void ergodox_right_led_3_on(void)    { DDRB |=  (1<<7); PORTB |=  (1<<7); }
inline void ergodox_right_led_on(uint8_t led) { DDRB |= (1<<(led+4)); PORTB |= (1<<(led+4)); }

inline void ergodox_board_led_off(void)     { DDRD &= ~(1<<6); PORTD &= ~(1<<6); }
    1022:	56 98       	cbi	0x0a, 6	; 10
    1024:	5e 98       	cbi	0x0b, 6	; 11
inline void ergodox_right_led_1_off(void)   { DDRB &= ~(1<<5); PORTB &= ~(1<<5); }
    1026:	25 98       	cbi	0x04, 5	; 4
    1028:	2d 98       	cbi	0x05, 5	; 5
inline void ergodox_right_led_2_off(void)   { DDRB &= ~(1<<6); PORTB &= ~(1<<6); }
    102a:	26 98       	cbi	0x04, 6	; 4
    102c:	2e 98       	cbi	0x05, 6	; 5
inline void ergodox_right_led_3_off(void)   { DDRB &= ~(1<<7); PORTB &= ~(1<<7); }
    102e:	27 98       	cbi	0x04, 7	; 4
    1030:	2f 98       	cbi	0x05, 7	; 5

    ergodox_board_led_off();
    ergodox_right_led_1_off();
    ergodox_right_led_2_off();
    ergodox_right_led_3_off();
    switch (layer) {
    1032:	81 30       	cpi	r24, 0x01	; 1
    1034:	19 f0       	breq	.+6      	; 0x103c <matrix_scan_user+0x2e>
    1036:	82 30       	cpi	r24, 0x02	; 2
    1038:	21 f0       	breq	.+8      	; 0x1042 <matrix_scan_user+0x34>
    103a:	08 95       	ret
#define LED_BRIGHTNESS_LO       15
#define LED_BRIGHTNESS_HI       255


inline void ergodox_board_led_on(void)      { DDRD |=  (1<<6); PORTD |=  (1<<6); }
inline void ergodox_right_led_1_on(void)    { DDRB |=  (1<<5); PORTB |=  (1<<5); }
    103c:	25 9a       	sbi	0x04, 5	; 4
    103e:	2d 9a       	sbi	0x05, 5	; 5
    1040:	08 95       	ret
inline void ergodox_right_led_2_on(void)    { DDRB |=  (1<<6); PORTB |=  (1<<6); }
    1042:	26 9a       	sbi	0x04, 6	; 4
    1044:	2e 9a       	sbi	0x05, 6	; 5
        default:
            // none
            break;
    }

};
    1046:	08 95       	ret

00001048 <matrix_scan_kb>:
    return NULL;
};

void * matrix_scan_kb(void) {

    if (matrix_scan_user) {
    1048:	87 e0       	ldi	r24, 0x07	; 7
    104a:	98 e0       	ldi	r25, 0x08	; 8
    104c:	89 2b       	or	r24, r25
    104e:	11 f0       	breq	.+4      	; 0x1054 <matrix_scan_kb+0xc>
        (*matrix_scan_user)();
    1050:	0e 94 07 08 	call	0x100e	; 0x100e <matrix_scan_user>
    }

    return NULL;
};
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	08 95       	ret

0000105a <ergodox_blink_all_leds>:
inline void ergodox_right_led_1_on(void)    { DDRB |=  (1<<5); PORTB |=  (1<<5); }
inline void ergodox_right_led_2_on(void)    { DDRB |=  (1<<6); PORTB |=  (1<<6); }
inline void ergodox_right_led_3_on(void)    { DDRB |=  (1<<7); PORTB |=  (1<<7); }
inline void ergodox_right_led_on(uint8_t led) { DDRB |= (1<<(led+4)); PORTB |= (1<<(led+4)); }

inline void ergodox_board_led_off(void)     { DDRD &= ~(1<<6); PORTD &= ~(1<<6); }
    105a:	56 98       	cbi	0x0a, 6	; 10
    105c:	5e 98       	cbi	0x0b, 6	; 11
inline void ergodox_right_led_1_off(void)   { DDRB &= ~(1<<5); PORTB &= ~(1<<5); }
    105e:	25 98       	cbi	0x04, 5	; 4
    1060:	2d 98       	cbi	0x05, 5	; 5
inline void ergodox_right_led_2_off(void)   { DDRB &= ~(1<<6); PORTB &= ~(1<<6); }
    1062:	26 98       	cbi	0x04, 6	; 4
    1064:	2e 98       	cbi	0x05, 6	; 5
inline void ergodox_right_led_3_off(void)   { DDRB &= ~(1<<7); PORTB &= ~(1<<7); }
    1066:	27 98       	cbi	0x04, 7	; 4
    1068:	2f 98       	cbi	0x05, 7	; 5
    ergodox_right_led_1_off();
    ergodox_right_led_2_off();
    ergodox_right_led_3_off();
}

inline void ergodox_right_led_1_set(uint8_t n)    { OCR1A = n; }
    106a:	8f ef       	ldi	r24, 0xFF	; 255
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	90 93 89 00 	sts	0x0089, r25
    1072:	80 93 88 00 	sts	0x0088, r24
inline void ergodox_right_led_2_set(uint8_t n)    { OCR1B = n; }
    1076:	90 93 8b 00 	sts	0x008B, r25
    107a:	80 93 8a 00 	sts	0x008A, r24
inline void ergodox_right_led_3_set(uint8_t n)    { OCR1C = n; }
    107e:	90 93 8d 00 	sts	0x008D, r25
    1082:	80 93 8c 00 	sts	0x008C, r24
#define LED_BRIGHTNESS_LO       15
#define LED_BRIGHTNESS_HI       255


inline void ergodox_board_led_on(void)      { DDRD |=  (1<<6); PORTD |=  (1<<6); }
inline void ergodox_right_led_1_on(void)    { DDRB |=  (1<<5); PORTB |=  (1<<5); }
    1086:	25 9a       	sbi	0x04, 5	; 4
    1088:	2d 9a       	sbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    108a:	2f ef       	ldi	r18, 0xFF	; 255
    108c:	80 e7       	ldi	r24, 0x70	; 112
    108e:	92 e0       	ldi	r25, 0x02	; 2
    1090:	21 50       	subi	r18, 0x01	; 1
    1092:	80 40       	sbci	r24, 0x00	; 0
    1094:	90 40       	sbci	r25, 0x00	; 0
    1096:	e1 f7       	brne	.-8      	; 0x1090 <ergodox_blink_all_leds+0x36>
    1098:	00 c0       	rjmp	.+0      	; 0x109a <ergodox_blink_all_leds+0x40>
    109a:	00 00       	nop
inline void ergodox_right_led_2_on(void)    { DDRB |=  (1<<6); PORTB |=  (1<<6); }
    109c:	26 9a       	sbi	0x04, 6	; 4
    109e:	2e 9a       	sbi	0x05, 6	; 5
    10a0:	2f ef       	ldi	r18, 0xFF	; 255
    10a2:	80 e7       	ldi	r24, 0x70	; 112
    10a4:	92 e0       	ldi	r25, 0x02	; 2
    10a6:	21 50       	subi	r18, 0x01	; 1
    10a8:	80 40       	sbci	r24, 0x00	; 0
    10aa:	90 40       	sbci	r25, 0x00	; 0
    10ac:	e1 f7       	brne	.-8      	; 0x10a6 <ergodox_blink_all_leds+0x4c>
    10ae:	00 c0       	rjmp	.+0      	; 0x10b0 <ergodox_blink_all_leds+0x56>
    10b0:	00 00       	nop
inline void ergodox_right_led_3_on(void)    { DDRB |=  (1<<7); PORTB |=  (1<<7); }
    10b2:	27 9a       	sbi	0x04, 7	; 4
    10b4:	2f 9a       	sbi	0x05, 7	; 5
    10b6:	2f ef       	ldi	r18, 0xFF	; 255
    10b8:	80 e7       	ldi	r24, 0x70	; 112
    10ba:	92 e0       	ldi	r25, 0x02	; 2
    10bc:	21 50       	subi	r18, 0x01	; 1
    10be:	80 40       	sbci	r24, 0x00	; 0
    10c0:	90 40       	sbci	r25, 0x00	; 0
    10c2:	e1 f7       	brne	.-8      	; 0x10bc <ergodox_blink_all_leds+0x62>
    10c4:	00 c0       	rjmp	.+0      	; 0x10c6 <ergodox_blink_all_leds+0x6c>
    10c6:	00 00       	nop
inline void ergodox_right_led_on(uint8_t led) { DDRB |= (1<<(led+4)); PORTB |= (1<<(led+4)); }

inline void ergodox_board_led_off(void)     { DDRD &= ~(1<<6); PORTD &= ~(1<<6); }
inline void ergodox_right_led_1_off(void)   { DDRB &= ~(1<<5); PORTB &= ~(1<<5); }
    10c8:	25 98       	cbi	0x04, 5	; 4
    10ca:	2d 98       	cbi	0x05, 5	; 5
    10cc:	2f ef       	ldi	r18, 0xFF	; 255
    10ce:	80 e7       	ldi	r24, 0x70	; 112
    10d0:	92 e0       	ldi	r25, 0x02	; 2
    10d2:	21 50       	subi	r18, 0x01	; 1
    10d4:	80 40       	sbci	r24, 0x00	; 0
    10d6:	90 40       	sbci	r25, 0x00	; 0
    10d8:	e1 f7       	brne	.-8      	; 0x10d2 <ergodox_blink_all_leds+0x78>
    10da:	00 c0       	rjmp	.+0      	; 0x10dc <ergodox_blink_all_leds+0x82>
    10dc:	00 00       	nop
inline void ergodox_right_led_2_off(void)   { DDRB &= ~(1<<6); PORTB &= ~(1<<6); }
    10de:	26 98       	cbi	0x04, 6	; 4
    10e0:	2e 98       	cbi	0x05, 6	; 5
    10e2:	2f ef       	ldi	r18, 0xFF	; 255
    10e4:	80 e7       	ldi	r24, 0x70	; 112
    10e6:	92 e0       	ldi	r25, 0x02	; 2
    10e8:	21 50       	subi	r18, 0x01	; 1
    10ea:	80 40       	sbci	r24, 0x00	; 0
    10ec:	90 40       	sbci	r25, 0x00	; 0
    10ee:	e1 f7       	brne	.-8      	; 0x10e8 <ergodox_blink_all_leds+0x8e>
    10f0:	00 c0       	rjmp	.+0      	; 0x10f2 <ergodox_blink_all_leds+0x98>
    10f2:	00 00       	nop
inline void ergodox_right_led_3_off(void)   { DDRB &= ~(1<<7); PORTB &= ~(1<<7); }
    10f4:	27 98       	cbi	0x04, 7	; 4
    10f6:	2f 98       	cbi	0x05, 7	; 5
inline void ergodox_right_led_1_on(void)    { DDRB |=  (1<<5); PORTB |=  (1<<5); }
inline void ergodox_right_led_2_on(void)    { DDRB |=  (1<<6); PORTB |=  (1<<6); }
inline void ergodox_right_led_3_on(void)    { DDRB |=  (1<<7); PORTB |=  (1<<7); }
inline void ergodox_right_led_on(uint8_t led) { DDRB |= (1<<(led+4)); PORTB |= (1<<(led+4)); }

inline void ergodox_board_led_off(void)     { DDRD &= ~(1<<6); PORTD &= ~(1<<6); }
    10f8:	56 98       	cbi	0x0a, 6	; 10
    10fa:	5e 98       	cbi	0x0b, 6	; 11
inline void ergodox_right_led_1_off(void)   { DDRB &= ~(1<<5); PORTB &= ~(1<<5); }
    10fc:	25 98       	cbi	0x04, 5	; 4
    10fe:	2d 98       	cbi	0x05, 5	; 5
inline void ergodox_right_led_2_off(void)   { DDRB &= ~(1<<6); PORTB &= ~(1<<6); }
    1100:	26 98       	cbi	0x04, 6	; 4
    1102:	2e 98       	cbi	0x05, 6	; 5
inline void ergodox_right_led_3_off(void)   { DDRB &= ~(1<<7); PORTB &= ~(1<<7); }
    1104:	27 98       	cbi	0x04, 7	; 4
    1106:	2f 98       	cbi	0x05, 7	; 5
    1108:	08 95       	ret

0000110a <matrix_init_kb>:
    return NULL;
};

void * matrix_init_kb(void) {
   // keyboard LEDs (see "PWM on ports OC1(A|B|C)" in "teensy-2-0.md")
    TCCR1A = 0b10101001;  // set and configure fast PWM
    110a:	89 ea       	ldi	r24, 0xA9	; 169
    110c:	80 93 80 00 	sts	0x0080, r24
    TCCR1B = 0b00001001;  // set and configure fast PWM
    1110:	89 e0       	ldi	r24, 0x09	; 9
    1112:	80 93 81 00 	sts	0x0081, r24

    // (tied to Vcc for hardware convenience)
    DDRB  &= ~(1<<4);  // set B(4) as input
    1116:	24 98       	cbi	0x04, 4	; 4
    PORTB &= ~(1<<4);  // set B(4) internal pull-up disabled
    1118:	2c 98       	cbi	0x05, 4	; 5

    // unused pins - C7, D4, D5, D7, E6
    // set as input with internal pull-ip enabled
    DDRC  &= ~(1<<7);
    111a:	3f 98       	cbi	0x07, 7	; 7
    DDRD  &= ~(1<<7 | 1<<5 | 1<<4);
    111c:	8a b1       	in	r24, 0x0a	; 10
    111e:	8f 74       	andi	r24, 0x4F	; 79
    1120:	8a b9       	out	0x0a, r24	; 10
    DDRE  &= ~(1<<6);
    1122:	6e 98       	cbi	0x0d, 6	; 13
    PORTC |=  (1<<7);
    1124:	47 9a       	sbi	0x08, 7	; 8
    PORTD |=  (1<<7 | 1<<5 | 1<<4);
    1126:	8b b1       	in	r24, 0x0b	; 11
    1128:	80 6b       	ori	r24, 0xB0	; 176
    112a:	8b b9       	out	0x0b, r24	; 11
    PORTE |=  (1<<6);
    112c:	76 9a       	sbi	0x0e, 6	; 14

    ergodox_blink_all_leds();
    112e:	0e 94 2d 08 	call	0x105a	; 0x105a <ergodox_blink_all_leds>

    if (matrix_init_user) {
    1132:	86 e0       	ldi	r24, 0x06	; 6
    1134:	98 e0       	ldi	r25, 0x08	; 8
    1136:	89 2b       	or	r24, r25
    1138:	11 f0       	breq	.+4      	; 0x113e <matrix_init_kb+0x34>
        (*matrix_init_user)();
    113a:	0e 94 06 08 	call	0x100c	; 0x100c <matrix_init_user>
    }

    return NULL;
};
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	08 95       	ret

00001144 <init_mcp23018>:
    //_delay_ms(333);
    ergodox_led_all_off();
}

uint8_t init_mcp23018(void) {
    mcp23018_status = 0x20;
    1144:	80 e2       	ldi	r24, 0x20	; 32
    1146:	80 93 00 01 	sts	0x0100, r24

    // I2C subsystem
    if (i2c_initialized == 0) {
    114a:	80 91 3c 01 	lds	r24, 0x013C
    114e:	81 11       	cpse	r24, r1
    1150:	0e c0       	rjmp	.+28     	; 0x116e <init_mcp23018+0x2a>
        i2c_init();  // on pins D(1,0)
    1152:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <i2c_init>
        i2c_initialized++;
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	80 93 3c 01 	sts	0x013C, r24
    115c:	2f ef       	ldi	r18, 0xFF	; 255
    115e:	83 ed       	ldi	r24, 0xD3	; 211
    1160:	90 e3       	ldi	r25, 0x30	; 48
    1162:	21 50       	subi	r18, 0x01	; 1
    1164:	80 40       	sbci	r24, 0x00	; 0
    1166:	90 40       	sbci	r25, 0x00	; 0
    1168:	e1 f7       	brne	.-8      	; 0x1162 <init_mcp23018+0x1e>
    116a:	00 c0       	rjmp	.+0      	; 0x116c <init_mcp23018+0x28>
    116c:	00 00       	nop

    // set pin direction
    // - unused  : input  : 1
    // - input   : input  : 1
    // - driving : output : 0
    mcp23018_status = i2c_start(I2C_ADDR_WRITE);    if (mcp23018_status) goto out;
    116e:	80 e4       	ldi	r24, 0x40	; 64
    1170:	0e 94 f7 08 	call	0x11ee	; 0x11ee <i2c_start>
    1174:	80 93 00 01 	sts	0x0100, r24
    1178:	81 11       	cpse	r24, r1
    117a:	2e c0       	rjmp	.+92     	; 0x11d8 <init_mcp23018+0x94>
    mcp23018_status = i2c_write(IODIRA);            if (mcp23018_status) goto out;
    117c:	0e 94 21 09 	call	0x1242	; 0x1242 <i2c_write>
    1180:	80 93 00 01 	sts	0x0100, r24
    1184:	81 11       	cpse	r24, r1
    1186:	28 c0       	rjmp	.+80     	; 0x11d8 <init_mcp23018+0x94>
    mcp23018_status = i2c_write(0b00000000);        if (mcp23018_status) goto out;
    1188:	0e 94 21 09 	call	0x1242	; 0x1242 <i2c_write>
    118c:	80 93 00 01 	sts	0x0100, r24
    1190:	81 11       	cpse	r24, r1
    1192:	22 c0       	rjmp	.+68     	; 0x11d8 <init_mcp23018+0x94>
    mcp23018_status = i2c_write(0b00111111);        if (mcp23018_status) goto out;
    1194:	8f e3       	ldi	r24, 0x3F	; 63
    1196:	0e 94 21 09 	call	0x1242	; 0x1242 <i2c_write>
    119a:	80 93 00 01 	sts	0x0100, r24
    119e:	81 11       	cpse	r24, r1
    11a0:	1b c0       	rjmp	.+54     	; 0x11d8 <init_mcp23018+0x94>
    i2c_stop();
    11a2:	0e 94 19 09 	call	0x1232	; 0x1232 <i2c_stop>

    // set pull-up
    // - unused  : on  : 1
    // - input   : on  : 1
    // - driving : off : 0
    mcp23018_status = i2c_start(I2C_ADDR_WRITE);    if (mcp23018_status) goto out;
    11a6:	80 e4       	ldi	r24, 0x40	; 64
    11a8:	0e 94 f7 08 	call	0x11ee	; 0x11ee <i2c_start>
    11ac:	80 93 00 01 	sts	0x0100, r24
    11b0:	81 11       	cpse	r24, r1
    11b2:	12 c0       	rjmp	.+36     	; 0x11d8 <init_mcp23018+0x94>
    mcp23018_status = i2c_write(GPPUA);             if (mcp23018_status) goto out;
    11b4:	8c e0       	ldi	r24, 0x0C	; 12
    11b6:	0e 94 21 09 	call	0x1242	; 0x1242 <i2c_write>
    11ba:	80 93 00 01 	sts	0x0100, r24
    11be:	81 11       	cpse	r24, r1
    11c0:	0b c0       	rjmp	.+22     	; 0x11d8 <init_mcp23018+0x94>
    mcp23018_status = i2c_write(0b00000000);        if (mcp23018_status) goto out;
    11c2:	0e 94 21 09 	call	0x1242	; 0x1242 <i2c_write>
    11c6:	80 93 00 01 	sts	0x0100, r24
    11ca:	81 11       	cpse	r24, r1
    11cc:	05 c0       	rjmp	.+10     	; 0x11d8 <init_mcp23018+0x94>
    mcp23018_status = i2c_write(0b00111111);        if (mcp23018_status) goto out;
    11ce:	8f e3       	ldi	r24, 0x3F	; 63
    11d0:	0e 94 21 09 	call	0x1242	; 0x1242 <i2c_write>
    11d4:	80 93 00 01 	sts	0x0100, r24

out:
    i2c_stop();
    11d8:	0e 94 19 09 	call	0x1232	; 0x1232 <i2c_stop>

    return mcp23018_status;
}
    11dc:	80 91 00 01 	lds	r24, 0x0100
    11e0:	08 95       	ret

000011e2 <i2c_init>:
   * I2C bus speed - about 444 kHz
   *
   * for more details, see 20.5.2 in ATmega16/32 secification
   */
  
  TWSR = 0;     /* no prescaler */
    11e2:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = 10;    /* must be >= 10 for stable operation */
    11e6:	8a e0       	ldi	r24, 0x0A	; 10
    11e8:	80 93 b8 00 	sts	0x00B8, r24
    11ec:	08 95       	ret

000011ee <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    11ee:	94 ea       	ldi	r25, 0xA4	; 164
    11f0:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    11f4:	90 91 bc 00 	lds	r25, 0x00BC
    11f8:	97 ff       	sbrs	r25, 7
    11fa:	fc cf       	rjmp	.-8      	; 0x11f4 <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    11fc:	90 91 b9 00 	lds	r25, 0x00B9
    1200:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    1202:	98 30       	cpi	r25, 0x08	; 8
    1204:	21 f0       	breq	.+8      	; 0x120e <i2c_start+0x20>
    1206:	90 31       	cpi	r25, 0x10	; 16
    1208:	11 f0       	breq	.+4      	; 0x120e <i2c_start+0x20>
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	08 95       	ret

	// send device address
	TWDR = address;
    120e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1212:	84 e8       	ldi	r24, 0x84	; 132
    1214:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    1218:	80 91 bc 00 	lds	r24, 0x00BC
    121c:	87 ff       	sbrs	r24, 7
    121e:	fc cf       	rjmp	.-8      	; 0x1218 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1220:	80 91 b9 00 	lds	r24, 0x00B9
    1224:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    1226:	88 31       	cpi	r24, 0x18	; 24
    1228:	11 f0       	breq	.+4      	; 0x122e <i2c_start+0x40>
    122a:	80 34       	cpi	r24, 0x40	; 64
    122c:	71 f7       	brne	.-36     	; 0x120a <i2c_start+0x1c>

	return 0;
    122e:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    1230:	08 95       	ret

00001232 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1232:	84 e9       	ldi	r24, 0x94	; 148
    1234:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    1238:	80 91 bc 00 	lds	r24, 0x00BC
    123c:	84 fd       	sbrc	r24, 4
    123e:	fc cf       	rjmp	.-8      	; 0x1238 <i2c_stop+0x6>

}/* i2c_stop */
    1240:	08 95       	ret

00001242 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    1242:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1246:	84 e8       	ldi	r24, 0x84	; 132
    1248:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    124c:	80 91 bc 00 	lds	r24, 0x00BC
    1250:	87 ff       	sbrs	r24, 7
    1252:	fc cf       	rjmp	.-8      	; 0x124c <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1254:	90 91 b9 00 	lds	r25, 0x00B9
    1258:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	98 32       	cpi	r25, 0x28	; 40
    125e:	09 f4       	brne	.+2      	; 0x1262 <i2c_write+0x20>
    1260:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    1262:	08 95       	ret

00001264 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    1264:	84 e8       	ldi	r24, 0x84	; 132
    1266:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    126a:	80 91 bc 00 	lds	r24, 0x00BC
    126e:	87 ff       	sbrs	r24, 7
    1270:	fc cf       	rjmp	.-8      	; 0x126a <i2c_readNak+0x6>
	
    return TWDR;
    1272:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    1276:	08 95       	ret

00001278 <unselect_rows>:
 * pin: A0  A1  A2  A3  A4  A5  A6
 */
static void unselect_rows(void)
{
    // unselect on mcp23018
    if (mcp23018_status) { // if there was an error
    1278:	80 91 00 01 	lds	r24, 0x0100
    127c:	81 11       	cpse	r24, r1
    127e:	15 c0       	rjmp	.+42     	; 0x12aa <unselect_rows+0x32>
        // do nothing
    } else {
        // set all rows hi-Z : 1
        mcp23018_status = i2c_start(I2C_ADDR_WRITE);    if (mcp23018_status) goto out;
    1280:	80 e4       	ldi	r24, 0x40	; 64
    1282:	0e 94 f7 08 	call	0x11ee	; 0x11ee <i2c_start>
    1286:	80 93 00 01 	sts	0x0100, r24
    128a:	81 11       	cpse	r24, r1
    128c:	0c c0       	rjmp	.+24     	; 0x12a6 <unselect_rows+0x2e>
        mcp23018_status = i2c_write(GPIOA);             if (mcp23018_status) goto out;
    128e:	82 e1       	ldi	r24, 0x12	; 18
    1290:	0e 94 21 09 	call	0x1242	; 0x1242 <i2c_write>
    1294:	80 93 00 01 	sts	0x0100, r24
    1298:	81 11       	cpse	r24, r1
    129a:	05 c0       	rjmp	.+10     	; 0x12a6 <unselect_rows+0x2e>
        mcp23018_status = i2c_write( 0xFF
    129c:	8f ef       	ldi	r24, 0xFF	; 255
    129e:	0e 94 21 09 	call	0x1242	; 0x1242 <i2c_write>
    12a2:	80 93 00 01 	sts	0x0100, r24
                              & ~(0<<7)
                          );                            if (mcp23018_status) goto out;
    out:
        i2c_stop();
    12a6:	0e 94 19 09 	call	0x1232	; 0x1232 <i2c_stop>
    }

    // unselect on teensy
    // Hi-Z(DDR:0, PORT:0) to unselect
    DDRB  &= ~(1<<0 | 1<<1 | 1<<2 | 1<<3);
    12aa:	84 b1       	in	r24, 0x04	; 4
    12ac:	80 7f       	andi	r24, 0xF0	; 240
    12ae:	84 b9       	out	0x04, r24	; 4
    PORTB &= ~(1<<0 | 1<<1 | 1<<2 | 1<<3);
    12b0:	85 b1       	in	r24, 0x05	; 5
    12b2:	80 7f       	andi	r24, 0xF0	; 240
    12b4:	85 b9       	out	0x05, r24	; 5
    DDRD  &= ~(1<<2 | 1<<3);
    12b6:	8a b1       	in	r24, 0x0a	; 10
    12b8:	83 7f       	andi	r24, 0xF3	; 243
    12ba:	8a b9       	out	0x0a, r24	; 10
    PORTD &= ~(1<<2 | 1<<3);
    12bc:	8b b1       	in	r24, 0x0b	; 11
    12be:	83 7f       	andi	r24, 0xF3	; 243
    12c0:	8b b9       	out	0x0b, r24	; 11
    DDRC  &= ~(1<<6);
    12c2:	3e 98       	cbi	0x07, 6	; 7
    PORTC &= ~(1<<6);
    12c4:	46 98       	cbi	0x08, 6	; 8
    12c6:	08 95       	ret

000012c8 <matrix_init>:

void matrix_init(void)
{
    // initialize row and col

    mcp23018_status = init_mcp23018();
    12c8:	0e 94 a2 08 	call	0x1144	; 0x1144 <init_mcp23018>
    12cc:	80 93 00 01 	sts	0x0100, r24


    unselect_rows();
    12d0:	0e 94 3c 09 	call	0x1278	; 0x1278 <unselect_rows>
    // init on mcp23018
    // not needed, already done as part of init_mcp23018()

    // init on teensy
    // Input with pull-up(DDR:0, PORT:1)
    DDRF  &= ~(1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<1 | 1<<0);
    12d4:	80 b3       	in	r24, 0x10	; 16
    12d6:	8c 70       	andi	r24, 0x0C	; 12
    12d8:	80 bb       	out	0x10, r24	; 16
    PORTF |=  (1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<1 | 1<<0);
    12da:	81 b3       	in	r24, 0x11	; 17
    12dc:	83 6f       	ori	r24, 0xF3	; 243
    12de:	81 bb       	out	0x11, r24	; 17
    12e0:	ec e4       	ldi	r30, 0x4C	; 76
    12e2:	f1 e0       	ldi	r31, 0x01	; 1
    12e4:	ae e3       	ldi	r26, 0x3E	; 62
    12e6:	b1 e0       	ldi	r27, 0x01	; 1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
    12e8:	11 92       	st	Z+, r1
        matrix_debouncing[i] = 0;
    12ea:	1d 92       	st	X+, r1

    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	ea 35       	cpi	r30, 0x5A	; 90
    12f0:	f8 07       	cpc	r31, r24
    12f2:	d1 f7       	brne	.-12     	; 0x12e8 <matrix_init+0x20>
#ifdef DEBUG_MATRIX_SCAN_RATE
    matrix_timer = timer_read32();
    matrix_scan_count = 0;
#endif

    if (matrix_init_kb) {
    12f4:	85 e8       	ldi	r24, 0x85	; 133
    12f6:	98 e0       	ldi	r25, 0x08	; 8
    12f8:	89 2b       	or	r24, r25
    12fa:	11 f0       	breq	.+4      	; 0x1300 <matrix_init+0x38>
        (*matrix_init_kb)();
    12fc:	0c 94 85 08 	jmp	0x110a	; 0x110a <matrix_init_kb>
    1300:	08 95       	ret

00001302 <matrix_scan>:
    }

}

uint8_t matrix_scan(void)
{
    1302:	9f 92       	push	r9
    1304:	af 92       	push	r10
    1306:	bf 92       	push	r11
    1308:	cf 92       	push	r12
    130a:	df 92       	push	r13
    130c:	ef 92       	push	r14
    130e:	ff 92       	push	r15
    1310:	0f 93       	push	r16
    1312:	1f 93       	push	r17
    1314:	cf 93       	push	r28
    1316:	df 93       	push	r29
    if (mcp23018_status) { // if there was an error
    1318:	80 91 00 01 	lds	r24, 0x0100
    131c:	88 23       	and	r24, r24
    131e:	e1 f0       	breq	.+56     	; 0x1358 <matrix_scan+0x56>
        if (++mcp23018_reset_loop == 0) {
    1320:	80 91 3d 01 	lds	r24, 0x013D
    1324:	8f 5f       	subi	r24, 0xFF	; 255
    1326:	80 93 3d 01 	sts	0x013D, r24
    132a:	81 11       	cpse	r24, r1
    132c:	15 c0       	rjmp	.+42     	; 0x1358 <matrix_scan+0x56>
            // since mcp23018_reset_loop is 8 bit - we'll try to reset once in 255 matrix scans
            // this will be approx bit more frequent than once per second
            print("trying to reset mcp23018\n");
    132e:	82 e4       	ldi	r24, 0x42	; 66
    1330:	93 e0       	ldi	r25, 0x03	; 3
    1332:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
            mcp23018_status = init_mcp23018();
    1336:	0e 94 a2 08 	call	0x1144	; 0x1144 <init_mcp23018>
    133a:	80 93 00 01 	sts	0x0100, r24
            if (mcp23018_status) {
    133e:	88 23       	and	r24, r24
    1340:	29 f0       	breq	.+10     	; 0x134c <matrix_scan+0x4a>
                print("left side not responding\n");
    1342:	88 e2       	ldi	r24, 0x28	; 40
    1344:	93 e0       	ldi	r25, 0x03	; 3
    1346:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    134a:	06 c0       	rjmp	.+12     	; 0x1358 <matrix_scan+0x56>
            } else {
                print("left side attached\n");
    134c:	84 e1       	ldi	r24, 0x14	; 20
    134e:	93 e0       	ldi	r25, 0x03	; 3
    1350:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
                ergodox_blink_all_leds();
    1354:	0e 94 2d 08 	call	0x105a	; 0x105a <ergodox_blink_all_leds>
    }

}

uint8_t matrix_scan(void)
{
    1358:	0e e3       	ldi	r16, 0x3E	; 62
    135a:	11 e0       	ldi	r17, 0x01	; 1
    135c:	c0 e0       	ldi	r28, 0x00	; 0
    135e:	d0 e0       	ldi	r29, 0x00	; 0
    1360:	bb 24       	eor	r11, r11
    1362:	b3 94       	inc	r11
            return data;
        }
    } else {
        _delay_us(30);  // without this wait read unstable value.
        // read from teensy
        return
    1364:	82 e0       	ldi	r24, 0x02	; 2
    1366:	a8 2e       	mov	r10, r24
        } else {
            // set active row low  : 0
            // set other rows hi-Z : 1
            mcp23018_status = i2c_start(I2C_ADDR_WRITE);        if (mcp23018_status) goto out;
            mcp23018_status = i2c_write(GPIOA);                 if (mcp23018_status) goto out;
            mcp23018_status = i2c_write( 0xFF & ~(1<<row)
    1368:	cc 24       	eor	r12, r12
    136a:	c3 94       	inc	r12
    136c:	d1 2c       	mov	r13, r1
        select_row(i);
        matrix_row_t cols = read_cols(i);
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
    136e:	25 e0       	ldi	r18, 0x05	; 5
    1370:	e2 2e       	mov	r14, r18
    1372:	23 e0       	ldi	r18, 0x03	; 3
    1374:	f2 2e       	mov	r15, r18
    PORTC &= ~(1<<6);
}

static void select_row(uint8_t row)
{
    if (row < 7) {
    1376:	c7 30       	cpi	r28, 0x07	; 7
    1378:	00 f5       	brcc	.+64     	; 0x13ba <matrix_scan+0xb8>
        // select on mcp23018
        if (mcp23018_status) { // if there was an error
    137a:	80 91 00 01 	lds	r24, 0x0100
    137e:	81 11       	cpse	r24, r1
    1380:	62 c0       	rjmp	.+196    	; 0x1446 <matrix_scan+0x144>
            // do nothing
        } else {
            // set active row low  : 0
            // set other rows hi-Z : 1
            mcp23018_status = i2c_start(I2C_ADDR_WRITE);        if (mcp23018_status) goto out;
    1382:	80 e4       	ldi	r24, 0x40	; 64
    1384:	0e 94 f7 08 	call	0x11ee	; 0x11ee <i2c_start>
    1388:	80 93 00 01 	sts	0x0100, r24
    138c:	81 11       	cpse	r24, r1
    138e:	12 c0       	rjmp	.+36     	; 0x13b4 <matrix_scan+0xb2>
            mcp23018_status = i2c_write(GPIOA);                 if (mcp23018_status) goto out;
    1390:	82 e1       	ldi	r24, 0x12	; 18
    1392:	0e 94 21 09 	call	0x1242	; 0x1242 <i2c_write>
    1396:	80 93 00 01 	sts	0x0100, r24
    139a:	81 11       	cpse	r24, r1
    139c:	0b c0       	rjmp	.+22     	; 0x13b4 <matrix_scan+0xb2>
            mcp23018_status = i2c_write( 0xFF & ~(1<<row)
    139e:	c6 01       	movw	r24, r12
    13a0:	0c 2e       	mov	r0, r28
    13a2:	01 c0       	rjmp	.+2      	; 0x13a6 <matrix_scan+0xa4>
    13a4:	88 0f       	add	r24, r24
    13a6:	0a 94       	dec	r0
    13a8:	ea f7       	brpl	.-6      	; 0x13a4 <matrix_scan+0xa2>
    13aa:	80 95       	com	r24
    13ac:	0e 94 21 09 	call	0x1242	; 0x1242 <i2c_write>
    13b0:	80 93 00 01 	sts	0x0100, r24
                                  & ~(0<<7)
                              );                                if (mcp23018_status) goto out;
        out:
            i2c_stop();
    13b4:	0e 94 19 09 	call	0x1232	; 0x1232 <i2c_stop>
    13b8:	46 c0       	rjmp	.+140    	; 0x1446 <matrix_scan+0x144>
        }
    } else {
        // select on teensy
        // Output low(DDR:1, PORT:0) to select
        switch (row) {
    13ba:	ca 30       	cpi	r28, 0x0A	; 10
    13bc:	a1 f0       	breq	.+40     	; 0x13e6 <matrix_scan+0xe4>
    13be:	28 f4       	brcc	.+10     	; 0x13ca <matrix_scan+0xc8>
    13c0:	c8 30       	cpi	r28, 0x08	; 8
    13c2:	59 f0       	breq	.+22     	; 0x13da <matrix_scan+0xd8>
    13c4:	c9 30       	cpi	r28, 0x09	; 9
    13c6:	61 f0       	breq	.+24     	; 0x13e0 <matrix_scan+0xde>
    13c8:	05 c0       	rjmp	.+10     	; 0x13d4 <matrix_scan+0xd2>
    13ca:	cc 30       	cpi	r28, 0x0C	; 12
    13cc:	89 f0       	breq	.+34     	; 0x13f0 <matrix_scan+0xee>
    13ce:	70 f0       	brcs	.+28     	; 0x13ec <matrix_scan+0xea>
    13d0:	cd 30       	cpi	r28, 0x0D	; 13
    13d2:	89 f0       	breq	.+34     	; 0x13f6 <matrix_scan+0xf4>
            case 7:
                DDRB  |= (1<<0);
    13d4:	20 9a       	sbi	0x04, 0	; 4
                PORTB &= ~(1<<0);
    13d6:	28 98       	cbi	0x05, 0	; 5
    13d8:	10 c0       	rjmp	.+32     	; 0x13fa <matrix_scan+0xf8>
                break;
            case 8:
                DDRB  |= (1<<1);
    13da:	21 9a       	sbi	0x04, 1	; 4
                PORTB &= ~(1<<1);
    13dc:	29 98       	cbi	0x05, 1	; 5
    13de:	0d c0       	rjmp	.+26     	; 0x13fa <matrix_scan+0xf8>
                break;
            case 9:
                DDRB  |= (1<<2);
    13e0:	22 9a       	sbi	0x04, 2	; 4
                PORTB &= ~(1<<2);
    13e2:	2a 98       	cbi	0x05, 2	; 5
    13e4:	0a c0       	rjmp	.+20     	; 0x13fa <matrix_scan+0xf8>
                break;
            case 10:
                DDRB  |= (1<<3);
    13e6:	23 9a       	sbi	0x04, 3	; 4
                PORTB &= ~(1<<3);
    13e8:	2b 98       	cbi	0x05, 3	; 5
    13ea:	07 c0       	rjmp	.+14     	; 0x13fa <matrix_scan+0xf8>
                break;
            case 11:
                DDRD  |= (1<<2);
    13ec:	52 9a       	sbi	0x0a, 2	; 10
    13ee:	01 c0       	rjmp	.+2      	; 0x13f2 <matrix_scan+0xf0>
                PORTD &= ~(1<<3);
                break;
            case 12:
                DDRD  |= (1<<3);
    13f0:	53 9a       	sbi	0x0a, 3	; 10
                PORTD &= ~(1<<3);
    13f2:	5b 98       	cbi	0x0b, 3	; 11
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <matrix_scan+0xf8>
                break;
            case 13:
                DDRC  |= (1<<6);
    13f6:	3e 9a       	sbi	0x07, 6	; 7
                PORTC &= ~(1<<6);
    13f8:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13fa:	e0 ea       	ldi	r30, 0xA0	; 160
    13fc:	ea 95       	dec	r30
    13fe:	f1 f7       	brne	.-4      	; 0x13fc <matrix_scan+0xfa>
        }
    } else {
        _delay_us(30);  // without this wait read unstable value.
        // read from teensy
        return
            (PINF&(1<<0) ? 0 : (1<<0)) |
    1400:	8f b1       	in	r24, 0x0f	; 15
            return data;
        }
    } else {
        _delay_us(30);  // without this wait read unstable value.
        // read from teensy
        return
    1402:	79 99       	sbic	0x0f, 1	; 15
    1404:	85 c0       	rjmp	.+266    	; 0x1510 <matrix_scan+0x20e>
    1406:	92 e0       	ldi	r25, 0x02	; 2
            (PINF&(1<<0) ? 0 : (1<<0)) |
    1408:	81 70       	andi	r24, 0x01	; 1
    140a:	8b 25       	eor	r24, r11
            return data;
        }
    } else {
        _delay_us(30);  // without this wait read unstable value.
        // read from teensy
        return
    140c:	89 2b       	or	r24, r25
    140e:	7c 9b       	sbis	0x0f, 4	; 15
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <matrix_scan+0x114>
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	01 c0       	rjmp	.+2      	; 0x1418 <matrix_scan+0x116>
    1416:	94 e0       	ldi	r25, 0x04	; 4
    1418:	89 2b       	or	r24, r25
    141a:	7d 9b       	sbis	0x0f, 5	; 15
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <matrix_scan+0x120>
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	01 c0       	rjmp	.+2      	; 0x1424 <matrix_scan+0x122>
    1422:	98 e0       	ldi	r25, 0x08	; 8
    1424:	89 2b       	or	r24, r25
    1426:	7e 9b       	sbis	0x0f, 6	; 15
    1428:	02 c0       	rjmp	.+4      	; 0x142e <matrix_scan+0x12c>
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	01 c0       	rjmp	.+2      	; 0x1430 <matrix_scan+0x12e>
    142e:	90 e1       	ldi	r25, 0x10	; 16
    1430:	89 2b       	or	r24, r25
            (PINF&(1<<0) ? 0 : (1<<0)) |
            (PINF&(1<<1) ? 0 : (1<<1)) |
            (PINF&(1<<4) ? 0 : (1<<2)) |
            (PINF&(1<<5) ? 0 : (1<<3)) |
            (PINF&(1<<6) ? 0 : (1<<4)) |
            (PINF&(1<<7) ? 0 : (1<<5)) ;
    1432:	9f b1       	in	r25, 0x0f	; 15
            return data;
        }
    } else {
        _delay_us(30);  // without this wait read unstable value.
        // read from teensy
        return
    1434:	90 95       	com	r25
    1436:	99 1f       	adc	r25, r25
    1438:	99 27       	eor	r25, r25
    143a:	99 1f       	adc	r25, r25
    143c:	92 95       	swap	r25
    143e:	99 0f       	add	r25, r25
    1440:	90 7e       	andi	r25, 0xE0	; 224
    1442:	89 2b       	or	r24, r25
    1444:	10 c0       	rjmp	.+32     	; 0x1466 <matrix_scan+0x164>
}

static matrix_row_t read_cols(uint8_t row)
{
    if (row < 7) {
        if (mcp23018_status) { // if there was an error
    1446:	80 91 00 01 	lds	r24, 0x0100
    144a:	81 11       	cpse	r24, r1
    144c:	76 c0       	rjmp	.+236    	; 0x153a <matrix_scan+0x238>
            return 0;
        } else {
            uint8_t data = 0;
            mcp23018_status = i2c_start(I2C_ADDR_WRITE);    if (mcp23018_status) goto out;
    144e:	80 e4       	ldi	r24, 0x40	; 64
    1450:	0e 94 f7 08 	call	0x11ee	; 0x11ee <i2c_start>
    1454:	80 93 00 01 	sts	0x0100, r24
    1458:	88 23       	and	r24, r24
    145a:	09 f4       	brne	.+2      	; 0x145e <matrix_scan+0x15c>
    145c:	5b c0       	rjmp	.+182    	; 0x1514 <matrix_scan+0x212>
{
    if (row < 7) {
        if (mcp23018_status) { // if there was an error
            return 0;
        } else {
            uint8_t data = 0;
    145e:	91 2c       	mov	r9, r1
            mcp23018_status = i2c_write(GPIOB);             if (mcp23018_status) goto out;
            mcp23018_status = i2c_start(I2C_ADDR_READ);     if (mcp23018_status) goto out;
            data = i2c_readNak();
            data = ~data;
        out:
            i2c_stop();
    1460:	0e 94 19 09 	call	0x1232	; 0x1232 <i2c_stop>
            return data;
    1464:	89 2d       	mov	r24, r9
#endif

    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        matrix_row_t cols = read_cols(i);
        if (matrix_debouncing[i] != cols) {
    1466:	f8 01       	movw	r30, r16
    1468:	90 81       	ld	r25, Z
    146a:	98 17       	cp	r25, r24
    146c:	39 f1       	breq	.+78     	; 0x14bc <matrix_scan+0x1ba>
            matrix_debouncing[i] = cols;
    146e:	80 83       	st	Z, r24
            if (debouncing) {
    1470:	80 91 01 01 	lds	r24, 0x0101
    1474:	88 23       	and	r24, r24
    1476:	01 f1       	breq	.+64     	; 0x14b8 <matrix_scan+0x1b6>
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
    1478:	80 91 d7 01 	lds	r24, 0x01D7
    147c:	80 ff       	sbrs	r24, 0
    147e:	04 c0       	rjmp	.+8      	; 0x1488 <matrix_scan+0x186>
    1480:	8a e0       	ldi	r24, 0x0A	; 10
    1482:	93 e0       	ldi	r25, 0x03	; 3
    1484:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    1488:	80 91 d7 01 	lds	r24, 0x01D7
    148c:	80 ff       	sbrs	r24, 0
    148e:	0c c0       	rjmp	.+24     	; 0x14a8 <matrix_scan+0x1a6>
    1490:	80 91 01 01 	lds	r24, 0x0101
    1494:	1f 92       	push	r1
    1496:	8f 93       	push	r24
    1498:	ff 92       	push	r15
    149a:	ef 92       	push	r14
    149c:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	80 91 d7 01 	lds	r24, 0x01D7
    14ac:	80 ff       	sbrs	r24, 0
    14ae:	04 c0       	rjmp	.+8      	; 0x14b8 <matrix_scan+0x1b6>
    14b0:	83 e0       	ldi	r24, 0x03	; 3
    14b2:	93 e0       	ldi	r25, 0x03	; 3
    14b4:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
            }
            debouncing = DEBOUNCE;
    14b8:	a0 92 01 01 	sts	0x0101, r10
        }
        unselect_rows();
    14bc:	0e 94 3c 09 	call	0x1278	; 0x1278 <unselect_rows>
    14c0:	21 96       	adiw	r28, 0x01	; 1
    14c2:	0f 5f       	subi	r16, 0xFF	; 255
    14c4:	1f 4f       	sbci	r17, 0xFF	; 255
        matrix_timer = timer_now;
        matrix_scan_count = 0;
    }
#endif

    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    14c6:	ce 30       	cpi	r28, 0x0E	; 14
    14c8:	d1 05       	cpc	r29, r1
    14ca:	09 f0       	breq	.+2      	; 0x14ce <matrix_scan+0x1cc>
    14cc:	54 cf       	rjmp	.-344    	; 0x1376 <matrix_scan+0x74>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
    14ce:	80 91 01 01 	lds	r24, 0x0101
    14d2:	88 23       	and	r24, r24
    14d4:	b1 f0       	breq	.+44     	; 0x1502 <matrix_scan+0x200>
        if (--debouncing) {
    14d6:	81 50       	subi	r24, 0x01	; 1
    14d8:	80 93 01 01 	sts	0x0101, r24
    14dc:	88 23       	and	r24, r24
    14de:	39 f0       	breq	.+14     	; 0x14ee <matrix_scan+0x1ec>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14e0:	8f e9       	ldi	r24, 0x9F	; 159
    14e2:	9f e0       	ldi	r25, 0x0F	; 15
    14e4:	01 97       	sbiw	r24, 0x01	; 1
    14e6:	f1 f7       	brne	.-4      	; 0x14e4 <matrix_scan+0x1e2>
    14e8:	00 c0       	rjmp	.+0      	; 0x14ea <matrix_scan+0x1e8>
    14ea:	00 00       	nop
    14ec:	0a c0       	rjmp	.+20     	; 0x1502 <matrix_scan+0x200>
    14ee:	ac e4       	ldi	r26, 0x4C	; 76
    14f0:	b1 e0       	ldi	r27, 0x01	; 1
    14f2:	ee e3       	ldi	r30, 0x3E	; 62
    14f4:	f1 e0       	ldi	r31, 0x01	; 1
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
    14f6:	81 91       	ld	r24, Z+
    14f8:	8d 93       	st	X+, r24

    if (debouncing) {
        if (--debouncing) {
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    14fa:	91 e0       	ldi	r25, 0x01	; 1
    14fc:	ec 34       	cpi	r30, 0x4C	; 76
    14fe:	f9 07       	cpc	r31, r25
    1500:	d1 f7       	brne	.-12     	; 0x14f6 <matrix_scan+0x1f4>
            }
        }
    }


    if (matrix_scan_kb) {
    1502:	84 e2       	ldi	r24, 0x24	; 36
    1504:	98 e0       	ldi	r25, 0x08	; 8
    1506:	89 2b       	or	r24, r25
    1508:	d1 f0       	breq	.+52     	; 0x153e <matrix_scan+0x23c>
        (*matrix_scan_kb)();
    150a:	0e 94 24 08 	call	0x1048	; 0x1048 <matrix_scan_kb>
    150e:	17 c0       	rjmp	.+46     	; 0x153e <matrix_scan+0x23c>
            return data;
        }
    } else {
        _delay_us(30);  // without this wait read unstable value.
        // read from teensy
        return
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	7a cf       	rjmp	.-268    	; 0x1408 <matrix_scan+0x106>
        if (mcp23018_status) { // if there was an error
            return 0;
        } else {
            uint8_t data = 0;
            mcp23018_status = i2c_start(I2C_ADDR_WRITE);    if (mcp23018_status) goto out;
            mcp23018_status = i2c_write(GPIOB);             if (mcp23018_status) goto out;
    1514:	83 e1       	ldi	r24, 0x13	; 19
    1516:	0e 94 21 09 	call	0x1242	; 0x1242 <i2c_write>
    151a:	80 93 00 01 	sts	0x0100, r24
    151e:	81 11       	cpse	r24, r1
    1520:	9e cf       	rjmp	.-196    	; 0x145e <matrix_scan+0x15c>
            mcp23018_status = i2c_start(I2C_ADDR_READ);     if (mcp23018_status) goto out;
    1522:	81 e4       	ldi	r24, 0x41	; 65
    1524:	0e 94 f7 08 	call	0x11ee	; 0x11ee <i2c_start>
    1528:	80 93 00 01 	sts	0x0100, r24
    152c:	81 11       	cpse	r24, r1
    152e:	97 cf       	rjmp	.-210    	; 0x145e <matrix_scan+0x15c>
            data = i2c_readNak();
    1530:	0e 94 32 09 	call	0x1264	; 0x1264 <i2c_readNak>
            data = ~data;
    1534:	98 2e       	mov	r9, r24
    1536:	90 94       	com	r9
    1538:	93 cf       	rjmp	.-218    	; 0x1460 <matrix_scan+0x15e>

static matrix_row_t read_cols(uint8_t row)
{
    if (row < 7) {
        if (mcp23018_status) { // if there was an error
            return 0;
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	94 cf       	rjmp	.-216    	; 0x1466 <matrix_scan+0x164>
    if (matrix_scan_kb) {
        (*matrix_scan_kb)();
    }

    return 1;
}
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	1f 91       	pop	r17
    1546:	0f 91       	pop	r16
    1548:	ff 90       	pop	r15
    154a:	ef 90       	pop	r14
    154c:	df 90       	pop	r13
    154e:	cf 90       	pop	r12
    1550:	bf 90       	pop	r11
    1552:	af 90       	pop	r10
    1554:	9f 90       	pop	r9
    1556:	08 95       	ret

00001558 <matrix_get_row>:
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    1558:	e8 2f       	mov	r30, r24
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	e4 5b       	subi	r30, 0xB4	; 180
    155e:	fe 4f       	sbci	r31, 0xFE	; 254
}
    1560:	80 81       	ld	r24, Z
    1562:	08 95       	ret

00001564 <matrix_print>:

void matrix_print(void)
{
    1564:	cf 92       	push	r12
    1566:	df 92       	push	r13
    1568:	ef 92       	push	r14
    156a:	ff 92       	push	r15
    156c:	0f 93       	push	r16
    156e:	1f 93       	push	r17
    1570:	cf 93       	push	r28
    1572:	df 93       	push	r29
    print("\nr/c 0123456789ABCDEF\n");
    1574:	8c ee       	ldi	r24, 0xEC	; 236
    1576:	92 e0       	ldi	r25, 0x02	; 2
    1578:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    157c:	3c e4       	ldi	r19, 0x4C	; 76
    157e:	e3 2e       	mov	r14, r19
    1580:	31 e0       	ldi	r19, 0x01	; 1
    1582:	f3 2e       	mov	r15, r19
    1584:	c0 e0       	ldi	r28, 0x00	; 0
    1586:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    1588:	47 ee       	ldi	r20, 0xE7	; 231
    158a:	c4 2e       	mov	r12, r20
    158c:	42 e0       	ldi	r20, 0x02	; 2
    158e:	d4 2e       	mov	r13, r20
        pbin_reverse16(matrix_get_row(row));
    1590:	0e ed       	ldi	r16, 0xDE	; 222
    1592:	12 e0       	ldi	r17, 0x02	; 2

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    1594:	df 93       	push	r29
    1596:	cf 93       	push	r28
    1598:	df 92       	push	r13
    159a:	cf 92       	push	r12
    159c:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    15a0:	84 ee       	ldi	r24, 0xE4	; 228
    15a2:	92 e0       	ldi	r25, 0x02	; 2
    15a4:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    15a8:	f7 01       	movw	r30, r14
    15aa:	81 91       	ld	r24, Z+
    15ac:	7f 01       	movw	r14, r30
void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	0e 94 75 21 	call	0x42ea	; 0x42ea <bitrev16>
    15b4:	9f 93       	push	r25
    15b6:	8f 93       	push	r24
    15b8:	1f 93       	push	r17
    15ba:	0f 93       	push	r16
    15bc:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
        print("\n");
    15c0:	8c ed       	ldi	r24, 0xDC	; 220
    15c2:	92 e0       	ldi	r25, 0x02	; 2
    15c4:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    15c8:	21 96       	adiw	r28, 0x01	; 1
}

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    15ca:	8d b7       	in	r24, 0x3d	; 61
    15cc:	9e b7       	in	r25, 0x3e	; 62
    15ce:	08 96       	adiw	r24, 0x08	; 8
    15d0:	0f b6       	in	r0, 0x3f	; 63
    15d2:	f8 94       	cli
    15d4:	9e bf       	out	0x3e, r25	; 62
    15d6:	0f be       	out	0x3f, r0	; 63
    15d8:	8d bf       	out	0x3d, r24	; 61
    15da:	ce 30       	cpi	r28, 0x0E	; 14
    15dc:	d1 05       	cpc	r29, r1
    15de:	d1 f6       	brne	.-76     	; 0x1594 <matrix_print+0x30>
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
    15e0:	df 91       	pop	r29
    15e2:	cf 91       	pop	r28
    15e4:	1f 91       	pop	r17
    15e6:	0f 91       	pop	r16
    15e8:	ff 90       	pop	r15
    15ea:	ef 90       	pop	r14
    15ec:	df 90       	pop	r13
    15ee:	cf 90       	pop	r12
    15f0:	08 95       	ret

000015f2 <keycode_to_action>:

/* translates keycode to action */
static action_t keycode_to_action(uint16_t keycode)
{
    action_t action;
    switch (keycode) {
    15f2:	8b 3b       	cpi	r24, 0xBB	; 187
    15f4:	91 05       	cpc	r25, r1
    15f6:	78 f4       	brcc	.+30     	; 0x1616 <keycode_to_action+0x24>
    15f8:	88 3a       	cpi	r24, 0xA8	; 168
    15fa:	91 05       	cpc	r25, r1
    15fc:	40 f5       	brcc	.+80     	; 0x164e <keycode_to_action+0x5c>
    15fe:	85 3a       	cpi	r24, 0xA5	; 165
    1600:	91 05       	cpc	r25, r1
    1602:	d0 f4       	brcc	.+52     	; 0x1638 <keycode_to_action+0x46>
    1604:	84 30       	cpi	r24, 0x04	; 4
    1606:	91 05       	cpc	r25, r1
    1608:	08 f0       	brcs	.+2      	; 0x160c <keycode_to_action+0x1a>
    160a:	b1 c0       	rjmp	.+354    	; 0x176e <keycode_to_action+0x17c>
    160c:	81 30       	cpi	r24, 0x01	; 1
    160e:	91 05       	cpc	r25, r1
    1610:	09 f4       	brne	.+2      	; 0x1614 <keycode_to_action+0x22>
    1612:	ad c0       	rjmp	.+346    	; 0x176e <keycode_to_action+0x17c>
    1614:	6b c0       	rjmp	.+214    	; 0x16ec <keycode_to_action+0xfa>
    1616:	80 3e       	cpi	r24, 0xE0	; 224
    1618:	91 05       	cpc	r25, r1
    161a:	08 f4       	brcc	.+2      	; 0x161e <keycode_to_action+0x2c>
    161c:	67 c0       	rjmp	.+206    	; 0x16ec <keycode_to_action+0xfa>
    161e:	88 3e       	cpi	r24, 0xE8	; 232
    1620:	91 05       	cpc	r25, r1
    1622:	08 f4       	brcc	.+2      	; 0x1626 <keycode_to_action+0x34>
    1624:	a4 c0       	rjmp	.+328    	; 0x176e <keycode_to_action+0x17c>
    1626:	9c 01       	movw	r18, r24
    1628:	20 5f       	subi	r18, 0xF0	; 240
    162a:	31 09       	sbc	r19, r1
    162c:	20 31       	cpi	r18, 0x10	; 16
    162e:	31 05       	cpc	r19, r1
    1630:	08 f0       	brcs	.+2      	; 0x1634 <keycode_to_action+0x42>
    1632:	5c c0       	rjmp	.+184    	; 0x16ec <keycode_to_action+0xfa>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
    1634:	90 65       	ori	r25, 0x50	; 80
            break;
    1636:	08 95       	ret
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    1638:	85 3a       	cpi	r24, 0xA5	; 165
    163a:	91 05       	cpc	r25, r1
    163c:	09 f4       	brne	.+2      	; 0x1640 <keycode_to_action+0x4e>
    163e:	59 c0       	rjmp	.+178    	; 0x16f2 <keycode_to_action+0x100>
    1640:	86 3a       	cpi	r24, 0xA6	; 166
    1642:	91 05       	cpc	r25, r1
    1644:	09 f4       	brne	.+2      	; 0x1648 <keycode_to_action+0x56>
    1646:	58 c0       	rjmp	.+176    	; 0x16f8 <keycode_to_action+0x106>
    1648:	83 e8       	ldi	r24, 0x83	; 131
    164a:	90 e4       	ldi	r25, 0x40	; 64
    164c:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    164e:	88 3a       	cpi	r24, 0xA8	; 168
    1650:	91 05       	cpc	r25, r1
    1652:	09 f4       	brne	.+2      	; 0x1656 <keycode_to_action+0x64>
    1654:	54 c0       	rjmp	.+168    	; 0x16fe <keycode_to_action+0x10c>
    1656:	89 3a       	cpi	r24, 0xA9	; 169
    1658:	91 05       	cpc	r25, r1
    165a:	09 f4       	brne	.+2      	; 0x165e <keycode_to_action+0x6c>
    165c:	53 c0       	rjmp	.+166    	; 0x1704 <keycode_to_action+0x112>
    165e:	8a 3a       	cpi	r24, 0xAA	; 170
    1660:	91 05       	cpc	r25, r1
    1662:	09 f4       	brne	.+2      	; 0x1666 <keycode_to_action+0x74>
    1664:	52 c0       	rjmp	.+164    	; 0x170a <keycode_to_action+0x118>
    1666:	8b 3a       	cpi	r24, 0xAB	; 171
    1668:	91 05       	cpc	r25, r1
    166a:	09 f4       	brne	.+2      	; 0x166e <keycode_to_action+0x7c>
    166c:	51 c0       	rjmp	.+162    	; 0x1710 <keycode_to_action+0x11e>
    166e:	8c 3a       	cpi	r24, 0xAC	; 172
    1670:	91 05       	cpc	r25, r1
    1672:	09 f4       	brne	.+2      	; 0x1676 <keycode_to_action+0x84>
    1674:	50 c0       	rjmp	.+160    	; 0x1716 <keycode_to_action+0x124>
    1676:	8d 3a       	cpi	r24, 0xAD	; 173
    1678:	91 05       	cpc	r25, r1
    167a:	09 f4       	brne	.+2      	; 0x167e <keycode_to_action+0x8c>
    167c:	4f c0       	rjmp	.+158    	; 0x171c <keycode_to_action+0x12a>
    167e:	80 3b       	cpi	r24, 0xB0	; 176
    1680:	91 05       	cpc	r25, r1
    1682:	09 f4       	brne	.+2      	; 0x1686 <keycode_to_action+0x94>
    1684:	4e c0       	rjmp	.+156    	; 0x1722 <keycode_to_action+0x130>
    1686:	8e 3a       	cpi	r24, 0xAE	; 174
    1688:	91 05       	cpc	r25, r1
    168a:	09 f4       	brne	.+2      	; 0x168e <keycode_to_action+0x9c>
    168c:	4d c0       	rjmp	.+154    	; 0x1728 <keycode_to_action+0x136>
    168e:	8f 3a       	cpi	r24, 0xAF	; 175
    1690:	91 05       	cpc	r25, r1
    1692:	09 f4       	brne	.+2      	; 0x1696 <keycode_to_action+0xa4>
    1694:	4c c0       	rjmp	.+152    	; 0x172e <keycode_to_action+0x13c>
    1696:	81 3b       	cpi	r24, 0xB1	; 177
    1698:	91 05       	cpc	r25, r1
    169a:	09 f4       	brne	.+2      	; 0x169e <keycode_to_action+0xac>
    169c:	4b c0       	rjmp	.+150    	; 0x1734 <keycode_to_action+0x142>
    169e:	82 3b       	cpi	r24, 0xB2	; 178
    16a0:	91 05       	cpc	r25, r1
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <keycode_to_action+0xb4>
    16a4:	4a c0       	rjmp	.+148    	; 0x173a <keycode_to_action+0x148>
    16a6:	83 3b       	cpi	r24, 0xB3	; 179
    16a8:	91 05       	cpc	r25, r1
    16aa:	09 f4       	brne	.+2      	; 0x16ae <keycode_to_action+0xbc>
    16ac:	49 c0       	rjmp	.+146    	; 0x1740 <keycode_to_action+0x14e>
    16ae:	84 3b       	cpi	r24, 0xB4	; 180
    16b0:	91 05       	cpc	r25, r1
    16b2:	09 f4       	brne	.+2      	; 0x16b6 <keycode_to_action+0xc4>
    16b4:	48 c0       	rjmp	.+144    	; 0x1746 <keycode_to_action+0x154>
    16b6:	85 3b       	cpi	r24, 0xB5	; 181
    16b8:	91 05       	cpc	r25, r1
    16ba:	09 f4       	brne	.+2      	; 0x16be <keycode_to_action+0xcc>
    16bc:	47 c0       	rjmp	.+142    	; 0x174c <keycode_to_action+0x15a>
    16be:	86 3b       	cpi	r24, 0xB6	; 182
    16c0:	91 05       	cpc	r25, r1
    16c2:	09 f4       	brne	.+2      	; 0x16c6 <keycode_to_action+0xd4>
    16c4:	46 c0       	rjmp	.+140    	; 0x1752 <keycode_to_action+0x160>
    16c6:	87 3b       	cpi	r24, 0xB7	; 183
    16c8:	91 05       	cpc	r25, r1
    16ca:	09 f4       	brne	.+2      	; 0x16ce <keycode_to_action+0xdc>
    16cc:	45 c0       	rjmp	.+138    	; 0x1758 <keycode_to_action+0x166>
    16ce:	88 3b       	cpi	r24, 0xB8	; 184
    16d0:	91 05       	cpc	r25, r1
    16d2:	09 f4       	brne	.+2      	; 0x16d6 <keycode_to_action+0xe4>
    16d4:	44 c0       	rjmp	.+136    	; 0x175e <keycode_to_action+0x16c>
    16d6:	89 3b       	cpi	r24, 0xB9	; 185
    16d8:	91 05       	cpc	r25, r1
    16da:	09 f4       	brne	.+2      	; 0x16de <keycode_to_action+0xec>
    16dc:	43 c0       	rjmp	.+134    	; 0x1764 <keycode_to_action+0x172>
    16de:	8a 3b       	cpi	r24, 0xBA	; 186
    16e0:	91 05       	cpc	r25, r1
    16e2:	09 f0       	breq	.+2      	; 0x16e6 <keycode_to_action+0xf4>
    16e4:	42 c0       	rjmp	.+132    	; 0x176a <keycode_to_action+0x178>
    16e6:	8a e2       	ldi	r24, 0x2A	; 42
    16e8:	96 e4       	ldi	r25, 0x46	; 70
    16ea:	08 95       	ret
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
            break;
        default:
            action.code = ACTION_NO;
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	90 e0       	ldi	r25, 0x00	; 0
            break;
    16f0:	08 95       	ret
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    16f2:	81 e8       	ldi	r24, 0x81	; 129
    16f4:	90 e4       	ldi	r25, 0x40	; 64
    16f6:	08 95       	ret
    16f8:	82 e8       	ldi	r24, 0x82	; 130
    16fa:	90 e4       	ldi	r25, 0x40	; 64
    16fc:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    16fe:	82 ee       	ldi	r24, 0xE2	; 226
    1700:	94 e4       	ldi	r25, 0x44	; 68
    1702:	08 95       	ret
    1704:	89 ee       	ldi	r24, 0xE9	; 233
    1706:	94 e4       	ldi	r25, 0x44	; 68
    1708:	08 95       	ret
    170a:	8a ee       	ldi	r24, 0xEA	; 234
    170c:	94 e4       	ldi	r25, 0x44	; 68
    170e:	08 95       	ret
    1710:	85 eb       	ldi	r24, 0xB5	; 181
    1712:	94 e4       	ldi	r25, 0x44	; 68
    1714:	08 95       	ret
    1716:	86 eb       	ldi	r24, 0xB6	; 182
    1718:	94 e4       	ldi	r25, 0x44	; 68
    171a:	08 95       	ret
    171c:	87 eb       	ldi	r24, 0xB7	; 183
    171e:	94 e4       	ldi	r25, 0x44	; 68
    1720:	08 95       	ret
    1722:	8c ec       	ldi	r24, 0xCC	; 204
    1724:	94 e4       	ldi	r25, 0x44	; 68
    1726:	08 95       	ret
    1728:	8d ec       	ldi	r24, 0xCD	; 205
    172a:	94 e4       	ldi	r25, 0x44	; 68
    172c:	08 95       	ret
    172e:	83 e8       	ldi	r24, 0x83	; 131
    1730:	95 e4       	ldi	r25, 0x45	; 69
    1732:	08 95       	ret
    1734:	8a e8       	ldi	r24, 0x8A	; 138
    1736:	95 e4       	ldi	r25, 0x45	; 69
    1738:	08 95       	ret
    173a:	82 e9       	ldi	r24, 0x92	; 146
    173c:	95 e4       	ldi	r25, 0x45	; 69
    173e:	08 95       	ret
    1740:	84 e9       	ldi	r24, 0x94	; 148
    1742:	95 e4       	ldi	r25, 0x45	; 69
    1744:	08 95       	ret
    1746:	81 e2       	ldi	r24, 0x21	; 33
    1748:	96 e4       	ldi	r25, 0x46	; 70
    174a:	08 95       	ret
    174c:	83 e2       	ldi	r24, 0x23	; 35
    174e:	96 e4       	ldi	r25, 0x46	; 70
    1750:	08 95       	ret
    1752:	84 e2       	ldi	r24, 0x24	; 36
    1754:	96 e4       	ldi	r25, 0x46	; 70
    1756:	08 95       	ret
    1758:	85 e2       	ldi	r24, 0x25	; 37
    175a:	96 e4       	ldi	r25, 0x46	; 70
    175c:	08 95       	ret
    175e:	86 e2       	ldi	r24, 0x26	; 38
    1760:	96 e4       	ldi	r25, 0x46	; 70
    1762:	08 95       	ret
    1764:	87 e2       	ldi	r24, 0x27	; 39
    1766:	96 e4       	ldi	r25, 0x46	; 70
    1768:	08 95       	ret
    176a:	80 e0       	ldi	r24, 0x00	; 0
    176c:	94 e4       	ldi	r25, 0x44	; 68
        default:
            action.code = ACTION_NO;
            break;
    }
    return action;
}
    176e:	08 95       	ret

00001770 <action_function>:
}

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    1770:	08 95       	ret

00001772 <keymap_key_to_keycode>:

/* translates key to keycode */
uint16_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
	// Read entire word (16bits)
    return pgm_read_word(&keymaps[(layer)][(key.row)][(key.col)]);
    1772:	96 e0       	ldi	r25, 0x06	; 6
    1774:	79 9f       	mul	r23, r25
    1776:	f0 01       	movw	r30, r0
    1778:	11 24       	eor	r1, r1
    177a:	94 e5       	ldi	r25, 0x54	; 84
    177c:	89 9f       	mul	r24, r25
    177e:	e0 0d       	add	r30, r0
    1780:	f1 1d       	adc	r31, r1
    1782:	11 24       	eor	r1, r1
    1784:	e6 0f       	add	r30, r22
    1786:	f1 1d       	adc	r31, r1
    1788:	ee 0f       	add	r30, r30
    178a:	ff 1f       	adc	r31, r31
    178c:	ec 51       	subi	r30, 0x1C	; 28
    178e:	ff 4f       	sbci	r31, 0xFF	; 255
}
    1790:	85 91       	lpm	r24, Z+
    1792:	94 91       	lpm	r25, Z
    1794:	08 95       	ret

00001796 <keymap_fn_to_action>:

/* translates Fn keycode to action */
action_t keymap_fn_to_action(uint16_t keycode)
{
    return (action_t){ .code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]) };
    1796:	88 0f       	add	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	80 5a       	subi	r24, 0xA0	; 160
    179c:	90 40       	sbci	r25, 0x00	; 0
}
    179e:	fc 01       	movw	r30, r24
    17a0:	85 91       	lpm	r24, Z+
    17a2:	94 91       	lpm	r25, Z
    17a4:	08 95       	ret

000017a6 <keymap_func_to_action>:

action_t keymap_func_to_action(uint16_t keycode)
{
	// For FUNC without 8bit limit
    return (action_t){ .code = pgm_read_word(&fn_actions[(int)keycode]) };
    17a6:	88 0f       	add	r24, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	80 52       	subi	r24, 0x20	; 32
    17ac:	9f 4f       	sbci	r25, 0xFF	; 255
}
    17ae:	fc 01       	movw	r30, r24
    17b0:	85 91       	lpm	r24, Z+
    17b2:	94 91       	lpm	r25, Z
    17b4:	08 95       	ret

000017b6 <action_for_key>:

/* translates key to keycode */
uint16_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
	// Read entire word (16bits)
    return pgm_read_word(&keymaps[(layer)][(key.row)][(key.col)]);
    17b6:	26 e0       	ldi	r18, 0x06	; 6
    17b8:	72 9f       	mul	r23, r18
    17ba:	f0 01       	movw	r30, r0
    17bc:	11 24       	eor	r1, r1
    17be:	44 e5       	ldi	r20, 0x54	; 84
    17c0:	84 9f       	mul	r24, r20
    17c2:	e0 0d       	add	r30, r0
    17c4:	f1 1d       	adc	r31, r1
    17c6:	11 24       	eor	r1, r1
    17c8:	e6 0f       	add	r30, r22
    17ca:	f1 1d       	adc	r31, r1
    17cc:	ee 0f       	add	r30, r30
    17ce:	ff 1f       	adc	r31, r31
    17d0:	ec 51       	subi	r30, 0x1C	; 28
    17d2:	ff 4f       	sbci	r31, 0xFF	; 255
    17d4:	25 91       	lpm	r18, Z+
    17d6:	34 91       	lpm	r19, Z
action_t action_for_key(uint8_t layer, keypos_t key)
{
	// 16bit keycodes - important
    uint16_t keycode = keymap_key_to_keycode(layer, key);

    if (keycode >= 0x0100 && keycode < 0x2000) {
    17d8:	c9 01       	movw	r24, r18
    17da:	9a 95       	dec	r25
    17dc:	81 15       	cp	r24, r1
    17de:	9f 41       	sbci	r25, 0x1F	; 31
    17e0:	10 f4       	brcc	.+4      	; 0x17e6 <action_for_key+0x30>
    	// Has a modifier
    	action_t action;
    	// Split it up
    	action.code = ACTION_MODS_KEY(keycode >> 8, keycode & 0xFF); // adds modifier to key
    	return action;
    17e2:	c9 01       	movw	r24, r18
    17e4:	08 95       	ret
	} else if (keycode >= 0x2000 && keycode < 0x3000) {
    17e6:	c9 01       	movw	r24, r18
    17e8:	90 52       	subi	r25, 0x20	; 32
    17ea:	81 15       	cp	r24, r1
    17ec:	90 41       	sbci	r25, 0x10	; 16
    17ee:	28 f4       	brcc	.+10     	; 0x17fa <action_for_key+0x44>
        // Is a shortcut for function layer, pull last 12bits
        // This means we have 4,096 FN macros at our disposal
        return keymap_func_to_action(keycode & 0xFFF);
    17f0:	c9 01       	movw	r24, r18
    17f2:	9f 70       	andi	r25, 0x0F	; 15
    17f4:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <keymap_func_to_action>
    17f8:	08 95       	ret
	} else if (keycode >= 0x3000 && keycode < 0x4000) {
    17fa:	c9 01       	movw	r24, r18
    17fc:	90 53       	subi	r25, 0x30	; 48
    17fe:	81 15       	cp	r24, r1
    1800:	90 41       	sbci	r25, 0x10	; 16
    1802:	20 f4       	brcc	.+8      	; 0x180c <action_for_key+0x56>
      // When the code starts with 3, it's an action macro.
    	action_t action;
    	action.code = ACTION_MACRO(keycode & 0xFF);
    1804:	c9 01       	movw	r24, r18
    1806:	99 27       	eor	r25, r25
    	return action;
    1808:	90 6c       	ori	r25, 0xC0	; 192
    180a:	08 95       	ret
    } else if (keycode == BL_STEP) {
        action_t action;
        action.code = ACTION_BACKLIGHT_STEP();
        return action;
#endif
    } else if (keycode == RESET) { // RESET is 0x5000, which is why this is here
    180c:	21 15       	cp	r18, r1
    180e:	80 e5       	ldi	r24, 0x50	; 80
    1810:	38 07       	cpc	r19, r24
    1812:	69 f4       	brne	.+26     	; 0x182e <action_for_key+0x78>
        clear_keyboard();
    1814:	0e 94 a0 1a 	call	0x3540	; 0x3540 <clear_keyboard>
    1818:	9f ef       	ldi	r25, 0xFF	; 255
    181a:	24 e3       	ldi	r18, 0x34	; 52
    181c:	4c e0       	ldi	r20, 0x0C	; 12
    181e:	91 50       	subi	r25, 0x01	; 1
    1820:	20 40       	sbci	r18, 0x00	; 0
    1822:	40 40       	sbci	r20, 0x00	; 0
    1824:	e1 f7       	brne	.-8      	; 0x181e <action_for_key+0x68>
    1826:	00 c0       	rjmp	.+0      	; 0x1828 <action_for_key+0x72>
    1828:	00 00       	nop
        _delay_ms(250);
        bootloader_jump();
    182a:	0c 94 31 22 	jmp	0x4462	; 0x4462 <bootloader_jump>
        return;
    } else if (keycode == DEBUG) { // DEBUG is 0x5001
    182e:	21 30       	cpi	r18, 0x01	; 1
    1830:	80 e5       	ldi	r24, 0x50	; 80
    1832:	38 07       	cpc	r19, r24
    1834:	51 f4       	brne	.+20     	; 0x184a <action_for_key+0x94>
      // TODO: Does this actually work?
        print("\nDEBUG: enabled.\n");
    1836:	8c e5       	ldi	r24, 0x5C	; 92
    1838:	93 e0       	ldi	r25, 0x03	; 3
    183a:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
        debug_enable = true;
    183e:	80 91 d7 01 	lds	r24, 0x01D7
    1842:	81 60       	ori	r24, 0x01	; 1
    1844:	80 93 d7 01 	sts	0x01D7, r24
    1848:	08 95       	ret
        return;
    } else if (keycode >= 0x5000 && keycode < 0x6000) {
    184a:	c9 01       	movw	r24, r18
    184c:	90 55       	subi	r25, 0x50	; 80
    184e:	81 15       	cp	r24, r1
    1850:	90 41       	sbci	r25, 0x10	; 16
    1852:	08 f0       	brcs	.+2      	; 0x1856 <action_for_key+0xa0>
    1854:	50 c0       	rjmp	.+160    	; 0x18f6 <action_for_key+0x140>
        // Layer movement shortcuts
        // See .h to see constraints/usage
        int type = (keycode >> 0x8) & 0xF;
    1856:	83 2f       	mov	r24, r19
    1858:	99 27       	eor	r25, r25
    185a:	8f 70       	andi	r24, 0x0F	; 15
    185c:	99 27       	eor	r25, r25
        if (type == 0x1) {
    185e:	81 30       	cpi	r24, 0x01	; 1
    1860:	91 05       	cpc	r25, r1
    1862:	d9 f4       	brne	.+54     	; 0x189a <action_for_key+0xe4>
            // Layer set "GOTO"
            int when = (keycode >> 0x4) & 0x3;
            int layer = keycode & 0xF;
            action_t action;
            action.code = ACTION_LAYER_SET(layer, when);
    1864:	a9 01       	movw	r20, r18
    1866:	43 70       	andi	r20, 0x03	; 3
    1868:	55 27       	eor	r21, r21
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <action_for_key+0xba>
    186c:	88 0f       	add	r24, r24
    186e:	99 1f       	adc	r25, r25
    1870:	4a 95       	dec	r20
    1872:	e2 f7       	brpl	.-8      	; 0x186c <action_for_key+0xb6>
    1874:	9c 68       	ori	r25, 0x8C	; 140
        // Layer movement shortcuts
        // See .h to see constraints/usage
        int type = (keycode >> 0x8) & 0xF;
        if (type == 0x1) {
            // Layer set "GOTO"
            int when = (keycode >> 0x4) & 0x3;
    1876:	a9 01       	movw	r20, r18
    1878:	64 e0       	ldi	r22, 0x04	; 4
    187a:	44 0f       	add	r20, r20
    187c:	55 1f       	adc	r21, r21
    187e:	6a 95       	dec	r22
    1880:	e1 f7       	brne	.-8      	; 0x187a <action_for_key+0xc4>
            int layer = keycode & 0xF;
            action_t action;
            action.code = ACTION_LAYER_SET(layer, when);
    1882:	44 27       	eor	r20, r20
    1884:	53 70       	andi	r21, 0x03	; 3
    1886:	84 2b       	or	r24, r20
    1888:	95 2b       	or	r25, r21
    188a:	73 e0       	ldi	r23, 0x03	; 3
    188c:	22 0f       	add	r18, r18
    188e:	33 1f       	adc	r19, r19
    1890:	7a 95       	dec	r23
    1892:	e1 f7       	brne	.-8      	; 0x188c <action_for_key+0xd6>
    1894:	20 76       	andi	r18, 0x60	; 96
    1896:	33 27       	eor	r19, r19
    1898:	1d c0       	rjmp	.+58     	; 0x18d4 <action_for_key+0x11e>
            return action;
        } else if (type == 0x2) {
    189a:	82 30       	cpi	r24, 0x02	; 2
    189c:	91 05       	cpc	r25, r1
    189e:	29 f4       	brne	.+10     	; 0x18aa <action_for_key+0xf4>
            // Momentary layer
            int layer = keycode & 0xFF;
            action_t action;
            action.code = ACTION_LAYER_MOMENTARY(layer);
    18a0:	92 2f       	mov	r25, r18
    18a2:	88 27       	eor	r24, r24
            return action;
    18a4:	81 6f       	ori	r24, 0xF1	; 241
    18a6:	90 6a       	ori	r25, 0xA0	; 160
    18a8:	08 95       	ret
        } else if (type == 0x3) {
    18aa:	83 30       	cpi	r24, 0x03	; 3
    18ac:	91 05       	cpc	r25, r1
    18ae:	a9 f4       	brne	.+42     	; 0x18da <action_for_key+0x124>
            // Set default layer
            int layer = keycode & 0xFF;
            action_t action;
            action.code = ACTION_DEFAULT_LAYER_SET(layer);
    18b0:	a9 01       	movw	r20, r18
    18b2:	43 70       	andi	r20, 0x03	; 3
    18b4:	55 27       	eor	r21, r21
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <action_for_key+0x10a>
    18bc:	88 0f       	add	r24, r24
    18be:	99 1f       	adc	r25, r25
    18c0:	4a 95       	dec	r20
    18c2:	e2 f7       	brpl	.-8      	; 0x18bc <action_for_key+0x106>
    18c4:	9c 68       	ori	r25, 0x8C	; 140
    18c6:	43 e0       	ldi	r20, 0x03	; 3
    18c8:	22 0f       	add	r18, r18
    18ca:	33 1f       	adc	r19, r19
    18cc:	4a 95       	dec	r20
    18ce:	e1 f7       	brne	.-8      	; 0x18c8 <action_for_key+0x112>
    18d0:	20 7e       	andi	r18, 0xE0	; 224
    18d2:	37 70       	andi	r19, 0x07	; 7
            return action;
    18d4:	82 2b       	or	r24, r18
    18d6:	93 2b       	or	r25, r19
    18d8:	08 95       	ret
        } else if (type == 0x4) {
    18da:	04 97       	sbiw	r24, 0x04	; 4
    18dc:	f1 f4       	brne	.+60     	; 0x191a <action_for_key+0x164>
            // Set default layer
            int layer = keycode & 0xFF;
            action_t action;
            action.code = ACTION_LAYER_TOGGLE(layer);
    18de:	a9 01       	movw	r20, r18
    18e0:	43 70       	andi	r20, 0x03	; 3
    18e2:	55 27       	eor	r21, r21
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <action_for_key+0x138>
    18ea:	88 0f       	add	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	4a 95       	dec	r20
    18f0:	e2 f7       	brpl	.-8      	; 0x18ea <action_for_key+0x134>
    18f2:	9a 68       	ori	r25, 0x8A	; 138
    18f4:	e8 cf       	rjmp	.-48     	; 0x18c6 <action_for_key+0x110>
    } else if (keycode >= 0x6000 && keycode < 0x7000) {
        action_t action;
        action.code =  ACTION_FUNCTION_OPT(keycode & 0xFF, (keycode & 0x0F00) >> 8);
        return action;
#endif
    } else if (keycode >= 0x7000 && keycode < 0x8000) {
    18f6:	c9 01       	movw	r24, r18
    18f8:	90 57       	subi	r25, 0x70	; 112
    18fa:	81 15       	cp	r24, r1
    18fc:	90 41       	sbci	r25, 0x10	; 16
    18fe:	20 f4       	brcc	.+8      	; 0x1908 <action_for_key+0x152>
        action_t action;
        action.code = ACTION_MODS_TAP_KEY((keycode >> 0x8) & 0xF, keycode & 0xFF);
    1900:	c9 01       	movw	r24, r18
    1902:	9f 70       	andi	r25, 0x0F	; 15
        return action;
    1904:	90 62       	ori	r25, 0x20	; 32
    1906:	08 95       	ret
    } else if (keycode >= 0x8000 && keycode < 0x9000) {
    1908:	c9 01       	movw	r24, r18
    190a:	90 58       	subi	r25, 0x80	; 128
    190c:	81 15       	cp	r24, r1
    190e:	90 41       	sbci	r25, 0x10	; 16
    1910:	20 f4       	brcc	.+8      	; 0x191a <action_for_key+0x164>
        action_t action;
        action.code = ACTION_LAYER_TAP_KEY((keycode >> 0x8) & 0xF, keycode & 0xFF);
    1912:	c9 01       	movw	r24, r18
    1914:	9f 70       	andi	r25, 0x0F	; 15
        return action;
    1916:	90 6a       	ori	r25, 0xA0	; 160
    1918:	08 95       	ret
#endif
    } else {

    }

    switch (keycode) {
    191a:	20 3e       	cpi	r18, 0xE0	; 224
    191c:	31 05       	cpc	r19, r1
    191e:	e0 f4       	brcc	.+56     	; 0x1958 <action_for_key+0x1a2>
    1920:	20 3c       	cpi	r18, 0xC0	; 192
    1922:	31 05       	cpc	r19, r1
    1924:	58 f5       	brcc	.+86     	; 0x197c <action_for_key+0x1c6>
    1926:	21 33       	cpi	r18, 0x31	; 49
    1928:	31 05       	cpc	r19, r1
    192a:	09 f4       	brne	.+2      	; 0x192e <action_for_key+0x178>
    192c:	70 c0       	rjmp	.+224    	; 0x1a0e <action_for_key+0x258>
    192e:	48 f4       	brcc	.+18     	; 0x1942 <action_for_key+0x18c>
    1930:	29 32       	cpi	r18, 0x29	; 41
    1932:	31 05       	cpc	r19, r1
    1934:	09 f4       	brne	.+2      	; 0x1938 <action_for_key+0x182>
    1936:	64 c0       	rjmp	.+200    	; 0x1a00 <action_for_key+0x24a>
    1938:	2a 32       	cpi	r18, 0x2A	; 42
    193a:	31 05       	cpc	r19, r1
    193c:	09 f4       	brne	.+2      	; 0x1940 <action_for_key+0x18a>
    193e:	6e c0       	rjmp	.+220    	; 0x1a1c <action_for_key+0x266>
    1940:	74 c0       	rjmp	.+232    	; 0x1a2a <action_for_key+0x274>
    1942:	29 33       	cpi	r18, 0x39	; 57
    1944:	31 05       	cpc	r19, r1
    1946:	f1 f0       	breq	.+60     	; 0x1984 <action_for_key+0x1ce>
    1948:	22 38       	cpi	r18, 0x82	; 130
    194a:	31 05       	cpc	r19, r1
    194c:	d9 f0       	breq	.+54     	; 0x1984 <action_for_key+0x1ce>
    194e:	25 33       	cpi	r18, 0x35	; 53
    1950:	31 05       	cpc	r19, r1
    1952:	09 f4       	brne	.+2      	; 0x1956 <action_for_key+0x1a0>
    1954:	4e c0       	rjmp	.+156    	; 0x19f2 <action_for_key+0x23c>
    1956:	69 c0       	rjmp	.+210    	; 0x1a2a <action_for_key+0x274>
    1958:	23 3e       	cpi	r18, 0xE3	; 227
    195a:	31 05       	cpc	r19, r1
    195c:	89 f1       	breq	.+98     	; 0x19c0 <action_for_key+0x20a>
    195e:	38 f4       	brcc	.+14     	; 0x196e <action_for_key+0x1b8>
    1960:	20 3e       	cpi	r18, 0xE0	; 224
    1962:	31 05       	cpc	r19, r1
    1964:	c1 f0       	breq	.+48     	; 0x1996 <action_for_key+0x1e0>
    1966:	22 3e       	cpi	r18, 0xE2	; 226
    1968:	31 05       	cpc	r19, r1
    196a:	e1 f0       	breq	.+56     	; 0x19a4 <action_for_key+0x1ee>
    196c:	5e c0       	rjmp	.+188    	; 0x1a2a <action_for_key+0x274>
    196e:	26 3e       	cpi	r18, 0xE6	; 230
    1970:	31 05       	cpc	r19, r1
    1972:	69 f1       	breq	.+90     	; 0x19ce <action_for_key+0x218>
    1974:	27 3e       	cpi	r18, 0xE7	; 231
    1976:	31 05       	cpc	r19, r1
    1978:	a9 f1       	breq	.+106    	; 0x19e4 <action_for_key+0x22e>
    197a:	57 c0       	rjmp	.+174    	; 0x1a2a <action_for_key+0x274>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    197c:	c9 01       	movw	r24, r18
    197e:	0e 94 cb 0b 	call	0x1796	; 0x1796 <keymap_fn_to_action>
    1982:	08 95       	ret
#ifdef BOOTMAGIC_ENABLE
        case KC_CAPSLOCK:
        case KC_LOCKING_CAPS:
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    1984:	80 91 ea 01 	lds	r24, 0x01EA
    1988:	80 fd       	sbrc	r24, 0
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <action_for_key+0x1da>
    198c:	81 ff       	sbrs	r24, 1
    198e:	4d c0       	rjmp	.+154    	; 0x1a2a <action_for_key+0x274>
                return keycode_to_action(KC_LCTL);
    1990:	80 ee       	ldi	r24, 0xE0	; 224
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	4b c0       	rjmp	.+150    	; 0x1a2c <action_for_key+0x276>
            }
            return keycode_to_action(keycode);
        case KC_LCTL:
            if (keymap_config.swap_control_capslock) {
    1996:	80 91 ea 01 	lds	r24, 0x01EA
    199a:	80 ff       	sbrs	r24, 0
    199c:	f9 cf       	rjmp	.-14     	; 0x1990 <action_for_key+0x1da>
                return keycode_to_action(KC_CAPSLOCK);
    199e:	89 e3       	ldi	r24, 0x39	; 57
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	44 c0       	rjmp	.+136    	; 0x1a2c <action_for_key+0x276>
            }
            return keycode_to_action(KC_LCTL);
        case KC_LALT:
            if (keymap_config.swap_lalt_lgui) {
    19a4:	80 91 ea 01 	lds	r24, 0x01EA
    19a8:	82 ff       	sbrs	r24, 2
    19aa:	0e c0       	rjmp	.+28     	; 0x19c8 <action_for_key+0x212>
                if (keymap_config.no_gui) {
    19ac:	80 91 ea 01 	lds	r24, 0x01EA
    19b0:	84 ff       	sbrs	r24, 4
    19b2:	03 c0       	rjmp	.+6      	; 0x19ba <action_for_key+0x204>
                    return keycode_to_action(ACTION_NO);
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	39 c0       	rjmp	.+114    	; 0x1a2c <action_for_key+0x276>
                }
                return keycode_to_action(KC_LGUI);
    19ba:	83 ee       	ldi	r24, 0xE3	; 227
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	36 c0       	rjmp	.+108    	; 0x1a2c <action_for_key+0x276>
            }
            return keycode_to_action(KC_LALT);
        case KC_LGUI:
            if (keymap_config.swap_lalt_lgui) {
    19c0:	80 91 ea 01 	lds	r24, 0x01EA
    19c4:	82 ff       	sbrs	r24, 2
    19c6:	f2 cf       	rjmp	.-28     	; 0x19ac <action_for_key+0x1f6>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_LGUI);
            }
            return keycode_to_action(KC_LALT);
    19c8:	82 ee       	ldi	r24, 0xE2	; 226
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	2f c0       	rjmp	.+94     	; 0x1a2c <action_for_key+0x276>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_LGUI);
        case KC_RALT:
            if (keymap_config.swap_ralt_rgui) {
    19ce:	80 91 ea 01 	lds	r24, 0x01EA
    19d2:	83 ff       	sbrs	r24, 3
    19d4:	0b c0       	rjmp	.+22     	; 0x19ec <action_for_key+0x236>
                if (keymap_config.no_gui) {
    19d6:	80 91 ea 01 	lds	r24, 0x01EA
    19da:	84 fd       	sbrc	r24, 4
    19dc:	eb cf       	rjmp	.-42     	; 0x19b4 <action_for_key+0x1fe>
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
    19de:	87 ee       	ldi	r24, 0xE7	; 231
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	24 c0       	rjmp	.+72     	; 0x1a2c <action_for_key+0x276>
            }
            return keycode_to_action(KC_RALT);
        case KC_RGUI:
            if (keymap_config.swap_ralt_rgui) {
    19e4:	80 91 ea 01 	lds	r24, 0x01EA
    19e8:	83 ff       	sbrs	r24, 3
    19ea:	f5 cf       	rjmp	.-22     	; 0x19d6 <action_for_key+0x220>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
            }
            return keycode_to_action(KC_RALT);
    19ec:	86 ee       	ldi	r24, 0xE6	; 230
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	1d c0       	rjmp	.+58     	; 0x1a2c <action_for_key+0x276>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
    19f2:	80 91 ea 01 	lds	r24, 0x01EA
    19f6:	85 ff       	sbrs	r24, 5
    19f8:	07 c0       	rjmp	.+14     	; 0x1a08 <action_for_key+0x252>
                return keycode_to_action(KC_ESC);
    19fa:	89 e2       	ldi	r24, 0x29	; 41
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	16 c0       	rjmp	.+44     	; 0x1a2c <action_for_key+0x276>
            }
            return keycode_to_action(KC_GRAVE);
        case KC_ESC:
            if (keymap_config.swap_grave_esc) {
    1a00:	80 91 ea 01 	lds	r24, 0x01EA
    1a04:	85 ff       	sbrs	r24, 5
    1a06:	f9 cf       	rjmp	.-14     	; 0x19fa <action_for_key+0x244>
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_ESC);
            }
            return keycode_to_action(KC_GRAVE);
    1a08:	85 e3       	ldi	r24, 0x35	; 53
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	0f c0       	rjmp	.+30     	; 0x1a2c <action_for_key+0x276>
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_GRAVE);
            }
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
    1a0e:	80 91 ea 01 	lds	r24, 0x01EA
    1a12:	86 ff       	sbrs	r24, 6
    1a14:	07 c0       	rjmp	.+14     	; 0x1a24 <action_for_key+0x26e>
                return keycode_to_action(KC_BSPACE);
    1a16:	8a e2       	ldi	r24, 0x2A	; 42
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	08 c0       	rjmp	.+16     	; 0x1a2c <action_for_key+0x276>
            }
            return keycode_to_action(KC_BSLASH);
        case KC_BSPACE:
            if (keymap_config.swap_backslash_backspace) {
    1a1c:	80 91 ea 01 	lds	r24, 0x01EA
    1a20:	86 ff       	sbrs	r24, 6
    1a22:	f9 cf       	rjmp	.-14     	; 0x1a16 <action_for_key+0x260>
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
                return keycode_to_action(KC_BSPACE);
            }
            return keycode_to_action(KC_BSLASH);
    1a24:	81 e3       	ldi	r24, 0x31	; 49
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	01 c0       	rjmp	.+2      	; 0x1a2c <action_for_key+0x276>
                return keycode_to_action(KC_BSLASH);
            }
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    1a2a:	c9 01       	movw	r24, r18
    1a2c:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <keycode_to_action>
    }
}
    1a30:	08 95       	ret

00001a32 <led_set>:
#include "stdint.h"
#include "led.h"


void led_set(uint8_t usb_led)
{
    1a32:	08 95       	ret

00001a34 <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    1a34:	80 91 6d 01 	lds	r24, 0x016D
    1a38:	08 95       	ret

00001a3a <sendchar>:
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
    1a3a:	9f b7       	in	r25, 0x3f	; 63
    1a3c:	f8 94       	cli
    1a3e:	10 92 5c 01 	sts	0x015C, r1
    1a42:	9f bf       	out	0x3f, r25	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1a44:	90 91 f0 01 	lds	r25, 0x01F0
    1a48:	94 30       	cpi	r25, 0x04	; 4
    1a4a:	09 f0       	breq	.+2      	; 0x1a4e <sendchar+0x14>
    1a4c:	58 c0       	rjmp	.+176    	; 0x1afe <sendchar+0xc4>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1a4e:	90 91 e9 00 	lds	r25, 0x00E9
    1a52:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1a54:	20 91 ec 00 	lds	r18, 0x00EC
    1a58:	20 ff       	sbrs	r18, 0
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <sendchar+0x26>
    1a5c:	20 e8       	ldi	r18, 0x80	; 128
    1a5e:	01 c0       	rjmp	.+2      	; 0x1a62 <sendchar+0x28>
    1a60:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1a62:	29 2b       	or	r18, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a64:	94 e0       	ldi	r25, 0x04	; 4
    1a66:	90 93 e9 00 	sts	0x00E9, r25
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1a6a:	90 91 eb 00 	lds	r25, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1a6e:	90 ff       	sbrs	r25, 0
    1a70:	43 c0       	rjmp	.+134    	; 0x1af8 <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1a72:	90 91 ee 00 	lds	r25, 0x00EE
    1a76:	97 ff       	sbrs	r25, 7
    1a78:	3f c0       	rjmp	.+126    	; 0x1af8 <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    1a7a:	90 91 5a 01 	lds	r25, 0x015A
    1a7e:	99 23       	and	r25, r25
    1a80:	21 f0       	breq	.+8      	; 0x1a8a <sendchar+0x50>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1a82:	90 91 e8 00 	lds	r25, 0x00E8
    1a86:	95 ff       	sbrs	r25, 5
    1a88:	37 c0       	rjmp	.+110    	; 0x1af8 <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    timeouted = false;
    1a8a:	10 92 5a 01 	sts	0x015A, r1

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    1a8e:	96 e0       	ldi	r25, 0x06	; 6
    1a90:	30 91 e8 00 	lds	r19, 0x00E8
    1a94:	35 fd       	sbrc	r19, 5
    1a96:	15 c0       	rjmp	.+42     	; 0x1ac2 <sendchar+0x88>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    1a98:	30 91 f0 01 	lds	r19, 0x01F0
    1a9c:	34 30       	cpi	r19, 0x04	; 4
    1a9e:	61 f5       	brne	.+88     	; 0x1af8 <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1aa0:	30 91 eb 00 	lds	r19, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
    1aa4:	35 fd       	sbrc	r19, 5
    1aa6:	28 c0       	rjmp	.+80     	; 0x1af8 <sendchar+0xbe>
    1aa8:	91 50       	subi	r25, 0x01	; 1
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
    1aaa:	21 f4       	brne	.+8      	; 0x1ab4 <sendchar+0x7a>
            timeouted = true;
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	80 93 5a 01 	sts	0x015A, r24
            goto ERROR_EXIT;
    1ab2:	22 c0       	rjmp	.+68     	; 0x1af8 <sendchar+0xbe>
    1ab4:	ef e9       	ldi	r30, 0x9F	; 159
    1ab6:	ff e0       	ldi	r31, 0x0F	; 15
    1ab8:	31 97       	sbiw	r30, 0x01	; 1
    1aba:	f1 f7       	brne	.-4      	; 0x1ab8 <sendchar+0x7e>
    1abc:	00 c0       	rjmp	.+0      	; 0x1abe <sendchar+0x84>
    1abe:	00 00       	nop
    1ac0:	e7 cf       	rjmp	.-50     	; 0x1a90 <sendchar+0x56>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1ac2:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1ac6:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
    1aca:	85 fd       	sbrc	r24, 5
    1acc:	0a c0       	rjmp	.+20     	; 0x1ae2 <sendchar+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1ace:	80 91 e8 00 	lds	r24, 0x00E8
        while (!(Endpoint_IsINReady()));
    1ad2:	80 ff       	sbrs	r24, 0
    1ad4:	fc cf       	rjmp	.-8      	; 0x1ace <sendchar+0x94>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ad6:	80 91 e8 00 	lds	r24, 0x00E8
    1ada:	8e 77       	andi	r24, 0x7E	; 126
    1adc:	80 93 e8 00 	sts	0x00E8, r24
    1ae0:	06 c0       	rjmp	.+12     	; 0x1aee <sendchar+0xb4>
        Endpoint_ClearIN();
    } else {
        CONSOLE_FLUSH_SET(true);
    1ae2:	8f b7       	in	r24, 0x3f	; 63
    1ae4:	f8 94       	cli
    1ae6:	91 e0       	ldi	r25, 0x01	; 1
    1ae8:	90 93 5c 01 	sts	0x015C, r25
    1aec:	8f bf       	out	0x3f, r24	; 63
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1aee:	2f 70       	andi	r18, 0x0F	; 15
    1af0:	20 93 e9 00 	sts	0x00E9, r18
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
    1af4:	80 e0       	ldi	r24, 0x00	; 0
    1af6:	08 95       	ret
    1af8:	2f 70       	andi	r18, 0x0F	; 15
    1afa:	20 93 e9 00 	sts	0x00E9, r18
    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);

    if (USB_DeviceState != DEVICE_STATE_Configured)
        return -1;
    1afe:	8f ef       	ldi	r24, 0xFF	; 255
    Endpoint_SelectEndpoint(ep);
    return 0;
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    1b00:	08 95       	ret

00001b02 <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    1b02:	cf 93       	push	r28
    1b04:	df 93       	push	r29
    1b06:	00 d0       	rcall	.+0      	; 0x1b08 <send_consumer+0x6>
    1b08:	1f 92       	push	r1
    1b0a:	cd b7       	in	r28, 0x3d	; 61
    1b0c:	de b7       	in	r29, 0x3e	; 62
    bluefruit_serial_send(0x00);
#endif

    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1b0e:	20 91 f0 01 	lds	r18, 0x01F0
    1b12:	24 30       	cpi	r18, 0x04	; 4
    1b14:	19 f5       	brne	.+70     	; 0x1b5c <send_consumer+0x5a>
        return;

    report_extra_t r = {
    1b16:	23 e0       	ldi	r18, 0x03	; 3
    1b18:	29 83       	std	Y+1, r18	; 0x01
    1b1a:	9b 83       	std	Y+3, r25	; 0x03
    1b1c:	8a 83       	std	Y+2, r24	; 0x02
    1b1e:	20 93 e9 00 	sts	0x00E9, r18
    1b22:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1b24:	90 91 e8 00 	lds	r25, 0x00E8
    1b28:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1b2a:	95 fd       	sbrc	r25, 5
    1b2c:	06 c0       	rjmp	.+12     	; 0x1b3a <send_consumer+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b2e:	95 ed       	ldi	r25, 0xD5	; 213
    1b30:	9a 95       	dec	r25
    1b32:	f1 f7       	brne	.-4      	; 0x1b30 <send_consumer+0x2e>
    1b34:	00 00       	nop
    1b36:	81 11       	cpse	r24, r1
    1b38:	f5 cf       	rjmp	.-22     	; 0x1b24 <send_consumer+0x22>
    1b3a:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1b3e:	85 ff       	sbrs	r24, 5
    1b40:	0d c0       	rjmp	.+26     	; 0x1b5c <send_consumer+0x5a>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    1b42:	40 e0       	ldi	r20, 0x00	; 0
    1b44:	50 e0       	ldi	r21, 0x00	; 0
    1b46:	63 e0       	ldi	r22, 0x03	; 3
    1b48:	70 e0       	ldi	r23, 0x00	; 0
    1b4a:	ce 01       	movw	r24, r28
    1b4c:	01 96       	adiw	r24, 0x01	; 1
    1b4e:	0e 94 50 10 	call	0x20a0	; 0x20a0 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b52:	80 91 e8 00 	lds	r24, 0x00E8
    1b56:	8e 77       	andi	r24, 0x7E	; 126
    1b58:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	df 91       	pop	r29
    1b64:	cf 91       	pop	r28
    1b66:	08 95       	ret

00001b68 <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    1b68:	cf 93       	push	r28
    1b6a:	df 93       	push	r29
    1b6c:	00 d0       	rcall	.+0      	; 0x1b6e <send_system+0x6>
    1b6e:	1f 92       	push	r1
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1b74:	20 91 f0 01 	lds	r18, 0x01F0
    1b78:	24 30       	cpi	r18, 0x04	; 4
    1b7a:	21 f5       	brne	.+72     	; 0x1bc4 <send_system+0x5c>
        return;

    report_extra_t r = {
    1b7c:	22 e0       	ldi	r18, 0x02	; 2
    1b7e:	29 83       	std	Y+1, r18	; 0x01
    1b80:	9b 83       	std	Y+3, r25	; 0x03
    1b82:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b84:	83 e0       	ldi	r24, 0x03	; 3
    1b86:	80 93 e9 00 	sts	0x00E9, r24
    1b8a:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1b8c:	90 91 e8 00 	lds	r25, 0x00E8
    1b90:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1b92:	95 fd       	sbrc	r25, 5
    1b94:	06 c0       	rjmp	.+12     	; 0x1ba2 <send_system+0x3a>
    1b96:	95 ed       	ldi	r25, 0xD5	; 213
    1b98:	9a 95       	dec	r25
    1b9a:	f1 f7       	brne	.-4      	; 0x1b98 <send_system+0x30>
    1b9c:	00 00       	nop
    1b9e:	81 11       	cpse	r24, r1
    1ba0:	f5 cf       	rjmp	.-22     	; 0x1b8c <send_system+0x24>
    1ba2:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1ba6:	85 ff       	sbrs	r24, 5
    1ba8:	0d c0       	rjmp	.+26     	; 0x1bc4 <send_system+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    1baa:	40 e0       	ldi	r20, 0x00	; 0
    1bac:	50 e0       	ldi	r21, 0x00	; 0
    1bae:	63 e0       	ldi	r22, 0x03	; 3
    1bb0:	70 e0       	ldi	r23, 0x00	; 0
    1bb2:	ce 01       	movw	r24, r28
    1bb4:	01 96       	adiw	r24, 0x01	; 1
    1bb6:	0e 94 50 10 	call	0x20a0	; 0x20a0 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1bba:	80 91 e8 00 	lds	r24, 0x00E8
    1bbe:	8e 77       	andi	r24, 0x7E	; 126
    1bc0:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	df 91       	pop	r29
    1bcc:	cf 91       	pop	r28
    1bce:	08 95       	ret

00001bd0 <send_mouse>:
    bluefruit_serial_send(0x00);
#endif

    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1bd0:	20 91 f0 01 	lds	r18, 0x01F0
    1bd4:	24 30       	cpi	r18, 0x04	; 4
    1bd6:	f1 f4       	brne	.+60     	; 0x1c14 <send_mouse+0x44>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1bd8:	22 e0       	ldi	r18, 0x02	; 2
    1bda:	20 93 e9 00 	sts	0x00E9, r18
    1bde:	2f ef       	ldi	r18, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1be0:	30 91 e8 00 	lds	r19, 0x00E8
    1be4:	21 50       	subi	r18, 0x01	; 1

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1be6:	35 fd       	sbrc	r19, 5
    1be8:	06 c0       	rjmp	.+12     	; 0x1bf6 <send_mouse+0x26>
    1bea:	35 ed       	ldi	r19, 0xD5	; 213
    1bec:	3a 95       	dec	r19
    1bee:	f1 f7       	brne	.-4      	; 0x1bec <send_mouse+0x1c>
    1bf0:	00 00       	nop
    1bf2:	21 11       	cpse	r18, r1
    1bf4:	f5 cf       	rjmp	.-22     	; 0x1be0 <send_mouse+0x10>
    1bf6:	20 91 e8 00 	lds	r18, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1bfa:	25 ff       	sbrs	r18, 5
    1bfc:	0b c0       	rjmp	.+22     	; 0x1c14 <send_mouse+0x44>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    1bfe:	40 e0       	ldi	r20, 0x00	; 0
    1c00:	50 e0       	ldi	r21, 0x00	; 0
    1c02:	65 e0       	ldi	r22, 0x05	; 5
    1c04:	70 e0       	ldi	r23, 0x00	; 0
    1c06:	0e 94 50 10 	call	0x20a0	; 0x20a0 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c0a:	80 91 e8 00 	lds	r24, 0x00E8
    1c0e:	8e 77       	andi	r24, 0x7E	; 126
    1c10:	80 93 e8 00 	sts	0x00E8, r24
    1c14:	08 95       	ret

00001c16 <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    1c16:	cf 93       	push	r28
    1c18:	df 93       	push	r29
    1c1a:	ec 01       	movw	r28, r24
    }
#endif

    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1c1c:	80 91 f0 01 	lds	r24, 0x01F0
    1c20:	84 30       	cpi	r24, 0x04	; 4
    1c22:	09 f0       	breq	.+2      	; 0x1c26 <send_keyboard+0x10>
    1c24:	47 c0       	rjmp	.+142    	; 0x1cb4 <send_keyboard+0x9e>
        return;

    /* Select the Keyboard Report Endpoint */
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    1c26:	80 91 0c 01 	lds	r24, 0x010C
    1c2a:	88 23       	and	r24, r24
    1c2c:	e1 f0       	breq	.+56     	; 0x1c66 <send_keyboard+0x50>
    1c2e:	80 91 0d 01 	lds	r24, 0x010D
    1c32:	88 23       	and	r24, r24
    1c34:	c1 f0       	breq	.+48     	; 0x1c66 <send_keyboard+0x50>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c36:	85 e0       	ldi	r24, 0x05	; 5
    1c38:	80 93 e9 00 	sts	0x00E9, r24
    1c3c:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1c3e:	90 91 e8 00 	lds	r25, 0x00E8
    1c42:	81 50       	subi	r24, 0x01	; 1
        /* Report protocol - NKRO */
        Endpoint_SelectEndpoint(NKRO_IN_EPNUM);

        /* Check if write ready for a polling interval around 1ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
    1c44:	95 fd       	sbrc	r25, 5
    1c46:	06 c0       	rjmp	.+12     	; 0x1c54 <send_keyboard+0x3e>
    1c48:	95 e1       	ldi	r25, 0x15	; 21
    1c4a:	9a 95       	dec	r25
    1c4c:	f1 f7       	brne	.-4      	; 0x1c4a <send_keyboard+0x34>
    1c4e:	00 00       	nop
    1c50:	81 11       	cpse	r24, r1
    1c52:	f5 cf       	rjmp	.-22     	; 0x1c3e <send_keyboard+0x28>
    1c54:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    1c58:	85 ff       	sbrs	r24, 5
    1c5a:	2c c0       	rjmp	.+88     	; 0x1cb4 <send_keyboard+0x9e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    1c5c:	40 e0       	ldi	r20, 0x00	; 0
    1c5e:	50 e0       	ldi	r21, 0x00	; 0
    1c60:	60 e1       	ldi	r22, 0x10	; 16
    1c62:	70 e0       	ldi	r23, 0x00	; 0
    1c64:	17 c0       	rjmp	.+46     	; 0x1c94 <send_keyboard+0x7e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	80 93 e9 00 	sts	0x00E9, r24
    1c6c:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1c6e:	90 91 e8 00 	lds	r25, 0x00E8
    1c72:	81 50       	subi	r24, 0x01	; 1
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1c74:	95 fd       	sbrc	r25, 5
    1c76:	06 c0       	rjmp	.+12     	; 0x1c84 <send_keyboard+0x6e>
    1c78:	95 ed       	ldi	r25, 0xD5	; 213
    1c7a:	9a 95       	dec	r25
    1c7c:	f1 f7       	brne	.-4      	; 0x1c7a <send_keyboard+0x64>
    1c7e:	00 00       	nop
    1c80:	81 11       	cpse	r24, r1
    1c82:	f5 cf       	rjmp	.-22     	; 0x1c6e <send_keyboard+0x58>
    1c84:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    1c88:	85 ff       	sbrs	r24, 5
    1c8a:	14 c0       	rjmp	.+40     	; 0x1cb4 <send_keyboard+0x9e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    1c8c:	40 e0       	ldi	r20, 0x00	; 0
    1c8e:	50 e0       	ldi	r21, 0x00	; 0
    1c90:	68 e0       	ldi	r22, 0x08	; 8
    1c92:	70 e0       	ldi	r23, 0x00	; 0
    1c94:	ce 01       	movw	r24, r28
    1c96:	0e 94 50 10 	call	0x20a0	; 0x20a0 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c9a:	80 91 e8 00 	lds	r24, 0x00E8
    1c9e:	8e 77       	andi	r24, 0x7E	; 126
    1ca0:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    1ca4:	80 e1       	ldi	r24, 0x10	; 16
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	ad e5       	ldi	r26, 0x5D	; 93
    1caa:	b1 e0       	ldi	r27, 0x01	; 1
    1cac:	01 90       	ld	r0, Z+
    1cae:	0d 92       	st	X+, r0
    1cb0:	8a 95       	dec	r24
    1cb2:	e1 f7       	brne	.-8      	; 0x1cac <send_keyboard+0x96>
}
    1cb4:	df 91       	pop	r29
    1cb6:	cf 91       	pop	r28
    1cb8:	08 95       	ret

00001cba <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    1cba:	83 e9       	ldi	r24, 0x93	; 147
    1cbc:	93 e0       	ldi	r25, 0x03	; 3
    1cbe:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    1cc2:	80 91 ef 01 	lds	r24, 0x01EF
    1cc6:	81 11       	cpse	r24, r1
    1cc8:	09 c0       	rjmp	.+18     	; 0x1cdc <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    1cca:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <USB_Disable>
        USB_Init();
    1cce:	0e 94 3f 12 	call	0x247e	; 0x247e <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    1cd2:	80 91 e2 00 	lds	r24, 0x00E2
    1cd6:	84 60       	ori	r24, 0x04	; 4
    1cd8:	80 93 e2 00 	sts	0x00E2, r24
    1cdc:	08 95       	ret

00001cde <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    1cde:	8f e8       	ldi	r24, 0x8F	; 143
    1ce0:	93 e0       	ldi	r25, 0x03	; 3
    1ce2:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    1ce6:	10 92 ef 01 	sts	0x01EF, r1
    1cea:	08 95       	ret

00001cec <EVENT_USB_Device_Reset>:
*/
}

void EVENT_USB_Device_Reset(void)
{
    print("[R]");
    1cec:	8b e8       	ldi	r24, 0x8B	; 139
    1cee:	93 e0       	ldi	r25, 0x03	; 3
    1cf0:	0c 94 54 07 	jmp	0xea8	; 0xea8 <xputs>

00001cf4 <EVENT_USB_Device_Suspend>:
}

void EVENT_USB_Device_Suspend()
{
    print("[S]");
    1cf4:	87 e8       	ldi	r24, 0x87	; 135
    1cf6:	93 e0       	ldi	r25, 0x03	; 3
    1cf8:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
#ifdef SLEEP_LED_ENABLE
    sleep_led_enable();
    1cfc:	0c 94 f2 2b 	jmp	0x57e4	; 0x57e4 <sleep_led_enable>

00001d00 <EVENT_USB_Device_WakeUp>:
#endif
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    1d00:	83 e8       	ldi	r24, 0x83	; 131
    1d02:	93 e0       	ldi	r25, 0x03	; 3
    1d04:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    suspend_wakeup_init();
    1d08:	0e 94 cc 21 	call	0x4398	; 0x4398 <suspend_wakeup_init>

#ifdef SLEEP_LED_ENABLE
    sleep_led_disable();
    1d0c:	0e 94 f8 2b 	call	0x57f0	; 0x57f0 <sleep_led_disable>
    // NOTE: converters may not accept this
    led_set(host_keyboard_leds());
    1d10:	0e 94 db 14 	call	0x29b6	; 0x29b6 <host_keyboard_leds>
    1d14:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <led_set>

00001d18 <EVENT_USB_Device_StartOfFrame>:

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    static uint8_t count;
    if (++count % 50) return;
    1d18:	80 91 5b 01 	lds	r24, 0x015B
    1d1c:	8f 5f       	subi	r24, 0xFF	; 255
    1d1e:	80 93 5b 01 	sts	0x015B, r24
    1d22:	62 e3       	ldi	r22, 0x32	; 50
    1d24:	0e 94 66 2d 	call	0x5acc	; 0x5acc <__udivmodqi4>
    1d28:	91 11       	cpse	r25, r1
    1d2a:	35 c0       	rjmp	.+106    	; 0x1d96 <EVENT_USB_Device_StartOfFrame+0x7e>
    count = 0;
    1d2c:	10 92 5b 01 	sts	0x015B, r1

    if (!console_flush) return;
    1d30:	80 91 5c 01 	lds	r24, 0x015C
    1d34:	88 23       	and	r24, r24
    1d36:	79 f1       	breq	.+94     	; 0x1d96 <EVENT_USB_Device_StartOfFrame+0x7e>
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1d38:	80 91 f0 01 	lds	r24, 0x01F0
    1d3c:	84 30       	cpi	r24, 0x04	; 4
    1d3e:	49 f5       	brne	.+82     	; 0x1d92 <EVENT_USB_Device_StartOfFrame+0x7a>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1d40:	80 91 e9 00 	lds	r24, 0x00E9
    1d44:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1d46:	90 91 ec 00 	lds	r25, 0x00EC
    1d4a:	90 ff       	sbrs	r25, 0
    1d4c:	02 c0       	rjmp	.+4      	; 0x1d52 <EVENT_USB_Device_StartOfFrame+0x3a>
    1d4e:	90 e8       	ldi	r25, 0x80	; 128
    1d50:	01 c0       	rjmp	.+2      	; 0x1d54 <EVENT_USB_Device_StartOfFrame+0x3c>
    1d52:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1d54:	98 2b       	or	r25, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d56:	84 e0       	ldi	r24, 0x04	; 4
    1d58:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1d5c:	80 91 eb 00 	lds	r24, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1d60:	80 ff       	sbrs	r24, 0
    1d62:	14 c0       	rjmp	.+40     	; 0x1d8c <EVENT_USB_Device_StartOfFrame+0x74>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1d64:	80 91 ee 00 	lds	r24, 0x00EE
    1d68:	87 ff       	sbrs	r24, 7
    1d6a:	10 c0       	rjmp	.+32     	; 0x1d8c <EVENT_USB_Device_StartOfFrame+0x74>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1d6c:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    1d70:	85 ff       	sbrs	r24, 5
    1d72:	03 c0       	rjmp	.+6      	; 0x1d7a <EVENT_USB_Device_StartOfFrame+0x62>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1d74:	10 92 f1 00 	sts	0x00F1, r1
    1d78:	f9 cf       	rjmp	.-14     	; 0x1d6c <EVENT_USB_Device_StartOfFrame+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1d7a:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    1d7e:	80 ff       	sbrs	r24, 0
    1d80:	05 c0       	rjmp	.+10     	; 0x1d8c <EVENT_USB_Device_StartOfFrame+0x74>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1d82:	80 91 e8 00 	lds	r24, 0x00E8
    1d86:	8e 77       	andi	r24, 0x7E	; 126
    1d88:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d8c:	9f 70       	andi	r25, 0x0F	; 15
    1d8e:	90 93 e9 00 	sts	0x00E9, r25
    if (++count % 50) return;
    count = 0;

    if (!console_flush) return;
    Console_Task();
    console_flush = false;
    1d92:	10 92 5c 01 	sts	0x015C, r1
    1d96:	08 95       	ret

00001d98 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1d98:	42 e0       	ldi	r20, 0x02	; 2
    1d9a:	61 ec       	ldi	r22, 0xC1	; 193
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <Endpoint_ConfigureEndpoint_Prv>
    1da2:	42 e0       	ldi	r20, 0x02	; 2
    1da4:	61 ec       	ldi	r22, 0xC1	; 193
    1da6:	82 e0       	ldi	r24, 0x02	; 2
    1da8:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <Endpoint_ConfigureEndpoint_Prv>
    1dac:	42 e0       	ldi	r20, 0x02	; 2
    1dae:	61 ec       	ldi	r22, 0xC1	; 193
    1db0:	83 e0       	ldi	r24, 0x03	; 3
    1db2:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <Endpoint_ConfigureEndpoint_Prv>
    1db6:	42 e2       	ldi	r20, 0x22	; 34
    1db8:	61 ec       	ldi	r22, 0xC1	; 193
    1dba:	84 e0       	ldi	r24, 0x04	; 4
    1dbc:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <Endpoint_ConfigureEndpoint_Prv>
    1dc0:	42 e1       	ldi	r20, 0x12	; 18
    1dc2:	61 ec       	ldi	r22, 0xC1	; 193
    1dc4:	85 e0       	ldi	r24, 0x05	; 5
    1dc6:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <Endpoint_ConfigureEndpoint_Prv>

00001dca <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    1dca:	80 91 f2 01 	lds	r24, 0x01F2
    1dce:	83 30       	cpi	r24, 0x03	; 3
    1dd0:	09 f4       	brne	.+2      	; 0x1dd4 <EVENT_USB_Device_ControlRequest+0xa>
    1dd2:	55 c0       	rjmp	.+170    	; 0x1e7e <EVENT_USB_Device_ControlRequest+0xb4>
    1dd4:	30 f4       	brcc	.+12     	; 0x1de2 <EVENT_USB_Device_ControlRequest+0x18>
    1dd6:	81 30       	cpi	r24, 0x01	; 1
    1dd8:	71 f0       	breq	.+28     	; 0x1df6 <EVENT_USB_Device_ControlRequest+0x2c>
    1dda:	82 30       	cpi	r24, 0x02	; 2
    1ddc:	09 f4       	brne	.+2      	; 0x1de0 <EVENT_USB_Device_ControlRequest+0x16>
    1dde:	8e c0       	rjmp	.+284    	; 0x1efc <EVENT_USB_Device_ControlRequest+0x132>
    1de0:	08 95       	ret
    1de2:	8a 30       	cpi	r24, 0x0A	; 10
    1de4:	09 f4       	brne	.+2      	; 0x1de8 <EVENT_USB_Device_ControlRequest+0x1e>
    1de6:	7a c0       	rjmp	.+244    	; 0x1edc <EVENT_USB_Device_ControlRequest+0x112>
    1de8:	8b 30       	cpi	r24, 0x0B	; 11
    1dea:	09 f4       	brne	.+2      	; 0x1dee <EVENT_USB_Device_ControlRequest+0x24>
    1dec:	60 c0       	rjmp	.+192    	; 0x1eae <EVENT_USB_Device_ControlRequest+0xe4>
    1dee:	89 30       	cpi	r24, 0x09	; 9
    1df0:	09 f0       	breq	.+2      	; 0x1df4 <EVENT_USB_Device_ControlRequest+0x2a>
    1df2:	9c c0       	rjmp	.+312    	; 0x1f2c <EVENT_USB_Device_ControlRequest+0x162>
    1df4:	20 c0       	rjmp	.+64     	; 0x1e36 <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1df6:	80 91 f1 01 	lds	r24, 0x01F1
    1dfa:	81 3a       	cpi	r24, 0xA1	; 161
    1dfc:	09 f0       	breq	.+2      	; 0x1e00 <EVENT_USB_Device_ControlRequest+0x36>
    1dfe:	96 c0       	rjmp	.+300    	; 0x1f2c <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e00:	80 91 e8 00 	lds	r24, 0x00E8
    1e04:	87 7f       	andi	r24, 0xF7	; 247
    1e06:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    1e0a:	80 91 f5 01 	lds	r24, 0x01F5
    1e0e:	90 91 f6 01 	lds	r25, 0x01F6
    1e12:	89 2b       	or	r24, r25
    1e14:	21 f0       	breq	.+8      	; 0x1e1e <EVENT_USB_Device_ControlRequest+0x54>
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;
    1e16:	60 e0       	ldi	r22, 0x00	; 0
/** Event handler for the USB_ControlRequest event.
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	03 c0       	rjmp	.+6      	; 0x1e24 <EVENT_USB_Device_ControlRequest+0x5a>
                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
                    ReportSize = sizeof(keyboard_report_sent);
    1e1e:	60 e1       	ldi	r22, 0x10	; 16

                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
    1e20:	8d e5       	ldi	r24, 0x5D	; 93
    1e22:	91 e0       	ldi	r25, 0x01	; 1
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1e24:	70 e0       	ldi	r23, 0x00	; 0
    1e26:	0e 94 99 10 	call	0x2132	; 0x2132 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1e2a:	80 91 e8 00 	lds	r24, 0x00E8
    1e2e:	8b 77       	andi	r24, 0x7B	; 123
    1e30:	80 93 e8 00 	sts	0x00E8, r24
    1e34:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1e36:	80 91 f1 01 	lds	r24, 0x01F1
    1e3a:	81 32       	cpi	r24, 0x21	; 33
    1e3c:	09 f0       	breq	.+2      	; 0x1e40 <EVENT_USB_Device_ControlRequest+0x76>
    1e3e:	76 c0       	rjmp	.+236    	; 0x1f2c <EVENT_USB_Device_ControlRequest+0x162>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    1e40:	80 91 f5 01 	lds	r24, 0x01F5
    1e44:	90 91 f6 01 	lds	r25, 0x01F6
    1e48:	00 97       	sbiw	r24, 0x00	; 0
    1e4a:	19 f0       	breq	.+6      	; 0x1e52 <EVENT_USB_Device_ControlRequest+0x88>
    1e4c:	04 97       	sbiw	r24, 0x04	; 4
    1e4e:	09 f0       	breq	.+2      	; 0x1e52 <EVENT_USB_Device_ControlRequest+0x88>
    1e50:	6d c0       	rjmp	.+218    	; 0x1f2c <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e52:	80 91 e8 00 	lds	r24, 0x00E8
    1e56:	87 7f       	andi	r24, 0xF7	; 247
    1e58:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1e5c:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    1e60:	82 fd       	sbrc	r24, 2
    1e62:	05 c0       	rjmp	.+10     	; 0x1e6e <EVENT_USB_Device_ControlRequest+0xa4>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    1e64:	80 91 f0 01 	lds	r24, 0x01F0
    1e68:	81 11       	cpse	r24, r1
    1e6a:	f8 cf       	rjmp	.-16     	; 0x1e5c <EVENT_USB_Device_ControlRequest+0x92>
    1e6c:	5f c0       	rjmp	.+190    	; 0x1f2c <EVENT_USB_Device_ControlRequest+0x162>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1e6e:	80 91 f1 00 	lds	r24, 0x00F1
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    1e72:	80 93 6d 01 	sts	0x016D, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1e76:	80 91 e8 00 	lds	r24, 0x00E8
    1e7a:	8b 77       	andi	r24, 0x7B	; 123
    1e7c:	53 c0       	rjmp	.+166    	; 0x1f24 <EVENT_USB_Device_ControlRequest+0x15a>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1e7e:	80 91 f1 01 	lds	r24, 0x01F1
    1e82:	81 3a       	cpi	r24, 0xA1	; 161
    1e84:	09 f0       	breq	.+2      	; 0x1e88 <EVENT_USB_Device_ControlRequest+0xbe>
    1e86:	52 c0       	rjmp	.+164    	; 0x1f2c <EVENT_USB_Device_ControlRequest+0x162>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1e88:	80 91 f5 01 	lds	r24, 0x01F5
    1e8c:	90 91 f6 01 	lds	r25, 0x01F6
    1e90:	89 2b       	or	r24, r25
    1e92:	09 f0       	breq	.+2      	; 0x1e96 <EVENT_USB_Device_ControlRequest+0xcc>
    1e94:	4b c0       	rjmp	.+150    	; 0x1f2c <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e96:	80 91 e8 00 	lds	r24, 0x00E8
    1e9a:	87 7f       	andi	r24, 0xF7	; 247
    1e9c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1ea0:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    1ea4:	80 ff       	sbrs	r24, 0
    1ea6:	fc cf       	rjmp	.-8      	; 0x1ea0 <EVENT_USB_Device_ControlRequest+0xd6>
                    Endpoint_Write_8(keyboard_protocol);
    1ea8:	80 91 0c 01 	lds	r24, 0x010C
    1eac:	36 c0       	rjmp	.+108    	; 0x1f1a <EVENT_USB_Device_ControlRequest+0x150>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1eae:	80 91 f1 01 	lds	r24, 0x01F1
    1eb2:	81 32       	cpi	r24, 0x21	; 33
    1eb4:	d9 f5       	brne	.+118    	; 0x1f2c <EVENT_USB_Device_ControlRequest+0x162>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1eb6:	80 91 f5 01 	lds	r24, 0x01F5
    1eba:	90 91 f6 01 	lds	r25, 0x01F6
    1ebe:	89 2b       	or	r24, r25
    1ec0:	a9 f5       	brne	.+106    	; 0x1f2c <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ec2:	80 91 e8 00 	lds	r24, 0x00E8
    1ec6:	87 7f       	andi	r24, 0xF7	; 247
    1ec8:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    1ecc:	0e 94 91 11 	call	0x2322	; 0x2322 <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    1ed0:	80 91 f3 01 	lds	r24, 0x01F3
    1ed4:	80 93 0c 01 	sts	0x010C, r24
                    clear_keyboard();
    1ed8:	0c 94 a0 1a 	jmp	0x3540	; 0x3540 <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1edc:	80 91 f1 01 	lds	r24, 0x01F1
    1ee0:	81 32       	cpi	r24, 0x21	; 33
    1ee2:	21 f5       	brne	.+72     	; 0x1f2c <EVENT_USB_Device_ControlRequest+0x162>
    1ee4:	80 91 e8 00 	lds	r24, 0x00E8
    1ee8:	87 7f       	andi	r24, 0xF7	; 247
    1eea:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    1eee:	0e 94 91 11 	call	0x2322	; 0x2322 <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    1ef2:	80 91 f4 01 	lds	r24, 0x01F4
    1ef6:	80 93 6e 01 	sts	0x016E, r24
    1efa:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1efc:	80 91 f1 01 	lds	r24, 0x01F1
    1f00:	81 3a       	cpi	r24, 0xA1	; 161
    1f02:	a1 f4       	brne	.+40     	; 0x1f2c <EVENT_USB_Device_ControlRequest+0x162>
    1f04:	80 91 e8 00 	lds	r24, 0x00E8
    1f08:	87 7f       	andi	r24, 0xF7	; 247
    1f0a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1f0e:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    1f12:	80 ff       	sbrs	r24, 0
    1f14:	fc cf       	rjmp	.-8      	; 0x1f0e <EVENT_USB_Device_ControlRequest+0x144>
                Endpoint_Write_8(keyboard_idle);
    1f16:	80 91 6e 01 	lds	r24, 0x016E
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1f1a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f1e:	80 91 e8 00 	lds	r24, 0x00E8
    1f22:	8e 77       	andi	r24, 0x7E	; 126
    1f24:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    1f28:	0c 94 91 11 	jmp	0x2322	; 0x2322 <Endpoint_ClearStatusStage>
    1f2c:	08 95       	ret

00001f2e <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    1f2e:	84 b7       	in	r24, 0x34	; 52
    1f30:	87 7f       	andi	r24, 0xF7	; 247
    1f32:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
    1f34:	88 e1       	ldi	r24, 0x18	; 24
    1f36:	0f b6       	in	r0, 0x3f	; 63
    1f38:	f8 94       	cli
    1f3a:	80 93 60 00 	sts	0x0060, r24
    1f3e:	10 92 60 00 	sts	0x0060, r1
    1f42:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	80 e8       	ldi	r24, 0x80	; 128
    1f48:	0f b6       	in	r0, 0x3f	; 63
    1f4a:	f8 94       	cli
    1f4c:	80 93 61 00 	sts	0x0061, r24
    1f50:	90 93 61 00 	sts	0x0061, r25
    1f54:	0f be       	out	0x3f, r0	; 63
    midi_device_set_send_func(&midi_device, usb_send_func);
    midi_device_set_pre_input_process_func(&midi_device, usb_get_midi);
#endif

    setup_mcu();
    keyboard_setup();
    1f56:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    1f5a:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <USB_Disable>

    USB_Init();
    1f5e:	0e 94 3f 12 	call	0x247e	; 0x247e <USB_Init>
    1f62:	80 91 e2 00 	lds	r24, 0x00E2
    1f66:	84 60       	ori	r24, 0x04	; 4
    1f68:	80 93 e2 00 	sts	0x00E2, r24

    // for Console_Task
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar);
    1f6c:	8d e1       	ldi	r24, 0x1D	; 29
    1f6e:	9d e0       	ldi	r25, 0x0D	; 13
    1f70:	0e 94 0b 21 	call	0x4216	; 0x4216 <print_set_sendchar>
#endif

    setup_mcu();
    keyboard_setup();
    setup_usb();
    sei();
    1f74:	78 94       	sei
            USB_USBTask();
    #endif
    }
    print("USB configured.\n");
#else
    USB_USBTask();
    1f76:	0e 94 b9 14 	call	0x2972	; 0x2972 <USB_USBTask>
#endif
    /* init modules */
    keyboard_init();
    1f7a:	0e 94 66 15 	call	0x2acc	; 0x2acc <keyboard_init>
    host_set_driver(&lufa_driver);
    1f7e:	82 e0       	ldi	r24, 0x02	; 2
    1f80:	91 e0       	ldi	r25, 0x01	; 1
    1f82:	0e 94 d6 14 	call	0x29ac	; 0x29ac <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
    1f86:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <sleep_led_init>
#endif

    print("Keyboard start.\n");
    1f8a:	82 e7       	ldi	r24, 0x72	; 114
    1f8c:	93 e0       	ldi	r25, 0x03	; 3
    1f8e:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    while (1) {
        #ifndef BLUETOOTH_ENABLE
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    1f92:	80 91 f0 01 	lds	r24, 0x01F0
    1f96:	85 30       	cpi	r24, 0x05	; 5
    1f98:	89 f4       	brne	.+34     	; 0x1fbc <main+0x8e>
            print("[s]");
    1f9a:	8e e6       	ldi	r24, 0x6E	; 110
    1f9c:	93 e0       	ldi	r25, 0x03	; 3
    1f9e:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
            suspend_power_down();
    1fa2:	0e 94 8f 21 	call	0x431e	; 0x431e <suspend_power_down>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    1fa6:	80 91 ee 01 	lds	r24, 0x01EE
    1faa:	88 23       	and	r24, r24
    1fac:	91 f3       	breq	.-28     	; 0x1f92 <main+0x64>
    1fae:	0e 94 b7 21 	call	0x436e	; 0x436e <suspend_wakeup_condition>
    1fb2:	88 23       	and	r24, r24
    1fb4:	71 f3       	breq	.-36     	; 0x1f92 <main+0x64>
                    USB_Device_SendRemoteWakeup();
    1fb6:	0e 94 3a 10 	call	0x2074	; 0x2074 <USB_Device_SendRemoteWakeup>
    1fba:	eb cf       	rjmp	.-42     	; 0x1f92 <main+0x64>

#ifdef MIDI_ENABLE
        midi_device_process(&midi_device);
        // MIDI_Task();
#endif
        keyboard_task();
    1fbc:	0e 94 94 15 	call	0x2b28	; 0x2b28 <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
    1fc0:	e8 cf       	rjmp	.-48     	; 0x1f92 <main+0x64>

00001fc2 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    1fc2:	29 2f       	mov	r18, r25
    1fc4:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    1fc6:	23 30       	cpi	r18, 0x03	; 3
    1fc8:	31 05       	cpc	r19, r1
    1fca:	a9 f0       	breq	.+42     	; 0x1ff6 <CALLBACK_USB_GetDescriptor+0x34>
    1fcc:	6c f4       	brge	.+26     	; 0x1fe8 <CALLBACK_USB_GetDescriptor+0x26>
    1fce:	21 30       	cpi	r18, 0x01	; 1
    1fd0:	31 05       	cpc	r19, r1
    1fd2:	09 f4       	brne	.+2      	; 0x1fd6 <CALLBACK_USB_GetDescriptor+0x14>
    1fd4:	42 c0       	rjmp	.+132    	; 0x205a <CALLBACK_USB_GetDescriptor+0x98>
    1fd6:	22 30       	cpi	r18, 0x02	; 2
    1fd8:	31 05       	cpc	r19, r1
    1fda:	09 f0       	breq	.+2      	; 0x1fde <CALLBACK_USB_GetDescriptor+0x1c>
    1fdc:	43 c0       	rjmp	.+134    	; 0x2064 <CALLBACK_USB_GetDescriptor+0xa2>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    1fde:	8d e8       	ldi	r24, 0x8D	; 141
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    1fe2:	2b ec       	ldi	r18, 0xCB	; 203
    1fe4:	33 e0       	ldi	r19, 0x03	; 3
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    1fe6:	42 c0       	rjmp	.+132    	; 0x206c <CALLBACK_USB_GetDescriptor+0xaa>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    1fe8:	21 32       	cpi	r18, 0x21	; 33
    1fea:	31 05       	cpc	r19, r1
    1fec:	c9 f0       	breq	.+50     	; 0x2020 <CALLBACK_USB_GetDescriptor+0x5e>
    1fee:	22 32       	cpi	r18, 0x22	; 34
    1ff0:	31 05       	cpc	r19, r1
    1ff2:	19 f1       	breq	.+70     	; 0x203a <CALLBACK_USB_GetDescriptor+0x78>
    1ff4:	37 c0       	rjmp	.+110    	; 0x2064 <CALLBACK_USB_GetDescriptor+0xa2>
    1ff6:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    1ff8:	81 30       	cpi	r24, 0x01	; 1
    1ffa:	91 05       	cpc	r25, r1
    1ffc:	41 f0       	breq	.+16     	; 0x200e <CALLBACK_USB_GetDescriptor+0x4c>
    1ffe:	82 30       	cpi	r24, 0x02	; 2
    2000:	91 05       	cpc	r25, r1
    2002:	41 f0       	breq	.+16     	; 0x2014 <CALLBACK_USB_GetDescriptor+0x52>
    2004:	89 2b       	or	r24, r25
    2006:	71 f5       	brne	.+92     	; 0x2064 <CALLBACK_USB_GetDescriptor+0xa2>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    2008:	e7 ec       	ldi	r30, 0xC7	; 199
    200a:	f3 e0       	ldi	r31, 0x03	; 3
    200c:	05 c0       	rjmp	.+10     	; 0x2018 <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    200e:	ef ea       	ldi	r30, 0xAF	; 175
    2010:	f3 e0       	ldi	r31, 0x03	; 3
    2012:	02 c0       	rjmp	.+4      	; 0x2018 <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    2014:	e7 e9       	ldi	r30, 0x97	; 151
    2016:	f3 e0       	ldi	r31, 0x03	; 3
    2018:	84 91       	lpm	r24, Z
    201a:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    201c:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    201e:	26 c0       	rjmp	.+76     	; 0x206c <CALLBACK_USB_GetDescriptor+0xaa>
    2020:	65 30       	cpi	r22, 0x05	; 5
    2022:	00 f5       	brcc	.+64     	; 0x2064 <CALLBACK_USB_GetDescriptor+0xa2>
    2024:	e6 2f       	mov	r30, r22
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	ee 0f       	add	r30, r30
    202a:	ff 1f       	adc	r31, r31
    202c:	eb 5d       	subi	r30, 0xDB	; 219
    202e:	fe 4f       	sbci	r31, 0xFE	; 254
    2030:	20 81       	ld	r18, Z
    2032:	31 81       	ldd	r19, Z+1	; 0x01
    2034:	89 e0       	ldi	r24, 0x09	; 9
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	19 c0       	rjmp	.+50     	; 0x206c <CALLBACK_USB_GetDescriptor+0xaa>
    203a:	65 30       	cpi	r22, 0x05	; 5
    203c:	98 f4       	brcc	.+38     	; 0x2064 <CALLBACK_USB_GetDescriptor+0xa2>
    203e:	e6 2f       	mov	r30, r22
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	df 01       	movw	r26, r30
    2044:	aa 0f       	add	r26, r26
    2046:	bb 1f       	adc	r27, r27
    2048:	a5 5e       	subi	r26, 0xE5	; 229
    204a:	be 4f       	sbci	r27, 0xFE	; 254
    204c:	2d 91       	ld	r18, X+
    204e:	3c 91       	ld	r19, X
    2050:	ea 5e       	subi	r30, 0xEA	; 234
    2052:	fe 4f       	sbci	r31, 0xFE	; 254
    2054:	80 81       	ld	r24, Z
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	09 c0       	rjmp	.+18     	; 0x206c <CALLBACK_USB_GetDescriptor+0xaa>

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    205a:	82 e1       	ldi	r24, 0x12	; 18
    205c:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    205e:	28 e5       	ldi	r18, 0x58	; 88
    2060:	34 e0       	ldi	r19, 0x04	; 4
    2062:	04 c0       	rjmp	.+8      	; 0x206c <CALLBACK_USB_GetDescriptor+0xaa>
    2064:	80 e0       	ldi	r24, 0x00	; 0
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    206c:	fa 01       	movw	r30, r20
    206e:	31 83       	std	Z+1, r19	; 0x01
    2070:	20 83       	st	Z, r18
    return Size;
}
    2072:	08 95       	ret

00002074 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2074:	80 e1       	ldi	r24, 0x10	; 16
    2076:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2078:	82 e1       	ldi	r24, 0x12	; 18
    207a:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    207c:	09 b4       	in	r0, 0x29	; 41
    207e:	00 fe       	sbrs	r0, 0
    2080:	fd cf       	rjmp	.-6      	; 0x207c <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2082:	80 91 d8 00 	lds	r24, 0x00D8
    2086:	8f 7d       	andi	r24, 0xDF	; 223
    2088:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    208c:	80 91 e0 00 	lds	r24, 0x00E0
    2090:	82 60       	ori	r24, 0x02	; 2
    2092:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    2096:	80 91 e0 00 	lds	r24, 0x00E0
    209a:	81 fd       	sbrc	r24, 1
    209c:	fc cf       	rjmp	.-8      	; 0x2096 <USB_Device_SendRemoteWakeup+0x22>
}
    209e:	08 95       	ret

000020a0 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    20a0:	cf 92       	push	r12
    20a2:	df 92       	push	r13
    20a4:	ef 92       	push	r14
    20a6:	ff 92       	push	r15
    20a8:	0f 93       	push	r16
    20aa:	1f 93       	push	r17
    20ac:	cf 93       	push	r28
    20ae:	df 93       	push	r29
    20b0:	7c 01       	movw	r14, r24
    20b2:	8b 01       	movw	r16, r22
    20b4:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    20b6:	0e 94 b2 11 	call	0x2364	; 0x2364 <Endpoint_WaitUntilReady>
    20ba:	81 11       	cpse	r24, r1
    20bc:	31 c0       	rjmp	.+98     	; 0x2120 <Endpoint_Write_Stream_LE+0x80>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    20be:	20 97       	sbiw	r28, 0x00	; 0
    20c0:	31 f0       	breq	.+12     	; 0x20ce <Endpoint_Write_Stream_LE+0x2e>
	{
		Length -= *BytesProcessed;
    20c2:	88 81       	ld	r24, Y
    20c4:	99 81       	ldd	r25, Y+1	; 0x01
    20c6:	08 1b       	sub	r16, r24
    20c8:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    20ca:	e8 0e       	add	r14, r24
    20cc:	f9 1e       	adc	r15, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    20ce:	c1 2c       	mov	r12, r1
    20d0:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    20d2:	01 15       	cp	r16, r1
    20d4:	11 05       	cpc	r17, r1
    20d6:	19 f1       	breq	.+70     	; 0x211e <Endpoint_Write_Stream_LE+0x7e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    20d8:	80 91 e8 00 	lds	r24, 0x00E8
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    20dc:	85 fd       	sbrc	r24, 5
    20de:	14 c0       	rjmp	.+40     	; 0x2108 <Endpoint_Write_Stream_LE+0x68>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    20e0:	80 91 e8 00 	lds	r24, 0x00E8
    20e4:	8e 77       	andi	r24, 0x7E	; 126
    20e6:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    20ea:	20 97       	sbiw	r28, 0x00	; 0
    20ec:	41 f0       	breq	.+16     	; 0x20fe <Endpoint_Write_Stream_LE+0x5e>
			{
				*BytesProcessed += BytesInTransfer;
    20ee:	88 81       	ld	r24, Y
    20f0:	99 81       	ldd	r25, Y+1	; 0x01
    20f2:	8c 0d       	add	r24, r12
    20f4:	9d 1d       	adc	r25, r13
    20f6:	99 83       	std	Y+1, r25	; 0x01
    20f8:	88 83       	st	Y, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    20fa:	85 e0       	ldi	r24, 0x05	; 5
    20fc:	11 c0       	rjmp	.+34     	; 0x2120 <Endpoint_Write_Stream_LE+0x80>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    20fe:	0e 94 b2 11 	call	0x2364	; 0x2364 <Endpoint_WaitUntilReady>
    2102:	88 23       	and	r24, r24
    2104:	31 f3       	breq	.-52     	; 0x20d2 <Endpoint_Write_Stream_LE+0x32>
    2106:	0c c0       	rjmp	.+24     	; 0x2120 <Endpoint_Write_Stream_LE+0x80>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    2108:	f7 01       	movw	r30, r14
    210a:	81 91       	ld	r24, Z+
    210c:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    210e:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    2112:	01 50       	subi	r16, 0x01	; 1
    2114:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    2116:	ff ef       	ldi	r31, 0xFF	; 255
    2118:	cf 1a       	sub	r12, r31
    211a:	df 0a       	sbc	r13, r31
    211c:	da cf       	rjmp	.-76     	; 0x20d2 <Endpoint_Write_Stream_LE+0x32>
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    211e:	80 e0       	ldi	r24, 0x00	; 0
}
    2120:	df 91       	pop	r29
    2122:	cf 91       	pop	r28
    2124:	1f 91       	pop	r17
    2126:	0f 91       	pop	r16
    2128:	ff 90       	pop	r15
    212a:	ef 90       	pop	r14
    212c:	df 90       	pop	r13
    212e:	cf 90       	pop	r12
    2130:	08 95       	ret

00002132 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    2132:	20 91 f7 01 	lds	r18, 0x01F7
    2136:	30 91 f8 01 	lds	r19, 0x01F8
    213a:	26 17       	cp	r18, r22
    213c:	37 07       	cpc	r19, r23
    213e:	48 f0       	brcs	.+18     	; 0x2152 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    2140:	61 15       	cp	r22, r1
    2142:	71 05       	cpc	r23, r1
    2144:	39 f4       	brne	.+14     	; 0x2154 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2146:	20 91 e8 00 	lds	r18, 0x00E8
    214a:	2e 77       	andi	r18, 0x7E	; 126
    214c:	20 93 e8 00 	sts	0x00E8, r18
    2150:	01 c0       	rjmp	.+2      	; 0x2154 <Endpoint_Write_Control_Stream_LE+0x22>
    2152:	b9 01       	movw	r22, r18
    2154:	fc 01       	movw	r30, r24
    2156:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    2158:	61 15       	cp	r22, r1
    215a:	71 05       	cpc	r23, r1
    215c:	b9 f1       	breq	.+110    	; 0x21cc <Endpoint_Write_Control_Stream_LE+0x9a>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    215e:	80 91 f0 01 	lds	r24, 0x01F0

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2162:	88 23       	and	r24, r24
    2164:	09 f4       	brne	.+2      	; 0x2168 <Endpoint_Write_Control_Stream_LE+0x36>
    2166:	40 c0       	rjmp	.+128    	; 0x21e8 <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2168:	85 30       	cpi	r24, 0x05	; 5
    216a:	09 f4       	brne	.+2      	; 0x216e <Endpoint_Write_Control_Stream_LE+0x3c>
    216c:	3f c0       	rjmp	.+126    	; 0x21ec <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    216e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2172:	83 fd       	sbrc	r24, 3
    2174:	3d c0       	rjmp	.+122    	; 0x21f0 <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2176:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    217a:	82 ff       	sbrs	r24, 2
    217c:	06 c0       	rjmp	.+12     	; 0x218a <Endpoint_Write_Control_Stream_LE+0x58>
    217e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    2182:	82 ff       	sbrs	r24, 2
    2184:	26 c0       	rjmp	.+76     	; 0x21d2 <Endpoint_Write_Control_Stream_LE+0xa0>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    218a:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    218e:	80 ff       	sbrs	r24, 0
    2190:	e3 cf       	rjmp	.-58     	; 0x2158 <Endpoint_Write_Control_Stream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    2192:	20 91 f3 00 	lds	r18, 0x00F3
    2196:	80 91 f2 00 	lds	r24, 0x00F2
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    219e:	61 15       	cp	r22, r1
    21a0:	71 05       	cpc	r23, r1
    21a2:	51 f0       	breq	.+20     	; 0x21b8 <Endpoint_Write_Control_Stream_LE+0x86>
    21a4:	88 30       	cpi	r24, 0x08	; 8
    21a6:	91 05       	cpc	r25, r1
    21a8:	38 f4       	brcc	.+14     	; 0x21b8 <Endpoint_Write_Control_Stream_LE+0x86>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    21aa:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    21ac:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    21b0:	61 50       	subi	r22, 0x01	; 1
    21b2:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    21b4:	01 96       	adiw	r24, 0x01	; 1
    21b6:	f3 cf       	rjmp	.-26     	; 0x219e <Endpoint_Write_Control_Stream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    21b8:	21 e0       	ldi	r18, 0x01	; 1
    21ba:	08 97       	sbiw	r24, 0x08	; 8
    21bc:	09 f0       	breq	.+2      	; 0x21c0 <Endpoint_Write_Control_Stream_LE+0x8e>
    21be:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    21c0:	80 91 e8 00 	lds	r24, 0x00E8
    21c4:	8e 77       	andi	r24, 0x7E	; 126
    21c6:	80 93 e8 00 	sts	0x00E8, r24
    21ca:	c6 cf       	rjmp	.-116    	; 0x2158 <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    21cc:	21 11       	cpse	r18, r1
    21ce:	c7 cf       	rjmp	.-114    	; 0x215e <Endpoint_Write_Control_Stream_LE+0x2c>
    21d0:	d6 cf       	rjmp	.-84     	; 0x217e <Endpoint_Write_Control_Stream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    21d2:	80 91 f0 01 	lds	r24, 0x01F0

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    21d6:	88 23       	and	r24, r24
    21d8:	39 f0       	breq	.+14     	; 0x21e8 <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    21da:	85 30       	cpi	r24, 0x05	; 5
    21dc:	39 f0       	breq	.+14     	; 0x21ec <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    21de:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    21e2:	83 ff       	sbrs	r24, 3
    21e4:	cc cf       	rjmp	.-104    	; 0x217e <Endpoint_Write_Control_Stream_LE+0x4c>
    21e6:	04 c0       	rjmp	.+8      	; 0x21f0 <Endpoint_Write_Control_Stream_LE+0xbe>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    21e8:	82 e0       	ldi	r24, 0x02	; 2
    21ea:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    21ec:	83 e0       	ldi	r24, 0x03	; 3
    21ee:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    21f0:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    21f2:	08 95       	ret

000021f4 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    21f4:	20 91 f7 01 	lds	r18, 0x01F7
    21f8:	30 91 f8 01 	lds	r19, 0x01F8
    21fc:	26 17       	cp	r18, r22
    21fe:	37 07       	cpc	r19, r23
    2200:	48 f0       	brcs	.+18     	; 0x2214 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    2202:	61 15       	cp	r22, r1
    2204:	71 05       	cpc	r23, r1
    2206:	39 f4       	brne	.+14     	; 0x2216 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2208:	20 91 e8 00 	lds	r18, 0x00E8
    220c:	2e 77       	andi	r18, 0x7E	; 126
    220e:	20 93 e8 00 	sts	0x00E8, r18
    2212:	01 c0       	rjmp	.+2      	; 0x2216 <Endpoint_Write_Control_PStream_LE+0x22>
    2214:	b9 01       	movw	r22, r18
    2216:	fc 01       	movw	r30, r24
    2218:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    221a:	61 15       	cp	r22, r1
    221c:	71 05       	cpc	r23, r1
    221e:	c1 f1       	breq	.+112    	; 0x2290 <Endpoint_Write_Control_PStream_LE+0x9c>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2220:	80 91 f0 01 	lds	r24, 0x01F0

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2224:	88 23       	and	r24, r24
    2226:	09 f4       	brne	.+2      	; 0x222a <Endpoint_Write_Control_PStream_LE+0x36>
    2228:	41 c0       	rjmp	.+130    	; 0x22ac <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    222a:	85 30       	cpi	r24, 0x05	; 5
    222c:	09 f4       	brne	.+2      	; 0x2230 <Endpoint_Write_Control_PStream_LE+0x3c>
    222e:	40 c0       	rjmp	.+128    	; 0x22b0 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2230:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2234:	83 fd       	sbrc	r24, 3
    2236:	3e c0       	rjmp	.+124    	; 0x22b4 <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2238:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    223c:	82 ff       	sbrs	r24, 2
    223e:	06 c0       	rjmp	.+12     	; 0x224c <Endpoint_Write_Control_PStream_LE+0x58>
    2240:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    2244:	82 ff       	sbrs	r24, 2
    2246:	27 c0       	rjmp	.+78     	; 0x2296 <Endpoint_Write_Control_PStream_LE+0xa2>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    224c:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    2250:	80 ff       	sbrs	r24, 0
    2252:	e3 cf       	rjmp	.-58     	; 0x221a <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    2254:	20 91 f3 00 	lds	r18, 0x00F3
    2258:	80 91 f2 00 	lds	r24, 0x00F2
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2260:	61 15       	cp	r22, r1
    2262:	71 05       	cpc	r23, r1
    2264:	59 f0       	breq	.+22     	; 0x227c <Endpoint_Write_Control_PStream_LE+0x88>
    2266:	88 30       	cpi	r24, 0x08	; 8
    2268:	91 05       	cpc	r25, r1
    226a:	40 f4       	brcc	.+16     	; 0x227c <Endpoint_Write_Control_PStream_LE+0x88>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    226c:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    226e:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    2272:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    2274:	61 50       	subi	r22, 0x01	; 1
    2276:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    2278:	01 96       	adiw	r24, 0x01	; 1
    227a:	f2 cf       	rjmp	.-28     	; 0x2260 <Endpoint_Write_Control_PStream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    227c:	21 e0       	ldi	r18, 0x01	; 1
    227e:	08 97       	sbiw	r24, 0x08	; 8
    2280:	09 f0       	breq	.+2      	; 0x2284 <Endpoint_Write_Control_PStream_LE+0x90>
    2282:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2284:	80 91 e8 00 	lds	r24, 0x00E8
    2288:	8e 77       	andi	r24, 0x7E	; 126
    228a:	80 93 e8 00 	sts	0x00E8, r24
    228e:	c5 cf       	rjmp	.-118    	; 0x221a <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    2290:	21 11       	cpse	r18, r1
    2292:	c6 cf       	rjmp	.-116    	; 0x2220 <Endpoint_Write_Control_PStream_LE+0x2c>
    2294:	d5 cf       	rjmp	.-86     	; 0x2240 <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2296:	80 91 f0 01 	lds	r24, 0x01F0

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    229a:	88 23       	and	r24, r24
    229c:	39 f0       	breq	.+14     	; 0x22ac <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    229e:	85 30       	cpi	r24, 0x05	; 5
    22a0:	39 f0       	breq	.+14     	; 0x22b0 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    22a2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    22a6:	83 ff       	sbrs	r24, 3
    22a8:	cb cf       	rjmp	.-106    	; 0x2240 <Endpoint_Write_Control_PStream_LE+0x4c>
    22aa:	04 c0       	rjmp	.+8      	; 0x22b4 <Endpoint_Write_Control_PStream_LE+0xc0>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    22ac:	82 e0       	ldi	r24, 0x02	; 2
    22ae:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    22b0:	83 e0       	ldi	r24, 0x03	; 3
    22b2:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    22b4:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    22b6:	08 95       	ret

000022b8 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    22b8:	98 2f       	mov	r25, r24
    22ba:	97 30       	cpi	r25, 0x07	; 7
    22bc:	58 f5       	brcc	.+86     	; 0x2314 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    22be:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    22c2:	98 17       	cp	r25, r24
    22c4:	39 f0       	breq	.+14     	; 0x22d4 <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    22c6:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    22ca:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    22ce:	50 91 f0 00 	lds	r21, 0x00F0
    22d2:	03 c0       	rjmp	.+6      	; 0x22da <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    22d4:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    22d6:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    22d8:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    22da:	21 ff       	sbrs	r18, 1
    22dc:	19 c0       	rjmp	.+50     	; 0x2310 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    22de:	30 91 eb 00 	lds	r19, 0x00EB
    22e2:	3e 7f       	andi	r19, 0xFE	; 254
    22e4:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    22e8:	30 91 ed 00 	lds	r19, 0x00ED
    22ec:	3d 7f       	andi	r19, 0xFD	; 253
    22ee:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    22f2:	30 91 eb 00 	lds	r19, 0x00EB
    22f6:	31 60       	ori	r19, 0x01	; 1
    22f8:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    22fc:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    2300:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    2304:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    2308:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    230c:	27 ff       	sbrs	r18, 7
    230e:	07 c0       	rjmp	.+14     	; 0x231e <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    2310:	9f 5f       	subi	r25, 0xFF	; 255
    2312:	d3 cf       	rjmp	.-90     	; 0x22ba <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2314:	8f 70       	andi	r24, 0x0F	; 15
    2316:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    231e:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    2320:	08 95       	ret

00002322 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    2322:	80 91 f1 01 	lds	r24, 0x01F1
    2326:	87 fd       	sbrc	r24, 7
    2328:	05 c0       	rjmp	.+10     	; 0x2334 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    232a:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    232e:	80 ff       	sbrs	r24, 0
    2330:	0e c0       	rjmp	.+28     	; 0x234e <Endpoint_ClearStatusStage+0x2c>
    2332:	12 c0       	rjmp	.+36     	; 0x2358 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2334:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    2338:	82 fd       	sbrc	r24, 2
    233a:	05 c0       	rjmp	.+10     	; 0x2346 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    233c:	80 91 f0 01 	lds	r24, 0x01F0
    2340:	81 11       	cpse	r24, r1
    2342:	f8 cf       	rjmp	.-16     	; 0x2334 <Endpoint_ClearStatusStage+0x12>
    2344:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2346:	80 91 e8 00 	lds	r24, 0x00E8
    234a:	8b 77       	andi	r24, 0x7B	; 123
    234c:	08 c0       	rjmp	.+16     	; 0x235e <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    234e:	80 91 f0 01 	lds	r24, 0x01F0
    2352:	81 11       	cpse	r24, r1
    2354:	ea cf       	rjmp	.-44     	; 0x232a <Endpoint_ClearStatusStage+0x8>
    2356:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2358:	80 91 e8 00 	lds	r24, 0x00E8
    235c:	8e 77       	andi	r24, 0x7E	; 126
    235e:	80 93 e8 00 	sts	0x00E8, r24
    2362:	08 95       	ret

00002364 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    2364:	80 91 e4 00 	lds	r24, 0x00E4
    2368:	90 91 e5 00 	lds	r25, 0x00E5
    236c:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    236e:	20 91 ec 00 	lds	r18, 0x00EC
    2372:	20 ff       	sbrs	r18, 0
    2374:	21 c0       	rjmp	.+66     	; 0x23b8 <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2376:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    237a:	20 fd       	sbrc	r18, 0
    237c:	21 c0       	rjmp	.+66     	; 0x23c0 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    237e:	20 91 f0 01 	lds	r18, 0x01F0

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2382:	22 23       	and	r18, r18
    2384:	89 f0       	breq	.+34     	; 0x23a8 <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2386:	25 30       	cpi	r18, 0x05	; 5
    2388:	89 f0       	breq	.+34     	; 0x23ac <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    238a:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    238e:	25 fd       	sbrc	r18, 5
    2390:	0f c0       	rjmp	.+30     	; 0x23b0 <Endpoint_WaitUntilReady+0x4c>
    2392:	20 91 e4 00 	lds	r18, 0x00E4
    2396:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    239a:	28 17       	cp	r18, r24
    239c:	39 07       	cpc	r19, r25
    239e:	39 f3       	breq	.-50     	; 0x236e <Endpoint_WaitUntilReady+0xa>
    23a0:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    23a2:	41 f0       	breq	.+16     	; 0x23b4 <Endpoint_WaitUntilReady+0x50>
    23a4:	c9 01       	movw	r24, r18
    23a6:	e3 cf       	rjmp	.-58     	; 0x236e <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    23a8:	82 e0       	ldi	r24, 0x02	; 2
    23aa:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    23ac:	83 e0       	ldi	r24, 0x03	; 3
    23ae:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    23b0:	81 e0       	ldi	r24, 0x01	; 1
    23b2:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    23b4:	84 e0       	ldi	r24, 0x04	; 4
    23b6:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    23b8:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    23bc:	22 ff       	sbrs	r18, 2
    23be:	df cf       	rjmp	.-66     	; 0x237e <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    23c0:	80 e0       	ldi	r24, 0x00	; 0
    23c2:	08 95       	ret

000023c4 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    23c4:	0e 94 50 12 	call	0x24a0	; 0x24a0 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    23c8:	0e 94 58 12 	call	0x24b0	; 0x24b0 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    23cc:	e0 ee       	ldi	r30, 0xE0	; 224
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	80 81       	ld	r24, Z
    23d2:	81 60       	ori	r24, 0x01	; 1
    23d4:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    23d6:	e8 ed       	ldi	r30, 0xD8	; 216
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	80 81       	ld	r24, Z
    23dc:	8f 77       	andi	r24, 0x7F	; 127
    23de:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    23e0:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    23e2:	a7 ed       	ldi	r26, 0xD7	; 215
    23e4:	b0 e0       	ldi	r27, 0x00	; 0
    23e6:	8c 91       	ld	r24, X
    23e8:	8e 7f       	andi	r24, 0xFE	; 254
    23ea:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    23ec:	80 81       	ld	r24, Z
    23ee:	8f 7e       	andi	r24, 0xEF	; 239
    23f0:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    23f2:	10 92 ef 01 	sts	0x01EF, r1
    23f6:	08 95       	ret

000023f8 <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    23f8:	0f 93       	push	r16
    23fa:	1f 93       	push	r17
    23fc:	cf 93       	push	r28
    23fe:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    2400:	0e 94 50 12 	call	0x24a0	; 0x24a0 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    2404:	0e 94 58 12 	call	0x24b0	; 0x24b0 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    2408:	c8 ed       	ldi	r28, 0xD8	; 216
    240a:	d0 e0       	ldi	r29, 0x00	; 0
    240c:	88 81       	ld	r24, Y
    240e:	8f 77       	andi	r24, 0x7F	; 127
    2410:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    2412:	88 81       	ld	r24, Y
    2414:	80 68       	ori	r24, 0x80	; 128
    2416:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2418:	88 81       	ld	r24, Y
    241a:	8f 7d       	andi	r24, 0xDF	; 223
    241c:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    241e:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    2420:	10 92 f0 01 	sts	0x01F0, r1
	USB_Device_ConfigurationNumber  = 0;
    2424:	10 92 ec 01 	sts	0x01EC, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    2428:	10 92 ee 01 	sts	0x01EE, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    242c:	10 92 ed 01 	sts	0x01ED, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    2430:	00 ee       	ldi	r16, 0xE0	; 224
    2432:	10 e0       	ldi	r17, 0x00	; 0
    2434:	f8 01       	movw	r30, r16
    2436:	80 81       	ld	r24, Z
    2438:	8b 7f       	andi	r24, 0xFB	; 251
    243a:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    243c:	88 81       	ld	r24, Y
    243e:	81 60       	ori	r24, 0x01	; 1
    2440:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    2442:	42 e0       	ldi	r20, 0x02	; 2
    2444:	60 e0       	ldi	r22, 0x00	; 0
    2446:	80 e0       	ldi	r24, 0x00	; 0
    2448:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    244c:	e1 ee       	ldi	r30, 0xE1	; 225
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	80 81       	ld	r24, Z
    2452:	8e 7f       	andi	r24, 0xFE	; 254
    2454:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    2456:	e2 ee       	ldi	r30, 0xE2	; 226
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z
    245c:	81 60       	ori	r24, 0x01	; 1
    245e:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    2460:	80 81       	ld	r24, Z
    2462:	88 60       	ori	r24, 0x08	; 8
    2464:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    2466:	f8 01       	movw	r30, r16
    2468:	80 81       	ld	r24, Z
    246a:	8e 7f       	andi	r24, 0xFE	; 254
    246c:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    246e:	88 81       	ld	r24, Y
    2470:	80 61       	ori	r24, 0x10	; 16
    2472:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    2474:	df 91       	pop	r29
    2476:	cf 91       	pop	r28
    2478:	1f 91       	pop	r17
    247a:	0f 91       	pop	r16
    247c:	08 95       	ret

0000247e <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    247e:	e8 ed       	ldi	r30, 0xD8	; 216
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 81       	ld	r24, Z
    2484:	8f 7e       	andi	r24, 0xEF	; 239
    2486:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    2488:	e7 ed       	ldi	r30, 0xD7	; 215
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	80 81       	ld	r24, Z
    248e:	81 60       	ori	r24, 0x01	; 1
    2490:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    2492:	84 e0       	ldi	r24, 0x04	; 4
    2494:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	80 93 ef 01 	sts	0x01EF, r24

	USB_ResetInterface();
    249c:	0c 94 fc 11 	jmp	0x23f8	; 0x23f8 <USB_ResetInterface>

000024a0 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    24a0:	e8 ed       	ldi	r30, 0xD8	; 216
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	80 81       	ld	r24, Z
    24a6:	8e 7f       	andi	r24, 0xFE	; 254
    24a8:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    24aa:	10 92 e2 00 	sts	0x00E2, r1
    24ae:	08 95       	ret

000024b0 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    24b0:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    24b4:	10 92 e1 00 	sts	0x00E1, r1
    24b8:	08 95       	ret

000024ba <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    24ba:	1f 92       	push	r1
    24bc:	0f 92       	push	r0
    24be:	0f b6       	in	r0, 0x3f	; 63
    24c0:	0f 92       	push	r0
    24c2:	11 24       	eor	r1, r1
    24c4:	2f 93       	push	r18
    24c6:	3f 93       	push	r19
    24c8:	4f 93       	push	r20
    24ca:	5f 93       	push	r21
    24cc:	6f 93       	push	r22
    24ce:	7f 93       	push	r23
    24d0:	8f 93       	push	r24
    24d2:	9f 93       	push	r25
    24d4:	af 93       	push	r26
    24d6:	bf 93       	push	r27
    24d8:	ef 93       	push	r30
    24da:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    24dc:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    24e0:	82 ff       	sbrs	r24, 2
    24e2:	0b c0       	rjmp	.+22     	; 0x24fa <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    24e4:	80 91 e2 00 	lds	r24, 0x00E2
    24e8:	82 ff       	sbrs	r24, 2
    24ea:	07 c0       	rjmp	.+14     	; 0x24fa <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    24ec:	80 91 e1 00 	lds	r24, 0x00E1
    24f0:	8b 7f       	andi	r24, 0xFB	; 251
    24f2:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    24f6:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    24fa:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    24fe:	80 ff       	sbrs	r24, 0
    2500:	1f c0       	rjmp	.+62     	; 0x2540 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    2502:	80 91 d8 00 	lds	r24, 0x00D8
    2506:	80 ff       	sbrs	r24, 0
    2508:	1b c0       	rjmp	.+54     	; 0x2540 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    250a:	80 91 da 00 	lds	r24, 0x00DA
    250e:	8e 7f       	andi	r24, 0xFE	; 254
    2510:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    2514:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    2518:	80 ff       	sbrs	r24, 0
    251a:	0d c0       	rjmp	.+26     	; 0x2536 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    251c:	80 e1       	ldi	r24, 0x10	; 16
    251e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2520:	82 e1       	ldi	r24, 0x12	; 18
    2522:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    2524:	09 b4       	in	r0, 0x29	; 41
    2526:	00 fe       	sbrs	r0, 0
    2528:	fd cf       	rjmp	.-6      	; 0x2524 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	80 93 f0 01 	sts	0x01F0, r24
			EVENT_USB_Device_Connect();
    2530:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <EVENT_USB_Device_Connect>
    2534:	05 c0       	rjmp	.+10     	; 0x2540 <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2536:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    2538:	10 92 f0 01 	sts	0x01F0, r1
			EVENT_USB_Device_Disconnect();
    253c:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    2540:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    2544:	80 ff       	sbrs	r24, 0
    2546:	19 c0       	rjmp	.+50     	; 0x257a <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    2548:	80 91 e2 00 	lds	r24, 0x00E2
    254c:	80 ff       	sbrs	r24, 0
    254e:	15 c0       	rjmp	.+42     	; 0x257a <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2550:	80 91 e2 00 	lds	r24, 0x00E2
    2554:	8e 7f       	andi	r24, 0xFE	; 254
    2556:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    255a:	80 91 e2 00 	lds	r24, 0x00E2
    255e:	80 61       	ori	r24, 0x10	; 16
    2560:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    2564:	80 91 d8 00 	lds	r24, 0x00D8
    2568:	80 62       	ori	r24, 0x20	; 32
    256a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    256e:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    2570:	85 e0       	ldi	r24, 0x05	; 5
    2572:	80 93 f0 01 	sts	0x01F0, r24
		EVENT_USB_Device_Suspend();
    2576:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    257a:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    257e:	84 ff       	sbrs	r24, 4
    2580:	30 c0       	rjmp	.+96     	; 0x25e2 <__vector_10+0x128>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    2582:	80 91 e2 00 	lds	r24, 0x00E2
    2586:	84 ff       	sbrs	r24, 4
    2588:	2c c0       	rjmp	.+88     	; 0x25e2 <__vector_10+0x128>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    258a:	80 e1       	ldi	r24, 0x10	; 16
    258c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    258e:	82 e1       	ldi	r24, 0x12	; 18
    2590:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    2592:	09 b4       	in	r0, 0x29	; 41
    2594:	00 fe       	sbrs	r0, 0
    2596:	fd cf       	rjmp	.-6      	; 0x2592 <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2598:	80 91 d8 00 	lds	r24, 0x00D8
    259c:	8f 7d       	andi	r24, 0xDF	; 223
    259e:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    25a2:	80 91 e1 00 	lds	r24, 0x00E1
    25a6:	8f 7e       	andi	r24, 0xEF	; 239
    25a8:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    25ac:	80 91 e2 00 	lds	r24, 0x00E2
    25b0:	8f 7e       	andi	r24, 0xEF	; 239
    25b2:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    25b6:	80 91 e2 00 	lds	r24, 0x00E2
    25ba:	81 60       	ori	r24, 0x01	; 1
    25bc:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    25c0:	80 91 ec 01 	lds	r24, 0x01EC
    25c4:	88 23       	and	r24, r24
    25c6:	11 f0       	breq	.+4      	; 0x25cc <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
    25c8:	84 e0       	ldi	r24, 0x04	; 4
    25ca:	07 c0       	rjmp	.+14     	; 0x25da <__vector_10+0x120>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    25cc:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    25d0:	87 ff       	sbrs	r24, 7
    25d2:	02 c0       	rjmp	.+4      	; 0x25d8 <__vector_10+0x11e>
    25d4:	83 e0       	ldi	r24, 0x03	; 3
    25d6:	01 c0       	rjmp	.+2      	; 0x25da <__vector_10+0x120>
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	80 93 f0 01 	sts	0x01F0, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    25de:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    25e2:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    25e6:	83 ff       	sbrs	r24, 3
    25e8:	29 c0       	rjmp	.+82     	; 0x263c <__vector_10+0x182>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    25ea:	80 91 e2 00 	lds	r24, 0x00E2
    25ee:	83 ff       	sbrs	r24, 3
    25f0:	25 c0       	rjmp	.+74     	; 0x263c <__vector_10+0x182>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    25f2:	80 91 e1 00 	lds	r24, 0x00E1
    25f6:	87 7f       	andi	r24, 0xF7	; 247
    25f8:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    25fc:	82 e0       	ldi	r24, 0x02	; 2
    25fe:	80 93 f0 01 	sts	0x01F0, r24
		USB_Device_ConfigurationNumber = 0;
    2602:	10 92 ec 01 	sts	0x01EC, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    2606:	80 91 e1 00 	lds	r24, 0x00E1
    260a:	8e 7f       	andi	r24, 0xFE	; 254
    260c:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2610:	80 91 e2 00 	lds	r24, 0x00E2
    2614:	8e 7f       	andi	r24, 0xFE	; 254
    2616:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    261a:	80 91 e2 00 	lds	r24, 0x00E2
    261e:	80 61       	ori	r24, 0x10	; 16
    2620:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    2624:	42 e0       	ldi	r20, 0x02	; 2
    2626:	60 e0       	ldi	r22, 0x00	; 0
    2628:	80 e0       	ldi	r24, 0x00	; 0
    262a:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    262e:	80 91 f0 00 	lds	r24, 0x00F0
    2632:	88 60       	ori	r24, 0x08	; 8
    2634:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    2638:	0e 94 76 0e 	call	0x1cec	; 0x1cec <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    263c:	ff 91       	pop	r31
    263e:	ef 91       	pop	r30
    2640:	bf 91       	pop	r27
    2642:	af 91       	pop	r26
    2644:	9f 91       	pop	r25
    2646:	8f 91       	pop	r24
    2648:	7f 91       	pop	r23
    264a:	6f 91       	pop	r22
    264c:	5f 91       	pop	r21
    264e:	4f 91       	pop	r20
    2650:	3f 91       	pop	r19
    2652:	2f 91       	pop	r18
    2654:	0f 90       	pop	r0
    2656:	0f be       	out	0x3f, r0	; 63
    2658:	0f 90       	pop	r0
    265a:	1f 90       	pop	r1
    265c:	18 95       	reti

0000265e <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    265e:	1f 92       	push	r1
    2660:	0f 92       	push	r0
    2662:	0f b6       	in	r0, 0x3f	; 63
    2664:	0f 92       	push	r0
    2666:	11 24       	eor	r1, r1
    2668:	2f 93       	push	r18
    266a:	3f 93       	push	r19
    266c:	4f 93       	push	r20
    266e:	5f 93       	push	r21
    2670:	6f 93       	push	r22
    2672:	7f 93       	push	r23
    2674:	8f 93       	push	r24
    2676:	9f 93       	push	r25
    2678:	af 93       	push	r26
    267a:	bf 93       	push	r27
    267c:	cf 93       	push	r28
    267e:	ef 93       	push	r30
    2680:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2682:	c0 91 e9 00 	lds	r28, 0x00E9
    2686:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2688:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    268c:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    2690:	80 91 f0 00 	lds	r24, 0x00F0
    2694:	87 7f       	andi	r24, 0xF7	; 247
    2696:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    269a:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    269c:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <USB_Device_ProcessControlRequest>
    26a0:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    26a4:	80 91 f0 00 	lds	r24, 0x00F0
    26a8:	88 60       	ori	r24, 0x08	; 8
    26aa:	80 93 f0 00 	sts	0x00F0, r24
    26ae:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    26b2:	ff 91       	pop	r31
    26b4:	ef 91       	pop	r30
    26b6:	cf 91       	pop	r28
    26b8:	bf 91       	pop	r27
    26ba:	af 91       	pop	r26
    26bc:	9f 91       	pop	r25
    26be:	8f 91       	pop	r24
    26c0:	7f 91       	pop	r23
    26c2:	6f 91       	pop	r22
    26c4:	5f 91       	pop	r21
    26c6:	4f 91       	pop	r20
    26c8:	3f 91       	pop	r19
    26ca:	2f 91       	pop	r18
    26cc:	0f 90       	pop	r0
    26ce:	0f be       	out	0x3f, r0	; 63
    26d0:	0f 90       	pop	r0
    26d2:	1f 90       	pop	r1
    26d4:	18 95       	reti

000026d6 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    26d6:	1f 93       	push	r17
    26d8:	cf 93       	push	r28
    26da:	df 93       	push	r29
    26dc:	cd b7       	in	r28, 0x3d	; 61
    26de:	de b7       	in	r29, 0x3e	; 62
    26e0:	aa 97       	sbiw	r28, 0x2a	; 42
    26e2:	0f b6       	in	r0, 0x3f	; 63
    26e4:	f8 94       	cli
    26e6:	de bf       	out	0x3e, r29	; 62
    26e8:	0f be       	out	0x3f, r0	; 63
    26ea:	cd bf       	out	0x3d, r28	; 61
    26ec:	e1 ef       	ldi	r30, 0xF1	; 241
    26ee:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    26f0:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    26f4:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    26f6:	21 e0       	ldi	r18, 0x01	; 1
    26f8:	e9 3f       	cpi	r30, 0xF9	; 249
    26fa:	f2 07       	cpc	r31, r18
    26fc:	c9 f7       	brne	.-14     	; 0x26f0 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    26fe:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2702:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    2706:	83 ff       	sbrs	r24, 3
    2708:	1c c1       	rjmp	.+568    	; 0x2942 <USB_Device_ProcessControlRequest+0x26c>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    270a:	20 91 f1 01 	lds	r18, 0x01F1

		switch (USB_ControlRequest.bRequest)
    270e:	30 91 f2 01 	lds	r19, 0x01F2
    2712:	83 2f       	mov	r24, r19
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	8a 30       	cpi	r24, 0x0A	; 10
    2718:	91 05       	cpc	r25, r1
    271a:	08 f0       	brcs	.+2      	; 0x271e <USB_Device_ProcessControlRequest+0x48>
    271c:	12 c1       	rjmp	.+548    	; 0x2942 <USB_Device_ProcessControlRequest+0x26c>
    271e:	fc 01       	movw	r30, r24
    2720:	ea 5a       	subi	r30, 0xAA	; 170
    2722:	ff 4f       	sbci	r31, 0xFF	; 255
    2724:	0c 94 86 2d 	jmp	0x5b0c	; 0x5b0c <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2728:	20 38       	cpi	r18, 0x80	; 128
    272a:	81 f0       	breq	.+32     	; 0x274c <USB_Device_ProcessControlRequest+0x76>
    272c:	22 38       	cpi	r18, 0x82	; 130
    272e:	09 f0       	breq	.+2      	; 0x2732 <USB_Device_ProcessControlRequest+0x5c>
    2730:	08 c1       	rjmp	.+528    	; 0x2942 <USB_Device_ProcessControlRequest+0x26c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2732:	80 91 f5 01 	lds	r24, 0x01F5
    2736:	8f 70       	andi	r24, 0x0F	; 15
    2738:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    273c:	80 91 eb 00 	lds	r24, 0x00EB
    2740:	85 fb       	bst	r24, 5
    2742:	88 27       	eor	r24, r24
    2744:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2746:	10 92 e9 00 	sts	0x00E9, r1
    274a:	06 c0       	rjmp	.+12     	; 0x2758 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    274c:	80 91 ed 01 	lds	r24, 0x01ED
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    2750:	90 91 ee 01 	lds	r25, 0x01EE
    2754:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    2756:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2758:	90 91 e8 00 	lds	r25, 0x00E8
    275c:	97 7f       	andi	r25, 0xF7	; 247
    275e:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    2762:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    2766:	10 92 f1 00 	sts	0x00F1, r1
    276a:	c5 c0       	rjmp	.+394    	; 0x28f6 <USB_Device_ProcessControlRequest+0x220>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    276c:	82 2f       	mov	r24, r18
    276e:	8d 7f       	andi	r24, 0xFD	; 253
    2770:	09 f0       	breq	.+2      	; 0x2774 <USB_Device_ProcessControlRequest+0x9e>
    2772:	e7 c0       	rjmp	.+462    	; 0x2942 <USB_Device_ProcessControlRequest+0x26c>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    2774:	22 23       	and	r18, r18
    2776:	19 f0       	breq	.+6      	; 0x277e <USB_Device_ProcessControlRequest+0xa8>
    2778:	22 30       	cpi	r18, 0x02	; 2
    277a:	61 f0       	breq	.+24     	; 0x2794 <USB_Device_ProcessControlRequest+0xbe>
    277c:	e2 c0       	rjmp	.+452    	; 0x2942 <USB_Device_ProcessControlRequest+0x26c>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    277e:	80 91 f3 01 	lds	r24, 0x01F3
    2782:	81 30       	cpi	r24, 0x01	; 1
    2784:	09 f0       	breq	.+2      	; 0x2788 <USB_Device_ProcessControlRequest+0xb2>
    2786:	dd c0       	rjmp	.+442    	; 0x2942 <USB_Device_ProcessControlRequest+0x26c>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    2788:	33 30       	cpi	r19, 0x03	; 3
    278a:	09 f0       	breq	.+2      	; 0x278e <USB_Device_ProcessControlRequest+0xb8>
    278c:	80 e0       	ldi	r24, 0x00	; 0
    278e:	80 93 ee 01 	sts	0x01EE, r24
    2792:	28 c0       	rjmp	.+80     	; 0x27e4 <USB_Device_ProcessControlRequest+0x10e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    2794:	80 91 f3 01 	lds	r24, 0x01F3
    2798:	81 11       	cpse	r24, r1
    279a:	24 c0       	rjmp	.+72     	; 0x27e4 <USB_Device_ProcessControlRequest+0x10e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    279c:	20 91 f5 01 	lds	r18, 0x01F5
    27a0:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    27a2:	09 f4       	brne	.+2      	; 0x27a6 <USB_Device_ProcessControlRequest+0xd0>
    27a4:	ce c0       	rjmp	.+412    	; 0x2942 <USB_Device_ProcessControlRequest+0x26c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    27a6:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    27aa:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    27ae:	80 ff       	sbrs	r24, 0
    27b0:	19 c0       	rjmp	.+50     	; 0x27e4 <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    27b2:	80 91 eb 00 	lds	r24, 0x00EB
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    27b6:	33 30       	cpi	r19, 0x03	; 3
    27b8:	11 f4       	brne	.+4      	; 0x27be <USB_Device_ProcessControlRequest+0xe8>
    27ba:	80 62       	ori	r24, 0x20	; 32
    27bc:	11 c0       	rjmp	.+34     	; 0x27e0 <USB_Device_ProcessControlRequest+0x10a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    27be:	80 61       	ori	r24, 0x10	; 16
    27c0:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	02 2e       	mov	r0, r18
    27ca:	01 c0       	rjmp	.+2      	; 0x27ce <USB_Device_ProcessControlRequest+0xf8>
    27cc:	88 0f       	add	r24, r24
    27ce:	0a 94       	dec	r0
    27d0:	ea f7       	brpl	.-6      	; 0x27cc <USB_Device_ProcessControlRequest+0xf6>
    27d2:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    27d6:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    27da:	80 91 eb 00 	lds	r24, 0x00EB
    27de:	88 60       	ori	r24, 0x08	; 8
    27e0:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    27e4:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    27e8:	80 91 e8 00 	lds	r24, 0x00E8
    27ec:	87 7f       	andi	r24, 0xF7	; 247
    27ee:	86 c0       	rjmp	.+268    	; 0x28fc <USB_Device_ProcessControlRequest+0x226>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    27f0:	21 11       	cpse	r18, r1
    27f2:	a7 c0       	rjmp	.+334    	; 0x2942 <USB_Device_ProcessControlRequest+0x26c>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    27f4:	10 91 f3 01 	lds	r17, 0x01F3
    27f8:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    27fa:	80 91 e3 00 	lds	r24, 0x00E3
    27fe:	80 78       	andi	r24, 0x80	; 128
    2800:	81 2b       	or	r24, r17
    2802:	80 93 e3 00 	sts	0x00E3, r24
    2806:	80 91 e8 00 	lds	r24, 0x00E8
    280a:	87 7f       	andi	r24, 0xF7	; 247
    280c:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    2810:	0e 94 91 11 	call	0x2322	; 0x2322 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2814:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    2818:	80 ff       	sbrs	r24, 0
    281a:	fc cf       	rjmp	.-8      	; 0x2814 <USB_Device_ProcessControlRequest+0x13e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    281c:	80 91 e3 00 	lds	r24, 0x00E3
    2820:	80 68       	ori	r24, 0x80	; 128
    2822:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    2826:	11 23       	and	r17, r17
    2828:	11 f0       	breq	.+4      	; 0x282e <USB_Device_ProcessControlRequest+0x158>
    282a:	83 e0       	ldi	r24, 0x03	; 3
    282c:	01 c0       	rjmp	.+2      	; 0x2830 <USB_Device_ProcessControlRequest+0x15a>
    282e:	82 e0       	ldi	r24, 0x02	; 2
    2830:	80 93 f0 01 	sts	0x01F0, r24
    2834:	86 c0       	rjmp	.+268    	; 0x2942 <USB_Device_ProcessControlRequest+0x26c>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2836:	20 58       	subi	r18, 0x80	; 128
    2838:	22 30       	cpi	r18, 0x02	; 2
    283a:	08 f0       	brcs	.+2      	; 0x283e <USB_Device_ProcessControlRequest+0x168>
    283c:	82 c0       	rjmp	.+260    	; 0x2942 <USB_Device_ProcessControlRequest+0x26c>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    283e:	80 91 f3 01 	lds	r24, 0x01F3
    2842:	90 91 f4 01 	lds	r25, 0x01F4
    2846:	8c 3d       	cpi	r24, 0xDC	; 220
    2848:	23 e0       	ldi	r18, 0x03	; 3
    284a:	92 07       	cpc	r25, r18
    284c:	79 f5       	brne	.+94     	; 0x28ac <USB_Device_ProcessControlRequest+0x1d6>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    284e:	83 e0       	ldi	r24, 0x03	; 3
    2850:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    2852:	8a e2       	ldi	r24, 0x2A	; 42
    2854:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    2856:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    2858:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    285a:	de 01       	movw	r26, r28
    285c:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    285e:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    2860:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    2862:	51 e2       	ldi	r21, 0x21	; 33
    2864:	e3 2f       	mov	r30, r19
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	50 93 57 00 	sts	0x0057, r21
    286c:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    286e:	20 ff       	sbrs	r18, 0
    2870:	03 c0       	rjmp	.+6      	; 0x2878 <USB_Device_ProcessControlRequest+0x1a2>
					{
						SerialByte >>= 4;
    2872:	e2 95       	swap	r30
    2874:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    2876:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    2878:	ef 70       	andi	r30, 0x0F	; 15
    287a:	8e 2f       	mov	r24, r30
    287c:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    287e:	ea 30       	cpi	r30, 0x0A	; 10
    2880:	10 f0       	brcs	.+4      	; 0x2886 <USB_Device_ProcessControlRequest+0x1b0>
    2882:	c7 96       	adiw	r24, 0x37	; 55
    2884:	01 c0       	rjmp	.+2      	; 0x2888 <USB_Device_ProcessControlRequest+0x1b2>
    2886:	c0 96       	adiw	r24, 0x30	; 48
    2888:	8d 93       	st	X+, r24
    288a:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    288c:	2f 5f       	subi	r18, 0xFF	; 255
    288e:	24 31       	cpi	r18, 0x14	; 20
    2890:	49 f7       	brne	.-46     	; 0x2864 <USB_Device_ProcessControlRequest+0x18e>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    2892:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2894:	80 91 e8 00 	lds	r24, 0x00E8
    2898:	87 7f       	andi	r24, 0xF7	; 247
    289a:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    289e:	6a e2       	ldi	r22, 0x2A	; 42
    28a0:	70 e0       	ldi	r23, 0x00	; 0
    28a2:	ce 01       	movw	r24, r28
    28a4:	01 96       	adiw	r24, 0x01	; 1
    28a6:	0e 94 99 10 	call	0x2132	; 0x2132 <Endpoint_Write_Control_Stream_LE>
    28aa:	14 c0       	rjmp	.+40     	; 0x28d4 <USB_Device_ProcessControlRequest+0x1fe>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    28ac:	ae 01       	movw	r20, r28
    28ae:	4f 5f       	subi	r20, 0xFF	; 255
    28b0:	5f 4f       	sbci	r21, 0xFF	; 255
    28b2:	60 91 f5 01 	lds	r22, 0x01F5
    28b6:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <CALLBACK_USB_GetDescriptor>
    28ba:	00 97       	sbiw	r24, 0x00	; 0
    28bc:	09 f4       	brne	.+2      	; 0x28c0 <USB_Device_ProcessControlRequest+0x1ea>
    28be:	41 c0       	rjmp	.+130    	; 0x2942 <USB_Device_ProcessControlRequest+0x26c>
    28c0:	20 91 e8 00 	lds	r18, 0x00E8
    28c4:	27 7f       	andi	r18, 0xF7	; 247
    28c6:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    28ca:	bc 01       	movw	r22, r24
    28cc:	89 81       	ldd	r24, Y+1	; 0x01
    28ce:	9a 81       	ldd	r25, Y+2	; 0x02
    28d0:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    28d4:	80 91 e8 00 	lds	r24, 0x00E8
    28d8:	8b 77       	andi	r24, 0x7B	; 123
    28da:	80 93 e8 00 	sts	0x00E8, r24
    28de:	31 c0       	rjmp	.+98     	; 0x2942 <USB_Device_ProcessControlRequest+0x26c>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    28e0:	20 38       	cpi	r18, 0x80	; 128
    28e2:	79 f5       	brne	.+94     	; 0x2942 <USB_Device_ProcessControlRequest+0x26c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    28e4:	80 91 e8 00 	lds	r24, 0x00E8
    28e8:	87 7f       	andi	r24, 0xF7	; 247
    28ea:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    28ee:	80 91 ec 01 	lds	r24, 0x01EC
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    28f2:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    28f6:	80 91 e8 00 	lds	r24, 0x00E8
    28fa:	8e 77       	andi	r24, 0x7E	; 126
    28fc:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    2900:	0e 94 91 11 	call	0x2322	; 0x2322 <Endpoint_ClearStatusStage>
    2904:	1e c0       	rjmp	.+60     	; 0x2942 <USB_Device_ProcessControlRequest+0x26c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2906:	21 11       	cpse	r18, r1
    2908:	1c c0       	rjmp	.+56     	; 0x2942 <USB_Device_ProcessControlRequest+0x26c>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    290a:	90 91 f3 01 	lds	r25, 0x01F3
    290e:	92 30       	cpi	r25, 0x02	; 2
    2910:	c0 f4       	brcc	.+48     	; 0x2942 <USB_Device_ProcessControlRequest+0x26c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2912:	80 91 e8 00 	lds	r24, 0x00E8
    2916:	87 7f       	andi	r24, 0xF7	; 247
    2918:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    291c:	90 93 ec 01 	sts	0x01EC, r25

	Endpoint_ClearStatusStage();
    2920:	0e 94 91 11 	call	0x2322	; 0x2322 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    2924:	80 91 ec 01 	lds	r24, 0x01EC
    2928:	81 11       	cpse	r24, r1
    292a:	04 c0       	rjmp	.+8      	; 0x2934 <USB_Device_ProcessControlRequest+0x25e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    292c:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2930:	87 ff       	sbrs	r24, 7
    2932:	02 c0       	rjmp	.+4      	; 0x2938 <USB_Device_ProcessControlRequest+0x262>
    2934:	84 e0       	ldi	r24, 0x04	; 4
    2936:	01 c0       	rjmp	.+2      	; 0x293a <USB_Device_ProcessControlRequest+0x264>
    2938:	81 e0       	ldi	r24, 0x01	; 1
    293a:	80 93 f0 01 	sts	0x01F0, r24

	EVENT_USB_Device_ConfigurationChanged();
    293e:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2942:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    2946:	83 ff       	sbrs	r24, 3
    2948:	0a c0       	rjmp	.+20     	; 0x295e <USB_Device_ProcessControlRequest+0x288>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    294a:	80 91 e8 00 	lds	r24, 0x00E8
    294e:	87 7f       	andi	r24, 0xF7	; 247
    2950:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2954:	80 91 eb 00 	lds	r24, 0x00EB
    2958:	80 62       	ori	r24, 0x20	; 32
    295a:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    295e:	aa 96       	adiw	r28, 0x2a	; 42
    2960:	0f b6       	in	r0, 0x3f	; 63
    2962:	f8 94       	cli
    2964:	de bf       	out	0x3e, r29	; 62
    2966:	0f be       	out	0x3f, r0	; 63
    2968:	cd bf       	out	0x3d, r28	; 61
    296a:	df 91       	pop	r29
    296c:	cf 91       	pop	r28
    296e:	1f 91       	pop	r17
    2970:	08 95       	ret

00002972 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    2972:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    2974:	80 91 f0 01 	lds	r24, 0x01F0
    2978:	88 23       	and	r24, r24
    297a:	b1 f0       	breq	.+44     	; 0x29a8 <USB_USBTask+0x36>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    297c:	80 91 e9 00 	lds	r24, 0x00E9
    2980:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2982:	90 91 ec 00 	lds	r25, 0x00EC
    2986:	90 ff       	sbrs	r25, 0
    2988:	02 c0       	rjmp	.+4      	; 0x298e <USB_USBTask+0x1c>
    298a:	90 e8       	ldi	r25, 0x80	; 128
    298c:	01 c0       	rjmp	.+2      	; 0x2990 <USB_USBTask+0x1e>
    298e:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2990:	c9 2f       	mov	r28, r25
    2992:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2994:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2998:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    299c:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    299e:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    29a2:	cf 70       	andi	r28, 0x0F	; 15
    29a4:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    29a8:	cf 91       	pop	r28
    29aa:	08 95       	ret

000029ac <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    29ac:	90 93 74 01 	sts	0x0174, r25
    29b0:	80 93 73 01 	sts	0x0173, r24
    29b4:	08 95       	ret

000029b6 <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    29b6:	e0 91 73 01 	lds	r30, 0x0173
    29ba:	f0 91 74 01 	lds	r31, 0x0174
    29be:	30 97       	sbiw	r30, 0x00	; 0
    29c0:	21 f0       	breq	.+8      	; 0x29ca <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    29c2:	01 90       	ld	r0, Z+
    29c4:	f0 81       	ld	r31, Z
    29c6:	e0 2d       	mov	r30, r0
    29c8:	09 94       	ijmp
}
    29ca:	80 e0       	ldi	r24, 0x00	; 0
    29cc:	08 95       	ret

000029ce <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    29ce:	ff 92       	push	r15
    29d0:	0f 93       	push	r16
    29d2:	1f 93       	push	r17
    29d4:	cf 93       	push	r28
    29d6:	df 93       	push	r29
    29d8:	8c 01       	movw	r16, r24
    if (!driver) return;
    29da:	e0 91 73 01 	lds	r30, 0x0173
    29de:	f0 91 74 01 	lds	r31, 0x0174
    29e2:	30 97       	sbiw	r30, 0x00	; 0
    29e4:	99 f1       	breq	.+102    	; 0x2a4c <host_keyboard_send+0x7e>
    (*driver->send_keyboard)(report);
    29e6:	02 80       	ldd	r0, Z+2	; 0x02
    29e8:	f3 81       	ldd	r31, Z+3	; 0x03
    29ea:	e0 2d       	mov	r30, r0
    29ec:	09 95       	icall

    if (debug_keyboard) {
    29ee:	80 91 d7 01 	lds	r24, 0x01D7
    29f2:	82 ff       	sbrs	r24, 2
    29f4:	2b c0       	rjmp	.+86     	; 0x2a4c <host_keyboard_send+0x7e>
        dprint("keyboard_report: ");
    29f6:	80 ff       	sbrs	r24, 0
    29f8:	04 c0       	rjmp	.+8      	; 0x2a02 <host_keyboard_send+0x34>
    29fa:	8d e8       	ldi	r24, 0x8D	; 141
    29fc:	95 e0       	ldi	r25, 0x05	; 5
    29fe:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    2a02:	e8 01       	movw	r28, r16
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    2a04:	80 e1       	ldi	r24, 0x10	; 16
    2a06:	f8 2e       	mov	r15, r24
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    2a08:	07 e8       	ldi	r16, 0x87	; 135
    2a0a:	15 e0       	ldi	r17, 0x05	; 5
    2a0c:	80 91 d7 01 	lds	r24, 0x01D7
    2a10:	80 ff       	sbrs	r24, 0
    2a12:	0b c0       	rjmp	.+22     	; 0x2a2a <host_keyboard_send+0x5c>
    2a14:	88 81       	ld	r24, Y
    2a16:	1f 92       	push	r1
    2a18:	8f 93       	push	r24
    2a1a:	1f 93       	push	r17
    2a1c:	0f 93       	push	r16
    2a1e:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    2a22:	0f 90       	pop	r0
    2a24:	0f 90       	pop	r0
    2a26:	0f 90       	pop	r0
    2a28:	0f 90       	pop	r0
    2a2a:	fa 94       	dec	r15
    2a2c:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    2a2e:	f1 10       	cpse	r15, r1
    2a30:	ed cf       	rjmp	.-38     	; 0x2a0c <host_keyboard_send+0x3e>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    2a32:	80 91 d7 01 	lds	r24, 0x01D7
    2a36:	80 ff       	sbrs	r24, 0
    2a38:	09 c0       	rjmp	.+18     	; 0x2a4c <host_keyboard_send+0x7e>
    2a3a:	85 e8       	ldi	r24, 0x85	; 133
    2a3c:	95 e0       	ldi	r25, 0x05	; 5
    }
}
    2a3e:	df 91       	pop	r29
    2a40:	cf 91       	pop	r28
    2a42:	1f 91       	pop	r17
    2a44:	0f 91       	pop	r16
    2a46:	ff 90       	pop	r15
    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    2a48:	0c 94 54 07 	jmp	0xea8	; 0xea8 <xputs>
    }
}
    2a4c:	df 91       	pop	r29
    2a4e:	cf 91       	pop	r28
    2a50:	1f 91       	pop	r17
    2a52:	0f 91       	pop	r16
    2a54:	ff 90       	pop	r15
    2a56:	08 95       	ret

00002a58 <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    2a58:	e0 91 73 01 	lds	r30, 0x0173
    2a5c:	f0 91 74 01 	lds	r31, 0x0174
    2a60:	30 97       	sbiw	r30, 0x00	; 0
    2a62:	21 f0       	breq	.+8      	; 0x2a6c <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    2a64:	04 80       	ldd	r0, Z+4	; 0x04
    2a66:	f5 81       	ldd	r31, Z+5	; 0x05
    2a68:	e0 2d       	mov	r30, r0
    2a6a:	09 94       	ijmp
    2a6c:	08 95       	ret

00002a6e <host_system_send>:
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    2a6e:	20 91 71 01 	lds	r18, 0x0171
    2a72:	30 91 72 01 	lds	r19, 0x0172
    2a76:	82 17       	cp	r24, r18
    2a78:	93 07       	cpc	r25, r19
    2a7a:	71 f0       	breq	.+28     	; 0x2a98 <host_system_send+0x2a>
    last_system_report = report;
    2a7c:	90 93 72 01 	sts	0x0172, r25
    2a80:	80 93 71 01 	sts	0x0171, r24

    if (!driver) return;
    2a84:	e0 91 73 01 	lds	r30, 0x0173
    2a88:	f0 91 74 01 	lds	r31, 0x0174
    2a8c:	30 97       	sbiw	r30, 0x00	; 0
    2a8e:	21 f0       	breq	.+8      	; 0x2a98 <host_system_send+0x2a>
    (*driver->send_system)(report);
    2a90:	06 80       	ldd	r0, Z+6	; 0x06
    2a92:	f7 81       	ldd	r31, Z+7	; 0x07
    2a94:	e0 2d       	mov	r30, r0
    2a96:	09 94       	ijmp
    2a98:	08 95       	ret

00002a9a <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    2a9a:	20 91 6f 01 	lds	r18, 0x016F
    2a9e:	30 91 70 01 	lds	r19, 0x0170
    2aa2:	82 17       	cp	r24, r18
    2aa4:	93 07       	cpc	r25, r19
    2aa6:	71 f0       	breq	.+28     	; 0x2ac4 <host_consumer_send+0x2a>
    last_consumer_report = report;
    2aa8:	90 93 70 01 	sts	0x0170, r25
    2aac:	80 93 6f 01 	sts	0x016F, r24

    if (!driver) return;
    2ab0:	e0 91 73 01 	lds	r30, 0x0173
    2ab4:	f0 91 74 01 	lds	r31, 0x0174
    2ab8:	30 97       	sbiw	r30, 0x00	; 0
    2aba:	21 f0       	breq	.+8      	; 0x2ac4 <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    2abc:	00 84       	ldd	r0, Z+8	; 0x08
    2abe:	f1 85       	ldd	r31, Z+9	; 0x09
    2ac0:	e0 2d       	mov	r30, r0
    2ac2:	09 94       	ijmp
    2ac4:	08 95       	ret

00002ac6 <matrix_setup>:
    return false;
}
#endif


__attribute__ ((weak)) void matrix_setup(void) {}
    2ac6:	08 95       	ret

00002ac8 <keyboard_setup>:
void keyboard_setup(void)
{
    matrix_setup();
    2ac8:	0c 94 63 15 	jmp	0x2ac6	; 0x2ac6 <matrix_setup>

00002acc <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    2acc:	0e 94 ce 21 	call	0x439c	; 0x439c <timer_init>
    matrix_init();
    2ad0:	0e 94 64 09 	call	0x12c8	; 0x12c8 <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    2ad4:	0c 94 94 22 	jmp	0x4528	; 0x4528 <bootmagic>

00002ad8 <keyboard_set_leds>:
        keyboard_set_leds(led_status);
    }
}

void keyboard_set_leds(uint8_t leds)
{
    2ad8:	cf 93       	push	r28
    2ada:	c8 2f       	mov	r28, r24
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    2adc:	80 91 d7 01 	lds	r24, 0x01D7
    2ae0:	82 ff       	sbrs	r24, 2
    2ae2:	1e c0       	rjmp	.+60     	; 0x2b20 <keyboard_set_leds+0x48>
    2ae4:	80 ff       	sbrs	r24, 0
    2ae6:	04 c0       	rjmp	.+8      	; 0x2af0 <keyboard_set_leds+0x18>
    2ae8:	86 ea       	ldi	r24, 0xA6	; 166
    2aea:	95 e0       	ldi	r25, 0x05	; 5
    2aec:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    2af0:	80 91 d7 01 	lds	r24, 0x01D7
    2af4:	80 ff       	sbrs	r24, 0
    2af6:	0c c0       	rjmp	.+24     	; 0x2b10 <keyboard_set_leds+0x38>
    2af8:	1f 92       	push	r1
    2afa:	cf 93       	push	r28
    2afc:	21 ea       	ldi	r18, 0xA1	; 161
    2afe:	35 e0       	ldi	r19, 0x05	; 5
    2b00:	3f 93       	push	r19
    2b02:	2f 93       	push	r18
    2b04:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    2b08:	0f 90       	pop	r0
    2b0a:	0f 90       	pop	r0
    2b0c:	0f 90       	pop	r0
    2b0e:	0f 90       	pop	r0
    2b10:	80 91 d7 01 	lds	r24, 0x01D7
    2b14:	80 ff       	sbrs	r24, 0
    2b16:	04 c0       	rjmp	.+8      	; 0x2b20 <keyboard_set_leds+0x48>
    2b18:	8f e9       	ldi	r24, 0x9F	; 159
    2b1a:	95 e0       	ldi	r25, 0x05	; 5
    2b1c:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    led_set(leds);
    2b20:	8c 2f       	mov	r24, r28
}
    2b22:	cf 91       	pop	r28
}

void keyboard_set_leds(uint8_t leds)
{
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    led_set(leds);
    2b24:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <led_set>

00002b28 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    2b28:	cf 92       	push	r12
    2b2a:	df 92       	push	r13
    2b2c:	ef 92       	push	r14
    2b2e:	ff 92       	push	r15
    2b30:	0f 93       	push	r16
    2b32:	1f 93       	push	r17
    2b34:	cf 93       	push	r28
    2b36:	df 93       	push	r29
    2b38:	cd b7       	in	r28, 0x3d	; 61
    2b3a:	de b7       	in	r29, 0x3e	; 62
    2b3c:	2b 97       	sbiw	r28, 0x0b	; 11
    2b3e:	0f b6       	in	r0, 0x3f	; 63
    2b40:	f8 94       	cli
    2b42:	de bf       	out	0x3e, r29	; 62
    2b44:	0f be       	out	0x3f, r0	; 63
    2b46:	cd bf       	out	0x3d, r28	; 61
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    2b48:	0e 94 81 09 	call	0x1302	; 0x1302 <matrix_scan>
    2b4c:	36 e7       	ldi	r19, 0x76	; 118
    2b4e:	e3 2e       	mov	r14, r19
    2b50:	31 e0       	ldi	r19, 0x01	; 1
    2b52:	f3 2e       	mov	r15, r19
    2b54:	00 e0       	ldi	r16, 0x00	; 0
    2b56:	10 e0       	ldi	r17, 0x00	; 0
    2b58:	c0 2e       	mov	r12, r16
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    2b5a:	80 2f       	mov	r24, r16
    2b5c:	0e 94 ac 0a 	call	0x1558	; 0x1558 <matrix_get_row>
        matrix_change = matrix_row ^ matrix_prev[r];
    2b60:	f7 01       	movw	r30, r14
    2b62:	d1 90       	ld	r13, Z+
    2b64:	7f 01       	movw	r14, r30
    2b66:	d8 26       	eor	r13, r24
        if (matrix_change) {
    2b68:	b1 f4       	brne	.+44     	; 0x2b96 <keyboard_task+0x6e>
    2b6a:	0f 5f       	subi	r16, 0xFF	; 255
    2b6c:	1f 4f       	sbci	r17, 0xFF	; 255
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2b6e:	0e 30       	cpi	r16, 0x0E	; 14
    2b70:	11 05       	cpc	r17, r1
    2b72:	91 f7       	brne	.-28     	; 0x2b58 <keyboard_task+0x30>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    2b74:	8f ef       	ldi	r24, 0xFF	; 255
    2b76:	89 83       	std	Y+1, r24	; 0x01
    2b78:	8a 83       	std	Y+2, r24	; 0x02
    2b7a:	1b 82       	std	Y+3, r1	; 0x03
    2b7c:	0e 94 d7 21 	call	0x43ae	; 0x43ae <timer_read>
    2b80:	81 60       	ori	r24, 0x01	; 1
    2b82:	78 2f       	mov	r23, r24
    2b84:	9d 83       	std	Y+5, r25	; 0x05
    2b86:	8c 83       	std	Y+4, r24	; 0x04
    2b88:	49 81       	ldd	r20, Y+1	; 0x01
    2b8a:	5a 81       	ldd	r21, Y+2	; 0x02
    2b8c:	6b 81       	ldd	r22, Y+3	; 0x03
    2b8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b90:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <action_exec>
    2b94:	41 c0       	rjmp	.+130    	; 0x2c18 <keyboard_task+0xf0>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    2b96:	90 91 d7 01 	lds	r25, 0x01D7
    2b9a:	91 ff       	sbrs	r25, 1
    2b9c:	04 c0       	rjmp	.+8      	; 0x2ba6 <keyboard_task+0x7e>
    2b9e:	8b 87       	std	Y+11, r24	; 0x0b
    2ba0:	0e 94 b2 0a 	call	0x1564	; 0x1564 <matrix_print>
    2ba4:	8b 85       	ldd	r24, Y+11	; 0x0b
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    2baa:	4d 2d       	mov	r20, r13
    2bac:	50 e0       	ldi	r21, 0x00	; 0
    2bae:	92 2f       	mov	r25, r18
    2bb0:	ba 01       	movw	r22, r20
    2bb2:	02 2e       	mov	r0, r18
    2bb4:	02 c0       	rjmp	.+4      	; 0x2bba <keyboard_task+0x92>
    2bb6:	75 95       	asr	r23
    2bb8:	67 95       	ror	r22
    2bba:	0a 94       	dec	r0
    2bbc:	e2 f7       	brpl	.-8      	; 0x2bb6 <keyboard_task+0x8e>
    2bbe:	60 ff       	sbrs	r22, 0
    2bc0:	25 c0       	rjmp	.+74     	; 0x2c0c <keyboard_task+0xe4>
                    action_exec((keyevent_t){
    2bc2:	2e 83       	std	Y+6, r18	; 0x06
    2bc4:	cf 82       	std	Y+7, r12	; 0x07
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    2bc6:	ee 24       	eor	r14, r14
    2bc8:	e3 94       	inc	r14
    2bca:	f1 2c       	mov	r15, r1
    2bcc:	02 c0       	rjmp	.+4      	; 0x2bd2 <keyboard_task+0xaa>
    2bce:	ee 0c       	add	r14, r14
    2bd0:	ff 1c       	adc	r15, r15
    2bd2:	9a 95       	dec	r25
    2bd4:	e2 f7       	brpl	.-8      	; 0x2bce <keyboard_task+0xa6>
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	8e 21       	and	r24, r14
    2bda:	9f 21       	and	r25, r15
    2bdc:	21 e0       	ldi	r18, 0x01	; 1
    2bde:	89 2b       	or	r24, r25
    2be0:	09 f4       	brne	.+2      	; 0x2be4 <keyboard_task+0xbc>
    2be2:	20 e0       	ldi	r18, 0x00	; 0
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    2be4:	28 87       	std	Y+8, r18	; 0x08
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    2be6:	0e 94 d7 21 	call	0x43ae	; 0x43ae <timer_read>
    2bea:	81 60       	ori	r24, 0x01	; 1
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    2bec:	78 2f       	mov	r23, r24
    2bee:	9a 87       	std	Y+10, r25	; 0x0a
    2bf0:	89 87       	std	Y+9, r24	; 0x09
    2bf2:	4e 81       	ldd	r20, Y+6	; 0x06
    2bf4:	5f 81       	ldd	r21, Y+7	; 0x07
    2bf6:	68 85       	ldd	r22, Y+8	; 0x08
    2bf8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bfa:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <action_exec>
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    2bfe:	f8 01       	movw	r30, r16
    2c00:	ea 58       	subi	r30, 0x8A	; 138
    2c02:	fe 4f       	sbci	r31, 0xFE	; 254
    2c04:	80 81       	ld	r24, Z
    2c06:	8e 25       	eor	r24, r14
    2c08:	80 83       	st	Z, r24
                    // process a key per task call
                    goto MATRIX_LOOP_END;
    2c0a:	06 c0       	rjmp	.+12     	; 0x2c18 <keyboard_task+0xf0>
    2c0c:	2f 5f       	subi	r18, 0xFF	; 255
    2c0e:	3f 4f       	sbci	r19, 0xFF	; 255
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    2c10:	26 30       	cpi	r18, 0x06	; 6
    2c12:	31 05       	cpc	r19, r1
    2c14:	61 f6       	brne	.-104    	; 0x2bae <keyboard_task+0x86>
    2c16:	a9 cf       	rjmp	.-174    	; 0x2b6a <keyboard_task+0x42>

MATRIX_LOOP_END:

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    2c18:	0e 94 02 26 	call	0x4c04	; 0x4c04 <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    2c1c:	10 91 75 01 	lds	r17, 0x0175
    2c20:	0e 94 db 14 	call	0x29b6	; 0x29b6 <host_keyboard_leds>
    2c24:	18 17       	cp	r17, r24
    2c26:	a1 f0       	breq	.+40     	; 0x2c50 <keyboard_task+0x128>
        led_status = host_keyboard_leds();
    2c28:	0e 94 db 14 	call	0x29b6	; 0x29b6 <host_keyboard_leds>
    2c2c:	80 93 75 01 	sts	0x0175, r24
        keyboard_set_leds(led_status);
    }
}
    2c30:	2b 96       	adiw	r28, 0x0b	; 11
    2c32:	0f b6       	in	r0, 0x3f	; 63
    2c34:	f8 94       	cli
    2c36:	de bf       	out	0x3e, r29	; 62
    2c38:	0f be       	out	0x3f, r0	; 63
    2c3a:	cd bf       	out	0x3d, r28	; 61
    2c3c:	df 91       	pop	r29
    2c3e:	cf 91       	pop	r28
    2c40:	1f 91       	pop	r17
    2c42:	0f 91       	pop	r16
    2c44:	ff 90       	pop	r15
    2c46:	ef 90       	pop	r14
    2c48:	df 90       	pop	r13
    2c4a:	cf 90       	pop	r12
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        keyboard_set_leds(led_status);
    2c4c:	0c 94 6c 15 	jmp	0x2ad8	; 0x2ad8 <keyboard_set_leds>
    }
}
    2c50:	2b 96       	adiw	r28, 0x0b	; 11
    2c52:	0f b6       	in	r0, 0x3f	; 63
    2c54:	f8 94       	cli
    2c56:	de bf       	out	0x3e, r29	; 62
    2c58:	0f be       	out	0x3f, r0	; 63
    2c5a:	cd bf       	out	0x3d, r28	; 61
    2c5c:	df 91       	pop	r29
    2c5e:	cf 91       	pop	r28
    2c60:	1f 91       	pop	r17
    2c62:	0f 91       	pop	r16
    2c64:	ff 90       	pop	r15
    2c66:	ef 90       	pop	r14
    2c68:	df 90       	pop	r13
    2c6a:	cf 90       	pop	r12
    2c6c:	08 95       	ret

00002c6e <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    2c6e:	cf 93       	push	r28
    2c70:	df 93       	push	r29
    2c72:	cd b7       	in	r28, 0x3d	; 61
    2c74:	de b7       	in	r29, 0x3e	; 62
    2c76:	2b 97       	sbiw	r28, 0x0b	; 11
    2c78:	0f b6       	in	r0, 0x3f	; 63
    2c7a:	f8 94       	cli
    2c7c:	de bf       	out	0x3e, r29	; 62
    2c7e:	0f be       	out	0x3f, r0	; 63
    2c80:	cd bf       	out	0x3d, r28	; 61
    2c82:	4f 83       	std	Y+7, r20	; 0x07
    2c84:	58 87       	std	Y+8, r21	; 0x08
    2c86:	69 87       	std	Y+9, r22	; 0x09
    2c88:	7a 87       	std	Y+10, r23	; 0x0a
    2c8a:	8b 87       	std	Y+11, r24	; 0x0b
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
    }

    keyrecord_t record = { .event = event };
    2c8c:	de 01       	movw	r26, r28
    2c8e:	11 96       	adiw	r26, 0x01	; 1
    2c90:	86 e0       	ldi	r24, 0x06	; 6
    2c92:	fd 01       	movw	r30, r26
    2c94:	11 92       	st	Z+, r1
    2c96:	8a 95       	dec	r24
    2c98:	e9 f7       	brne	.-6      	; 0x2c94 <action_exec+0x26>
    2c9a:	85 e0       	ldi	r24, 0x05	; 5
    2c9c:	fe 01       	movw	r30, r28
    2c9e:	37 96       	adiw	r30, 0x07	; 7
    2ca0:	01 90       	ld	r0, Z+
    2ca2:	0d 92       	st	X+, r0
    2ca4:	8a 95       	dec	r24
    2ca6:	e1 f7       	brne	.-8      	; 0x2ca0 <action_exec+0x32>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    2ca8:	49 81       	ldd	r20, Y+1	; 0x01
    2caa:	5a 81       	ldd	r21, Y+2	; 0x02
    2cac:	6b 81       	ldd	r22, Y+3	; 0x03
    2cae:	7c 81       	ldd	r23, Y+4	; 0x04
    2cb0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb2:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb4:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    2cb8:	2b 96       	adiw	r28, 0x0b	; 11
    2cba:	0f b6       	in	r0, 0x3f	; 63
    2cbc:	f8 94       	cli
    2cbe:	de bf       	out	0x3e, r29	; 62
    2cc0:	0f be       	out	0x3f, r0	; 63
    2cc2:	cd bf       	out	0x3d, r28	; 61
    2cc4:	df 91       	pop	r29
    2cc6:	cf 91       	pop	r28
    2cc8:	08 95       	ret

00002cca <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    2cca:	cf 93       	push	r28
    2ccc:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    2cce:	88 23       	and	r24, r24
    2cd0:	09 f4       	brne	.+2      	; 0x2cd4 <register_code+0xa>
    2cd2:	c1 c0       	rjmp	.+386    	; 0x2e56 <register_code+0x18c>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2cd4:	82 38       	cpi	r24, 0x82	; 130
    2cd6:	59 f4       	brne	.+22     	; 0x2cee <register_code+0x24>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    2cd8:	0e 94 db 14 	call	0x29b6	; 0x29b6 <host_keyboard_leds>
    2cdc:	81 fd       	sbrc	r24, 1
    2cde:	bb c0       	rjmp	.+374    	; 0x2e56 <register_code+0x18c>
#endif
        add_key(KC_CAPSLOCK);
    2ce0:	89 e3       	ldi	r24, 0x39	; 57
    2ce2:	0e 94 09 20 	call	0x4012	; 0x4012 <add_key>
        send_keyboard_report();
    2ce6:	0e 94 e5 20 	call	0x41ca	; 0x41ca <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    2cea:	89 e3       	ldi	r24, 0x39	; 57
    2cec:	0c c0       	rjmp	.+24     	; 0x2d06 <register_code+0x3c>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    2cee:	83 38       	cpi	r24, 0x83	; 131
    2cf0:	79 f4       	brne	.+30     	; 0x2d10 <register_code+0x46>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    2cf2:	0e 94 db 14 	call	0x29b6	; 0x29b6 <host_keyboard_leds>
    2cf6:	80 fd       	sbrc	r24, 0
    2cf8:	ae c0       	rjmp	.+348    	; 0x2e56 <register_code+0x18c>
#endif
        add_key(KC_NUMLOCK);
    2cfa:	83 e5       	ldi	r24, 0x53	; 83
    2cfc:	0e 94 09 20 	call	0x4012	; 0x4012 <add_key>
        send_keyboard_report();
    2d00:	0e 94 e5 20 	call	0x41ca	; 0x41ca <send_keyboard_report>
        del_key(KC_NUMLOCK);
    2d04:	83 e5       	ldi	r24, 0x53	; 83
    2d06:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <del_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2d0a:	cf 91       	pop	r28
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        del_key(KC_NUMLOCK);
        send_keyboard_report();
    2d0c:	0c 94 e5 20 	jmp	0x41ca	; 0x41ca <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    2d10:	84 38       	cpi	r24, 0x84	; 132
    2d12:	59 f4       	brne	.+22     	; 0x2d2a <register_code+0x60>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    2d14:	0e 94 db 14 	call	0x29b6	; 0x29b6 <host_keyboard_leds>
    2d18:	82 fd       	sbrc	r24, 2
    2d1a:	9d c0       	rjmp	.+314    	; 0x2e56 <register_code+0x18c>
#endif
        add_key(KC_SCROLLLOCK);
    2d1c:	87 e4       	ldi	r24, 0x47	; 71
    2d1e:	0e 94 09 20 	call	0x4012	; 0x4012 <add_key>
        send_keyboard_report();
    2d22:	0e 94 e5 20 	call	0x41ca	; 0x41ca <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    2d26:	87 e4       	ldi	r24, 0x47	; 71
    2d28:	ee cf       	rjmp	.-36     	; 0x2d06 <register_code+0x3c>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2d2a:	8c ef       	ldi	r24, 0xFC	; 252
    2d2c:	8c 0f       	add	r24, r28
    2d2e:	81 3a       	cpi	r24, 0xA1	; 161
    2d30:	48 f4       	brcc	.+18     	; 0x2d44 <register_code+0x7a>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    2d32:	8c 2f       	mov	r24, r28
    2d34:	0e 94 8b 2a 	call	0x5516	; 0x5516 <command_proc>
    2d38:	81 11       	cpse	r24, r1
    2d3a:	8d c0       	rjmp	.+282    	; 0x2e56 <register_code+0x18c>
            oneshot_cancel();
        } else
*/
#endif
        {
            add_key(code);
    2d3c:	8c 2f       	mov	r24, r28
    2d3e:	0e 94 09 20 	call	0x4012	; 0x4012 <add_key>
    2d42:	e3 cf       	rjmp	.-58     	; 0x2d0a <register_code+0x40>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    2d44:	80 e2       	ldi	r24, 0x20	; 32
    2d46:	8c 0f       	add	r24, r28
    2d48:	88 30       	cpi	r24, 0x08	; 8
    2d4a:	48 f4       	brcc	.+18     	; 0x2d5e <register_code+0x94>
        add_mods(MOD_BIT(code));
    2d4c:	c7 70       	andi	r28, 0x07	; 7
    2d4e:	81 e0       	ldi	r24, 0x01	; 1
    2d50:	01 c0       	rjmp	.+2      	; 0x2d54 <register_code+0x8a>
    2d52:	88 0f       	add	r24, r24
    2d54:	ca 95       	dec	r28
    2d56:	ea f7       	brpl	.-6      	; 0x2d52 <register_code+0x88>
    2d58:	0e 94 ac 20 	call	0x4158	; 0x4158 <add_mods>
    2d5c:	d6 cf       	rjmp	.-84     	; 0x2d0a <register_code+0x40>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    2d5e:	8b e5       	ldi	r24, 0x5B	; 91
    2d60:	8c 0f       	add	r24, r28
    2d62:	83 30       	cpi	r24, 0x03	; 3
    2d64:	78 f4       	brcc	.+30     	; 0x2d84 <register_code+0xba>
        host_system_send(KEYCODE2SYSTEM(code));
    2d66:	c5 3a       	cpi	r28, 0xA5	; 165
    2d68:	29 f0       	breq	.+10     	; 0x2d74 <register_code+0xaa>
    2d6a:	c6 3a       	cpi	r28, 0xA6	; 166
    2d6c:	31 f4       	brne	.+12     	; 0x2d7a <register_code+0xb0>
    2d6e:	82 e8       	ldi	r24, 0x82	; 130
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	05 c0       	rjmp	.+10     	; 0x2d7e <register_code+0xb4>
    2d74:	81 e8       	ldi	r24, 0x81	; 129
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	02 c0       	rjmp	.+4      	; 0x2d7e <register_code+0xb4>
    2d7a:	83 e8       	ldi	r24, 0x83	; 131
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2d7e:	cf 91       	pop	r28
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    2d80:	0c 94 37 15 	jmp	0x2a6e	; 0x2a6e <host_system_send>
    }
    else if IS_CONSUMER(code) {
    2d84:	88 e5       	ldi	r24, 0x58	; 88
    2d86:	8c 0f       	add	r24, r28
    2d88:	83 31       	cpi	r24, 0x13	; 19
    2d8a:	08 f0       	brcs	.+2      	; 0x2d8e <register_code+0xc4>
    2d8c:	64 c0       	rjmp	.+200    	; 0x2e56 <register_code+0x18c>
        host_consumer_send(KEYCODE2CONSUMER(code));
    2d8e:	c8 3a       	cpi	r28, 0xA8	; 168
    2d90:	39 f1       	breq	.+78     	; 0x2de0 <register_code+0x116>
    2d92:	c9 3a       	cpi	r28, 0xA9	; 169
    2d94:	41 f1       	breq	.+80     	; 0x2de6 <register_code+0x11c>
    2d96:	ca 3a       	cpi	r28, 0xAA	; 170
    2d98:	49 f1       	breq	.+82     	; 0x2dec <register_code+0x122>
    2d9a:	cb 3a       	cpi	r28, 0xAB	; 171
    2d9c:	51 f1       	breq	.+84     	; 0x2df2 <register_code+0x128>
    2d9e:	cc 3a       	cpi	r28, 0xAC	; 172
    2da0:	59 f1       	breq	.+86     	; 0x2df8 <register_code+0x12e>
    2da2:	cd 3a       	cpi	r28, 0xAD	; 173
    2da4:	61 f1       	breq	.+88     	; 0x2dfe <register_code+0x134>
    2da6:	c0 3b       	cpi	r28, 0xB0	; 176
    2da8:	69 f1       	breq	.+90     	; 0x2e04 <register_code+0x13a>
    2daa:	ce 3a       	cpi	r28, 0xAE	; 174
    2dac:	71 f1       	breq	.+92     	; 0x2e0a <register_code+0x140>
    2dae:	cf 3a       	cpi	r28, 0xAF	; 175
    2db0:	79 f1       	breq	.+94     	; 0x2e10 <register_code+0x146>
    2db2:	c1 3b       	cpi	r28, 0xB1	; 177
    2db4:	81 f1       	breq	.+96     	; 0x2e16 <register_code+0x14c>
    2db6:	c2 3b       	cpi	r28, 0xB2	; 178
    2db8:	89 f1       	breq	.+98     	; 0x2e1c <register_code+0x152>
    2dba:	c3 3b       	cpi	r28, 0xB3	; 179
    2dbc:	91 f1       	breq	.+100    	; 0x2e22 <register_code+0x158>
    2dbe:	c4 3b       	cpi	r28, 0xB4	; 180
    2dc0:	99 f1       	breq	.+102    	; 0x2e28 <register_code+0x15e>
    2dc2:	c5 3b       	cpi	r28, 0xB5	; 181
    2dc4:	a1 f1       	breq	.+104    	; 0x2e2e <register_code+0x164>
    2dc6:	c6 3b       	cpi	r28, 0xB6	; 182
    2dc8:	a9 f1       	breq	.+106    	; 0x2e34 <register_code+0x16a>
    2dca:	c7 3b       	cpi	r28, 0xB7	; 183
    2dcc:	b1 f1       	breq	.+108    	; 0x2e3a <register_code+0x170>
    2dce:	c8 3b       	cpi	r28, 0xB8	; 184
    2dd0:	b9 f1       	breq	.+110    	; 0x2e40 <register_code+0x176>
    2dd2:	c9 3b       	cpi	r28, 0xB9	; 185
    2dd4:	c1 f1       	breq	.+112    	; 0x2e46 <register_code+0x17c>
    2dd6:	ca 3b       	cpi	r28, 0xBA	; 186
    2dd8:	c9 f5       	brne	.+114    	; 0x2e4c <register_code+0x182>
    2dda:	8a e2       	ldi	r24, 0x2A	; 42
    2ddc:	92 e0       	ldi	r25, 0x02	; 2
    2dde:	38 c0       	rjmp	.+112    	; 0x2e50 <register_code+0x186>
    2de0:	82 ee       	ldi	r24, 0xE2	; 226
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	35 c0       	rjmp	.+106    	; 0x2e50 <register_code+0x186>
    2de6:	89 ee       	ldi	r24, 0xE9	; 233
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	32 c0       	rjmp	.+100    	; 0x2e50 <register_code+0x186>
    2dec:	8a ee       	ldi	r24, 0xEA	; 234
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	2f c0       	rjmp	.+94     	; 0x2e50 <register_code+0x186>
    2df2:	85 eb       	ldi	r24, 0xB5	; 181
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	2c c0       	rjmp	.+88     	; 0x2e50 <register_code+0x186>
    2df8:	86 eb       	ldi	r24, 0xB6	; 182
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	29 c0       	rjmp	.+82     	; 0x2e50 <register_code+0x186>
    2dfe:	87 eb       	ldi	r24, 0xB7	; 183
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	26 c0       	rjmp	.+76     	; 0x2e50 <register_code+0x186>
    2e04:	8c ec       	ldi	r24, 0xCC	; 204
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	23 c0       	rjmp	.+70     	; 0x2e50 <register_code+0x186>
    2e0a:	8d ec       	ldi	r24, 0xCD	; 205
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	20 c0       	rjmp	.+64     	; 0x2e50 <register_code+0x186>
    2e10:	83 e8       	ldi	r24, 0x83	; 131
    2e12:	91 e0       	ldi	r25, 0x01	; 1
    2e14:	1d c0       	rjmp	.+58     	; 0x2e50 <register_code+0x186>
    2e16:	8a e8       	ldi	r24, 0x8A	; 138
    2e18:	91 e0       	ldi	r25, 0x01	; 1
    2e1a:	1a c0       	rjmp	.+52     	; 0x2e50 <register_code+0x186>
    2e1c:	82 e9       	ldi	r24, 0x92	; 146
    2e1e:	91 e0       	ldi	r25, 0x01	; 1
    2e20:	17 c0       	rjmp	.+46     	; 0x2e50 <register_code+0x186>
    2e22:	84 e9       	ldi	r24, 0x94	; 148
    2e24:	91 e0       	ldi	r25, 0x01	; 1
    2e26:	14 c0       	rjmp	.+40     	; 0x2e50 <register_code+0x186>
    2e28:	81 e2       	ldi	r24, 0x21	; 33
    2e2a:	92 e0       	ldi	r25, 0x02	; 2
    2e2c:	11 c0       	rjmp	.+34     	; 0x2e50 <register_code+0x186>
    2e2e:	83 e2       	ldi	r24, 0x23	; 35
    2e30:	92 e0       	ldi	r25, 0x02	; 2
    2e32:	0e c0       	rjmp	.+28     	; 0x2e50 <register_code+0x186>
    2e34:	84 e2       	ldi	r24, 0x24	; 36
    2e36:	92 e0       	ldi	r25, 0x02	; 2
    2e38:	0b c0       	rjmp	.+22     	; 0x2e50 <register_code+0x186>
    2e3a:	85 e2       	ldi	r24, 0x25	; 37
    2e3c:	92 e0       	ldi	r25, 0x02	; 2
    2e3e:	08 c0       	rjmp	.+16     	; 0x2e50 <register_code+0x186>
    2e40:	86 e2       	ldi	r24, 0x26	; 38
    2e42:	92 e0       	ldi	r25, 0x02	; 2
    2e44:	05 c0       	rjmp	.+10     	; 0x2e50 <register_code+0x186>
    2e46:	87 e2       	ldi	r24, 0x27	; 39
    2e48:	92 e0       	ldi	r25, 0x02	; 2
    2e4a:	02 c0       	rjmp	.+4      	; 0x2e50 <register_code+0x186>
    2e4c:	80 e0       	ldi	r24, 0x00	; 0
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    2e50:	cf 91       	pop	r28
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    2e52:	0c 94 4d 15 	jmp	0x2a9a	; 0x2a9a <host_consumer_send>
    }
}
    2e56:	cf 91       	pop	r28
    2e58:	08 95       	ret

00002e5a <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    2e5a:	88 23       	and	r24, r24
    2e5c:	09 f4       	brne	.+2      	; 0x2e60 <unregister_code+0x6>
    2e5e:	4b c0       	rjmp	.+150    	; 0x2ef6 <unregister_code+0x9c>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2e60:	82 38       	cpi	r24, 0x82	; 130
    2e62:	59 f4       	brne	.+22     	; 0x2e7a <unregister_code+0x20>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    2e64:	0e 94 db 14 	call	0x29b6	; 0x29b6 <host_keyboard_leds>
    2e68:	81 ff       	sbrs	r24, 1
    2e6a:	45 c0       	rjmp	.+138    	; 0x2ef6 <unregister_code+0x9c>
#endif
        add_key(KC_CAPSLOCK);
    2e6c:	89 e3       	ldi	r24, 0x39	; 57
    2e6e:	0e 94 09 20 	call	0x4012	; 0x4012 <add_key>
        send_keyboard_report();
    2e72:	0e 94 e5 20 	call	0x41ca	; 0x41ca <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    2e76:	89 e3       	ldi	r24, 0x39	; 57
    2e78:	0c c0       	rjmp	.+24     	; 0x2e92 <unregister_code+0x38>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    2e7a:	83 38       	cpi	r24, 0x83	; 131
    2e7c:	71 f4       	brne	.+28     	; 0x2e9a <unregister_code+0x40>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    2e7e:	0e 94 db 14 	call	0x29b6	; 0x29b6 <host_keyboard_leds>
    2e82:	80 ff       	sbrs	r24, 0
    2e84:	38 c0       	rjmp	.+112    	; 0x2ef6 <unregister_code+0x9c>
#endif
        add_key(KC_NUMLOCK);
    2e86:	83 e5       	ldi	r24, 0x53	; 83
    2e88:	0e 94 09 20 	call	0x4012	; 0x4012 <add_key>
        send_keyboard_report();
    2e8c:	0e 94 e5 20 	call	0x41ca	; 0x41ca <send_keyboard_report>
        del_key(KC_NUMLOCK);
    2e90:	83 e5       	ldi	r24, 0x53	; 83
    2e92:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <del_key>
        send_keyboard_report();
    2e96:	0c 94 e5 20 	jmp	0x41ca	; 0x41ca <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    2e9a:	84 38       	cpi	r24, 0x84	; 132
    2e9c:	59 f4       	brne	.+22     	; 0x2eb4 <unregister_code+0x5a>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    2e9e:	0e 94 db 14 	call	0x29b6	; 0x29b6 <host_keyboard_leds>
    2ea2:	82 ff       	sbrs	r24, 2
    2ea4:	28 c0       	rjmp	.+80     	; 0x2ef6 <unregister_code+0x9c>
#endif
        add_key(KC_SCROLLLOCK);
    2ea6:	87 e4       	ldi	r24, 0x47	; 71
    2ea8:	0e 94 09 20 	call	0x4012	; 0x4012 <add_key>
        send_keyboard_report();
    2eac:	0e 94 e5 20 	call	0x41ca	; 0x41ca <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    2eb0:	87 e4       	ldi	r24, 0x47	; 71
    2eb2:	ef cf       	rjmp	.-34     	; 0x2e92 <unregister_code+0x38>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2eb4:	9c ef       	ldi	r25, 0xFC	; 252
    2eb6:	98 0f       	add	r25, r24
    2eb8:	91 3a       	cpi	r25, 0xA1	; 161
    2eba:	58 f3       	brcs	.-42     	; 0x2e92 <unregister_code+0x38>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    2ebc:	90 e2       	ldi	r25, 0x20	; 32
    2ebe:	98 0f       	add	r25, r24
    2ec0:	98 30       	cpi	r25, 0x08	; 8
    2ec2:	50 f4       	brcc	.+20     	; 0x2ed8 <unregister_code+0x7e>
        del_mods(MOD_BIT(code));
    2ec4:	87 70       	andi	r24, 0x07	; 7
    2ec6:	91 e0       	ldi	r25, 0x01	; 1
    2ec8:	01 c0       	rjmp	.+2      	; 0x2ecc <unregister_code+0x72>
    2eca:	99 0f       	add	r25, r25
    2ecc:	8a 95       	dec	r24
    2ece:	ea f7       	brpl	.-6      	; 0x2eca <unregister_code+0x70>
    2ed0:	89 2f       	mov	r24, r25
    2ed2:	0e 94 b2 20 	call	0x4164	; 0x4164 <del_mods>
    2ed6:	df cf       	rjmp	.-66     	; 0x2e96 <unregister_code+0x3c>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    2ed8:	9b e5       	ldi	r25, 0x5B	; 91
    2eda:	98 0f       	add	r25, r24
    2edc:	93 30       	cpi	r25, 0x03	; 3
    2ede:	20 f4       	brcc	.+8      	; 0x2ee8 <unregister_code+0x8e>
        host_system_send(0);
    2ee0:	80 e0       	ldi	r24, 0x00	; 0
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	0c 94 37 15 	jmp	0x2a6e	; 0x2a6e <host_system_send>
    }
    else if IS_CONSUMER(code) {
    2ee8:	88 5a       	subi	r24, 0xA8	; 168
    2eea:	83 31       	cpi	r24, 0x13	; 19
    2eec:	20 f4       	brcc	.+8      	; 0x2ef6 <unregister_code+0x9c>
        host_consumer_send(0);
    2eee:	80 e0       	ldi	r24, 0x00	; 0
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	0c 94 4d 15 	jmp	0x2a9a	; 0x2a9a <host_consumer_send>
    2ef6:	08 95       	ret

00002ef8 <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    2ef8:	88 23       	and	r24, r24
    2efa:	21 f0       	breq	.+8      	; 0x2f04 <register_mods+0xc>
        add_mods(mods);
    2efc:	0e 94 ac 20 	call	0x4158	; 0x4158 <add_mods>
        send_keyboard_report();
    2f00:	0c 94 e5 20 	jmp	0x41ca	; 0x41ca <send_keyboard_report>
    2f04:	08 95       	ret

00002f06 <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    2f06:	88 23       	and	r24, r24
    2f08:	21 f0       	breq	.+8      	; 0x2f12 <unregister_mods+0xc>
        del_mods(mods);
    2f0a:	0e 94 b2 20 	call	0x4164	; 0x4164 <del_mods>
        send_keyboard_report();
    2f0e:	0c 94 e5 20 	jmp	0x41ca	; 0x41ca <send_keyboard_report>
    2f12:	08 95       	ret

00002f14 <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    2f14:	cf 92       	push	r12
    2f16:	df 92       	push	r13
    2f18:	ef 92       	push	r14
    2f1a:	ff 92       	push	r15
    2f1c:	0f 93       	push	r16
    2f1e:	1f 93       	push	r17
    2f20:	cf 93       	push	r28
    2f22:	df 93       	push	r29
    2f24:	cd b7       	in	r28, 0x3d	; 61
    2f26:	de b7       	in	r29, 0x3e	; 62
    2f28:	28 97       	sbiw	r28, 0x08	; 8
    2f2a:	0f b6       	in	r0, 0x3f	; 63
    2f2c:	f8 94       	cli
    2f2e:	de bf       	out	0x3e, r29	; 62
    2f30:	0f be       	out	0x3f, r0	; 63
    2f32:	cd bf       	out	0x3d, r28	; 61
    2f34:	8c 01       	movw	r16, r24
    keyevent_t event = record->event;
    2f36:	85 e0       	ldi	r24, 0x05	; 5
    2f38:	f8 01       	movw	r30, r16
    2f3a:	de 01       	movw	r26, r28
    2f3c:	11 96       	adiw	r26, 0x01	; 1
    2f3e:	01 90       	ld	r0, Z+
    2f40:	0d 92       	st	X+, r0
    2f42:	8a 95       	dec	r24
    2f44:	e1 f7       	brne	.-8      	; 0x2f3e <process_action+0x2a>
    2f46:	f8 01       	movw	r30, r16
    2f48:	40 81       	ld	r20, Z
    2f4a:	31 81       	ldd	r19, Z+1	; 0x01
    2f4c:	f2 80       	ldd	r15, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    2f4e:	25 81       	ldd	r18, Z+5	; 0x05
    2f50:	22 95       	swap	r18
    2f52:	2f 70       	andi	r18, 0x0F	; 15

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2f54:	83 81       	ldd	r24, Z+3	; 0x03
    2f56:	94 81       	ldd	r25, Z+4	; 0x04
    2f58:	89 2b       	or	r24, r25
    2f5a:	31 f0       	breq	.+12     	; 0x2f68 <process_action+0x54>
    2f5c:	3f 3f       	cpi	r19, 0xFF	; 255
    2f5e:	31 f4       	brne	.+12     	; 0x2f6c <process_action+0x58>
    2f60:	81 e0       	ldi	r24, 0x01	; 1
    2f62:	4f 3f       	cpi	r20, 0xFF	; 255
    2f64:	19 f4       	brne	.+6      	; 0x2f6c <process_action+0x58>
    2f66:	03 c0       	rjmp	.+6      	; 0x2f6e <process_action+0x5a>
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	01 c0       	rjmp	.+2      	; 0x2f6e <process_action+0x5a>
    2f6c:	80 e0       	ldi	r24, 0x00	; 0
#endif

    if (IS_NOEVENT(event)) { return; }
    2f6e:	80 fd       	sbrc	r24, 0
    2f70:	c6 c2       	rjmp	.+1420   	; 0x34fe <process_action+0x5ea>

    action_t action = layer_switch_get_action(event.key);
    2f72:	49 83       	std	Y+1, r20	; 0x01
    2f74:	3a 83       	std	Y+2, r19	; 0x02
    2f76:	89 81       	ldd	r24, Y+1	; 0x01
    2f78:	9a 81       	ldd	r25, Y+2	; 0x02
    2f7a:	2f 83       	std	Y+7, r18	; 0x07
    2f7c:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <layer_switch_get_action>
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    2f80:	9e 83       	std	Y+6, r25	; 0x06
    2f82:	88 87       	std	Y+8, r24	; 0x08
    2f84:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    2f88:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    2f8c:	4e 81       	ldd	r20, Y+6	; 0x06
    2f8e:	e4 2f       	mov	r30, r20
    2f90:	e2 95       	swap	r30
    2f92:	ef 70       	andi	r30, 0x0F	; 15
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	e0 5a       	subi	r30, 0xA0	; 160
    2f98:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9a:	2f 81       	ldd	r18, Y+7	; 0x07
    2f9c:	68 85       	ldd	r22, Y+8	; 0x08
    2f9e:	0c 94 86 2d 	jmp	0x5b0c	; 0x5b0c <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    2fa2:	84 2f       	mov	r24, r20
    2fa4:	80 7f       	andi	r24, 0xF0	; 240
    2fa6:	14 2f       	mov	r17, r20
    2fa8:	1f 70       	andi	r17, 0x0F	; 15
    2faa:	88 23       	and	r24, r24
    2fac:	11 f0       	breq	.+4      	; 0x2fb2 <process_action+0x9e>
    2fae:	12 95       	swap	r17
    2fb0:	10 7f       	andi	r17, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    2fb2:	ff 20       	and	r15, r15
    2fb4:	59 f0       	breq	.+22     	; 0x2fcc <process_action+0xb8>
                    if (mods) {
    2fb6:	11 23       	and	r17, r17
    2fb8:	09 f4       	brne	.+2      	; 0x2fbc <process_action+0xa8>
    2fba:	56 c2       	rjmp	.+1196   	; 0x3468 <process_action+0x554>
                        add_weak_mods(mods);
    2fbc:	81 2f       	mov	r24, r17
    2fbe:	68 87       	std	Y+8, r22	; 0x08
    2fc0:	0e 94 bc 20 	call	0x4178	; 0x4178 <add_weak_mods>
                        send_keyboard_report();
    2fc4:	0e 94 e5 20 	call	0x41ca	; 0x41ca <send_keyboard_report>
    2fc8:	68 85       	ldd	r22, Y+8	; 0x08
    2fca:	4e c2       	rjmp	.+1180   	; 0x3468 <process_action+0x554>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    2fcc:	86 2f       	mov	r24, r22
    2fce:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <unregister_code>
                    if (mods) {
    2fd2:	11 23       	and	r17, r17
    2fd4:	09 f4       	brne	.+2      	; 0x2fd8 <process_action+0xc4>
    2fd6:	93 c2       	rjmp	.+1318   	; 0x34fe <process_action+0x5ea>
                        del_weak_mods(mods);
    2fd8:	81 2f       	mov	r24, r17
    2fda:	0e 94 c2 20 	call	0x4184	; 0x4184 <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    2fde:	28 96       	adiw	r28, 0x08	; 8
    2fe0:	0f b6       	in	r0, 0x3f	; 63
    2fe2:	f8 94       	cli
    2fe4:	de bf       	out	0x3e, r29	; 62
    2fe6:	0f be       	out	0x3f, r0	; 63
    2fe8:	cd bf       	out	0x3d, r28	; 61
    2fea:	df 91       	pop	r29
    2fec:	cf 91       	pop	r28
    2fee:	1f 91       	pop	r17
    2ff0:	0f 91       	pop	r16
    2ff2:	ff 90       	pop	r15
    2ff4:	ef 90       	pop	r14
    2ff6:	df 90       	pop	r13
    2ff8:	cf 90       	pop	r12
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    2ffa:	0c 94 e5 20 	jmp	0x41ca	; 0x41ca <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    2ffe:	34 2f       	mov	r19, r20
    3000:	30 7f       	andi	r19, 0xF0	; 240
    3002:	84 2f       	mov	r24, r20
    3004:	8f 70       	andi	r24, 0x0F	; 15
    3006:	30 32       	cpi	r19, 0x20	; 32
    3008:	11 f0       	breq	.+4      	; 0x300e <process_action+0xfa>
    300a:	82 95       	swap	r24
    300c:	80 7f       	andi	r24, 0xF0	; 240
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    300e:	66 23       	and	r22, r22
    3010:	19 f0       	breq	.+6      	; 0x3018 <process_action+0x104>
    3012:	61 30       	cpi	r22, 0x01	; 1
    3014:	19 f1       	breq	.+70     	; 0x305c <process_action+0x148>
    3016:	2c c0       	rjmp	.+88     	; 0x3070 <process_action+0x15c>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    3018:	ff 20       	and	r15, r15
    301a:	b1 f0       	breq	.+44     	; 0x3048 <process_action+0x134>
                            if (tap_count == 0) {
    301c:	22 23       	and	r18, r18
    301e:	09 f4       	brne	.+2      	; 0x3022 <process_action+0x10e>
    3020:	94 c1       	rjmp	.+808    	; 0x334a <process_action+0x436>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    3022:	21 30       	cpi	r18, 0x01	; 1
    3024:	09 f0       	breq	.+2      	; 0x3028 <process_action+0x114>
    3026:	91 c1       	rjmp	.+802    	; 0x334a <process_action+0x436>
            break;
#endif
        default:
            break;
    }
}
    3028:	28 96       	adiw	r28, 0x08	; 8
    302a:	0f b6       	in	r0, 0x3f	; 63
    302c:	f8 94       	cli
    302e:	de bf       	out	0x3e, r29	; 62
    3030:	0f be       	out	0x3f, r0	; 63
    3032:	cd bf       	out	0x3d, r28	; 61
    3034:	df 91       	pop	r29
    3036:	cf 91       	pop	r28
    3038:	1f 91       	pop	r17
    303a:	0f 91       	pop	r16
    303c:	ff 90       	pop	r15
    303e:	ef 90       	pop	r14
    3040:	df 90       	pop	r13
    3042:	cf 90       	pop	r12
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    3044:	0c 94 cc 20 	jmp	0x4198	; 0x4198 <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    3048:	22 23       	and	r18, r18
    304a:	19 f0       	breq	.+6      	; 0x3052 <process_action+0x13e>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    304c:	21 30       	cpi	r18, 0x01	; 1
    304e:	09 f4       	brne	.+2      	; 0x3052 <process_action+0x13e>
    3050:	56 c2       	rjmp	.+1196   	; 0x34fe <process_action+0x5ea>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    3052:	8e 83       	std	Y+6, r24	; 0x06
    3054:	0e 94 cf 20 	call	0x419e	; 0x419e <clear_oneshot_mods>
                                unregister_mods(mods);
    3058:	8e 81       	ldd	r24, Y+6	; 0x06
    305a:	8a c1       	rjmp	.+788    	; 0x3370 <process_action+0x45c>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    305c:	ff 20       	and	r15, r15
    305e:	21 f0       	breq	.+8      	; 0x3068 <process_action+0x154>
                            if (tap_count <= TAPPING_TOGGLE) {
    3060:	26 30       	cpi	r18, 0x06	; 6
    3062:	08 f0       	brcs	.+2      	; 0x3066 <process_action+0x152>
    3064:	4c c2       	rjmp	.+1176   	; 0x34fe <process_action+0x5ea>
    3066:	71 c1       	rjmp	.+738    	; 0x334a <process_action+0x436>
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    3068:	25 30       	cpi	r18, 0x05	; 5
    306a:	08 f0       	brcs	.+2      	; 0x306e <process_action+0x15a>
    306c:	48 c2       	rjmp	.+1168   	; 0x34fe <process_action+0x5ea>
    306e:	80 c1       	rjmp	.+768    	; 0x3370 <process_action+0x45c>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    3070:	ff 20       	and	r15, r15
    3072:	21 f0       	breq	.+8      	; 0x307c <process_action+0x168>
                            if (tap_count > 0) {
    3074:	22 23       	and	r18, r18
    3076:	09 f4       	brne	.+2      	; 0x307a <process_action+0x166>
    3078:	68 c1       	rjmp	.+720    	; 0x334a <process_action+0x436>
    307a:	f6 c1       	rjmp	.+1004   	; 0x3468 <process_action+0x554>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    307c:	22 23       	and	r18, r18
    307e:	09 f4       	brne	.+2      	; 0x3082 <process_action+0x16e>
    3080:	77 c1       	rjmp	.+750    	; 0x3370 <process_action+0x45c>
    3082:	06 c2       	rjmp	.+1036   	; 0x3490 <process_action+0x57c>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    3084:	24 2f       	mov	r18, r20
    3086:	26 95       	lsr	r18
    3088:	26 95       	lsr	r18
    308a:	23 70       	andi	r18, 0x03	; 3
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	21 15       	cp	r18, r1
    3090:	31 05       	cpc	r19, r1
    3092:	21 f0       	breq	.+8      	; 0x309c <process_action+0x188>
    3094:	21 30       	cpi	r18, 0x01	; 1
    3096:	31 05       	cpc	r19, r1
    3098:	c9 f0       	breq	.+50     	; 0x30cc <process_action+0x1b8>
    309a:	31 c2       	rjmp	.+1122   	; 0x34fe <process_action+0x5ea>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    309c:	ff 20       	and	r15, r15
    309e:	21 f0       	breq	.+8      	; 0x30a8 <process_action+0x194>
                        host_system_send(action.usage.code);
    30a0:	86 2f       	mov	r24, r22
    30a2:	94 2f       	mov	r25, r20
    30a4:	93 70       	andi	r25, 0x03	; 3
    30a6:	02 c0       	rjmp	.+4      	; 0x30ac <process_action+0x198>
                    } else {
                        host_system_send(0);
    30a8:	80 e0       	ldi	r24, 0x00	; 0
    30aa:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    30ac:	28 96       	adiw	r28, 0x08	; 8
    30ae:	0f b6       	in	r0, 0x3f	; 63
    30b0:	f8 94       	cli
    30b2:	de bf       	out	0x3e, r29	; 62
    30b4:	0f be       	out	0x3f, r0	; 63
    30b6:	cd bf       	out	0x3d, r28	; 61
    30b8:	df 91       	pop	r29
    30ba:	cf 91       	pop	r28
    30bc:	1f 91       	pop	r17
    30be:	0f 91       	pop	r16
    30c0:	ff 90       	pop	r15
    30c2:	ef 90       	pop	r14
    30c4:	df 90       	pop	r13
    30c6:	cf 90       	pop	r12
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    30c8:	0c 94 37 15 	jmp	0x2a6e	; 0x2a6e <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    30cc:	ff 20       	and	r15, r15
    30ce:	21 f0       	breq	.+8      	; 0x30d8 <process_action+0x1c4>
                        host_consumer_send(action.usage.code);
    30d0:	86 2f       	mov	r24, r22
    30d2:	94 2f       	mov	r25, r20
    30d4:	93 70       	andi	r25, 0x03	; 3
    30d6:	02 c0       	rjmp	.+4      	; 0x30dc <process_action+0x1c8>
                    } else {
                        host_consumer_send(0);
    30d8:	80 e0       	ldi	r24, 0x00	; 0
    30da:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    30dc:	28 96       	adiw	r28, 0x08	; 8
    30de:	0f b6       	in	r0, 0x3f	; 63
    30e0:	f8 94       	cli
    30e2:	de bf       	out	0x3e, r29	; 62
    30e4:	0f be       	out	0x3f, r0	; 63
    30e6:	cd bf       	out	0x3d, r28	; 61
    30e8:	df 91       	pop	r29
    30ea:	cf 91       	pop	r28
    30ec:	1f 91       	pop	r17
    30ee:	0f 91       	pop	r16
    30f0:	ff 90       	pop	r15
    30f2:	ef 90       	pop	r14
    30f4:	df 90       	pop	r13
    30f6:	cf 90       	pop	r12
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    30f8:	0c 94 4d 15 	jmp	0x2a9a	; 0x2a9a <host_consumer_send>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    30fc:	86 2f       	mov	r24, r22
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    30fe:	ff 20       	and	r15, r15
    3100:	19 f0       	breq	.+6      	; 0x3108 <process_action+0x1f4>
                mousekey_on(action.key.code);
    3102:	0e 94 88 24 	call	0x4910	; 0x4910 <mousekey_on>
    3106:	02 c0       	rjmp	.+4      	; 0x310c <process_action+0x1f8>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    3108:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <mousekey_off>
            break;
#endif
        default:
            break;
    }
}
    310c:	28 96       	adiw	r28, 0x08	; 8
    310e:	0f b6       	in	r0, 0x3f	; 63
    3110:	f8 94       	cli
    3112:	de bf       	out	0x3e, r29	; 62
    3114:	0f be       	out	0x3f, r0	; 63
    3116:	cd bf       	out	0x3d, r28	; 61
    3118:	df 91       	pop	r29
    311a:	cf 91       	pop	r28
    311c:	1f 91       	pop	r17
    311e:	0f 91       	pop	r16
    3120:	ff 90       	pop	r15
    3122:	ef 90       	pop	r14
    3124:	df 90       	pop	r13
    3126:	cf 90       	pop	r12
            if (event.pressed) {
                mousekey_on(action.key.code);
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
                mousekey_send();
    3128:	0c 94 75 25 	jmp	0x4aea	; 0x4aea <mousekey_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    312c:	84 2f       	mov	r24, r20
    312e:	83 70       	andi	r24, 0x03	; 3
    3130:	09 f0       	breq	.+2      	; 0x3134 <process_action+0x220>
    3132:	76 c0       	rjmp	.+236    	; 0x3220 <process_action+0x30c>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    3134:	f1 10       	cpse	r15, r1
    3136:	e3 c1       	rjmp	.+966    	; 0x34fe <process_action+0x5ea>
                    uint8_t shift = action.layer_bitop.part*4;
    3138:	26 2f       	mov	r18, r22
    313a:	22 95       	swap	r18
    313c:	26 95       	lsr	r18
    313e:	27 70       	andi	r18, 0x07	; 7
    3140:	22 0f       	add	r18, r18
    3142:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    3144:	86 2f       	mov	r24, r22
    3146:	8f 70       	andi	r24, 0x0F	; 15
    3148:	c8 2e       	mov	r12, r24
    314a:	d1 2c       	mov	r13, r1
    314c:	e1 2c       	mov	r14, r1
    314e:	f1 2c       	mov	r15, r1
    3150:	02 2e       	mov	r0, r18
    3152:	04 c0       	rjmp	.+8      	; 0x315c <process_action+0x248>
    3154:	cc 0c       	add	r12, r12
    3156:	dd 1c       	adc	r13, r13
    3158:	ee 1c       	adc	r14, r14
    315a:	ff 1c       	adc	r15, r15
    315c:	0a 94       	dec	r0
    315e:	d2 f7       	brpl	.-12     	; 0x3154 <process_action+0x240>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    3160:	64 ff       	sbrs	r22, 4
    3162:	10 c0       	rjmp	.+32     	; 0x3184 <process_action+0x270>
    3164:	6f e0       	ldi	r22, 0x0F	; 15
    3166:	70 e0       	ldi	r23, 0x00	; 0
    3168:	80 e0       	ldi	r24, 0x00	; 0
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	04 c0       	rjmp	.+8      	; 0x3176 <process_action+0x262>
    316e:	66 0f       	add	r22, r22
    3170:	77 1f       	adc	r23, r23
    3172:	88 1f       	adc	r24, r24
    3174:	99 1f       	adc	r25, r25
    3176:	2a 95       	dec	r18
    3178:	d2 f7       	brpl	.-12     	; 0x316e <process_action+0x25a>
    317a:	60 95       	com	r22
    317c:	70 95       	com	r23
    317e:	80 95       	com	r24
    3180:	90 95       	com	r25
    3182:	03 c0       	rjmp	.+6      	; 0x318a <process_action+0x276>
    3184:	60 e0       	ldi	r22, 0x00	; 0
    3186:	70 e0       	ldi	r23, 0x00	; 0
    3188:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    318a:	24 2f       	mov	r18, r20
    318c:	26 95       	lsr	r18
    318e:	26 95       	lsr	r18
    3190:	23 70       	andi	r18, 0x03	; 3
    3192:	42 2f       	mov	r20, r18
    3194:	50 e0       	ldi	r21, 0x00	; 0
    3196:	42 30       	cpi	r20, 0x02	; 2
    3198:	51 05       	cpc	r21, r1
    319a:	d1 f0       	breq	.+52     	; 0x31d0 <process_action+0x2bc>
    319c:	43 30       	cpi	r20, 0x03	; 3
    319e:	51 05       	cpc	r21, r1
    31a0:	59 f1       	breq	.+86     	; 0x31f8 <process_action+0x2e4>
    31a2:	6c 29       	or	r22, r12
    31a4:	7d 29       	or	r23, r13
    31a6:	8e 29       	or	r24, r14
    31a8:	9f 29       	or	r25, r15
    31aa:	41 30       	cpi	r20, 0x01	; 1
    31ac:	51 05       	cpc	r21, r1
    31ae:	41 f1       	breq	.+80     	; 0x3200 <process_action+0x2ec>
            break;
#endif
        default:
            break;
    }
}
    31b0:	28 96       	adiw	r28, 0x08	; 8
    31b2:	0f b6       	in	r0, 0x3f	; 63
    31b4:	f8 94       	cli
    31b6:	de bf       	out	0x3e, r29	; 62
    31b8:	0f be       	out	0x3f, r0	; 63
    31ba:	cd bf       	out	0x3d, r28	; 61
    31bc:	df 91       	pop	r29
    31be:	cf 91       	pop	r28
    31c0:	1f 91       	pop	r17
    31c2:	0f 91       	pop	r16
    31c4:	ff 90       	pop	r15
    31c6:	ef 90       	pop	r14
    31c8:	df 90       	pop	r13
    31ca:	cf 90       	pop	r12
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    31cc:	0c 94 be 1e 	jmp	0x3d7c	; 0x3d7c <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    31d0:	6c 29       	or	r22, r12
    31d2:	7d 29       	or	r23, r13
    31d4:	8e 29       	or	r24, r14
    31d6:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    31d8:	28 96       	adiw	r28, 0x08	; 8
    31da:	0f b6       	in	r0, 0x3f	; 63
    31dc:	f8 94       	cli
    31de:	de bf       	out	0x3e, r29	; 62
    31e0:	0f be       	out	0x3f, r0	; 63
    31e2:	cd bf       	out	0x3d, r28	; 61
    31e4:	df 91       	pop	r29
    31e6:	cf 91       	pop	r28
    31e8:	1f 91       	pop	r17
    31ea:	0f 91       	pop	r16
    31ec:	ff 90       	pop	r15
    31ee:	ef 90       	pop	r14
    31f0:	df 90       	pop	r13
    31f2:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    31f4:	0c 94 d8 1e 	jmp	0x3db0	; 0x3db0 <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    31f8:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <default_layer_and>
    31fc:	c7 01       	movw	r24, r14
    31fe:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    3200:	28 96       	adiw	r28, 0x08	; 8
    3202:	0f b6       	in	r0, 0x3f	; 63
    3204:	f8 94       	cli
    3206:	de bf       	out	0x3e, r29	; 62
    3208:	0f be       	out	0x3f, r0	; 63
    320a:	cd bf       	out	0x3d, r28	; 61
    320c:	df 91       	pop	r29
    320e:	cf 91       	pop	r28
    3210:	1f 91       	pop	r17
    3212:	0f 91       	pop	r16
    3214:	ff 90       	pop	r15
    3216:	ef 90       	pop	r14
    3218:	df 90       	pop	r13
    321a:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    321c:	0c 94 a4 1e 	jmp	0x3d48	; 0x3d48 <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    3220:	ff 20       	and	r15, r15
    3222:	19 f0       	breq	.+6      	; 0x322a <process_action+0x316>
    3224:	84 2f       	mov	r24, r20
    3226:	81 70       	andi	r24, 0x01	; 1
    3228:	01 c0       	rjmp	.+2      	; 0x322c <process_action+0x318>
    322a:	86 95       	lsr	r24
    322c:	88 23       	and	r24, r24
    322e:	09 f4       	brne	.+2      	; 0x3232 <process_action+0x31e>
    3230:	66 c1       	rjmp	.+716    	; 0x34fe <process_action+0x5ea>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    3232:	26 2f       	mov	r18, r22
    3234:	22 95       	swap	r18
    3236:	26 95       	lsr	r18
    3238:	27 70       	andi	r18, 0x07	; 7
    323a:	22 0f       	add	r18, r18
    323c:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    323e:	86 2f       	mov	r24, r22
    3240:	8f 70       	andi	r24, 0x0F	; 15
    3242:	c8 2e       	mov	r12, r24
    3244:	d1 2c       	mov	r13, r1
    3246:	e1 2c       	mov	r14, r1
    3248:	f1 2c       	mov	r15, r1
    324a:	02 2e       	mov	r0, r18
    324c:	04 c0       	rjmp	.+8      	; 0x3256 <process_action+0x342>
    324e:	cc 0c       	add	r12, r12
    3250:	dd 1c       	adc	r13, r13
    3252:	ee 1c       	adc	r14, r14
    3254:	ff 1c       	adc	r15, r15
    3256:	0a 94       	dec	r0
    3258:	d2 f7       	brpl	.-12     	; 0x324e <process_action+0x33a>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    325a:	64 ff       	sbrs	r22, 4
    325c:	10 c0       	rjmp	.+32     	; 0x327e <process_action+0x36a>
    325e:	6f e0       	ldi	r22, 0x0F	; 15
    3260:	70 e0       	ldi	r23, 0x00	; 0
    3262:	80 e0       	ldi	r24, 0x00	; 0
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	04 c0       	rjmp	.+8      	; 0x3270 <process_action+0x35c>
    3268:	66 0f       	add	r22, r22
    326a:	77 1f       	adc	r23, r23
    326c:	88 1f       	adc	r24, r24
    326e:	99 1f       	adc	r25, r25
    3270:	2a 95       	dec	r18
    3272:	d2 f7       	brpl	.-12     	; 0x3268 <process_action+0x354>
    3274:	60 95       	com	r22
    3276:	70 95       	com	r23
    3278:	80 95       	com	r24
    327a:	90 95       	com	r25
    327c:	03 c0       	rjmp	.+6      	; 0x3284 <process_action+0x370>
    327e:	60 e0       	ldi	r22, 0x00	; 0
    3280:	70 e0       	ldi	r23, 0x00	; 0
    3282:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    3284:	24 2f       	mov	r18, r20
    3286:	26 95       	lsr	r18
    3288:	26 95       	lsr	r18
    328a:	23 70       	andi	r18, 0x03	; 3
    328c:	42 2f       	mov	r20, r18
    328e:	50 e0       	ldi	r21, 0x00	; 0
    3290:	42 30       	cpi	r20, 0x02	; 2
    3292:	51 05       	cpc	r21, r1
    3294:	d1 f0       	breq	.+52     	; 0x32ca <process_action+0x3b6>
    3296:	43 30       	cpi	r20, 0x03	; 3
    3298:	51 05       	cpc	r21, r1
    329a:	59 f1       	breq	.+86     	; 0x32f2 <process_action+0x3de>
    329c:	6c 29       	or	r22, r12
    329e:	7d 29       	or	r23, r13
    32a0:	8e 29       	or	r24, r14
    32a2:	9f 29       	or	r25, r15
    32a4:	41 30       	cpi	r20, 0x01	; 1
    32a6:	51 05       	cpc	r21, r1
    32a8:	41 f1       	breq	.+80     	; 0x32fa <process_action+0x3e6>
            break;
#endif
        default:
            break;
    }
}
    32aa:	28 96       	adiw	r28, 0x08	; 8
    32ac:	0f b6       	in	r0, 0x3f	; 63
    32ae:	f8 94       	cli
    32b0:	de bf       	out	0x3e, r29	; 62
    32b2:	0f be       	out	0x3f, r0	; 63
    32b4:	cd bf       	out	0x3d, r28	; 61
    32b6:	df 91       	pop	r29
    32b8:	cf 91       	pop	r28
    32ba:	1f 91       	pop	r17
    32bc:	0f 91       	pop	r16
    32be:	ff 90       	pop	r15
    32c0:	ef 90       	pop	r14
    32c2:	df 90       	pop	r13
    32c4:	cf 90       	pop	r12
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    32c6:	0c 94 92 1f 	jmp	0x3f24	; 0x3f24 <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    32ca:	6c 29       	or	r22, r12
    32cc:	7d 29       	or	r23, r13
    32ce:	8e 29       	or	r24, r14
    32d0:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    32d2:	28 96       	adiw	r28, 0x08	; 8
    32d4:	0f b6       	in	r0, 0x3f	; 63
    32d6:	f8 94       	cli
    32d8:	de bf       	out	0x3e, r29	; 62
    32da:	0f be       	out	0x3f, r0	; 63
    32dc:	cd bf       	out	0x3d, r28	; 61
    32de:	df 91       	pop	r29
    32e0:	cf 91       	pop	r28
    32e2:	1f 91       	pop	r17
    32e4:	0f 91       	pop	r16
    32e6:	ff 90       	pop	r15
    32e8:	ef 90       	pop	r14
    32ea:	df 90       	pop	r13
    32ec:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    32ee:	0c 94 ac 1f 	jmp	0x3f58	; 0x3f58 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    32f2:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <layer_and>
    32f6:	c7 01       	movw	r24, r14
    32f8:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    32fa:	28 96       	adiw	r28, 0x08	; 8
    32fc:	0f b6       	in	r0, 0x3f	; 63
    32fe:	f8 94       	cli
    3300:	de bf       	out	0x3e, r29	; 62
    3302:	0f be       	out	0x3f, r0	; 63
    3304:	cd bf       	out	0x3d, r28	; 61
    3306:	df 91       	pop	r29
    3308:	cf 91       	pop	r28
    330a:	1f 91       	pop	r17
    330c:	0f 91       	pop	r16
    330e:	ff 90       	pop	r15
    3310:	ef 90       	pop	r14
    3312:	df 90       	pop	r13
    3314:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    3316:	0c 94 78 1f 	jmp	0x3ef0	; 0x3ef0 <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    331a:	60 3f       	cpi	r22, 0xF0	; 240
    331c:	c9 f1       	breq	.+114    	; 0x3390 <process_action+0x47c>
    331e:	18 f4       	brcc	.+6      	; 0x3326 <process_action+0x412>
    3320:	60 3e       	cpi	r22, 0xE0	; 224
    3322:	50 f4       	brcc	.+20     	; 0x3338 <process_action+0x424>
    3324:	9c c0       	rjmp	.+312    	; 0x345e <process_action+0x54a>
    3326:	62 3f       	cpi	r22, 0xF2	; 242
    3328:	09 f4       	brne	.+2      	; 0x332c <process_action+0x418>
    332a:	61 c0       	rjmp	.+194    	; 0x33ee <process_action+0x4da>
    332c:	08 f4       	brcc	.+2      	; 0x3330 <process_action+0x41c>
    332e:	4b c0       	rjmp	.+150    	; 0x33c6 <process_action+0x4b2>
    3330:	63 3f       	cpi	r22, 0xF3	; 243
    3332:	09 f4       	brne	.+2      	; 0x3336 <process_action+0x422>
    3334:	70 c0       	rjmp	.+224    	; 0x3416 <process_action+0x502>
    3336:	93 c0       	rjmp	.+294    	; 0x345e <process_action+0x54a>
    3338:	16 2f       	mov	r17, r22
    333a:	1f 70       	andi	r17, 0x0F	; 15
    333c:	84 2f       	mov	r24, r20
    333e:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    3340:	ff 20       	and	r15, r15
    3342:	99 f0       	breq	.+38     	; 0x336a <process_action+0x456>
                        layer_on(action.layer_tap.val);
    3344:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <layer_on>
                        register_mods(action.layer_tap.code & 0x0f);
    3348:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    334a:	28 96       	adiw	r28, 0x08	; 8
    334c:	0f b6       	in	r0, 0x3f	; 63
    334e:	f8 94       	cli
    3350:	de bf       	out	0x3e, r29	; 62
    3352:	0f be       	out	0x3f, r0	; 63
    3354:	cd bf       	out	0x3d, r28	; 61
    3356:	df 91       	pop	r29
    3358:	cf 91       	pop	r28
    335a:	1f 91       	pop	r17
    335c:	0f 91       	pop	r16
    335e:	ff 90       	pop	r15
    3360:	ef 90       	pop	r14
    3362:	df 90       	pop	r13
    3364:	cf 90       	pop	r12
            switch (action.layer_tap.code) {
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
                        register_mods(action.layer_tap.code & 0x0f);
    3366:	0c 94 7c 17 	jmp	0x2ef8	; 0x2ef8 <register_mods>
                    } else {
                        layer_off(action.layer_tap.val);
    336a:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    336e:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    3370:	28 96       	adiw	r28, 0x08	; 8
    3372:	0f b6       	in	r0, 0x3f	; 63
    3374:	f8 94       	cli
    3376:	de bf       	out	0x3e, r29	; 62
    3378:	0f be       	out	0x3f, r0	; 63
    337a:	cd bf       	out	0x3d, r28	; 61
    337c:	df 91       	pop	r29
    337e:	cf 91       	pop	r28
    3380:	1f 91       	pop	r17
    3382:	0f 91       	pop	r16
    3384:	ff 90       	pop	r15
    3386:	ef 90       	pop	r14
    3388:	df 90       	pop	r13
    338a:	cf 90       	pop	r12
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods(action.layer_tap.code & 0x0f);
    338c:	0c 94 83 17 	jmp	0x2f06	; 0x2f06 <unregister_mods>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    3390:	ff 20       	and	r15, r15
    3392:	a9 f0       	breq	.+42     	; 0x33be <process_action+0x4aa>
                        if (tap_count < TAPPING_TOGGLE) {
    3394:	25 30       	cpi	r18, 0x05	; 5
    3396:	08 f0       	brcs	.+2      	; 0x339a <process_action+0x486>
    3398:	b2 c0       	rjmp	.+356    	; 0x34fe <process_action+0x5ea>
                            layer_invert(action.layer_tap.val);
    339a:	84 2f       	mov	r24, r20
    339c:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    339e:	28 96       	adiw	r28, 0x08	; 8
    33a0:	0f b6       	in	r0, 0x3f	; 63
    33a2:	f8 94       	cli
    33a4:	de bf       	out	0x3e, r29	; 62
    33a6:	0f be       	out	0x3f, r0	; 63
    33a8:	cd bf       	out	0x3d, r28	; 61
    33aa:	df 91       	pop	r29
    33ac:	cf 91       	pop	r28
    33ae:	1f 91       	pop	r17
    33b0:	0f 91       	pop	r16
    33b2:	ff 90       	pop	r15
    33b4:	ef 90       	pop	r14
    33b6:	df 90       	pop	r13
    33b8:	cf 90       	pop	r12
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    33ba:	0c 94 57 1f 	jmp	0x3eae	; 0x3eae <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    33be:	26 30       	cpi	r18, 0x06	; 6
    33c0:	08 f0       	brcs	.+2      	; 0x33c4 <process_action+0x4b0>
    33c2:	9d c0       	rjmp	.+314    	; 0x34fe <process_action+0x5ea>
    33c4:	ea cf       	rjmp	.-44     	; 0x339a <process_action+0x486>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    33c6:	ff 20       	and	r15, r15
    33c8:	a1 f0       	breq	.+40     	; 0x33f2 <process_action+0x4de>
    33ca:	84 2f       	mov	r24, r20
    33cc:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    33ce:	28 96       	adiw	r28, 0x08	; 8
    33d0:	0f b6       	in	r0, 0x3f	; 63
    33d2:	f8 94       	cli
    33d4:	de bf       	out	0x3e, r29	; 62
    33d6:	0f be       	out	0x3f, r0	; 63
    33d8:	cd bf       	out	0x3d, r28	; 61
    33da:	df 91       	pop	r29
    33dc:	cf 91       	pop	r28
    33de:	1f 91       	pop	r17
    33e0:	0f 91       	pop	r16
    33e2:	ff 90       	pop	r15
    33e4:	ef 90       	pop	r14
    33e6:	df 90       	pop	r13
    33e8:	cf 90       	pop	r12
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    33ea:	0c 94 11 1f 	jmp	0x3e22	; 0x3e22 <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    33ee:	ff 20       	and	r15, r15
    33f0:	61 f3       	breq	.-40     	; 0x33ca <process_action+0x4b6>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    33f2:	84 2f       	mov	r24, r20
    33f4:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    33f6:	28 96       	adiw	r28, 0x08	; 8
    33f8:	0f b6       	in	r0, 0x3f	; 63
    33fa:	f8 94       	cli
    33fc:	de bf       	out	0x3e, r29	; 62
    33fe:	0f be       	out	0x3f, r0	; 63
    3400:	cd bf       	out	0x3d, r28	; 61
    3402:	df 91       	pop	r29
    3404:	cf 91       	pop	r28
    3406:	1f 91       	pop	r17
    3408:	0f 91       	pop	r16
    340a:	ff 90       	pop	r15
    340c:	ef 90       	pop	r14
    340e:	df 90       	pop	r13
    3410:	cf 90       	pop	r12
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    3412:	0c 94 32 1f 	jmp	0x3e64	; 0x3e64 <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    3416:	ff 20       	and	r15, r15
    3418:	91 f0       	breq	.+36     	; 0x343e <process_action+0x52a>
    341a:	84 2f       	mov	r24, r20
    341c:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    341e:	28 96       	adiw	r28, 0x08	; 8
    3420:	0f b6       	in	r0, 0x3f	; 63
    3422:	f8 94       	cli
    3424:	de bf       	out	0x3e, r29	; 62
    3426:	0f be       	out	0x3f, r0	; 63
    3428:	cd bf       	out	0x3d, r28	; 61
    342a:	df 91       	pop	r29
    342c:	cf 91       	pop	r28
    342e:	1f 91       	pop	r17
    3430:	0f 91       	pop	r16
    3432:	ff 90       	pop	r15
    3434:	ef 90       	pop	r14
    3436:	df 90       	pop	r13
    3438:	cf 90       	pop	r12
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    343a:	0c 94 fc 1e 	jmp	0x3df8	; 0x3df8 <layer_move>
            break;
#endif
        default:
            break;
    }
}
    343e:	28 96       	adiw	r28, 0x08	; 8
    3440:	0f b6       	in	r0, 0x3f	; 63
    3442:	f8 94       	cli
    3444:	de bf       	out	0x3e, r29	; 62
    3446:	0f be       	out	0x3f, r0	; 63
    3448:	cd bf       	out	0x3d, r28	; 61
    344a:	df 91       	pop	r29
    344c:	cf 91       	pop	r28
    344e:	1f 91       	pop	r17
    3450:	0f 91       	pop	r16
    3452:	ff 90       	pop	r15
    3454:	ef 90       	pop	r14
    3456:	df 90       	pop	r13
    3458:	cf 90       	pop	r12
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    345a:	0c 94 f2 1e 	jmp	0x3de4	; 0x3de4 <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    345e:	ff 20       	and	r15, r15
    3460:	a1 f0       	breq	.+40     	; 0x348a <process_action+0x576>
                        if (tap_count > 0) {
    3462:	22 23       	and	r18, r18
    3464:	09 f4       	brne	.+2      	; 0x3468 <process_action+0x554>
    3466:	b1 cf       	rjmp	.-158    	; 0x33ca <process_action+0x4b6>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    3468:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    346a:	28 96       	adiw	r28, 0x08	; 8
    346c:	0f b6       	in	r0, 0x3f	; 63
    346e:	f8 94       	cli
    3470:	de bf       	out	0x3e, r29	; 62
    3472:	0f be       	out	0x3f, r0	; 63
    3474:	cd bf       	out	0x3d, r28	; 61
    3476:	df 91       	pop	r29
    3478:	cf 91       	pop	r28
    347a:	1f 91       	pop	r17
    347c:	0f 91       	pop	r16
    347e:	ff 90       	pop	r15
    3480:	ef 90       	pop	r14
    3482:	df 90       	pop	r13
    3484:	cf 90       	pop	r12
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    3486:	0c 94 65 16 	jmp	0x2cca	; 0x2cca <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    348a:	22 23       	and	r18, r18
    348c:	09 f4       	brne	.+2      	; 0x3490 <process_action+0x57c>
    348e:	b1 cf       	rjmp	.-158    	; 0x33f2 <process_action+0x4de>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    3490:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    3492:	28 96       	adiw	r28, 0x08	; 8
    3494:	0f b6       	in	r0, 0x3f	; 63
    3496:	f8 94       	cli
    3498:	de bf       	out	0x3e, r29	; 62
    349a:	0f be       	out	0x3f, r0	; 63
    349c:	cd bf       	out	0x3d, r28	; 61
    349e:	df 91       	pop	r29
    34a0:	cf 91       	pop	r28
    34a2:	1f 91       	pop	r17
    34a4:	0f 91       	pop	r16
    34a6:	ff 90       	pop	r15
    34a8:	ef 90       	pop	r14
    34aa:	df 90       	pop	r13
    34ac:	cf 90       	pop	r12
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    34ae:	0c 94 2d 17 	jmp	0x2e5a	; 0x2e5a <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    34b2:	4f 70       	andi	r20, 0x0F	; 15
    34b4:	c8 01       	movw	r24, r16
    34b6:	0e 94 f6 07 	call	0xfec	; 0xfec <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    34ba:	28 96       	adiw	r28, 0x08	; 8
    34bc:	0f b6       	in	r0, 0x3f	; 63
    34be:	f8 94       	cli
    34c0:	de bf       	out	0x3e, r29	; 62
    34c2:	0f be       	out	0x3f, r0	; 63
    34c4:	cd bf       	out	0x3d, r28	; 61
    34c6:	df 91       	pop	r29
    34c8:	cf 91       	pop	r28
    34ca:	1f 91       	pop	r17
    34cc:	0f 91       	pop	r16
    34ce:	ff 90       	pop	r15
    34d0:	ef 90       	pop	r14
    34d2:	df 90       	pop	r13
    34d4:	cf 90       	pop	r12
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    34d6:	0c 94 19 1e 	jmp	0x3c32	; 0x3c32 <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    34da:	4f 70       	andi	r20, 0x0F	; 15
    34dc:	c8 01       	movw	r24, r16
            break;
#endif
        default:
            break;
    }
}
    34de:	28 96       	adiw	r28, 0x08	; 8
    34e0:	0f b6       	in	r0, 0x3f	; 63
    34e2:	f8 94       	cli
    34e4:	de bf       	out	0x3e, r29	; 62
    34e6:	0f be       	out	0x3f, r0	; 63
    34e8:	cd bf       	out	0x3d, r28	; 61
    34ea:	df 91       	pop	r29
    34ec:	cf 91       	pop	r28
    34ee:	1f 91       	pop	r17
    34f0:	0f 91       	pop	r16
    34f2:	ff 90       	pop	r15
    34f4:	ef 90       	pop	r14
    34f6:	df 90       	pop	r13
    34f8:	cf 90       	pop	r12
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    34fa:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <action_function>
            break;
#endif
        default:
            break;
    }
}
    34fe:	28 96       	adiw	r28, 0x08	; 8
    3500:	0f b6       	in	r0, 0x3f	; 63
    3502:	f8 94       	cli
    3504:	de bf       	out	0x3e, r29	; 62
    3506:	0f be       	out	0x3f, r0	; 63
    3508:	cd bf       	out	0x3d, r28	; 61
    350a:	df 91       	pop	r29
    350c:	cf 91       	pop	r28
    350e:	1f 91       	pop	r17
    3510:	0f 91       	pop	r16
    3512:	ff 90       	pop	r15
    3514:	ef 90       	pop	r14
    3516:	df 90       	pop	r13
    3518:	cf 90       	pop	r12
    351a:	08 95       	ret

0000351c <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    351c:	0e 94 c9 20 	call	0x4192	; 0x4192 <clear_weak_mods>
    clear_keys();
    3520:	0e 94 9e 20 	call	0x413c	; 0x413c <clear_keys>
    send_keyboard_report();
    3524:	0e 94 e5 20 	call	0x41ca	; 0x41ca <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    3528:	0e 94 a3 26 	call	0x4d46	; 0x4d46 <mousekey_clear>
    mousekey_send();
    352c:	0e 94 75 25 	call	0x4aea	; 0x4aea <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    3530:	80 e0       	ldi	r24, 0x00	; 0
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <host_system_send>
    host_consumer_send(0);
    3538:	80 e0       	ldi	r24, 0x00	; 0
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	0c 94 4d 15 	jmp	0x2a9a	; 0x2a9a <host_consumer_send>

00003540 <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    3540:	0e 94 b9 20 	call	0x4172	; 0x4172 <clear_mods>
    clear_keyboard_but_mods();
    3544:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <clear_keyboard_but_mods>

00003548 <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    3548:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <layer_switch_get_action>

    switch (action.kind.id) {
    354c:	29 2f       	mov	r18, r25
    354e:	22 95       	swap	r18
    3550:	2f 70       	andi	r18, 0x0F	; 15
    3552:	30 e0       	ldi	r19, 0x00	; 0
    3554:	2c 30       	cpi	r18, 0x0C	; 12
    3556:	31 05       	cpc	r19, r1
    3558:	4c f4       	brge	.+18     	; 0x356c <is_tap_key+0x24>
    355a:	2a 30       	cpi	r18, 0x0A	; 10
    355c:	31 05       	cpc	r19, r1
    355e:	6c f4       	brge	.+26     	; 0x357a <is_tap_key+0x32>
    3560:	22 50       	subi	r18, 0x02	; 2
    3562:	31 09       	sbc	r19, r1
    3564:	22 30       	cpi	r18, 0x02	; 2
    3566:	31 05       	cpc	r19, r1
    3568:	90 f4       	brcc	.+36     	; 0x358e <is_tap_key+0x46>
    356a:	07 c0       	rjmp	.+14     	; 0x357a <is_tap_key+0x32>
    356c:	2c 30       	cpi	r18, 0x0C	; 12
    356e:	31 05       	cpc	r19, r1
    3570:	51 f0       	breq	.+20     	; 0x3586 <is_tap_key+0x3e>
    3572:	2f 30       	cpi	r18, 0x0F	; 15
    3574:	31 05       	cpc	r19, r1
    3576:	39 f0       	breq	.+14     	; 0x3586 <is_tap_key+0x3e>
    3578:	0a c0       	rjmp	.+20     	; 0x358e <is_tap_key+0x46>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    357a:	80 3e       	cpi	r24, 0xE0	; 224
    357c:	10 f0       	brcs	.+4      	; 0x3582 <is_tap_key+0x3a>
    357e:	80 3f       	cpi	r24, 0xF0	; 240
    3580:	31 f4       	brne	.+12     	; 0x358e <is_tap_key+0x46>
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
    3582:	81 e0       	ldi	r24, 0x01	; 1
    3584:	08 95       	ret
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    3586:	93 fb       	bst	r25, 3
    3588:	88 27       	eor	r24, r24
    358a:	80 f9       	bld	r24, 0
    358c:	08 95       	ret
            switch (action.layer_tap.code) {
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
            }
            return false;
    358e:	80 e0       	ldi	r24, 0x00	; 0
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    3590:	08 95       	ret

00003592 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    3592:	cf 93       	push	r28
    3594:	df 93       	push	r29
    3596:	00 d0       	rcall	.+0      	; 0x3598 <debug_event+0x6>
    3598:	00 d0       	rcall	.+0      	; 0x359a <debug_event+0x8>
    359a:	1f 92       	push	r1
    359c:	cd b7       	in	r28, 0x3d	; 61
    359e:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    35a0:	0f 90       	pop	r0
    35a2:	0f 90       	pop	r0
    35a4:	0f 90       	pop	r0
    35a6:	0f 90       	pop	r0
    35a8:	0f 90       	pop	r0
    35aa:	df 91       	pop	r29
    35ac:	cf 91       	pop	r28
    35ae:	08 95       	ret

000035b0 <debug_record>:

void debug_record(keyrecord_t record)
{
    35b0:	cf 93       	push	r28
    35b2:	df 93       	push	r29
    35b4:	00 d0       	rcall	.+0      	; 0x35b6 <debug_record+0x6>
    35b6:	00 d0       	rcall	.+0      	; 0x35b8 <debug_record+0x8>
    35b8:	00 d0       	rcall	.+0      	; 0x35ba <debug_record+0xa>
    35ba:	cd b7       	in	r28, 0x3d	; 61
    35bc:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    35be:	26 96       	adiw	r28, 0x06	; 6
    35c0:	0f b6       	in	r0, 0x3f	; 63
    35c2:	f8 94       	cli
    35c4:	de bf       	out	0x3e, r29	; 62
    35c6:	0f be       	out	0x3f, r0	; 63
    35c8:	cd bf       	out	0x3d, r28	; 61
    35ca:	df 91       	pop	r29
    35cc:	cf 91       	pop	r28
    35ce:	08 95       	ret

000035d0 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    35d0:	1f 93       	push	r17
    35d2:	cf 93       	push	r28
    35d4:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    35d6:	c0 91 84 01 	lds	r28, 0x0184
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    35da:	16 e0       	ldi	r17, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    35dc:	80 91 85 01 	lds	r24, 0x0185
    35e0:	c8 17       	cp	r28, r24
    35e2:	99 f0       	breq	.+38     	; 0x360a <debug_waiting_buffer+0x3a>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    35e4:	d0 e0       	ldi	r29, 0x00	; 0
    35e6:	1c 9f       	mul	r17, r28
    35e8:	f0 01       	movw	r30, r0
    35ea:	1d 9f       	mul	r17, r29
    35ec:	f0 0d       	add	r31, r0
    35ee:	11 24       	eor	r1, r1
    35f0:	ea 57       	subi	r30, 0x7A	; 122
    35f2:	fe 4f       	sbci	r31, 0xFE	; 254
    35f4:	40 81       	ld	r20, Z
    35f6:	51 81       	ldd	r21, Z+1	; 0x01
    35f8:	62 81       	ldd	r22, Z+2	; 0x02
    35fa:	73 81       	ldd	r23, Z+3	; 0x03
    35fc:	84 81       	ldd	r24, Z+4	; 0x04
    35fe:	95 81       	ldd	r25, Z+5	; 0x05
    3600:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3604:	21 96       	adiw	r28, 0x01	; 1
    3606:	c7 70       	andi	r28, 0x07	; 7
    3608:	e9 cf       	rjmp	.-46     	; 0x35dc <debug_waiting_buffer+0xc>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    360a:	df 91       	pop	r29
    360c:	cf 91       	pop	r28
    360e:	1f 91       	pop	r17
    3610:	08 95       	ret

00003612 <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    3612:	40 91 b6 01 	lds	r20, 0x01B6
    3616:	50 91 b7 01 	lds	r21, 0x01B7
    361a:	60 91 b8 01 	lds	r22, 0x01B8
    361e:	70 91 b9 01 	lds	r23, 0x01B9
    3622:	80 91 ba 01 	lds	r24, 0x01BA
    3626:	90 91 bb 01 	lds	r25, 0x01BB
    362a:	0c 94 d8 1a 	jmp	0x35b0	; 0x35b0 <debug_record>

0000362e <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    362e:	cf 93       	push	r28
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    3630:	80 91 bb 01 	lds	r24, 0x01BB
    3634:	82 95       	swap	r24
    3636:	8f 70       	andi	r24, 0x0F	; 15
    3638:	09 f0       	breq	.+2      	; 0x363c <waiting_buffer_scan_tap+0xe>
    363a:	5f c0       	rjmp	.+190    	; 0x36fa <waiting_buffer_scan_tap+0xcc>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    363c:	80 91 b8 01 	lds	r24, 0x01B8
    3640:	88 23       	and	r24, r24
    3642:	09 f4       	brne	.+2      	; 0x3646 <waiting_buffer_scan_tap+0x18>
    3644:	5a c0       	rjmp	.+180    	; 0x36fa <waiting_buffer_scan_tap+0xcc>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3646:	20 91 84 01 	lds	r18, 0x0184
    364a:	a0 91 85 01 	lds	r26, 0x0185
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    364e:	60 91 b6 01 	lds	r22, 0x01B6
    3652:	70 91 b7 01 	lds	r23, 0x01B7
    3656:	80 91 b9 01 	lds	r24, 0x01B9
    365a:	90 91 ba 01 	lds	r25, 0x01BA
    365e:	31 e0       	ldi	r19, 0x01	; 1
    3660:	6f 3f       	cpi	r22, 0xFF	; 255
    3662:	09 f0       	breq	.+2      	; 0x3666 <waiting_buffer_scan_tap+0x38>
    3664:	30 e0       	ldi	r19, 0x00	; 0
    3666:	b3 2f       	mov	r27, r19
    3668:	c6 e0       	ldi	r28, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    366a:	2a 17       	cp	r18, r26
    366c:	09 f4       	brne	.+2      	; 0x3670 <waiting_buffer_scan_tap+0x42>
    366e:	45 c0       	rjmp	.+138    	; 0x36fa <waiting_buffer_scan_tap+0xcc>
    3670:	00 97       	sbiw	r24, 0x00	; 0
    3672:	21 f0       	breq	.+8      	; 0x367c <waiting_buffer_scan_tap+0x4e>
    3674:	7f 3f       	cpi	r23, 0xFF	; 255
    3676:	21 f4       	brne	.+8      	; 0x3680 <waiting_buffer_scan_tap+0x52>
    3678:	4b 2f       	mov	r20, r27
    367a:	03 c0       	rjmp	.+6      	; 0x3682 <waiting_buffer_scan_tap+0x54>
    367c:	41 e0       	ldi	r20, 0x01	; 1
    367e:	01 c0       	rjmp	.+2      	; 0x3682 <waiting_buffer_scan_tap+0x54>
    3680:	40 e0       	ldi	r20, 0x00	; 0
    3682:	30 e0       	ldi	r19, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    3684:	40 fd       	sbrc	r20, 0
    3686:	35 c0       	rjmp	.+106    	; 0x36f2 <waiting_buffer_scan_tap+0xc4>
    3688:	c2 9f       	mul	r28, r18
    368a:	f0 01       	movw	r30, r0
    368c:	c3 9f       	mul	r28, r19
    368e:	f0 0d       	add	r31, r0
    3690:	11 24       	eor	r1, r1
    3692:	ea 57       	subi	r30, 0x7A	; 122
    3694:	fe 4f       	sbci	r31, 0xFE	; 254
    3696:	41 81       	ldd	r20, Z+1	; 0x01
    3698:	74 13       	cpse	r23, r20
    369a:	2b c0       	rjmp	.+86     	; 0x36f2 <waiting_buffer_scan_tap+0xc4>
    369c:	40 81       	ld	r20, Z
    369e:	64 13       	cpse	r22, r20
    36a0:	28 c0       	rjmp	.+80     	; 0x36f2 <waiting_buffer_scan_tap+0xc4>
    36a2:	42 81       	ldd	r20, Z+2	; 0x02
    36a4:	41 11       	cpse	r20, r1
    36a6:	25 c0       	rjmp	.+74     	; 0x36f2 <waiting_buffer_scan_tap+0xc4>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    36a8:	43 81       	ldd	r20, Z+3	; 0x03
    36aa:	54 81       	ldd	r21, Z+4	; 0x04
    36ac:	48 17       	cp	r20, r24
    36ae:	59 07       	cpc	r21, r25
    36b0:	10 f4       	brcc	.+4      	; 0x36b6 <waiting_buffer_scan_tap+0x88>
    36b2:	41 50       	subi	r20, 0x01	; 1
    36b4:	51 09       	sbc	r21, r1
    36b6:	48 1b       	sub	r20, r24
    36b8:	59 0b       	sbc	r21, r25
    36ba:	48 3c       	cpi	r20, 0xC8	; 200
    36bc:	51 05       	cpc	r21, r1
    36be:	c8 f4       	brcc	.+50     	; 0x36f2 <waiting_buffer_scan_tap+0xc4>
            tapping_key.tap.count = 1;
    36c0:	80 91 bb 01 	lds	r24, 0x01BB
    36c4:	8f 70       	andi	r24, 0x0F	; 15
    36c6:	80 61       	ori	r24, 0x10	; 16
    36c8:	80 93 bb 01 	sts	0x01BB, r24
            waiting_buffer[i].tap.count = 1;
    36cc:	86 e0       	ldi	r24, 0x06	; 6
    36ce:	82 9f       	mul	r24, r18
    36d0:	f0 01       	movw	r30, r0
    36d2:	83 9f       	mul	r24, r19
    36d4:	f0 0d       	add	r31, r0
    36d6:	11 24       	eor	r1, r1
    36d8:	e5 57       	subi	r30, 0x75	; 117
    36da:	fe 4f       	sbci	r31, 0xFE	; 254
    36dc:	80 81       	ld	r24, Z
    36de:	8f 70       	andi	r24, 0x0F	; 15
    36e0:	80 61       	ori	r24, 0x10	; 16
    36e2:	80 83       	st	Z, r24
            process_action(&tapping_key);
    36e4:	86 eb       	ldi	r24, 0xB6	; 182
    36e6:	91 e0       	ldi	r25, 0x01	; 1
    36e8:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <process_action>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    36ec:	cf 91       	pop	r28
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    36ee:	0c 94 e8 1a 	jmp	0x35d0	; 0x35d0 <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    36f2:	2f 5f       	subi	r18, 0xFF	; 255
    36f4:	3f 4f       	sbci	r19, 0xFF	; 255
    36f6:	27 70       	andi	r18, 0x07	; 7
    36f8:	b8 cf       	rjmp	.-144    	; 0x366a <waiting_buffer_scan_tap+0x3c>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    36fa:	cf 91       	pop	r28
    36fc:	08 95       	ret

000036fe <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    36fe:	cf 92       	push	r12
    3700:	df 92       	push	r13
    3702:	ef 92       	push	r14
    3704:	ff 92       	push	r15
    3706:	0f 93       	push	r16
    3708:	1f 93       	push	r17
    370a:	cf 93       	push	r28
    370c:	df 93       	push	r29
    370e:	cd b7       	in	r28, 0x3d	; 61
    3710:	de b7       	in	r29, 0x3e	; 62
    3712:	62 97       	sbiw	r28, 0x12	; 18
    3714:	0f b6       	in	r0, 0x3f	; 63
    3716:	f8 94       	cli
    3718:	de bf       	out	0x3e, r29	; 62
    371a:	0f be       	out	0x3f, r0	; 63
    371c:	cd bf       	out	0x3d, r28	; 61
    371e:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    3720:	85 e0       	ldi	r24, 0x05	; 5
    3722:	f8 01       	movw	r30, r16
    3724:	de 01       	movw	r26, r28
    3726:	1d 96       	adiw	r26, 0x0d	; 13
    3728:	01 90       	ld	r0, Z+
    372a:	0d 92       	st	X+, r0
    372c:	8a 95       	dec	r24
    372e:	e1 f7       	brne	.-8      	; 0x3728 <process_tapping+0x2a>
    3730:	d8 01       	movw	r26, r16
    3732:	4c 91       	ld	r20, X
    3734:	11 96       	adiw	r26, 0x01	; 1
    3736:	5c 91       	ld	r21, X
    3738:	11 97       	sbiw	r26, 0x01	; 1
    373a:	12 96       	adiw	r26, 0x02	; 2
    373c:	6c 91       	ld	r22, X
    373e:	12 97       	sbiw	r26, 0x02	; 2
    3740:	13 96       	adiw	r26, 0x03	; 3
    3742:	ed 90       	ld	r14, X+
    3744:	fc 90       	ld	r15, X
    3746:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    3748:	70 91 b6 01 	lds	r23, 0x01B6
    374c:	e0 91 b7 01 	lds	r30, 0x01B7
    3750:	20 91 b9 01 	lds	r18, 0x01B9
    3754:	30 91 ba 01 	lds	r19, 0x01BA
    3758:	21 15       	cp	r18, r1
    375a:	31 05       	cpc	r19, r1
    375c:	31 f0       	breq	.+12     	; 0x376a <process_tapping+0x6c>
    375e:	ef 3f       	cpi	r30, 0xFF	; 255
    3760:	31 f4       	brne	.+12     	; 0x376e <process_tapping+0x70>
    3762:	81 e0       	ldi	r24, 0x01	; 1
    3764:	7f 3f       	cpi	r23, 0xFF	; 255
    3766:	19 f4       	brne	.+6      	; 0x376e <process_tapping+0x70>
    3768:	03 c0       	rjmp	.+6      	; 0x3770 <process_tapping+0x72>
    376a:	81 e0       	ldi	r24, 0x01	; 1
    376c:	01 c0       	rjmp	.+2      	; 0x3770 <process_tapping+0x72>
    376e:	80 e0       	ldi	r24, 0x00	; 0
    3770:	b8 2f       	mov	r27, r24
    3772:	b1 70       	andi	r27, 0x01	; 1
    3774:	cb 2e       	mov	r12, r27
    3776:	80 fd       	sbrc	r24, 0
    3778:	6c c1       	rjmp	.+728    	; 0x3a52 <process_tapping+0x354>
    377a:	d0 90 b8 01 	lds	r13, 0x01B8
    377e:	dd 20       	and	r13, r13
    3780:	09 f4       	brne	.+2      	; 0x3784 <process_tapping+0x86>
    3782:	f5 c0       	rjmp	.+490    	; 0x396e <process_tapping+0x270>
    3784:	f0 91 bb 01 	lds	r31, 0x01BB
        if (WITHIN_TAPPING_TERM(event)) {
    3788:	e2 16       	cp	r14, r18
    378a:	f3 06       	cpc	r15, r19
    378c:	38 f0       	brcs	.+14     	; 0x379c <process_tapping+0x9e>
    378e:	c7 01       	movw	r24, r14
    3790:	82 1b       	sub	r24, r18
    3792:	93 0b       	sbc	r25, r19
    3794:	88 3c       	cpi	r24, 0xC8	; 200
    3796:	91 05       	cpc	r25, r1
    3798:	48 f0       	brcs	.+18     	; 0x37ac <process_tapping+0xae>
    379a:	9b c0       	rjmp	.+310    	; 0x38d2 <process_tapping+0x1d4>
    379c:	20 95       	com	r18
    379e:	30 95       	com	r19
    37a0:	2e 0d       	add	r18, r14
    37a2:	3f 1d       	adc	r19, r15
    37a4:	28 3c       	cpi	r18, 0xC8	; 200
    37a6:	31 05       	cpc	r19, r1
    37a8:	08 f0       	brcs	.+2      	; 0x37ac <process_tapping+0xae>
    37aa:	93 c0       	rjmp	.+294    	; 0x38d2 <process_tapping+0x1d4>
            if (tapping_key.tap.count == 0) {
    37ac:	8f 2f       	mov	r24, r31
    37ae:	80 7f       	andi	r24, 0xF0	; 240
    37b0:	09 f0       	breq	.+2      	; 0x37b4 <process_tapping+0xb6>
    37b2:	52 c0       	rjmp	.+164    	; 0x3858 <process_tapping+0x15a>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    37b4:	e5 13       	cpse	r30, r21
    37b6:	14 c0       	rjmp	.+40     	; 0x37e0 <process_tapping+0xe2>
    37b8:	74 13       	cpse	r23, r20
    37ba:	12 c0       	rjmp	.+36     	; 0x37e0 <process_tapping+0xe2>
    37bc:	d6 2e       	mov	r13, r22
    37be:	61 11       	cpse	r22, r1
    37c0:	0f c0       	rjmp	.+30     	; 0x37e0 <process_tapping+0xe2>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    37c2:	ff 70       	andi	r31, 0x0F	; 15
    37c4:	f0 61       	ori	r31, 0x10	; 16
    37c6:	f0 93 bb 01 	sts	0x01BB, r31
                    debug_tapping_key();
    37ca:	0e 94 09 1b 	call	0x3612	; 0x3612 <debug_tapping_key>
                    process_action(&tapping_key);
    37ce:	86 eb       	ldi	r24, 0xB6	; 182
    37d0:	91 e0       	ldi	r25, 0x01	; 1
    37d2:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    37d6:	80 91 bb 01 	lds	r24, 0x01BB
    37da:	f8 01       	movw	r30, r16
    37dc:	85 83       	std	Z+5, r24	; 0x05
                    // enqueue
                    return false;
    37de:	6c c1       	rjmp	.+728    	; 0x3ab8 <process_tapping+0x3ba>
    37e0:	ef 28       	or	r14, r15
    37e2:	31 f0       	breq	.+12     	; 0x37f0 <process_tapping+0xf2>
    37e4:	5f 3f       	cpi	r21, 0xFF	; 255
    37e6:	31 f4       	brne	.+12     	; 0x37f4 <process_tapping+0xf6>
    37e8:	81 e0       	ldi	r24, 0x01	; 1
    37ea:	4f 3f       	cpi	r20, 0xFF	; 255
    37ec:	19 f4       	brne	.+6      	; 0x37f4 <process_tapping+0xf6>
    37ee:	03 c0       	rjmp	.+6      	; 0x37f6 <process_tapping+0xf8>
    37f0:	81 e0       	ldi	r24, 0x01	; 1
    37f2:	01 c0       	rjmp	.+2      	; 0x37f6 <process_tapping+0xf8>
    37f4:	80 e0       	ldi	r24, 0x00	; 0
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    37f6:	80 fd       	sbrc	r24, 0
    37f8:	03 c0       	rjmp	.+6      	; 0x3800 <process_tapping+0x102>
    37fa:	81 e0       	ldi	r24, 0x01	; 1
    37fc:	86 27       	eor	r24, r22
    37fe:	01 c0       	rjmp	.+2      	; 0x3802 <process_tapping+0x104>
    3800:	80 e0       	ldi	r24, 0x00	; 0
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    3802:	f8 2f       	mov	r31, r24
    3804:	f1 70       	andi	r31, 0x01	; 1
    3806:	ff 2e       	mov	r15, r31
    3808:	80 ff       	sbrs	r24, 0
    380a:	1c c0       	rjmp	.+56     	; 0x3844 <process_tapping+0x146>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    380c:	80 91 84 01 	lds	r24, 0x0184
    3810:	20 91 85 01 	lds	r18, 0x0185
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    3814:	36 e0       	ldi	r19, 0x06	; 6
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3816:	82 17       	cp	r24, r18
    3818:	09 f4       	brne	.+2      	; 0x381c <process_tapping+0x11e>
    381a:	28 c1       	rjmp	.+592    	; 0x3a6c <process_tapping+0x36e>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    381c:	90 e0       	ldi	r25, 0x00	; 0
    381e:	38 9f       	mul	r19, r24
    3820:	f0 01       	movw	r30, r0
    3822:	39 9f       	mul	r19, r25
    3824:	f0 0d       	add	r31, r0
    3826:	11 24       	eor	r1, r1
    3828:	ea 57       	subi	r30, 0x7A	; 122
    382a:	fe 4f       	sbci	r31, 0xFE	; 254
    382c:	71 81       	ldd	r23, Z+1	; 0x01
    382e:	57 13       	cpse	r21, r23
    3830:	06 c0       	rjmp	.+12     	; 0x383e <process_tapping+0x140>
    3832:	70 81       	ld	r23, Z
    3834:	47 13       	cpse	r20, r23
    3836:	03 c0       	rjmp	.+6      	; 0x383e <process_tapping+0x140>
    3838:	72 81       	ldd	r23, Z+2	; 0x02
    383a:	67 13       	cpse	r22, r23
    383c:	03 c0       	rjmp	.+6      	; 0x3844 <process_tapping+0x146>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    383e:	01 96       	adiw	r24, 0x01	; 1
    3840:	87 70       	andi	r24, 0x07	; 7
    3842:	e9 cf       	rjmp	.-46     	; 0x3816 <process_tapping+0x118>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    3844:	d6 2e       	mov	r13, r22
    3846:	66 23       	and	r22, r22
    3848:	09 f4       	brne	.+2      	; 0x384c <process_tapping+0x14e>
    384a:	36 c1       	rjmp	.+620    	; 0x3ab8 <process_tapping+0x3ba>
                        tapping_key.tap.interrupted = true;
    384c:	80 91 bb 01 	lds	r24, 0x01BB
    3850:	81 60       	ori	r24, 0x01	; 1
    3852:	80 93 bb 01 	sts	0x01BB, r24
    3856:	53 c0       	rjmp	.+166    	; 0x38fe <process_tapping+0x200>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3858:	e5 13       	cpse	r30, r21
    385a:	08 c0       	rjmp	.+16     	; 0x386c <process_tapping+0x16e>
    385c:	74 13       	cpse	r23, r20
    385e:	06 c0       	rjmp	.+12     	; 0x386c <process_tapping+0x16e>
    3860:	61 11       	cpse	r22, r1
    3862:	04 c0       	rjmp	.+8      	; 0x386c <process_tapping+0x16e>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    3864:	d8 01       	movw	r26, r16
    3866:	15 96       	adiw	r26, 0x05	; 5
    3868:	fc 93       	st	X, r31
    386a:	ae c0       	rjmp	.+348    	; 0x39c8 <process_tapping+0x2ca>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    386c:	4d 87       	std	Y+13, r20	; 0x0d
    386e:	5e 87       	std	Y+14, r21	; 0x0e
    3870:	8d 85       	ldd	r24, Y+13	; 0x0d
    3872:	9e 85       	ldd	r25, Y+14	; 0x0e
    3874:	6a 8b       	std	Y+18, r22	; 0x12
    3876:	0e 94 a4 1a 	call	0x3548	; 0x3548 <is_tap_key>
    387a:	6a 89       	ldd	r22, Y+18	; 0x12
    387c:	88 23       	and	r24, r24
    387e:	29 f1       	breq	.+74     	; 0x38ca <process_tapping+0x1cc>
    3880:	d6 2e       	mov	r13, r22
    3882:	66 23       	and	r22, r22
    3884:	11 f1       	breq	.+68     	; 0x38ca <process_tapping+0x1cc>
                    if (tapping_key.tap.count > 1) {
    3886:	20 91 bb 01 	lds	r18, 0x01BB
    388a:	82 2f       	mov	r24, r18
    388c:	82 95       	swap	r24
    388e:	8f 70       	andi	r24, 0x0F	; 15
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	02 97       	sbiw	r24, 0x02	; 2
    3894:	0c f4       	brge	.+2      	; 0x3898 <process_tapping+0x19a>
    3896:	60 c0       	rjmp	.+192    	; 0x3958 <process_tapping+0x25a>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    3898:	80 91 b6 01 	lds	r24, 0x01B6
    389c:	90 91 b7 01 	lds	r25, 0x01B7
    38a0:	98 87       	std	Y+8, r25	; 0x08
    38a2:	8f 83       	std	Y+7, r24	; 0x07
    38a4:	19 86       	std	Y+9, r1	; 0x09
    38a6:	fb 86       	std	Y+11, r15	; 0x0b
    38a8:	ea 86       	std	Y+10, r14	; 0x0a
    38aa:	2c 87       	std	Y+12, r18	; 0x0c
    38ac:	ce 01       	movw	r24, r28
    38ae:	07 96       	adiw	r24, 0x07	; 7
    38b0:	51 c0       	rjmp	.+162    	; 0x3954 <process_tapping+0x256>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    38b2:	e5 17       	cp	r30, r21
    38b4:	31 f1       	breq	.+76     	; 0x3902 <process_tapping+0x204>
                    keyp->tap = tapping_key.tap;
                    process_action(keyp);
                    tapping_key = (keyrecord_t){};
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    38b6:	4d 87       	std	Y+13, r20	; 0x0d
    38b8:	5e 87       	std	Y+14, r21	; 0x0e
    38ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    38bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    38be:	6a 8b       	std	Y+18, r22	; 0x12
    38c0:	0e 94 a4 1a 	call	0x3548	; 0x3548 <is_tap_key>
    38c4:	6a 89       	ldd	r22, Y+18	; 0x12
    38c6:	81 11       	cpse	r24, r1
    38c8:	2e c0       	rjmp	.+92     	; 0x3926 <process_tapping+0x228>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    38ca:	c8 01       	movw	r24, r16
    38cc:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <process_action>
    38d0:	a4 c0       	rjmp	.+328    	; 0x3a1a <process_tapping+0x31c>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    38d2:	8f 2f       	mov	r24, r31
    38d4:	80 7f       	andi	r24, 0xF0	; 240
    38d6:	69 f7       	brne	.-38     	; 0x38b2 <process_tapping+0x1b4>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    38d8:	7e 2d       	mov	r23, r14
    38da:	f9 8a       	std	Y+17, r15	; 0x11
    38dc:	e8 8a       	std	Y+16, r14	; 0x10
    38de:	89 89       	ldd	r24, Y+17	; 0x11
    38e0:	0e 94 c9 1a 	call	0x3592	; 0x3592 <debug_event>
                process_action(&tapping_key);
    38e4:	86 eb       	ldi	r24, 0xB6	; 182
    38e6:	91 e0       	ldi	r25, 0x01	; 1
    38e8:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <process_action>
                tapping_key = (keyrecord_t){};
    38ec:	e6 eb       	ldi	r30, 0xB6	; 182
    38ee:	f1 e0       	ldi	r31, 0x01	; 1
    38f0:	86 e0       	ldi	r24, 0x06	; 6
    38f2:	df 01       	movw	r26, r30
    38f4:	1d 92       	st	X+, r1
    38f6:	8a 95       	dec	r24
    38f8:	e9 f7       	brne	.-6      	; 0x38f4 <process_tapping+0x1f6>
                debug_tapping_key();
    38fa:	0e 94 09 1b 	call	0x3612	; 0x3612 <debug_tapping_key>
                return false;
    38fe:	d1 2c       	mov	r13, r1
    3900:	db c0       	rjmp	.+438    	; 0x3ab8 <process_tapping+0x3ba>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3902:	74 13       	cpse	r23, r20
    3904:	d8 cf       	rjmp	.-80     	; 0x38b6 <process_tapping+0x1b8>
    3906:	61 11       	cpse	r22, r1
    3908:	d6 cf       	rjmp	.-84     	; 0x38b6 <process_tapping+0x1b8>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    390a:	d8 01       	movw	r26, r16
    390c:	15 96       	adiw	r26, 0x05	; 5
    390e:	fc 93       	st	X, r31
                    process_action(keyp);
    3910:	c8 01       	movw	r24, r16
    3912:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <process_action>
                    tapping_key = (keyrecord_t){};
    3916:	e6 eb       	ldi	r30, 0xB6	; 182
    3918:	f1 e0       	ldi	r31, 0x01	; 1
    391a:	86 e0       	ldi	r24, 0x06	; 6
    391c:	df 01       	movw	r26, r30
    391e:	1d 92       	st	X+, r1
    3920:	8a 95       	dec	r24
    3922:	e9 f7       	brne	.-6      	; 0x391e <process_tapping+0x220>
                    return true;
    3924:	c9 c0       	rjmp	.+402    	; 0x3ab8 <process_tapping+0x3ba>
                }
                else if (is_tap_key(event.key) && event.pressed) {
    3926:	d6 2e       	mov	r13, r22
    3928:	66 23       	and	r22, r22
    392a:	79 f2       	breq	.-98     	; 0x38ca <process_tapping+0x1cc>
                    if (tapping_key.tap.count > 1) {
    392c:	20 91 bb 01 	lds	r18, 0x01BB
    3930:	82 2f       	mov	r24, r18
    3932:	82 95       	swap	r24
    3934:	8f 70       	andi	r24, 0x0F	; 15
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	02 97       	sbiw	r24, 0x02	; 2
    393a:	74 f0       	brlt	.+28     	; 0x3958 <process_tapping+0x25a>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    393c:	80 91 b6 01 	lds	r24, 0x01B6
    3940:	90 91 b7 01 	lds	r25, 0x01B7
    3944:	9a 83       	std	Y+2, r25	; 0x02
    3946:	89 83       	std	Y+1, r24	; 0x01
    3948:	1b 82       	std	Y+3, r1	; 0x03
    394a:	fd 82       	std	Y+5, r15	; 0x05
    394c:	ec 82       	std	Y+4, r14	; 0x04
    394e:	2e 83       	std	Y+6, r18	; 0x06
    3950:	ce 01       	movw	r24, r28
    3952:	01 96       	adiw	r24, 0x01	; 1
    3954:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last timeout tap(1).\n");
                    }
                    tapping_key = *keyp;
    3958:	86 e0       	ldi	r24, 0x06	; 6
    395a:	f8 01       	movw	r30, r16
    395c:	a6 eb       	ldi	r26, 0xB6	; 182
    395e:	b1 e0       	ldi	r27, 0x01	; 1
    3960:	01 90       	ld	r0, Z+
    3962:	0d 92       	st	X+, r0
    3964:	8a 95       	dec	r24
    3966:	e1 f7       	brne	.-8      	; 0x3960 <process_tapping+0x262>
                    waiting_buffer_scan_tap();
    3968:	0e 94 17 1b 	call	0x362e	; 0x362e <waiting_buffer_scan_tap>
    396c:	6f c0       	rjmp	.+222    	; 0x3a4c <process_tapping+0x34e>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    396e:	e2 16       	cp	r14, r18
    3970:	f3 06       	cpc	r15, r19
    3972:	28 f0       	brcs	.+10     	; 0x397e <process_tapping+0x280>
    3974:	c7 01       	movw	r24, r14
    3976:	82 1b       	sub	r24, r18
    3978:	93 0b       	sbc	r25, r19
    397a:	9c 01       	movw	r18, r24
    397c:	04 c0       	rjmp	.+8      	; 0x3986 <process_tapping+0x288>
    397e:	20 95       	com	r18
    3980:	30 95       	com	r19
    3982:	2e 0d       	add	r18, r14
    3984:	3f 1d       	adc	r19, r15
    3986:	28 3c       	cpi	r18, 0xC8	; 200
    3988:	31 05       	cpc	r19, r1
    398a:	08 f0       	brcs	.+2      	; 0x398e <process_tapping+0x290>
    398c:	52 c0       	rjmp	.+164    	; 0x3a32 <process_tapping+0x334>
            if (event.pressed) {
    398e:	d6 2e       	mov	r13, r22
    3990:	66 23       	and	r22, r22
    3992:	09 f4       	brne	.+2      	; 0x3996 <process_tapping+0x298>
    3994:	9a cf       	rjmp	.-204    	; 0x38ca <process_tapping+0x1cc>
                if (IS_TAPPING_KEY(event.key)) {
    3996:	e5 13       	cpse	r30, r21
    3998:	2c c0       	rjmp	.+88     	; 0x39f2 <process_tapping+0x2f4>
    399a:	74 13       	cpse	r23, r20
    399c:	2a c0       	rjmp	.+84     	; 0x39f2 <process_tapping+0x2f4>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    399e:	80 91 bb 01 	lds	r24, 0x01BB
    39a2:	80 fd       	sbrc	r24, 0
    39a4:	1d c0       	rjmp	.+58     	; 0x39e0 <process_tapping+0x2e2>
    39a6:	98 2f       	mov	r25, r24
    39a8:	92 95       	swap	r25
    39aa:	9f 70       	andi	r25, 0x0F	; 15
    39ac:	c9 f0       	breq	.+50     	; 0x39e0 <process_tapping+0x2e2>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    39ae:	d8 01       	movw	r26, r16
    39b0:	15 96       	adiw	r26, 0x05	; 5
    39b2:	8c 93       	st	X, r24
    39b4:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    39b6:	9f 30       	cpi	r25, 0x0F	; 15
    39b8:	39 f0       	breq	.+14     	; 0x39c8 <process_tapping+0x2ca>
    39ba:	9f 5f       	subi	r25, 0xFF	; 255
    39bc:	92 95       	swap	r25
    39be:	90 7f       	andi	r25, 0xF0	; 240
    39c0:	8f 70       	andi	r24, 0x0F	; 15
    39c2:	89 2b       	or	r24, r25
    39c4:	15 96       	adiw	r26, 0x05	; 5
    39c6:	8c 93       	st	X, r24
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    39c8:	c8 01       	movw	r24, r16
    39ca:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <process_action>
                        tapping_key = *keyp;
    39ce:	86 e0       	ldi	r24, 0x06	; 6
    39d0:	f8 01       	movw	r30, r16
    39d2:	a6 eb       	ldi	r26, 0xB6	; 182
    39d4:	b1 e0       	ldi	r27, 0x01	; 1
    39d6:	01 90       	ld	r0, Z+
    39d8:	0d 92       	st	X+, r0
    39da:	8a 95       	dec	r24
    39dc:	e1 f7       	brne	.-8      	; 0x39d6 <process_tapping+0x2d8>
    39de:	36 c0       	rjmp	.+108    	; 0x3a4c <process_tapping+0x34e>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    39e0:	86 e0       	ldi	r24, 0x06	; 6
    39e2:	f8 01       	movw	r30, r16
    39e4:	a6 eb       	ldi	r26, 0xB6	; 182
    39e6:	b1 e0       	ldi	r27, 0x01	; 1
    39e8:	01 90       	ld	r0, Z+
    39ea:	0d 92       	st	X+, r0
    39ec:	8a 95       	dec	r24
    39ee:	e1 f7       	brne	.-8      	; 0x39e8 <process_tapping+0x2ea>
                        return true;
    39f0:	63 c0       	rjmp	.+198    	; 0x3ab8 <process_tapping+0x3ba>
                    }
                } else if (is_tap_key(event.key)) {
    39f2:	4d 87       	std	Y+13, r20	; 0x0d
    39f4:	5e 87       	std	Y+14, r21	; 0x0e
    39f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    39f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    39fa:	0e 94 a4 1a 	call	0x3548	; 0x3548 <is_tap_key>
    39fe:	88 23       	and	r24, r24
    3a00:	79 f0       	breq	.+30     	; 0x3a20 <process_tapping+0x322>
                    // Sequential tap can be interfered with other tap key.
                    debug("Tapping: Start with interfering other tap.\n");
                    tapping_key = *keyp;
    3a02:	86 e0       	ldi	r24, 0x06	; 6
    3a04:	f8 01       	movw	r30, r16
    3a06:	a6 eb       	ldi	r26, 0xB6	; 182
    3a08:	b1 e0       	ldi	r27, 0x01	; 1
    3a0a:	01 90       	ld	r0, Z+
    3a0c:	0d 92       	st	X+, r0
    3a0e:	8a 95       	dec	r24
    3a10:	e1 f7       	brne	.-8      	; 0x3a0a <process_tapping+0x30c>
                    waiting_buffer_scan_tap();
    3a12:	0e 94 17 1b 	call	0x362e	; 0x362e <waiting_buffer_scan_tap>
                    debug_tapping_key();
    3a16:	0e 94 09 1b 	call	0x3612	; 0x3612 <debug_tapping_key>
                    return true;
    3a1a:	dd 24       	eor	r13, r13
    3a1c:	d3 94       	inc	r13
    3a1e:	4c c0       	rjmp	.+152    	; 0x3ab8 <process_tapping+0x3ba>
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    3a20:	80 91 bb 01 	lds	r24, 0x01BB
    3a24:	81 60       	ori	r24, 0x01	; 1
    3a26:	80 93 bb 01 	sts	0x01BB, r24
                    process_action(keyp);
    3a2a:	c8 01       	movw	r24, r16
    3a2c:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <process_action>
                    return true;
    3a30:	43 c0       	rjmp	.+134    	; 0x3ab8 <process_tapping+0x3ba>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    3a32:	7e 2d       	mov	r23, r14
    3a34:	f9 8a       	std	Y+17, r15	; 0x11
    3a36:	e8 8a       	std	Y+16, r14	; 0x10
    3a38:	89 89       	ldd	r24, Y+17	; 0x11
    3a3a:	0e 94 c9 1a 	call	0x3592	; 0x3592 <debug_event>
            tapping_key = (keyrecord_t){};
    3a3e:	e6 eb       	ldi	r30, 0xB6	; 182
    3a40:	f1 e0       	ldi	r31, 0x01	; 1
    3a42:	86 e0       	ldi	r24, 0x06	; 6
    3a44:	df 01       	movw	r26, r30
    3a46:	1d 92       	st	X+, r1
    3a48:	8a 95       	dec	r24
    3a4a:	e9 f7       	brne	.-6      	; 0x3a46 <process_tapping+0x348>
            debug_tapping_key();
    3a4c:	0e 94 09 1b 	call	0x3612	; 0x3612 <debug_tapping_key>
            return false;
    3a50:	33 c0       	rjmp	.+102    	; 0x3ab8 <process_tapping+0x3ba>
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    3a52:	66 23       	and	r22, r22
    3a54:	09 f4       	brne	.+2      	; 0x3a58 <process_tapping+0x35a>
    3a56:	39 cf       	rjmp	.-398    	; 0x38ca <process_tapping+0x1cc>
    3a58:	4d 87       	std	Y+13, r20	; 0x0d
    3a5a:	5e 87       	std	Y+14, r21	; 0x0e
    3a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a60:	0e 94 a4 1a 	call	0x3548	; 0x3548 <is_tap_key>
    3a64:	88 23       	and	r24, r24
    3a66:	09 f4       	brne	.+2      	; 0x3a6a <process_tapping+0x36c>
    3a68:	30 cf       	rjmp	.-416    	; 0x38ca <process_tapping+0x1cc>
    3a6a:	cb cf       	rjmp	.-106    	; 0x3a02 <process_tapping+0x304>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    3a6c:	4d 87       	std	Y+13, r20	; 0x0d
    3a6e:	5e 87       	std	Y+14, r21	; 0x0e
    3a70:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a72:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a74:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <layer_switch_get_action>
                    switch (action.kind.id) {
    3a78:	29 2f       	mov	r18, r25
    3a7a:	22 95       	swap	r18
    3a7c:	2f 70       	andi	r18, 0x0F	; 15
    3a7e:	30 e0       	ldi	r19, 0x00	; 0
    3a80:	22 30       	cpi	r18, 0x02	; 2
    3a82:	31 05       	cpc	r19, r1
    3a84:	2c f4       	brge	.+10     	; 0x3a90 <process_tapping+0x392>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    3a86:	9f 70       	andi	r25, 0x0F	; 15
    3a88:	41 f0       	breq	.+16     	; 0x3a9a <process_tapping+0x39c>
    3a8a:	81 11       	cpse	r24, r1
    3a8c:	06 c0       	rjmp	.+12     	; 0x3a9a <process_tapping+0x39c>
    3a8e:	0c c0       	rjmp	.+24     	; 0x3aa8 <process_tapping+0x3aa>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
    3a90:	24 30       	cpi	r18, 0x04	; 4
    3a92:	31 05       	cpc	r19, r1
    3a94:	2c f4       	brge	.+10     	; 0x3aa0 <process_tapping+0x3a2>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    3a96:	9f 70       	andi	r25, 0x0F	; 15
    3a98:	49 f4       	brne	.+18     	; 0x3aac <process_tapping+0x3ae>
                            if (IS_MOD(action.key.code)) return false;
    3a9a:	80 5e       	subi	r24, 0xE0	; 224
    3a9c:	88 30       	cpi	r24, 0x08	; 8
    3a9e:	20 f0       	brcs	.+8      	; 0x3aa8 <process_tapping+0x3aa>
                            break;
                    }
                    // Release of key should be process immediately.
                    debug("Tapping: release event of a key pressed before tapping\n");
                    process_action(keyp);
    3aa0:	c8 01       	movw	r24, r16
    3aa2:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <process_action>
                    return true;
    3aa6:	cf 2c       	mov	r12, r15
    3aa8:	dc 2c       	mov	r13, r12
    3aaa:	06 c0       	rjmp	.+12     	; 0x3ab8 <process_tapping+0x3ba>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    3aac:	d8 01       	movw	r26, r16
    3aae:	15 96       	adiw	r26, 0x05	; 5
    3ab0:	9c 91       	ld	r25, X
    3ab2:	90 7f       	andi	r25, 0xF0	; 240
    3ab4:	91 f7       	brne	.-28     	; 0x3a9a <process_tapping+0x39c>
    3ab6:	f8 cf       	rjmp	.-16     	; 0x3aa8 <process_tapping+0x3aa>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    3ab8:	8d 2d       	mov	r24, r13
    3aba:	62 96       	adiw	r28, 0x12	; 18
    3abc:	0f b6       	in	r0, 0x3f	; 63
    3abe:	f8 94       	cli
    3ac0:	de bf       	out	0x3e, r29	; 62
    3ac2:	0f be       	out	0x3f, r0	; 63
    3ac4:	cd bf       	out	0x3d, r28	; 61
    3ac6:	df 91       	pop	r29
    3ac8:	cf 91       	pop	r28
    3aca:	1f 91       	pop	r17
    3acc:	0f 91       	pop	r16
    3ace:	ff 90       	pop	r15
    3ad0:	ef 90       	pop	r14
    3ad2:	df 90       	pop	r13
    3ad4:	cf 90       	pop	r12
    3ad6:	08 95       	ret

00003ad8 <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    3ad8:	1f 93       	push	r17
    3ada:	cf 93       	push	r28
    3adc:	df 93       	push	r29
    3ade:	cd b7       	in	r28, 0x3d	; 61
    3ae0:	de b7       	in	r29, 0x3e	; 62
    3ae2:	2c 97       	sbiw	r28, 0x0c	; 12
    3ae4:	0f b6       	in	r0, 0x3f	; 63
    3ae6:	f8 94       	cli
    3ae8:	de bf       	out	0x3e, r29	; 62
    3aea:	0f be       	out	0x3f, r0	; 63
    3aec:	cd bf       	out	0x3d, r28	; 61
    3aee:	4f 83       	std	Y+7, r20	; 0x07
    3af0:	58 87       	std	Y+8, r21	; 0x08
    3af2:	69 87       	std	Y+9, r22	; 0x09
    3af4:	7a 87       	std	Y+10, r23	; 0x0a
    3af6:	8b 87       	std	Y+11, r24	; 0x0b
    3af8:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    3afa:	ce 01       	movw	r24, r28
    3afc:	07 96       	adiw	r24, 0x07	; 7
    3afe:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <process_tapping>
    3b02:	88 23       	and	r24, r24
    3b04:	c1 f0       	breq	.+48     	; 0x3b36 <action_tapping_process+0x5e>
        if (!IS_NOEVENT(record.event)) {
    3b06:	2f 81       	ldd	r18, Y+7	; 0x07
    3b08:	38 85       	ldd	r19, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    3b0a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b0c:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b0e:	89 2b       	or	r24, r25
    3b10:	31 f0       	breq	.+12     	; 0x3b1e <action_tapping_process+0x46>
    3b12:	3f 3f       	cpi	r19, 0xFF	; 255
    3b14:	11 f0       	breq	.+4      	; 0x3b1a <action_tapping_process+0x42>
    3b16:	80 e0       	ldi	r24, 0x00	; 0
    3b18:	03 c0       	rjmp	.+6      	; 0x3b20 <action_tapping_process+0x48>
    3b1a:	2f 3f       	cpi	r18, 0xFF	; 255
    3b1c:	e1 f7       	brne	.-8      	; 0x3b16 <action_tapping_process+0x3e>
    3b1e:	81 e0       	ldi	r24, 0x01	; 1
    3b20:	81 11       	cpse	r24, r1
    3b22:	47 c0       	rjmp	.+142    	; 0x3bb2 <action_tapping_process+0xda>
            debug("processed: "); debug_record(record); debug("\n");
    3b24:	4f 81       	ldd	r20, Y+7	; 0x07
    3b26:	58 85       	ldd	r21, Y+8	; 0x08
    3b28:	69 85       	ldd	r22, Y+9	; 0x09
    3b2a:	7a 85       	ldd	r23, Y+10	; 0x0a
    3b2c:	8b 85       	ldd	r24, Y+11	; 0x0b
    3b2e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3b30:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <debug_record>
    3b34:	3e c0       	rjmp	.+124    	; 0x3bb2 <action_tapping_process+0xda>
    3b36:	86 e0       	ldi	r24, 0x06	; 6
    3b38:	fe 01       	movw	r30, r28
    3b3a:	37 96       	adiw	r30, 0x07	; 7
    3b3c:	de 01       	movw	r26, r28
    3b3e:	11 96       	adiw	r26, 0x01	; 1
    3b40:	01 90       	ld	r0, Z+
    3b42:	0d 92       	st	X+, r0
    3b44:	8a 95       	dec	r24
    3b46:	e1 f7       	brne	.-8      	; 0x3b40 <action_tapping_process+0x68>
    3b48:	ff 81       	ldd	r31, Y+7	; 0x07
    3b4a:	e8 85       	ldd	r30, Y+8	; 0x08
    3b4c:	4a 85       	ldd	r20, Y+10	; 0x0a
    3b4e:	5b 85       	ldd	r21, Y+11	; 0x0b
    3b50:	41 15       	cp	r20, r1
    3b52:	51 05       	cpc	r21, r1
    3b54:	31 f0       	breq	.+12     	; 0x3b62 <action_tapping_process+0x8a>
    3b56:	ef 3f       	cpi	r30, 0xFF	; 255
    3b58:	31 f4       	brne	.+12     	; 0x3b66 <action_tapping_process+0x8e>
    3b5a:	81 e0       	ldi	r24, 0x01	; 1
    3b5c:	ff 3f       	cpi	r31, 0xFF	; 255
    3b5e:	19 f4       	brne	.+6      	; 0x3b66 <action_tapping_process+0x8e>
    3b60:	03 c0       	rjmp	.+6      	; 0x3b68 <action_tapping_process+0x90>
    3b62:	81 e0       	ldi	r24, 0x01	; 1
    3b64:	01 c0       	rjmp	.+2      	; 0x3b68 <action_tapping_process+0x90>
    3b66:	80 e0       	ldi	r24, 0x00	; 0
/*
 * Waiting buffer
 */
bool waiting_buffer_enq(keyrecord_t record)
{
    if (IS_NOEVENT(record.event)) {
    3b68:	80 fd       	sbrc	r24, 0
    3b6a:	23 c0       	rjmp	.+70     	; 0x3bb2 <action_tapping_process+0xda>
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    3b6c:	20 91 85 01 	lds	r18, 0x0185
    3b70:	30 e0       	ldi	r19, 0x00	; 0
    3b72:	c9 01       	movw	r24, r18
    3b74:	01 96       	adiw	r24, 0x01	; 1
    3b76:	87 70       	andi	r24, 0x07	; 7
    3b78:	99 27       	eor	r25, r25
    3b7a:	60 91 84 01 	lds	r22, 0x0184
    3b7e:	70 e0       	ldi	r23, 0x00	; 0
    3b80:	86 17       	cp	r24, r22
    3b82:	97 07       	cpc	r25, r23
    3b84:	f1 f1       	breq	.+124    	; 0x3c02 <action_tapping_process+0x12a>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    3b86:	f9 83       	std	Y+1, r31	; 0x01
    3b88:	ea 83       	std	Y+2, r30	; 0x02
    3b8a:	5d 83       	std	Y+5, r21	; 0x05
    3b8c:	4c 83       	std	Y+4, r20	; 0x04
    3b8e:	96 e0       	ldi	r25, 0x06	; 6
    3b90:	92 9f       	mul	r25, r18
    3b92:	d0 01       	movw	r26, r0
    3b94:	93 9f       	mul	r25, r19
    3b96:	b0 0d       	add	r27, r0
    3b98:	11 24       	eor	r1, r1
    3b9a:	aa 57       	subi	r26, 0x7A	; 122
    3b9c:	be 4f       	sbci	r27, 0xFE	; 254
    3b9e:	fe 01       	movw	r30, r28
    3ba0:	31 96       	adiw	r30, 0x01	; 1
    3ba2:	01 90       	ld	r0, Z+
    3ba4:	0d 92       	st	X+, r0
    3ba6:	9a 95       	dec	r25
    3ba8:	e1 f7       	brne	.-8      	; 0x3ba2 <action_tapping_process+0xca>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    3baa:	80 93 85 01 	sts	0x0185, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    3bae:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <debug_waiting_buffer>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3bb2:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3bb4:	80 91 84 01 	lds	r24, 0x0184
    3bb8:	90 91 85 01 	lds	r25, 0x0185
    3bbc:	89 17       	cp	r24, r25
    3bbe:	79 f1       	breq	.+94     	; 0x3c1e <action_tapping_process+0x146>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3bc0:	18 9f       	mul	r17, r24
    3bc2:	c0 01       	movw	r24, r0
    3bc4:	11 24       	eor	r1, r1
    3bc6:	8a 57       	subi	r24, 0x7A	; 122
    3bc8:	9e 4f       	sbci	r25, 0xFE	; 254
    3bca:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <process_tapping>
    3bce:	88 23       	and	r24, r24
    3bd0:	31 f1       	breq	.+76     	; 0x3c1e <action_tapping_process+0x146>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    3bd2:	e0 91 84 01 	lds	r30, 0x0184
    3bd6:	1e 9f       	mul	r17, r30
    3bd8:	f0 01       	movw	r30, r0
    3bda:	11 24       	eor	r1, r1
    3bdc:	ea 57       	subi	r30, 0x7A	; 122
    3bde:	fe 4f       	sbci	r31, 0xFE	; 254
    3be0:	40 81       	ld	r20, Z
    3be2:	51 81       	ldd	r21, Z+1	; 0x01
    3be4:	62 81       	ldd	r22, Z+2	; 0x02
    3be6:	73 81       	ldd	r23, Z+3	; 0x03
    3be8:	84 81       	ldd	r24, Z+4	; 0x04
    3bea:	95 81       	ldd	r25, Z+5	; 0x05
    3bec:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3bf0:	80 91 84 01 	lds	r24, 0x0184
    3bf4:	90 e0       	ldi	r25, 0x00	; 0
    3bf6:	01 96       	adiw	r24, 0x01	; 1
    3bf8:	87 70       	andi	r24, 0x07	; 7
    3bfa:	99 27       	eor	r25, r25
    3bfc:	80 93 84 01 	sts	0x0184, r24
    3c00:	d9 cf       	rjmp	.-78     	; 0x3bb4 <action_tapping_process+0xdc>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    3c02:	0e 94 a0 1a 	call	0x3540	; 0x3540 <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    3c06:	10 92 85 01 	sts	0x0185, r1
    waiting_buffer_tail = 0;
    3c0a:	10 92 84 01 	sts	0x0184, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    3c0e:	e6 eb       	ldi	r30, 0xB6	; 182
    3c10:	f1 e0       	ldi	r31, 0x01	; 1
    3c12:	86 e0       	ldi	r24, 0x06	; 6
    3c14:	df 01       	movw	r26, r30
    3c16:	1d 92       	st	X+, r1
    3c18:	8a 95       	dec	r24
    3c1a:	e9 f7       	brne	.-6      	; 0x3c16 <action_tapping_process+0x13e>
    3c1c:	ca cf       	rjmp	.-108    	; 0x3bb2 <action_tapping_process+0xda>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    3c1e:	2c 96       	adiw	r28, 0x0c	; 12
    3c20:	0f b6       	in	r0, 0x3f	; 63
    3c22:	f8 94       	cli
    3c24:	de bf       	out	0x3e, r29	; 62
    3c26:	0f be       	out	0x3f, r0	; 63
    3c28:	cd bf       	out	0x3d, r28	; 61
    3c2a:	df 91       	pop	r29
    3c2c:	cf 91       	pop	r28
    3c2e:	1f 91       	pop	r17
    3c30:	08 95       	ret

00003c32 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    3c32:	ef 92       	push	r14
    3c34:	ff 92       	push	r15
    3c36:	0f 93       	push	r16
    3c38:	1f 93       	push	r17
    3c3a:	cf 93       	push	r28
    3c3c:	df 93       	push	r29
    3c3e:	fc 01       	movw	r30, r24
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    3c40:	00 97       	sbiw	r24, 0x00	; 0
    3c42:	09 f4       	brne	.+2      	; 0x3c46 <action_macro_play+0x14>
    3c44:	6f c0       	rjmp	.+222    	; 0x3d24 <action_macro_play+0xf2>
    3c46:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    3c48:	ee 24       	eor	r14, r14
    3c4a:	e3 94       	inc	r14
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    3c4c:	ef 01       	movw	r28, r30
    3c4e:	21 96       	adiw	r28, 0x01	; 1
    3c50:	84 91       	lpm	r24, Z
    3c52:	84 37       	cpi	r24, 0x74	; 116
    3c54:	40 f4       	brcc	.+16     	; 0x3c66 <action_macro_play+0x34>
    3c56:	84 30       	cpi	r24, 0x04	; 4
    3c58:	08 f0       	brcs	.+2      	; 0x3c5c <action_macro_play+0x2a>
    3c5a:	55 c0       	rjmp	.+170    	; 0x3d06 <action_macro_play+0xd4>
    3c5c:	81 30       	cpi	r24, 0x01	; 1
    3c5e:	81 f0       	breq	.+32     	; 0x3c80 <action_macro_play+0x4e>
    3c60:	82 30       	cpi	r24, 0x02	; 2
    3c62:	21 f1       	breq	.+72     	; 0x3cac <action_macro_play+0x7a>
    3c64:	5f c0       	rjmp	.+190    	; 0x3d24 <action_macro_play+0xf2>
    3c66:	85 37       	cpi	r24, 0x75	; 117
    3c68:	09 f4       	brne	.+2      	; 0x3c6c <action_macro_play+0x3a>
    3c6a:	47 c0       	rjmp	.+142    	; 0x3cfa <action_macro_play+0xc8>
    3c6c:	c0 f1       	brcs	.+112    	; 0x3cde <action_macro_play+0xac>
    3c6e:	9c e7       	ldi	r25, 0x7C	; 124
    3c70:	98 0f       	add	r25, r24
    3c72:	90 37       	cpi	r25, 0x70	; 112
    3c74:	08 f0       	brcs	.+2      	; 0x3c78 <action_macro_play+0x46>
    3c76:	56 c0       	rjmp	.+172    	; 0x3d24 <action_macro_play+0xf2>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    3c78:	8f 77       	andi	r24, 0x7F	; 127
    3c7a:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <unregister_code>
                break;
    3c7e:	45 c0       	rjmp	.+138    	; 0x3d0a <action_macro_play+0xd8>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    3c80:	8f 01       	movw	r16, r30
    3c82:	0e 5f       	subi	r16, 0xFE	; 254
    3c84:	1f 4f       	sbci	r17, 0xFF	; 255
    3c86:	fe 01       	movw	r30, r28
    3c88:	84 91       	lpm	r24, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    3c8a:	90 e2       	ldi	r25, 0x20	; 32
    3c8c:	98 0f       	add	r25, r24
    3c8e:	98 30       	cpi	r25, 0x08	; 8
    3c90:	50 f4       	brcc	.+20     	; 0x3ca6 <action_macro_play+0x74>
                    add_weak_mods(MOD_BIT(macro));
    3c92:	87 70       	andi	r24, 0x07	; 7
    3c94:	fe 2d       	mov	r31, r14
    3c96:	01 c0       	rjmp	.+2      	; 0x3c9a <action_macro_play+0x68>
    3c98:	ff 0f       	add	r31, r31
    3c9a:	8a 95       	dec	r24
    3c9c:	ea f7       	brpl	.-6      	; 0x3c98 <action_macro_play+0x66>
    3c9e:	8f 2f       	mov	r24, r31
    3ca0:	0e 94 bc 20 	call	0x4178	; 0x4178 <add_weak_mods>
    3ca4:	15 c0       	rjmp	.+42     	; 0x3cd0 <action_macro_play+0x9e>
                    send_keyboard_report();
                } else {
                    register_code(macro);
    3ca6:	0e 94 65 16 	call	0x2cca	; 0x2cca <register_code>
    3caa:	14 c0       	rjmp	.+40     	; 0x3cd4 <action_macro_play+0xa2>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    3cac:	8f 01       	movw	r16, r30
    3cae:	0e 5f       	subi	r16, 0xFE	; 254
    3cb0:	1f 4f       	sbci	r17, 0xFF	; 255
    3cb2:	fe 01       	movw	r30, r28
    3cb4:	84 91       	lpm	r24, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    3cb6:	90 e2       	ldi	r25, 0x20	; 32
    3cb8:	98 0f       	add	r25, r24
    3cba:	98 30       	cpi	r25, 0x08	; 8
    3cbc:	68 f4       	brcc	.+26     	; 0x3cd8 <action_macro_play+0xa6>
                    del_weak_mods(MOD_BIT(macro));
    3cbe:	87 70       	andi	r24, 0x07	; 7
    3cc0:	fe 2d       	mov	r31, r14
    3cc2:	01 c0       	rjmp	.+2      	; 0x3cc6 <action_macro_play+0x94>
    3cc4:	ff 0f       	add	r31, r31
    3cc6:	8a 95       	dec	r24
    3cc8:	ea f7       	brpl	.-6      	; 0x3cc4 <action_macro_play+0x92>
    3cca:	8f 2f       	mov	r24, r31
    3ccc:	0e 94 c2 20 	call	0x4184	; 0x4184 <del_weak_mods>
                    send_keyboard_report();
    3cd0:	0e 94 e5 20 	call	0x41ca	; 0x41ca <send_keyboard_report>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    3cd4:	e8 01       	movw	r28, r16
    3cd6:	19 c0       	rjmp	.+50     	; 0x3d0a <action_macro_play+0xd8>
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    del_weak_mods(MOD_BIT(macro));
                    send_keyboard_report();
                } else {
                    unregister_code(macro);
    3cd8:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <unregister_code>
    3cdc:	fb cf       	rjmp	.-10     	; 0x3cd4 <action_macro_play+0xa2>
                }
                break;
            case WAIT:
                MACRO_READ();
    3cde:	cf 01       	movw	r24, r30
    3ce0:	02 96       	adiw	r24, 0x02	; 2
    3ce2:	fe 01       	movw	r30, r28
    3ce4:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    3ce6:	cc 23       	and	r28, r28
    3ce8:	61 f0       	breq	.+24     	; 0x3d02 <action_macro_play+0xd0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3cea:	ef e9       	ldi	r30, 0x9F	; 159
    3cec:	ff e0       	ldi	r31, 0x0F	; 15
    3cee:	31 97       	sbiw	r30, 0x01	; 1
    3cf0:	f1 f7       	brne	.-4      	; 0x3cee <action_macro_play+0xbc>
    3cf2:	00 c0       	rjmp	.+0      	; 0x3cf4 <action_macro_play+0xc2>
    3cf4:	00 00       	nop
    3cf6:	c1 50       	subi	r28, 0x01	; 1
    3cf8:	f6 cf       	rjmp	.-20     	; 0x3ce6 <action_macro_play+0xb4>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    3cfa:	cf 01       	movw	r24, r30
    3cfc:	02 96       	adiw	r24, 0x02	; 2
    3cfe:	fe 01       	movw	r30, r28
    3d00:	f4 90       	lpm	r15, Z
    3d02:	ec 01       	movw	r28, r24
                dprintf("INTERVAL(%u)\n", interval);
                break;
    3d04:	02 c0       	rjmp	.+4      	; 0x3d0a <action_macro_play+0xd8>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    3d06:	0e 94 65 16 	call	0x2cca	; 0x2cca <register_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    3d0a:	8f 2d       	mov	r24, r15
    3d0c:	88 23       	and	r24, r24
    3d0e:	41 f0       	breq	.+16     	; 0x3d20 <action_macro_play+0xee>
    3d10:	ef e9       	ldi	r30, 0x9F	; 159
    3d12:	ff e0       	ldi	r31, 0x0F	; 15
    3d14:	31 97       	sbiw	r30, 0x01	; 1
    3d16:	f1 f7       	brne	.-4      	; 0x3d14 <action_macro_play+0xe2>
    3d18:	00 c0       	rjmp	.+0      	; 0x3d1a <action_macro_play+0xe8>
    3d1a:	00 00       	nop
    3d1c:	81 50       	subi	r24, 0x01	; 1
    3d1e:	f6 cf       	rjmp	.-20     	; 0x3d0c <action_macro_play+0xda>
    3d20:	fe 01       	movw	r30, r28
    3d22:	94 cf       	rjmp	.-216    	; 0x3c4c <action_macro_play+0x1a>
    }
}
    3d24:	df 91       	pop	r29
    3d26:	cf 91       	pop	r28
    3d28:	1f 91       	pop	r17
    3d2a:	0f 91       	pop	r16
    3d2c:	ff 90       	pop	r15
    3d2e:	ef 90       	pop	r14
    3d30:	08 95       	ret

00003d32 <default_layer_debug>:
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void default_layer_debug(void)
{
    3d32:	08 95       	ret

00003d34 <default_layer_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3d34:	60 93 c0 01 	sts	0x01C0, r22
    3d38:	70 93 c1 01 	sts	0x01C1, r23
    3d3c:	80 93 c2 01 	sts	0x01C2, r24
    3d40:	90 93 c3 01 	sts	0x01C3, r25
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3d44:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <clear_keyboard_but_mods>

00003d48 <default_layer_or>:
    default_layer_state_set(state);
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    3d48:	0f 93       	push	r16
    3d4a:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    3d4c:	00 91 c0 01 	lds	r16, 0x01C0
    3d50:	10 91 c1 01 	lds	r17, 0x01C1
    3d54:	20 91 c2 01 	lds	r18, 0x01C2
    3d58:	30 91 c3 01 	lds	r19, 0x01C3
    3d5c:	06 2b       	or	r16, r22
    3d5e:	17 2b       	or	r17, r23
    3d60:	28 2b       	or	r18, r24
    3d62:	39 2b       	or	r19, r25

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3d64:	00 93 c0 01 	sts	0x01C0, r16
    3d68:	10 93 c1 01 	sts	0x01C1, r17
    3d6c:	20 93 c2 01 	sts	0x01C2, r18
    3d70:	30 93 c3 01 	sts	0x01C3, r19

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
    3d74:	1f 91       	pop	r17
    3d76:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3d78:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <clear_keyboard_but_mods>

00003d7c <default_layer_and>:
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    3d7c:	0f 93       	push	r16
    3d7e:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    3d80:	00 91 c0 01 	lds	r16, 0x01C0
    3d84:	10 91 c1 01 	lds	r17, 0x01C1
    3d88:	20 91 c2 01 	lds	r18, 0x01C2
    3d8c:	30 91 c3 01 	lds	r19, 0x01C3
    3d90:	06 23       	and	r16, r22
    3d92:	17 23       	and	r17, r23
    3d94:	28 23       	and	r18, r24
    3d96:	39 23       	and	r19, r25

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3d98:	00 93 c0 01 	sts	0x01C0, r16
    3d9c:	10 93 c1 01 	sts	0x01C1, r17
    3da0:	20 93 c2 01 	sts	0x01C2, r18
    3da4:	30 93 c3 01 	sts	0x01C3, r19
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
    3da8:	1f 91       	pop	r17
    3daa:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3dac:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <clear_keyboard_but_mods>

00003db0 <default_layer_xor>:
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    3db0:	0f 93       	push	r16
    3db2:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    3db4:	00 91 c0 01 	lds	r16, 0x01C0
    3db8:	10 91 c1 01 	lds	r17, 0x01C1
    3dbc:	20 91 c2 01 	lds	r18, 0x01C2
    3dc0:	30 91 c3 01 	lds	r19, 0x01C3
    3dc4:	06 27       	eor	r16, r22
    3dc6:	17 27       	eor	r17, r23
    3dc8:	28 27       	eor	r18, r24
    3dca:	39 27       	eor	r19, r25

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3dcc:	00 93 c0 01 	sts	0x01C0, r16
    3dd0:	10 93 c1 01 	sts	0x01C1, r17
    3dd4:	20 93 c2 01 	sts	0x01C2, r18
    3dd8:	30 93 c3 01 	sts	0x01C3, r19
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
}
    3ddc:	1f 91       	pop	r17
    3dde:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3de0:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <clear_keyboard_but_mods>

00003de4 <layer_clear>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3de4:	10 92 bc 01 	sts	0x01BC, r1
    3de8:	10 92 bd 01 	sts	0x01BD, r1
    3dec:	10 92 be 01 	sts	0x01BE, r1
    3df0:	10 92 bf 01 	sts	0x01BF, r1
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3df4:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <clear_keyboard_but_mods>

00003df8 <layer_move>:
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    3df8:	41 e0       	ldi	r20, 0x01	; 1
    3dfa:	50 e0       	ldi	r21, 0x00	; 0
    3dfc:	60 e0       	ldi	r22, 0x00	; 0
    3dfe:	70 e0       	ldi	r23, 0x00	; 0
    3e00:	04 c0       	rjmp	.+8      	; 0x3e0a <layer_move+0x12>
    3e02:	44 0f       	add	r20, r20
    3e04:	55 1f       	adc	r21, r21
    3e06:	66 1f       	adc	r22, r22
    3e08:	77 1f       	adc	r23, r23
    3e0a:	8a 95       	dec	r24
    3e0c:	d2 f7       	brpl	.-12     	; 0x3e02 <layer_move+0xa>

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3e0e:	40 93 bc 01 	sts	0x01BC, r20
    3e12:	50 93 bd 01 	sts	0x01BD, r21
    3e16:	60 93 be 01 	sts	0x01BE, r22
    3e1a:	70 93 bf 01 	sts	0x01BF, r23
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3e1e:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <clear_keyboard_but_mods>

00003e22 <layer_on>:
    layer_state_set(1UL<<layer);
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    3e22:	41 e0       	ldi	r20, 0x01	; 1
    3e24:	50 e0       	ldi	r21, 0x00	; 0
    3e26:	60 e0       	ldi	r22, 0x00	; 0
    3e28:	70 e0       	ldi	r23, 0x00	; 0
    3e2a:	04 c0       	rjmp	.+8      	; 0x3e34 <layer_on+0x12>
    3e2c:	44 0f       	add	r20, r20
    3e2e:	55 1f       	adc	r21, r21
    3e30:	66 1f       	adc	r22, r22
    3e32:	77 1f       	adc	r23, r23
    3e34:	8a 95       	dec	r24
    3e36:	d2 f7       	brpl	.-12     	; 0x3e2c <layer_on+0xa>
    3e38:	80 91 bc 01 	lds	r24, 0x01BC
    3e3c:	90 91 bd 01 	lds	r25, 0x01BD
    3e40:	a0 91 be 01 	lds	r26, 0x01BE
    3e44:	b0 91 bf 01 	lds	r27, 0x01BF
    3e48:	84 2b       	or	r24, r20
    3e4a:	95 2b       	or	r25, r21
    3e4c:	a6 2b       	or	r26, r22
    3e4e:	b7 2b       	or	r27, r23

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3e50:	80 93 bc 01 	sts	0x01BC, r24
    3e54:	90 93 bd 01 	sts	0x01BD, r25
    3e58:	a0 93 be 01 	sts	0x01BE, r26
    3e5c:	b0 93 bf 01 	sts	0x01BF, r27
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3e60:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <clear_keyboard_but_mods>

00003e64 <layer_off>:
    layer_state_set(layer_state | (1UL<<layer));
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    3e64:	41 e0       	ldi	r20, 0x01	; 1
    3e66:	50 e0       	ldi	r21, 0x00	; 0
    3e68:	60 e0       	ldi	r22, 0x00	; 0
    3e6a:	70 e0       	ldi	r23, 0x00	; 0
    3e6c:	04 c0       	rjmp	.+8      	; 0x3e76 <layer_off+0x12>
    3e6e:	44 0f       	add	r20, r20
    3e70:	55 1f       	adc	r21, r21
    3e72:	66 1f       	adc	r22, r22
    3e74:	77 1f       	adc	r23, r23
    3e76:	8a 95       	dec	r24
    3e78:	d2 f7       	brpl	.-12     	; 0x3e6e <layer_off+0xa>
    3e7a:	40 95       	com	r20
    3e7c:	50 95       	com	r21
    3e7e:	60 95       	com	r22
    3e80:	70 95       	com	r23
    3e82:	80 91 bc 01 	lds	r24, 0x01BC
    3e86:	90 91 bd 01 	lds	r25, 0x01BD
    3e8a:	a0 91 be 01 	lds	r26, 0x01BE
    3e8e:	b0 91 bf 01 	lds	r27, 0x01BF
    3e92:	84 23       	and	r24, r20
    3e94:	95 23       	and	r25, r21
    3e96:	a6 23       	and	r26, r22
    3e98:	b7 23       	and	r27, r23

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3e9a:	80 93 bc 01 	sts	0x01BC, r24
    3e9e:	90 93 bd 01 	sts	0x01BD, r25
    3ea2:	a0 93 be 01 	sts	0x01BE, r26
    3ea6:	b0 93 bf 01 	sts	0x01BF, r27
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3eaa:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <clear_keyboard_but_mods>

00003eae <layer_invert>:
    layer_state_set(layer_state & ~(1UL<<layer));
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    3eae:	41 e0       	ldi	r20, 0x01	; 1
    3eb0:	50 e0       	ldi	r21, 0x00	; 0
    3eb2:	60 e0       	ldi	r22, 0x00	; 0
    3eb4:	70 e0       	ldi	r23, 0x00	; 0
    3eb6:	04 c0       	rjmp	.+8      	; 0x3ec0 <layer_invert+0x12>
    3eb8:	44 0f       	add	r20, r20
    3eba:	55 1f       	adc	r21, r21
    3ebc:	66 1f       	adc	r22, r22
    3ebe:	77 1f       	adc	r23, r23
    3ec0:	8a 95       	dec	r24
    3ec2:	d2 f7       	brpl	.-12     	; 0x3eb8 <layer_invert+0xa>
    3ec4:	80 91 bc 01 	lds	r24, 0x01BC
    3ec8:	90 91 bd 01 	lds	r25, 0x01BD
    3ecc:	a0 91 be 01 	lds	r26, 0x01BE
    3ed0:	b0 91 bf 01 	lds	r27, 0x01BF
    3ed4:	84 27       	eor	r24, r20
    3ed6:	95 27       	eor	r25, r21
    3ed8:	a6 27       	eor	r26, r22
    3eda:	b7 27       	eor	r27, r23

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3edc:	80 93 bc 01 	sts	0x01BC, r24
    3ee0:	90 93 bd 01 	sts	0x01BD, r25
    3ee4:	a0 93 be 01 	sts	0x01BE, r26
    3ee8:	b0 93 bf 01 	sts	0x01BF, r27
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3eec:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <clear_keyboard_but_mods>

00003ef0 <layer_or>:
{
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    3ef0:	0f 93       	push	r16
    3ef2:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    3ef4:	00 91 bc 01 	lds	r16, 0x01BC
    3ef8:	10 91 bd 01 	lds	r17, 0x01BD
    3efc:	20 91 be 01 	lds	r18, 0x01BE
    3f00:	30 91 bf 01 	lds	r19, 0x01BF
    3f04:	06 2b       	or	r16, r22
    3f06:	17 2b       	or	r17, r23
    3f08:	28 2b       	or	r18, r24
    3f0a:	39 2b       	or	r19, r25

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3f0c:	00 93 bc 01 	sts	0x01BC, r16
    3f10:	10 93 bd 01 	sts	0x01BD, r17
    3f14:	20 93 be 01 	sts	0x01BE, r18
    3f18:	30 93 bf 01 	sts	0x01BF, r19
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
    3f1c:	1f 91       	pop	r17
    3f1e:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3f20:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <clear_keyboard_but_mods>

00003f24 <layer_and>:
void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    3f24:	0f 93       	push	r16
    3f26:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    3f28:	00 91 bc 01 	lds	r16, 0x01BC
    3f2c:	10 91 bd 01 	lds	r17, 0x01BD
    3f30:	20 91 be 01 	lds	r18, 0x01BE
    3f34:	30 91 bf 01 	lds	r19, 0x01BF
    3f38:	06 23       	and	r16, r22
    3f3a:	17 23       	and	r17, r23
    3f3c:	28 23       	and	r18, r24
    3f3e:	39 23       	and	r19, r25

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3f40:	00 93 bc 01 	sts	0x01BC, r16
    3f44:	10 93 bd 01 	sts	0x01BD, r17
    3f48:	20 93 be 01 	sts	0x01BE, r18
    3f4c:	30 93 bf 01 	sts	0x01BF, r19
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
    3f50:	1f 91       	pop	r17
    3f52:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3f54:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <clear_keyboard_but_mods>

00003f58 <layer_xor>:
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    3f58:	0f 93       	push	r16
    3f5a:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    3f5c:	00 91 bc 01 	lds	r16, 0x01BC
    3f60:	10 91 bd 01 	lds	r17, 0x01BD
    3f64:	20 91 be 01 	lds	r18, 0x01BE
    3f68:	30 91 bf 01 	lds	r19, 0x01BF
    3f6c:	06 27       	eor	r16, r22
    3f6e:	17 27       	eor	r17, r23
    3f70:	28 27       	eor	r18, r24
    3f72:	39 27       	eor	r19, r25

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3f74:	00 93 bc 01 	sts	0x01BC, r16
    3f78:	10 93 bd 01 	sts	0x01BD, r17
    3f7c:	20 93 be 01 	sts	0x01BE, r18
    3f80:	30 93 bf 01 	sts	0x01BF, r19
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
}
    3f84:	1f 91       	pop	r17
    3f86:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3f88:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <clear_keyboard_but_mods>

00003f8c <layer_debug>:
{
    layer_state_set(layer_state ^ state);
}

void layer_debug(void)
{
    3f8c:	08 95       	ret

00003f8e <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    3f8e:	cf 92       	push	r12
    3f90:	df 92       	push	r13
    3f92:	ef 92       	push	r14
    3f94:	ff 92       	push	r15
    3f96:	0f 93       	push	r16
    3f98:	1f 93       	push	r17
    3f9a:	cf 93       	push	r28
    3f9c:	df 93       	push	r29
    3f9e:	ec 01       	movw	r28, r24
    action_t action;
    action.code = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    3fa0:	c0 90 c0 01 	lds	r12, 0x01C0
    3fa4:	d0 90 c1 01 	lds	r13, 0x01C1
    3fa8:	e0 90 c2 01 	lds	r14, 0x01C2
    3fac:	f0 90 c3 01 	lds	r15, 0x01C3
    3fb0:	80 91 bc 01 	lds	r24, 0x01BC
    3fb4:	90 91 bd 01 	lds	r25, 0x01BD
    3fb8:	a0 91 be 01 	lds	r26, 0x01BE
    3fbc:	b0 91 bf 01 	lds	r27, 0x01BF
    3fc0:	c8 2a       	or	r12, r24
    3fc2:	d9 2a       	or	r13, r25
    3fc4:	ea 2a       	or	r14, r26
    3fc6:	fb 2a       	or	r15, r27
    3fc8:	0f e1       	ldi	r16, 0x1F	; 31
    3fca:	10 e0       	ldi	r17, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    3fcc:	b7 01       	movw	r22, r14
    3fce:	a6 01       	movw	r20, r12
    3fd0:	00 2e       	mov	r0, r16
    3fd2:	04 c0       	rjmp	.+8      	; 0x3fdc <layer_switch_get_action+0x4e>
    3fd4:	76 95       	lsr	r23
    3fd6:	67 95       	ror	r22
    3fd8:	57 95       	ror	r21
    3fda:	47 95       	ror	r20
    3fdc:	0a 94       	dec	r0
    3fde:	d2 f7       	brpl	.-12     	; 0x3fd4 <layer_switch_get_action+0x46>
    3fe0:	40 ff       	sbrs	r20, 0
    3fe2:	07 c0       	rjmp	.+14     	; 0x3ff2 <layer_switch_get_action+0x64>
            action = action_for_key(i, key);
    3fe4:	be 01       	movw	r22, r28
    3fe6:	80 2f       	mov	r24, r16
    3fe8:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <action_for_key>
            if (action.code != ACTION_TRANSPARENT) {
    3fec:	81 30       	cpi	r24, 0x01	; 1
    3fee:	91 05       	cpc	r25, r1
    3ff0:	39 f4       	brne	.+14     	; 0x4000 <layer_switch_get_action+0x72>
    3ff2:	01 50       	subi	r16, 0x01	; 1
    3ff4:	11 09       	sbc	r17, r1
    3ff6:	50 f7       	brcc	.-44     	; 0x3fcc <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    3ff8:	be 01       	movw	r22, r28
    3ffa:	80 e0       	ldi	r24, 0x00	; 0
    3ffc:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    4000:	df 91       	pop	r29
    4002:	cf 91       	pop	r28
    4004:	1f 91       	pop	r17
    4006:	0f 91       	pop	r16
    4008:	ff 90       	pop	r15
    400a:	ef 90       	pop	r14
    400c:	df 90       	pop	r13
    400e:	cf 90       	pop	r12
    4010:	08 95       	ret

00004012 <add_key>:

/* key */
void add_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    4012:	90 91 0c 01 	lds	r25, 0x010C
    4016:	99 23       	and	r25, r25
    4018:	61 f1       	breq	.+88     	; 0x4072 <add_key+0x60>
    401a:	90 91 0d 01 	lds	r25, 0x010D
    401e:	99 23       	and	r25, r25
    4020:	41 f1       	breq	.+80     	; 0x4072 <add_key+0x60>
}

#ifdef NKRO_ENABLE
static inline void add_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    4022:	98 2f       	mov	r25, r24
    4024:	96 95       	lsr	r25
    4026:	96 95       	lsr	r25
    4028:	96 95       	lsr	r25
    402a:	9f 30       	cpi	r25, 0x0F	; 15
    402c:	88 f4       	brcc	.+34     	; 0x4050 <add_key+0x3e>
        keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
    402e:	e0 91 0e 01 	lds	r30, 0x010E
    4032:	f0 91 0f 01 	lds	r31, 0x010F
    4036:	e9 0f       	add	r30, r25
    4038:	f1 1d       	adc	r31, r1
    403a:	87 70       	andi	r24, 0x07	; 7
    403c:	21 e0       	ldi	r18, 0x01	; 1
    403e:	30 e0       	ldi	r19, 0x00	; 0
    4040:	01 c0       	rjmp	.+2      	; 0x4044 <add_key+0x32>
    4042:	22 0f       	add	r18, r18
    4044:	8a 95       	dec	r24
    4046:	ea f7       	brpl	.-6      	; 0x4042 <add_key+0x30>
    4048:	81 81       	ldd	r24, Z+1	; 0x01
    404a:	82 2b       	or	r24, r18
    404c:	81 83       	std	Z+1, r24	; 0x01
    404e:	08 95       	ret
    } else {
        dprintf("add_key_bit: can't add: %02X\n", code);
    4050:	90 91 d7 01 	lds	r25, 0x01D7
    4054:	90 ff       	sbrs	r25, 0
    4056:	2d c0       	rjmp	.+90     	; 0x40b2 <add_key+0xa0>
    4058:	1f 92       	push	r1
    405a:	8f 93       	push	r24
    405c:	87 ed       	ldi	r24, 0xD7	; 215
    405e:	95 e0       	ldi	r25, 0x05	; 5
    4060:	9f 93       	push	r25
    4062:	8f 93       	push	r24
    4064:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    4068:	0f 90       	pop	r0
    406a:	0f 90       	pop	r0
    406c:	0f 90       	pop	r0
    406e:	0f 90       	pop	r0
    4070:	08 95       	ret
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    4072:	40 91 0e 01 	lds	r20, 0x010E
    4076:	50 91 0f 01 	lds	r21, 0x010F
    407a:	20 e0       	ldi	r18, 0x00	; 0
    407c:	30 e0       	ldi	r19, 0x00	; 0
    407e:	9f ef       	ldi	r25, 0xFF	; 255
    4080:	fa 01       	movw	r30, r20
    4082:	e2 0f       	add	r30, r18
    4084:	f3 1f       	adc	r31, r19
    4086:	62 81       	ldd	r22, Z+2	; 0x02
    4088:	68 17       	cp	r22, r24
    408a:	99 f0       	breq	.+38     	; 0x40b2 <add_key+0xa0>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    408c:	9f 3f       	cpi	r25, 0xFF	; 255
    408e:	19 f4       	brne	.+6      	; 0x4096 <add_key+0x84>
    4090:	61 11       	cpse	r22, r1
    4092:	01 c0       	rjmp	.+2      	; 0x4096 <add_key+0x84>
    4094:	92 2f       	mov	r25, r18
    4096:	2f 5f       	subi	r18, 0xFF	; 255
    4098:	3f 4f       	sbci	r19, 0xFF	; 255
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    409a:	2e 30       	cpi	r18, 0x0E	; 14
    409c:	31 05       	cpc	r19, r1
    409e:	81 f7       	brne	.-32     	; 0x4080 <add_key+0x6e>
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    40a0:	9f 3f       	cpi	r25, 0xFF	; 255
    40a2:	39 f0       	breq	.+14     	; 0x40b2 <add_key+0xa0>
            keyboard_report->keys[empty] = code;
    40a4:	fa 01       	movw	r30, r20
    40a6:	e9 0f       	add	r30, r25
    40a8:	f1 1d       	adc	r31, r1
    40aa:	97 fd       	sbrc	r25, 7
    40ac:	fa 95       	dec	r31
    40ae:	82 83       	std	Z+2, r24	; 0x02
    40b0:	08 95       	ret
    40b2:	08 95       	ret

000040b4 <del_key>:
}

void del_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    40b4:	90 91 0c 01 	lds	r25, 0x010C
    40b8:	99 23       	and	r25, r25
    40ba:	69 f1       	breq	.+90     	; 0x4116 <del_key+0x62>
    40bc:	90 91 0d 01 	lds	r25, 0x010D
    40c0:	99 23       	and	r25, r25
    40c2:	49 f1       	breq	.+82     	; 0x4116 <del_key+0x62>
    }
}

static inline void del_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    40c4:	98 2f       	mov	r25, r24
    40c6:	96 95       	lsr	r25
    40c8:	96 95       	lsr	r25
    40ca:	96 95       	lsr	r25
    40cc:	9f 30       	cpi	r25, 0x0F	; 15
    40ce:	90 f4       	brcc	.+36     	; 0x40f4 <del_key+0x40>
        keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
    40d0:	e0 91 0e 01 	lds	r30, 0x010E
    40d4:	f0 91 0f 01 	lds	r31, 0x010F
    40d8:	e9 0f       	add	r30, r25
    40da:	f1 1d       	adc	r31, r1
    40dc:	87 70       	andi	r24, 0x07	; 7
    40de:	21 e0       	ldi	r18, 0x01	; 1
    40e0:	30 e0       	ldi	r19, 0x00	; 0
    40e2:	01 c0       	rjmp	.+2      	; 0x40e6 <del_key+0x32>
    40e4:	22 0f       	add	r18, r18
    40e6:	8a 95       	dec	r24
    40e8:	ea f7       	brpl	.-6      	; 0x40e4 <del_key+0x30>
    40ea:	20 95       	com	r18
    40ec:	81 81       	ldd	r24, Z+1	; 0x01
    40ee:	28 23       	and	r18, r24
    40f0:	21 83       	std	Z+1, r18	; 0x01
    40f2:	08 95       	ret
    } else {
        dprintf("del_key_bit: can't del: %02X\n", code);
    40f4:	90 91 d7 01 	lds	r25, 0x01D7
    40f8:	90 ff       	sbrs	r25, 0
    40fa:	1f c0       	rjmp	.+62     	; 0x413a <del_key+0x86>
    40fc:	1f 92       	push	r1
    40fe:	8f 93       	push	r24
    4100:	89 eb       	ldi	r24, 0xB9	; 185
    4102:	95 e0       	ldi	r25, 0x05	; 5
    4104:	9f 93       	push	r25
    4106:	8f 93       	push	r24
    4108:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    410c:	0f 90       	pop	r0
    410e:	0f 90       	pop	r0
    4110:	0f 90       	pop	r0
    4112:	0f 90       	pop	r0
    4114:	08 95       	ret
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    4116:	40 91 0e 01 	lds	r20, 0x010E
    411a:	50 91 0f 01 	lds	r21, 0x010F
    411e:	20 e0       	ldi	r18, 0x00	; 0
    4120:	30 e0       	ldi	r19, 0x00	; 0
    4122:	fa 01       	movw	r30, r20
    4124:	e2 0f       	add	r30, r18
    4126:	f3 1f       	adc	r31, r19
    4128:	92 81       	ldd	r25, Z+2	; 0x02
    412a:	98 13       	cpse	r25, r24
    412c:	01 c0       	rjmp	.+2      	; 0x4130 <del_key+0x7c>
            keyboard_report->keys[i] = 0;
    412e:	12 82       	std	Z+2, r1	; 0x02
    4130:	2f 5f       	subi	r18, 0xFF	; 255
    4132:	3f 4f       	sbci	r19, 0xFF	; 255
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    4134:	2e 30       	cpi	r18, 0x0E	; 14
    4136:	31 05       	cpc	r19, r1
    4138:	a1 f7       	brne	.-24     	; 0x4122 <del_key+0x6e>
    413a:	08 95       	ret

0000413c <clear_keys>:
#endif
    del_key_byte(key);
}

void clear_keys(void)
{
    413c:	81 e0       	ldi	r24, 0x01	; 1
    413e:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    4140:	e0 91 0e 01 	lds	r30, 0x010E
    4144:	f0 91 0f 01 	lds	r31, 0x010F
    4148:	e8 0f       	add	r30, r24
    414a:	f9 1f       	adc	r31, r25
    414c:	10 82       	st	Z, r1
    414e:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    4150:	80 31       	cpi	r24, 0x10	; 16
    4152:	91 05       	cpc	r25, r1
    4154:	a9 f7       	brne	.-22     	; 0x4140 <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    4156:	08 95       	ret

00004158 <add_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
void add_mods(uint8_t mods) { real_mods |= mods; }
    4158:	90 91 d6 01 	lds	r25, 0x01D6
    415c:	98 2b       	or	r25, r24
    415e:	90 93 d6 01 	sts	0x01D6, r25
    4162:	08 95       	ret

00004164 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    4164:	80 95       	com	r24
    4166:	90 91 d6 01 	lds	r25, 0x01D6
    416a:	98 23       	and	r25, r24
    416c:	90 93 d6 01 	sts	0x01D6, r25
    4170:	08 95       	ret

00004172 <clear_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
void clear_mods(void) { real_mods = 0; }
    4172:	10 92 d6 01 	sts	0x01D6, r1
    4176:	08 95       	ret

00004178 <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    4178:	90 91 d5 01 	lds	r25, 0x01D5
    417c:	98 2b       	or	r25, r24
    417e:	90 93 d5 01 	sts	0x01D5, r25
    4182:	08 95       	ret

00004184 <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    4184:	80 95       	com	r24
    4186:	90 91 d5 01 	lds	r25, 0x01D5
    418a:	98 23       	and	r25, r24
    418c:	90 93 d5 01 	sts	0x01D5, r25
    4190:	08 95       	ret

00004192 <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    4192:	10 92 d5 01 	sts	0x01D5, r1
    4196:	08 95       	ret

00004198 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    4198:	80 93 c4 01 	sts	0x01C4, r24
    419c:	08 95       	ret

0000419e <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    419e:	10 92 c4 01 	sts	0x01C4, r1
    41a2:	08 95       	ret

000041a4 <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    41a4:	40 91 0e 01 	lds	r20, 0x010E
    41a8:	50 91 0f 01 	lds	r21, 0x010F
    41ac:	20 e0       	ldi	r18, 0x00	; 0
    41ae:	30 e0       	ldi	r19, 0x00	; 0
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    41b0:	80 e0       	ldi	r24, 0x00	; 0
    41b2:	fa 01       	movw	r30, r20
    41b4:	e2 0f       	add	r30, r18
    41b6:	f3 1f       	adc	r31, r19
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    41b8:	91 81       	ldd	r25, Z+1	; 0x01
    41ba:	91 11       	cpse	r25, r1
            cnt++;
    41bc:	8f 5f       	subi	r24, 0xFF	; 255
    41be:	2f 5f       	subi	r18, 0xFF	; 255
    41c0:	3f 4f       	sbci	r19, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    41c2:	2f 30       	cpi	r18, 0x0F	; 15
    41c4:	31 05       	cpc	r19, r1
    41c6:	a9 f7       	brne	.-22     	; 0x41b2 <has_anykey+0xe>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    41c8:	08 95       	ret

000041ca <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    41ca:	e0 91 0e 01 	lds	r30, 0x010E
    41ce:	f0 91 0f 01 	lds	r31, 0x010F
    41d2:	80 91 d6 01 	lds	r24, 0x01D6
    41d6:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    41d8:	e0 91 0e 01 	lds	r30, 0x010E
    41dc:	f0 91 0f 01 	lds	r31, 0x010F
    41e0:	80 81       	ld	r24, Z
    41e2:	90 91 d5 01 	lds	r25, 0x01D5
    41e6:	89 2b       	or	r24, r25
    41e8:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    41ea:	90 91 c4 01 	lds	r25, 0x01C4
    41ee:	99 23       	and	r25, r25
    41f0:	61 f0       	breq	.+24     	; 0x420a <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    41f2:	e0 91 0e 01 	lds	r30, 0x010E
    41f6:	f0 91 0f 01 	lds	r31, 0x010F
    41fa:	80 81       	ld	r24, Z
    41fc:	89 2b       	or	r24, r25
    41fe:	80 83       	st	Z, r24
        if (has_anykey()) {
    4200:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <has_anykey>
    4204:	81 11       	cpse	r24, r1
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    4206:	10 92 c4 01 	sts	0x01C4, r1
        if (has_anykey()) {
            clear_oneshot_mods();
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    420a:	80 91 0e 01 	lds	r24, 0x010E
    420e:	90 91 0f 01 	lds	r25, 0x010F
    4212:	0c 94 e7 14 	jmp	0x29ce	; 0x29ce <host_keyboard_send>

00004216 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    4216:	90 93 3b 01 	sts	0x013B, r25
    421a:	80 93 3a 01 	sts	0x013A, r24
    421e:	08 95       	ret

00004220 <biton32>:
    if (bits >> 1) { bits >>= 1; n += 1;}
    return n;
}

uint8_t biton32(uint32_t bits)
{
    4220:	cf 92       	push	r12
    4222:	df 92       	push	r13
    4224:	ef 92       	push	r14
    4226:	ff 92       	push	r15
    4228:	0f 93       	push	r16
    422a:	1f 93       	push	r17
    uint8_t n = 0;
    if (bits >>16) { bits >>=16; n +=16;}
    422c:	6c 01       	movw	r12, r24
    422e:	ee 24       	eor	r14, r14
    4230:	ff 24       	eor	r15, r15
    4232:	c1 14       	cp	r12, r1
    4234:	d1 04       	cpc	r13, r1
    4236:	e1 04       	cpc	r14, r1
    4238:	f1 04       	cpc	r15, r1
    423a:	21 f4       	brne	.+8      	; 0x4244 <biton32+0x24>
    423c:	6b 01       	movw	r12, r22
    423e:	7c 01       	movw	r14, r24
    return n;
}

uint8_t biton32(uint32_t bits)
{
    uint8_t n = 0;
    4240:	80 e0       	ldi	r24, 0x00	; 0
    4242:	01 c0       	rjmp	.+2      	; 0x4246 <biton32+0x26>
    if (bits >>16) { bits >>=16; n +=16;}
    4244:	80 e1       	ldi	r24, 0x10	; 16
    if (bits >> 8) { bits >>= 8; n += 8;}
    4246:	33 27       	eor	r19, r19
    4248:	2f 2d       	mov	r18, r15
    424a:	1e 2d       	mov	r17, r14
    424c:	0d 2d       	mov	r16, r13
    424e:	01 15       	cp	r16, r1
    4250:	11 05       	cpc	r17, r1
    4252:	21 05       	cpc	r18, r1
    4254:	31 05       	cpc	r19, r1
    4256:	19 f0       	breq	.+6      	; 0x425e <biton32+0x3e>
    4258:	88 5f       	subi	r24, 0xF8	; 248
    425a:	68 01       	movw	r12, r16
    425c:	79 01       	movw	r14, r18
    if (bits >> 4) { bits >>= 4; n += 4;}
    425e:	97 01       	movw	r18, r14
    4260:	86 01       	movw	r16, r12
    4262:	a4 e0       	ldi	r26, 0x04	; 4
    4264:	36 95       	lsr	r19
    4266:	27 95       	ror	r18
    4268:	17 95       	ror	r17
    426a:	07 95       	ror	r16
    426c:	aa 95       	dec	r26
    426e:	d1 f7       	brne	.-12     	; 0x4264 <biton32+0x44>
    4270:	01 15       	cp	r16, r1
    4272:	11 05       	cpc	r17, r1
    4274:	21 05       	cpc	r18, r1
    4276:	31 05       	cpc	r19, r1
    4278:	19 f0       	breq	.+6      	; 0x4280 <biton32+0x60>
    427a:	8c 5f       	subi	r24, 0xFC	; 252
    427c:	68 01       	movw	r12, r16
    427e:	79 01       	movw	r14, r18
    if (bits >> 2) { bits >>= 2; n += 2;}
    4280:	97 01       	movw	r18, r14
    4282:	86 01       	movw	r16, r12
    4284:	f2 e0       	ldi	r31, 0x02	; 2
    4286:	36 95       	lsr	r19
    4288:	27 95       	ror	r18
    428a:	17 95       	ror	r17
    428c:	07 95       	ror	r16
    428e:	fa 95       	dec	r31
    4290:	d1 f7       	brne	.-12     	; 0x4286 <biton32+0x66>
    4292:	01 15       	cp	r16, r1
    4294:	11 05       	cpc	r17, r1
    4296:	21 05       	cpc	r18, r1
    4298:	31 05       	cpc	r19, r1
    429a:	19 f0       	breq	.+6      	; 0x42a2 <biton32+0x82>
    429c:	8e 5f       	subi	r24, 0xFE	; 254
    429e:	68 01       	movw	r12, r16
    42a0:	79 01       	movw	r14, r18
    if (bits >> 1) { bits >>= 1; n += 1;}
    42a2:	b7 01       	movw	r22, r14
    42a4:	a6 01       	movw	r20, r12
    42a6:	76 95       	lsr	r23
    42a8:	67 95       	ror	r22
    42aa:	57 95       	ror	r21
    42ac:	47 95       	ror	r20
    42ae:	45 2b       	or	r20, r21
    42b0:	46 2b       	or	r20, r22
    42b2:	47 2b       	or	r20, r23
    42b4:	09 f0       	breq	.+2      	; 0x42b8 <biton32+0x98>
    42b6:	8f 5f       	subi	r24, 0xFF	; 255
    return n;
}
    42b8:	1f 91       	pop	r17
    42ba:	0f 91       	pop	r16
    42bc:	ff 90       	pop	r15
    42be:	ef 90       	pop	r14
    42c0:	df 90       	pop	r13
    42c2:	cf 90       	pop	r12
    42c4:	08 95       	ret

000042c6 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    42c6:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    42c8:	98 2f       	mov	r25, r24
    42ca:	9c 7c       	andi	r25, 0xCC	; 204
    42cc:	96 95       	lsr	r25
    42ce:	96 95       	lsr	r25
    42d0:	83 73       	andi	r24, 0x33	; 51
    42d2:	44 e0       	ldi	r20, 0x04	; 4
    42d4:	84 9f       	mul	r24, r20
    42d6:	90 01       	movw	r18, r0
    42d8:	11 24       	eor	r1, r1
    42da:	92 2b       	or	r25, r18
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    42dc:	89 2f       	mov	r24, r25
    42de:	8a 7a       	andi	r24, 0xAA	; 170
    42e0:	86 95       	lsr	r24
    42e2:	95 75       	andi	r25, 0x55	; 85
    42e4:	99 0f       	add	r25, r25
    return bits;
}
    42e6:	89 2b       	or	r24, r25
    42e8:	08 95       	ret

000042ea <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    42ea:	1f 93       	push	r17
    42ec:	cf 93       	push	r28
    42ee:	df 93       	push	r29
    42f0:	1f 92       	push	r1
    42f2:	cd b7       	in	r28, 0x3d	; 61
    42f4:	de b7       	in	r29, 0x3e	; 62
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    42f6:	99 83       	std	Y+1, r25	; 0x01
    42f8:	0e 94 63 21 	call	0x42c6	; 0x42c6 <bitrev>
    42fc:	18 2f       	mov	r17, r24
    42fe:	99 81       	ldd	r25, Y+1	; 0x01
    4300:	89 2f       	mov	r24, r25
    4302:	0e 94 63 21 	call	0x42c6	; 0x42c6 <bitrev>
    4306:	21 2f       	mov	r18, r17
    4308:	30 e0       	ldi	r19, 0x00	; 0
    430a:	32 2f       	mov	r19, r18
    430c:	22 27       	eor	r18, r18
    return bits;
}
    430e:	a9 01       	movw	r20, r18
    4310:	48 2b       	or	r20, r24
    4312:	ca 01       	movw	r24, r20
    4314:	0f 90       	pop	r0
    4316:	df 91       	pop	r29
    4318:	cf 91       	pop	r28
    431a:	1f 91       	pop	r17
    431c:	08 95       	ret

0000431e <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    431e:	80 91 f0 01 	lds	r24, 0x01F0
    4322:	84 30       	cpi	r24, 0x04	; 4
    4324:	09 f1       	breq	.+66     	; 0x4368 <suspend_power_down+0x4a>
#endif
    wdt_timeout = wdto;
    4326:	10 92 d8 01 	sts	0x01D8, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    432a:	20 e4       	ldi	r18, 0x40	; 64
    432c:	88 e1       	ldi	r24, 0x18	; 24
    432e:	90 e0       	ldi	r25, 0x00	; 0
    4330:	0f b6       	in	r0, 0x3f	; 63
    4332:	f8 94       	cli
    4334:	a8 95       	wdr
    4336:	80 93 60 00 	sts	0x0060, r24
    433a:	0f be       	out	0x3f, r0	; 63
    433c:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    4340:	83 b7       	in	r24, 0x33	; 51
    4342:	81 7f       	andi	r24, 0xF1	; 241
    4344:	84 60       	ori	r24, 0x04	; 4
    4346:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    4348:	83 b7       	in	r24, 0x33	; 51
    434a:	81 60       	ori	r24, 0x01	; 1
    434c:	83 bf       	out	0x33, r24	; 51
    sei();
    434e:	78 94       	sei
    sleep_cpu();
    4350:	88 95       	sleep
    sleep_disable();
    4352:	83 b7       	in	r24, 0x33	; 51
    4354:	8e 7f       	andi	r24, 0xFE	; 254
    4356:	83 bf       	out	0x33, r24	; 51

    // Disable watchdog after sleep
    wdt_disable();
    4358:	88 e1       	ldi	r24, 0x18	; 24
    435a:	0f b6       	in	r0, 0x3f	; 63
    435c:	f8 94       	cli
    435e:	80 93 60 00 	sts	0x0060, r24
    4362:	10 92 60 00 	sts	0x0060, r1
    4366:	0f be       	out	0x3f, r0	; 63
    4368:	08 95       	ret

0000436a <matrix_power_up>:
void suspend_power_down(void)
{
    power_down(WDTO_15MS);
}

__attribute__ ((weak)) void matrix_power_up(void) {}
    436a:	08 95       	ret

0000436c <matrix_power_down>:
__attribute__ ((weak)) void matrix_power_down(void) {}
    436c:	08 95       	ret

0000436e <suspend_wakeup_condition>:
bool suspend_wakeup_condition(void)
{
    436e:	cf 93       	push	r28
    matrix_power_up();
    4370:	0e 94 b5 21 	call	0x436a	; 0x436a <matrix_power_up>
    matrix_scan();
    4374:	0e 94 81 09 	call	0x1302	; 0x1302 <matrix_scan>
    matrix_power_down();
    4378:	0e 94 b6 21 	call	0x436c	; 0x436c <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    437c:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    437e:	8c 2f       	mov	r24, r28
    4380:	0e 94 ac 0a 	call	0x1558	; 0x1558 <matrix_get_row>
    4384:	81 11       	cpse	r24, r1
    4386:	05 c0       	rjmp	.+10     	; 0x4392 <suspend_wakeup_condition+0x24>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    4388:	cf 5f       	subi	r28, 0xFF	; 255
    438a:	ce 30       	cpi	r28, 0x0E	; 14
    438c:	c1 f7       	brne	.-16     	; 0x437e <suspend_wakeup_condition+0x10>
        if (matrix_get_row(r)) return true;
    }
    return false;
    438e:	80 e0       	ldi	r24, 0x00	; 0
    4390:	01 c0       	rjmp	.+2      	; 0x4394 <suspend_wakeup_condition+0x26>
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    4392:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    4394:	cf 91       	pop	r28
    4396:	08 95       	ret

00004398 <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    4398:	0c 94 a0 1a 	jmp	0x3540	; 0x3540 <clear_keyboard>

0000439c <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    439c:	82 e0       	ldi	r24, 0x02	; 2
    439e:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    43a0:	93 e0       	ldi	r25, 0x03	; 3
    43a2:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    43a4:	9a ef       	ldi	r25, 0xFA	; 250
    43a6:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    43a8:	80 93 6e 00 	sts	0x006E, r24
    43ac:	08 95       	ret

000043ae <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    43ae:	2f b7       	in	r18, 0x3f	; 63
    cli();
    43b0:	f8 94       	cli
    t = timer_count;
    43b2:	80 91 d9 01 	lds	r24, 0x01D9
    43b6:	90 91 da 01 	lds	r25, 0x01DA
    43ba:	a0 91 db 01 	lds	r26, 0x01DB
    43be:	b0 91 dc 01 	lds	r27, 0x01DC
    SREG = sreg;
    43c2:	2f bf       	out	0x3f, r18	; 63

    return (t & 0xFFFF);
}
    43c4:	08 95       	ret

000043c6 <timer_elapsed>:
    return t;
}

inline
uint16_t timer_elapsed(uint16_t last)
{
    43c6:	cf 92       	push	r12
    43c8:	df 92       	push	r13
    43ca:	ef 92       	push	r14
    43cc:	ff 92       	push	r15
    43ce:	0f 93       	push	r16
    43d0:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    43d2:	2f b7       	in	r18, 0x3f	; 63
    cli();
    43d4:	f8 94       	cli
    t = timer_count;
    43d6:	40 91 d9 01 	lds	r20, 0x01D9
    43da:	50 91 da 01 	lds	r21, 0x01DA
    43de:	60 91 db 01 	lds	r22, 0x01DB
    43e2:	70 91 dc 01 	lds	r23, 0x01DC
    SREG = sreg;
    43e6:	2f bf       	out	0x3f, r18	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    43e8:	6a 01       	movw	r12, r20
    43ea:	7b 01       	movw	r14, r22
    43ec:	ee 24       	eor	r14, r14
    43ee:	ff 24       	eor	r15, r15
    43f0:	8c 01       	movw	r16, r24
    43f2:	20 e0       	ldi	r18, 0x00	; 0
    43f4:	30 e0       	ldi	r19, 0x00	; 0
    43f6:	c0 16       	cp	r12, r16
    43f8:	d1 06       	cpc	r13, r17
    43fa:	e2 06       	cpc	r14, r18
    43fc:	f3 06       	cpc	r15, r19
    43fe:	10 f4       	brcc	.+4      	; 0x4404 <timer_elapsed+0x3e>
    4400:	41 50       	subi	r20, 0x01	; 1
    4402:	51 09       	sbc	r21, r1
    4404:	48 1b       	sub	r20, r24
    4406:	59 0b       	sbc	r21, r25
}
    4408:	ca 01       	movw	r24, r20
    440a:	1f 91       	pop	r17
    440c:	0f 91       	pop	r16
    440e:	ff 90       	pop	r15
    4410:	ef 90       	pop	r14
    4412:	df 90       	pop	r13
    4414:	cf 90       	pop	r12
    4416:	08 95       	ret

00004418 <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    4418:	1f 92       	push	r1
    441a:	0f 92       	push	r0
    441c:	0f b6       	in	r0, 0x3f	; 63
    441e:	0f 92       	push	r0
    4420:	11 24       	eor	r1, r1
    4422:	8f 93       	push	r24
    4424:	9f 93       	push	r25
    4426:	af 93       	push	r26
    4428:	bf 93       	push	r27
    timer_count++;
    442a:	80 91 d9 01 	lds	r24, 0x01D9
    442e:	90 91 da 01 	lds	r25, 0x01DA
    4432:	a0 91 db 01 	lds	r26, 0x01DB
    4436:	b0 91 dc 01 	lds	r27, 0x01DC
    443a:	01 96       	adiw	r24, 0x01	; 1
    443c:	a1 1d       	adc	r26, r1
    443e:	b1 1d       	adc	r27, r1
    4440:	80 93 d9 01 	sts	0x01D9, r24
    4444:	90 93 da 01 	sts	0x01DA, r25
    4448:	a0 93 db 01 	sts	0x01DB, r26
    444c:	b0 93 dc 01 	sts	0x01DC, r27
}
    4450:	bf 91       	pop	r27
    4452:	af 91       	pop	r26
    4454:	9f 91       	pop	r25
    4456:	8f 91       	pop	r24
    4458:	0f 90       	pop	r0
    445a:	0f be       	out	0x3f, r0	; 63
    445c:	0f 90       	pop	r0
    445e:	1f 90       	pop	r1
    4460:	18 95       	reti

00004462 <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    4462:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <USB_Disable>
    cli();
    4466:	f8 94       	cli
    4468:	2f ef       	ldi	r18, 0xFF	; 255
    446a:	87 ea       	ldi	r24, 0xA7	; 167
    446c:	91 e6       	ldi	r25, 0x61	; 97
    446e:	21 50       	subi	r18, 0x01	; 1
    4470:	80 40       	sbci	r24, 0x00	; 0
    4472:	90 40       	sbci	r25, 0x00	; 0
    4474:	e1 f7       	brne	.-8      	; 0x446e <bootloader_jump+0xc>
    4476:	00 c0       	rjmp	.+0      	; 0x4478 <bootloader_jump+0x16>
    4478:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    447a:	87 e0       	ldi	r24, 0x07	; 7
    447c:	90 eb       	ldi	r25, 0xB0	; 176
    447e:	dc 01       	movw	r26, r24
    4480:	80 93 f9 01 	sts	0x01F9, r24
    4484:	90 93 fa 01 	sts	0x01FA, r25
    4488:	a0 93 fb 01 	sts	0x01FB, r26
    448c:	b0 93 fc 01 	sts	0x01FC, r27
    wdt_enable(WDTO_250MS);
    4490:	2c e0       	ldi	r18, 0x0C	; 12
    4492:	88 e1       	ldi	r24, 0x18	; 24
    4494:	90 e0       	ldi	r25, 0x00	; 0
    4496:	0f b6       	in	r0, 0x3f	; 63
    4498:	f8 94       	cli
    449a:	a8 95       	wdr
    449c:	80 93 60 00 	sts	0x0060, r24
    44a0:	0f be       	out	0x3f, r0	; 63
    44a2:	20 93 60 00 	sts	0x0060, r18
    44a6:	ff cf       	rjmp	.-2      	; 0x44a6 <bootloader_jump+0x44>

000044a8 <scan_keycode>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_keycode(uint8_t keycode)
{
    44a8:	ef 92       	push	r14
    44aa:	ff 92       	push	r15
    44ac:	0f 93       	push	r16
    44ae:	1f 93       	push	r17
    44b0:	cf 93       	push	r28
    44b2:	df 93       	push	r29
    44b4:	e8 2e       	mov	r14, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    44b6:	f1 2c       	mov	r15, r1
        matrix_row_t matrix_row = matrix_get_row(r);
    44b8:	8f 2d       	mov	r24, r15
    44ba:	0e 94 ac 0a 	call	0x1558	; 0x1558 <matrix_get_row>
    44be:	c0 e0       	ldi	r28, 0x00	; 0
    44c0:	d0 e0       	ldi	r29, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    44c2:	08 2f       	mov	r16, r24
    44c4:	10 e0       	ldi	r17, 0x00	; 0
    44c6:	98 01       	movw	r18, r16
    44c8:	0c 2e       	mov	r0, r28
    44ca:	02 c0       	rjmp	.+4      	; 0x44d0 <scan_keycode+0x28>
    44cc:	35 95       	asr	r19
    44ce:	27 95       	ror	r18
    44d0:	0a 94       	dec	r0
    44d2:	e2 f7       	brpl	.-8      	; 0x44cc <scan_keycode+0x24>
    44d4:	20 fd       	sbrc	r18, 0
    44d6:	05 c0       	rjmp	.+10     	; 0x44e2 <scan_keycode+0x3a>
    44d8:	21 96       	adiw	r28, 0x01	; 1

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    44da:	c6 30       	cpi	r28, 0x06	; 6
    44dc:	d1 05       	cpc	r29, r1
    44de:	99 f7       	brne	.-26     	; 0x44c6 <scan_keycode+0x1e>
    44e0:	09 c0       	rjmp	.+18     	; 0x44f4 <scan_keycode+0x4c>
            if (matrix_row & ((matrix_row_t)1<<c)) {
                if (keycode == keymap_key_to_keycode(0, (keypos_t){ .row = r, .col = c })) {
    44e2:	6c 2f       	mov	r22, r28
    44e4:	7f 2d       	mov	r23, r15
    44e6:	80 e0       	ldi	r24, 0x00	; 0
    44e8:	0e 94 b9 0b 	call	0x1772	; 0x1772 <keymap_key_to_keycode>
    44ec:	e8 12       	cpse	r14, r24
    44ee:	f4 cf       	rjmp	.-24     	; 0x44d8 <scan_keycode+0x30>
                    return true;
    44f0:	81 e0       	ldi	r24, 0x01	; 1
    44f2:	05 c0       	rjmp	.+10     	; 0x44fe <scan_keycode+0x56>
    }
}

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    44f4:	f3 94       	inc	r15
    44f6:	8e e0       	ldi	r24, 0x0E	; 14
    44f8:	f8 12       	cpse	r15, r24
    44fa:	de cf       	rjmp	.-68     	; 0x44b8 <scan_keycode+0x10>
                    return true;
                }
            }
        }
    }
    return false;
    44fc:	80 e0       	ldi	r24, 0x00	; 0
}
    44fe:	df 91       	pop	r29
    4500:	cf 91       	pop	r28
    4502:	1f 91       	pop	r17
    4504:	0f 91       	pop	r16
    4506:	ff 90       	pop	r15
    4508:	ef 90       	pop	r14
    450a:	08 95       	ret

0000450c <bootmagic_scan_keycode>:

bool bootmagic_scan_keycode(uint8_t keycode)
{
    450c:	cf 93       	push	r28
    450e:	c8 2f       	mov	r28, r24
    if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;
    4510:	8c e2       	ldi	r24, 0x2C	; 44
    4512:	0e 94 54 22 	call	0x44a8	; 0x44a8 <scan_keycode>
    4516:	88 23       	and	r24, r24
    4518:	21 f0       	breq	.+8      	; 0x4522 <bootmagic_scan_keycode+0x16>

    return scan_keycode(keycode);
    451a:	8c 2f       	mov	r24, r28
}
    451c:	cf 91       	pop	r28

bool bootmagic_scan_keycode(uint8_t keycode)
{
    if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;

    return scan_keycode(keycode);
    451e:	0c 94 54 22 	jmp	0x44a8	; 0x44a8 <scan_keycode>
}
    4522:	80 e0       	ldi	r24, 0x00	; 0
    4524:	cf 91       	pop	r28
    4526:	08 95       	ret

00004528 <bootmagic>:
#include "eeconfig.h"
#include "bootmagic.h"


void bootmagic(void)
{
    4528:	cf 93       	push	r28
    /* check signature */
    if (!eeconfig_is_enabled()) {
    452a:	0e 94 e1 23 	call	0x47c2	; 0x47c2 <eeconfig_is_enabled>
    452e:	81 11       	cpse	r24, r1
    4530:	02 c0       	rjmp	.+4      	; 0x4536 <bootmagic+0xe>
        eeconfig_init();
    4532:	0e 94 c7 23 	call	0x478e	; 0x478e <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("boogmagic scan: ... ");
    4536:	8c ef       	ldi	r24, 0xFC	; 252
    4538:	95 e0       	ldi	r25, 0x05	; 5
    453a:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); _delay_ms(10); }
    453e:	c5 e6       	ldi	r28, 0x65	; 101
    4540:	c1 50       	subi	r28, 0x01	; 1
    4542:	49 f0       	breq	.+18     	; 0x4556 <bootmagic+0x2e>
    4544:	0e 94 81 09 	call	0x1302	; 0x1302 <matrix_scan>
    4548:	8f e3       	ldi	r24, 0x3F	; 63
    454a:	9c e9       	ldi	r25, 0x9C	; 156
    454c:	01 97       	sbiw	r24, 0x01	; 1
    454e:	f1 f7       	brne	.-4      	; 0x454c <bootmagic+0x24>
    4550:	00 c0       	rjmp	.+0      	; 0x4552 <bootmagic+0x2a>
    4552:	00 00       	nop
    4554:	f5 cf       	rjmp	.-22     	; 0x4540 <bootmagic+0x18>
    print("done.\n");
    4556:	85 ef       	ldi	r24, 0xF5	; 245
    4558:	95 e0       	ldi	r25, 0x05	; 5
    455a:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SKIP)) {
    455e:	89 e2       	ldi	r24, 0x29	; 41
    4560:	0e 94 86 22 	call	0x450c	; 0x450c <bootmagic_scan_keycode>
    4564:	81 11       	cpse	r24, r1
    4566:	11 c1       	rjmp	.+546    	; 0x478a <bootmagic+0x262>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    4568:	8a e2       	ldi	r24, 0x2A	; 42
    456a:	0e 94 86 22 	call	0x450c	; 0x450c <bootmagic_scan_keycode>
    456e:	81 11       	cpse	r24, r1
        eeconfig_init();
    4570:	0e 94 c7 23 	call	0x478e	; 0x478e <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_BOOTLOADER)) {
    4574:	85 e0       	ldi	r24, 0x05	; 5
    4576:	0e 94 86 22 	call	0x450c	; 0x450c <bootmagic_scan_keycode>
    457a:	81 11       	cpse	r24, r1
        bootloader_jump();
    457c:	0e 94 31 22 	call	0x4462	; 0x4462 <bootloader_jump>
    }

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    4580:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <eeconfig_read_debug>
    4584:	80 93 d7 01 	sts	0x01D7, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    4588:	87 e0       	ldi	r24, 0x07	; 7
    458a:	0e 94 86 22 	call	0x450c	; 0x450c <bootmagic_scan_keycode>
    458e:	88 23       	and	r24, r24
    4590:	99 f1       	breq	.+102    	; 0x45f8 <bootmagic+0xd0>
        if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    4592:	8b e1       	ldi	r24, 0x1B	; 27
    4594:	0e 94 86 22 	call	0x450c	; 0x450c <bootmagic_scan_keycode>
    4598:	88 23       	and	r24, r24
    459a:	51 f0       	breq	.+20     	; 0x45b0 <bootmagic+0x88>
            debug_config.matrix = !debug_config.matrix;
    459c:	90 91 d7 01 	lds	r25, 0x01D7
    45a0:	91 fb       	bst	r25, 1
    45a2:	88 27       	eor	r24, r24
    45a4:	80 f9       	bld	r24, 0
    45a6:	21 e0       	ldi	r18, 0x01	; 1
    45a8:	82 27       	eor	r24, r18
    45aa:	80 fb       	bst	r24, 0
    45ac:	91 f9       	bld	r25, 1
    45ae:	22 c0       	rjmp	.+68     	; 0x45f4 <bootmagic+0xcc>
        } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    45b0:	8e e0       	ldi	r24, 0x0E	; 14
    45b2:	0e 94 86 22 	call	0x450c	; 0x450c <bootmagic_scan_keycode>
    45b6:	88 23       	and	r24, r24
    45b8:	51 f0       	breq	.+20     	; 0x45ce <bootmagic+0xa6>
            debug_config.keyboard = !debug_config.keyboard;
    45ba:	90 91 d7 01 	lds	r25, 0x01D7
    45be:	92 fb       	bst	r25, 2
    45c0:	88 27       	eor	r24, r24
    45c2:	80 f9       	bld	r24, 0
    45c4:	21 e0       	ldi	r18, 0x01	; 1
    45c6:	82 27       	eor	r24, r18
    45c8:	80 fb       	bst	r24, 0
    45ca:	92 f9       	bld	r25, 2
    45cc:	13 c0       	rjmp	.+38     	; 0x45f4 <bootmagic+0xcc>
        } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    45ce:	80 e1       	ldi	r24, 0x10	; 16
    45d0:	0e 94 86 22 	call	0x450c	; 0x450c <bootmagic_scan_keycode>
    45d4:	90 91 d7 01 	lds	r25, 0x01D7
    45d8:	88 23       	and	r24, r24
    45da:	41 f0       	breq	.+16     	; 0x45ec <bootmagic+0xc4>
            debug_config.mouse = !debug_config.mouse;
    45dc:	93 fb       	bst	r25, 3
    45de:	88 27       	eor	r24, r24
    45e0:	80 f9       	bld	r24, 0
    45e2:	21 e0       	ldi	r18, 0x01	; 1
    45e4:	82 27       	eor	r24, r18
    45e6:	80 fb       	bst	r24, 0
    45e8:	93 f9       	bld	r25, 3
    45ea:	04 c0       	rjmp	.+8      	; 0x45f4 <bootmagic+0xcc>
        } else {
            debug_config.enable = !debug_config.enable;
    45ec:	89 2f       	mov	r24, r25
    45ee:	80 95       	com	r24
    45f0:	80 fb       	bst	r24, 0
    45f2:	90 f9       	bld	r25, 0
    45f4:	90 93 d7 01 	sts	0x01D7, r25
        }
    }
    eeconfig_write_debug(debug_config.raw);
    45f8:	80 91 d7 01 	lds	r24, 0x01D7
    45fc:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    4600:	0e 94 fe 23 	call	0x47fc	; 0x47fc <eeconfig_read_keymap>
    4604:	80 93 ea 01 	sts	0x01EA, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    4608:	80 ee       	ldi	r24, 0xE0	; 224
    460a:	0e 94 86 22 	call	0x450c	; 0x450c <bootmagic_scan_keycode>
    460e:	88 23       	and	r24, r24
    4610:	41 f0       	breq	.+16     	; 0x4622 <bootmagic+0xfa>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    4612:	80 91 ea 01 	lds	r24, 0x01EA
    4616:	98 2f       	mov	r25, r24
    4618:	90 95       	com	r25
    461a:	90 fb       	bst	r25, 0
    461c:	80 f9       	bld	r24, 0
    461e:	80 93 ea 01 	sts	0x01EA, r24
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    4622:	89 e3       	ldi	r24, 0x39	; 57
    4624:	0e 94 86 22 	call	0x450c	; 0x450c <bootmagic_scan_keycode>
    4628:	88 23       	and	r24, r24
    462a:	59 f0       	breq	.+22     	; 0x4642 <bootmagic+0x11a>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    462c:	90 91 ea 01 	lds	r25, 0x01EA
    4630:	91 fb       	bst	r25, 1
    4632:	88 27       	eor	r24, r24
    4634:	80 f9       	bld	r24, 0
    4636:	21 e0       	ldi	r18, 0x01	; 1
    4638:	82 27       	eor	r24, r18
    463a:	80 fb       	bst	r24, 0
    463c:	91 f9       	bld	r25, 1
    463e:	90 93 ea 01 	sts	0x01EA, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    4642:	82 ee       	ldi	r24, 0xE2	; 226
    4644:	0e 94 86 22 	call	0x450c	; 0x450c <bootmagic_scan_keycode>
    4648:	88 23       	and	r24, r24
    464a:	59 f0       	breq	.+22     	; 0x4662 <bootmagic+0x13a>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    464c:	90 91 ea 01 	lds	r25, 0x01EA
    4650:	92 fb       	bst	r25, 2
    4652:	88 27       	eor	r24, r24
    4654:	80 f9       	bld	r24, 0
    4656:	21 e0       	ldi	r18, 0x01	; 1
    4658:	82 27       	eor	r24, r18
    465a:	80 fb       	bst	r24, 0
    465c:	92 f9       	bld	r25, 2
    465e:	90 93 ea 01 	sts	0x01EA, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    4662:	86 ee       	ldi	r24, 0xE6	; 230
    4664:	0e 94 86 22 	call	0x450c	; 0x450c <bootmagic_scan_keycode>
    4668:	88 23       	and	r24, r24
    466a:	59 f0       	breq	.+22     	; 0x4682 <bootmagic+0x15a>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    466c:	90 91 ea 01 	lds	r25, 0x01EA
    4670:	93 fb       	bst	r25, 3
    4672:	88 27       	eor	r24, r24
    4674:	80 f9       	bld	r24, 0
    4676:	21 e0       	ldi	r18, 0x01	; 1
    4678:	82 27       	eor	r24, r18
    467a:	80 fb       	bst	r24, 0
    467c:	93 f9       	bld	r25, 3
    467e:	90 93 ea 01 	sts	0x01EA, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_NO_GUI)) {
    4682:	83 ee       	ldi	r24, 0xE3	; 227
    4684:	0e 94 86 22 	call	0x450c	; 0x450c <bootmagic_scan_keycode>
    4688:	88 23       	and	r24, r24
    468a:	59 f0       	breq	.+22     	; 0x46a2 <bootmagic+0x17a>
        keymap_config.no_gui = !keymap_config.no_gui;
    468c:	90 91 ea 01 	lds	r25, 0x01EA
    4690:	94 fb       	bst	r25, 4
    4692:	88 27       	eor	r24, r24
    4694:	80 f9       	bld	r24, 0
    4696:	21 e0       	ldi	r18, 0x01	; 1
    4698:	82 27       	eor	r24, r18
    469a:	80 fb       	bst	r24, 0
    469c:	94 f9       	bld	r25, 4
    469e:	90 93 ea 01 	sts	0x01EA, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    46a2:	85 e3       	ldi	r24, 0x35	; 53
    46a4:	0e 94 86 22 	call	0x450c	; 0x450c <bootmagic_scan_keycode>
    46a8:	88 23       	and	r24, r24
    46aa:	59 f0       	breq	.+22     	; 0x46c2 <bootmagic+0x19a>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    46ac:	90 91 ea 01 	lds	r25, 0x01EA
    46b0:	95 fb       	bst	r25, 5
    46b2:	88 27       	eor	r24, r24
    46b4:	80 f9       	bld	r24, 0
    46b6:	21 e0       	ldi	r18, 0x01	; 1
    46b8:	82 27       	eor	r24, r18
    46ba:	80 fb       	bst	r24, 0
    46bc:	95 f9       	bld	r25, 5
    46be:	90 93 ea 01 	sts	0x01EA, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    46c2:	81 e3       	ldi	r24, 0x31	; 49
    46c4:	0e 94 86 22 	call	0x450c	; 0x450c <bootmagic_scan_keycode>
    46c8:	88 23       	and	r24, r24
    46ca:	59 f0       	breq	.+22     	; 0x46e2 <bootmagic+0x1ba>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    46cc:	90 91 ea 01 	lds	r25, 0x01EA
    46d0:	96 fb       	bst	r25, 6
    46d2:	88 27       	eor	r24, r24
    46d4:	80 f9       	bld	r24, 0
    46d6:	21 e0       	ldi	r18, 0x01	; 1
    46d8:	82 27       	eor	r24, r18
    46da:	80 fb       	bst	r24, 0
    46dc:	96 f9       	bld	r25, 6
    46de:	90 93 ea 01 	sts	0x01EA, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_HOST_NKRO)) {
    46e2:	81 e1       	ldi	r24, 0x11	; 17
    46e4:	0e 94 86 22 	call	0x450c	; 0x450c <bootmagic_scan_keycode>
    46e8:	88 23       	and	r24, r24
    46ea:	59 f0       	breq	.+22     	; 0x4702 <bootmagic+0x1da>
        keymap_config.nkro = !keymap_config.nkro;
    46ec:	90 91 ea 01 	lds	r25, 0x01EA
    46f0:	97 fb       	bst	r25, 7
    46f2:	88 27       	eor	r24, r24
    46f4:	80 f9       	bld	r24, 0
    46f6:	21 e0       	ldi	r18, 0x01	; 1
    46f8:	82 27       	eor	r24, r18
    46fa:	80 fb       	bst	r24, 0
    46fc:	97 f9       	bld	r25, 7
    46fe:	90 93 ea 01 	sts	0x01EA, r25
    }
    eeconfig_write_keymap(keymap_config.raw);
    4702:	80 91 ea 01 	lds	r24, 0x01EA
    4706:	0e 94 02 24 	call	0x4804	; 0x4804 <eeconfig_write_keymap>

#ifdef NKRO_ENABLE
    keyboard_nkro = keymap_config.nkro;
    470a:	80 91 ea 01 	lds	r24, 0x01EA
    470e:	87 fb       	bst	r24, 7
    4710:	88 27       	eor	r24, r24
    4712:	80 f9       	bld	r24, 0
    4714:	80 93 0d 01 	sts	0x010D, r24
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    4718:	87 e2       	ldi	r24, 0x27	; 39
    471a:	0e 94 86 22 	call	0x450c	; 0x450c <bootmagic_scan_keycode>
    471e:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    4720:	8e e1       	ldi	r24, 0x1E	; 30
    4722:	0e 94 86 22 	call	0x450c	; 0x450c <bootmagic_scan_keycode>
    4726:	81 11       	cpse	r24, r1
    4728:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    472a:	8f e1       	ldi	r24, 0x1F	; 31
    472c:	0e 94 86 22 	call	0x450c	; 0x450c <bootmagic_scan_keycode>
    4730:	81 11       	cpse	r24, r1
    4732:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    4734:	80 e2       	ldi	r24, 0x20	; 32
    4736:	0e 94 86 22 	call	0x450c	; 0x450c <bootmagic_scan_keycode>
    473a:	81 11       	cpse	r24, r1
    473c:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    473e:	81 e2       	ldi	r24, 0x21	; 33
    4740:	0e 94 86 22 	call	0x450c	; 0x450c <bootmagic_scan_keycode>
    4744:	81 11       	cpse	r24, r1
    4746:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    4748:	82 e2       	ldi	r24, 0x22	; 34
    474a:	0e 94 86 22 	call	0x450c	; 0x450c <bootmagic_scan_keycode>
    474e:	81 11       	cpse	r24, r1
    4750:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    4752:	83 e2       	ldi	r24, 0x23	; 35
    4754:	0e 94 86 22 	call	0x450c	; 0x450c <bootmagic_scan_keycode>
    4758:	81 11       	cpse	r24, r1
    475a:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    475c:	84 e2       	ldi	r24, 0x24	; 36
    475e:	0e 94 86 22 	call	0x450c	; 0x450c <bootmagic_scan_keycode>
    4762:	88 23       	and	r24, r24
    4764:	11 f0       	breq	.+4      	; 0x476a <bootmagic+0x242>
    4766:	c0 68       	ori	r28, 0x80	; 128
    4768:	02 c0       	rjmp	.+4      	; 0x476e <bootmagic+0x246>
    if (default_layer) {
    476a:	cc 23       	and	r28, r28
    476c:	29 f0       	breq	.+10     	; 0x4778 <bootmagic+0x250>
        eeconfig_write_default_layer(default_layer);
    476e:	8c 2f       	mov	r24, r28
    4770:	0e 94 f9 23 	call	0x47f2	; 0x47f2 <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    4774:	6c 2f       	mov	r22, r28
    4776:	03 c0       	rjmp	.+6      	; 0x477e <bootmagic+0x256>
    } else {
        default_layer = eeconfig_read_default_layer();
    4778:	0e 94 f5 23 	call	0x47ea	; 0x47ea <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    477c:	68 2f       	mov	r22, r24
    477e:	70 e0       	ldi	r23, 0x00	; 0
    4780:	80 e0       	ldi	r24, 0x00	; 0
    4782:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    4784:	cf 91       	pop	r28
    if (default_layer) {
        eeconfig_write_default_layer(default_layer);
        default_layer_set((uint32_t)default_layer);
    } else {
        default_layer = eeconfig_read_default_layer();
        default_layer_set((uint32_t)default_layer);
    4786:	0c 94 9a 1e 	jmp	0x3d34	; 0x3d34 <default_layer_set>
    }
}
    478a:	cf 91       	pop	r28
    478c:	08 95       	ret

0000478e <eeconfig_init>:
#include <avr/eeprom.h>
#include "eeconfig.h"

void eeconfig_init(void)
{
    eeprom_write_word(EECONFIG_MAGIC,          EECONFIG_MAGIC_NUMBER);
    478e:	6d ee       	ldi	r22, 0xED	; 237
    4790:	7e ef       	ldi	r23, 0xFE	; 254
    4792:	80 e0       	ldi	r24, 0x00	; 0
    4794:	90 e0       	ldi	r25, 0x00	; 0
    4796:	0e 94 bc 2d 	call	0x5b78	; 0x5b78 <__eewr_word_m32u4>
    eeprom_write_byte(EECONFIG_DEBUG,          0);
    479a:	60 e0       	ldi	r22, 0x00	; 0
    479c:	82 e0       	ldi	r24, 0x02	; 2
    479e:	90 e0       	ldi	r25, 0x00	; 0
    47a0:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_DEFAULT_LAYER,  0);
    47a4:	60 e0       	ldi	r22, 0x00	; 0
    47a6:	83 e0       	ldi	r24, 0x03	; 3
    47a8:	90 e0       	ldi	r25, 0x00	; 0
    47aa:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_KEYMAP,         0);
    47ae:	60 e0       	ldi	r22, 0x00	; 0
    47b0:	84 e0       	ldi	r24, 0x04	; 4
    47b2:	90 e0       	ldi	r25, 0x00	; 0
    47b4:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_MOUSEKEY_ACCEL, 0);
    47b8:	60 e0       	ldi	r22, 0x00	; 0
    47ba:	85 e0       	ldi	r24, 0x05	; 5
    47bc:	90 e0       	ldi	r25, 0x00	; 0
    47be:	0c 94 ae 2d 	jmp	0x5b5c	; 0x5b5c <__eewr_byte_m32u4>

000047c2 <eeconfig_is_enabled>:
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    47c2:	80 e0       	ldi	r24, 0x00	; 0
    47c4:	90 e0       	ldi	r25, 0x00	; 0
    47c6:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__eerd_word_m32u4>
    47ca:	21 e0       	ldi	r18, 0x01	; 1
    47cc:	8d 3e       	cpi	r24, 0xED	; 237
    47ce:	9e 4f       	sbci	r25, 0xFE	; 254
    47d0:	09 f0       	breq	.+2      	; 0x47d4 <eeconfig_is_enabled+0x12>
    47d2:	20 e0       	ldi	r18, 0x00	; 0
}
    47d4:	82 2f       	mov	r24, r18
    47d6:	08 95       	ret

000047d8 <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    47d8:	82 e0       	ldi	r24, 0x02	; 2
    47da:	90 e0       	ldi	r25, 0x00	; 0
    47dc:	0c 94 a0 2d 	jmp	0x5b40	; 0x5b40 <__eerd_byte_m32u4>

000047e0 <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    47e0:	68 2f       	mov	r22, r24
    47e2:	82 e0       	ldi	r24, 0x02	; 2
    47e4:	90 e0       	ldi	r25, 0x00	; 0
    47e6:	0c 94 ae 2d 	jmp	0x5b5c	; 0x5b5c <__eewr_byte_m32u4>

000047ea <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    47ea:	83 e0       	ldi	r24, 0x03	; 3
    47ec:	90 e0       	ldi	r25, 0x00	; 0
    47ee:	0c 94 a0 2d 	jmp	0x5b40	; 0x5b40 <__eerd_byte_m32u4>

000047f2 <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    47f2:	68 2f       	mov	r22, r24
    47f4:	83 e0       	ldi	r24, 0x03	; 3
    47f6:	90 e0       	ldi	r25, 0x00	; 0
    47f8:	0c 94 ae 2d 	jmp	0x5b5c	; 0x5b5c <__eewr_byte_m32u4>

000047fc <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    47fc:	84 e0       	ldi	r24, 0x04	; 4
    47fe:	90 e0       	ldi	r25, 0x00	; 0
    4800:	0c 94 a0 2d 	jmp	0x5b40	; 0x5b40 <__eerd_byte_m32u4>

00004804 <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    4804:	68 2f       	mov	r22, r24
    4806:	84 e0       	ldi	r24, 0x04	; 4
    4808:	90 e0       	ldi	r25, 0x00	; 0
    480a:	0c 94 ae 2d 	jmp	0x5b5c	; 0x5b5c <__eewr_byte_m32u4>

0000480e <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    480e:	80 91 df 01 	lds	r24, 0x01DF
    4812:	80 ff       	sbrs	r24, 0
    4814:	0b c0       	rjmp	.+22     	; 0x482c <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    4816:	60 91 13 01 	lds	r22, 0x0113
    481a:	85 e0       	ldi	r24, 0x05	; 5
    481c:	68 9f       	mul	r22, r24
    481e:	b0 01       	movw	r22, r0
    4820:	11 24       	eor	r1, r1
    4822:	75 95       	asr	r23
    4824:	67 95       	ror	r22
    4826:	75 95       	asr	r23
    4828:	67 95       	ror	r22
    482a:	2a c0       	rjmp	.+84     	; 0x4880 <move_unit+0x72>
    } else if (mousekey_accel & (1<<1)) {
    482c:	81 ff       	sbrs	r24, 1
    482e:	09 c0       	rjmp	.+18     	; 0x4842 <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    4830:	60 91 13 01 	lds	r22, 0x0113
    4834:	85 e0       	ldi	r24, 0x05	; 5
    4836:	68 9f       	mul	r22, r24
    4838:	b0 01       	movw	r22, r0
    483a:	11 24       	eor	r1, r1
    483c:	75 95       	asr	r23
    483e:	67 95       	ror	r22
    4840:	1f c0       	rjmp	.+62     	; 0x4880 <move_unit+0x72>
    } else if (mousekey_accel & (1<<2)) {
    4842:	82 ff       	sbrs	r24, 2
    4844:	07 c0       	rjmp	.+14     	; 0x4854 <move_unit+0x46>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    4846:	60 91 13 01 	lds	r22, 0x0113
    484a:	85 e0       	ldi	r24, 0x05	; 5
    484c:	68 9f       	mul	r22, r24
    484e:	b0 01       	movw	r22, r0
    4850:	11 24       	eor	r1, r1
    4852:	16 c0       	rjmp	.+44     	; 0x4880 <move_unit+0x72>
    } else if (mousekey_repeat == 0) {
    4854:	40 91 e0 01 	lds	r20, 0x01E0
    4858:	44 23       	and	r20, r20
    485a:	c9 f0       	breq	.+50     	; 0x488e <move_unit+0x80>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    485c:	60 91 12 01 	lds	r22, 0x0112
    4860:	46 17       	cp	r20, r22
    4862:	88 f7       	brcc	.-30     	; 0x4846 <move_unit+0x38>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    4864:	20 91 13 01 	lds	r18, 0x0113
    4868:	85 e0       	ldi	r24, 0x05	; 5
    486a:	28 9f       	mul	r18, r24
    486c:	90 01       	movw	r18, r0
    486e:	11 24       	eor	r1, r1
    4870:	42 9f       	mul	r20, r18
    4872:	c0 01       	movw	r24, r0
    4874:	43 9f       	mul	r20, r19
    4876:	90 0d       	add	r25, r0
    4878:	11 24       	eor	r1, r1
    487a:	70 e0       	ldi	r23, 0x00	; 0
    487c:	0e 94 72 2d 	call	0x5ae4	; 0x5ae4 <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4880:	60 38       	cpi	r22, 0x80	; 128
    4882:	71 05       	cpc	r23, r1
    4884:	40 f4       	brcc	.+16     	; 0x4896 <move_unit+0x88>
    4886:	61 15       	cp	r22, r1
    4888:	71 05       	cpc	r23, r1
    488a:	39 f0       	breq	.+14     	; 0x489a <move_unit+0x8c>
    488c:	02 c0       	rjmp	.+4      	; 0x4892 <move_unit+0x84>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    488e:	65 e0       	ldi	r22, 0x05	; 5
    4890:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4892:	86 2f       	mov	r24, r22
    4894:	08 95       	ret
    4896:	8f e7       	ldi	r24, 0x7F	; 127
    4898:	08 95       	ret
    489a:	81 e0       	ldi	r24, 0x01	; 1
}
    489c:	08 95       	ret

0000489e <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    489e:	80 91 df 01 	lds	r24, 0x01DF
    48a2:	80 ff       	sbrs	r24, 0
    48a4:	08 c0       	rjmp	.+16     	; 0x48b6 <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    48a6:	60 91 11 01 	lds	r22, 0x0111
    48aa:	70 e0       	ldi	r23, 0x00	; 0
    48ac:	75 95       	asr	r23
    48ae:	67 95       	ror	r22
    48b0:	75 95       	asr	r23
    48b2:	67 95       	ror	r22
    48b4:	21 c0       	rjmp	.+66     	; 0x48f8 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<1)) {
    48b6:	81 ff       	sbrs	r24, 1
    48b8:	06 c0       	rjmp	.+12     	; 0x48c6 <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    48ba:	60 91 11 01 	lds	r22, 0x0111
    48be:	70 e0       	ldi	r23, 0x00	; 0
    48c0:	75 95       	asr	r23
    48c2:	67 95       	ror	r22
    48c4:	19 c0       	rjmp	.+50     	; 0x48f8 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<2)) {
    48c6:	82 ff       	sbrs	r24, 2
    48c8:	04 c0       	rjmp	.+8      	; 0x48d2 <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    48ca:	60 91 11 01 	lds	r22, 0x0111
    48ce:	70 e0       	ldi	r23, 0x00	; 0
    48d0:	10 c0       	rjmp	.+32     	; 0x48f2 <wheel_unit+0x54>
    } else if (mousekey_repeat == 0) {
    48d2:	80 91 e0 01 	lds	r24, 0x01E0
    48d6:	88 23       	and	r24, r24
    48d8:	c1 f0       	breq	.+48     	; 0x490a <wheel_unit+0x6c>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    48da:	60 91 10 01 	lds	r22, 0x0110
    48de:	86 17       	cp	r24, r22
    48e0:	a0 f7       	brcc	.-24     	; 0x48ca <wheel_unit+0x2c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    48e2:	90 91 11 01 	lds	r25, 0x0111
    48e6:	98 9f       	mul	r25, r24
    48e8:	c0 01       	movw	r24, r0
    48ea:	11 24       	eor	r1, r1
    48ec:	70 e0       	ldi	r23, 0x00	; 0
    48ee:	0e 94 72 2d 	call	0x5ae4	; 0x5ae4 <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    48f2:	60 38       	cpi	r22, 0x80	; 128
    48f4:	71 05       	cpc	r23, r1
    48f6:	28 f4       	brcc	.+10     	; 0x4902 <wheel_unit+0x64>
    48f8:	61 15       	cp	r22, r1
    48fa:	71 05       	cpc	r23, r1
    48fc:	21 f0       	breq	.+8      	; 0x4906 <wheel_unit+0x68>
    48fe:	86 2f       	mov	r24, r22
    4900:	08 95       	ret
    4902:	8f e7       	ldi	r24, 0x7F	; 127
    4904:	08 95       	ret
    4906:	81 e0       	ldi	r24, 0x01	; 1
    4908:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    490a:	61 e0       	ldi	r22, 0x01	; 1
    490c:	70 e0       	ldi	r23, 0x00	; 0
    490e:	f4 cf       	rjmp	.-24     	; 0x48f8 <wheel_unit+0x5a>

00004910 <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    4910:	80 3f       	cpi	r24, 0xF0	; 240
    4912:	21 f4       	brne	.+8      	; 0x491c <mousekey_on+0xc>
    4914:	0e 94 07 24 	call	0x480e	; 0x480e <move_unit>
    4918:	81 95       	neg	r24
    491a:	04 c0       	rjmp	.+8      	; 0x4924 <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    491c:	81 3f       	cpi	r24, 0xF1	; 241
    491e:	29 f4       	brne	.+10     	; 0x492a <mousekey_on+0x1a>
    4920:	0e 94 07 24 	call	0x480e	; 0x480e <move_unit>
    4924:	80 93 e3 01 	sts	0x01E3, r24
    4928:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    492a:	82 3f       	cpi	r24, 0xF2	; 242
    492c:	21 f4       	brne	.+8      	; 0x4936 <mousekey_on+0x26>
    492e:	0e 94 07 24 	call	0x480e	; 0x480e <move_unit>
    4932:	81 95       	neg	r24
    4934:	04 c0       	rjmp	.+8      	; 0x493e <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    4936:	83 3f       	cpi	r24, 0xF3	; 243
    4938:	29 f4       	brne	.+10     	; 0x4944 <mousekey_on+0x34>
    493a:	0e 94 07 24 	call	0x480e	; 0x480e <move_unit>
    493e:	80 93 e2 01 	sts	0x01E2, r24
    4942:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    4944:	89 3f       	cpi	r24, 0xF9	; 249
    4946:	19 f4       	brne	.+6      	; 0x494e <mousekey_on+0x3e>
    4948:	0e 94 4f 24 	call	0x489e	; 0x489e <wheel_unit>
    494c:	05 c0       	rjmp	.+10     	; 0x4958 <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    494e:	8a 3f       	cpi	r24, 0xFA	; 250
    4950:	31 f4       	brne	.+12     	; 0x495e <mousekey_on+0x4e>
    4952:	0e 94 4f 24 	call	0x489e	; 0x489e <wheel_unit>
    4956:	81 95       	neg	r24
    4958:	80 93 e4 01 	sts	0x01E4, r24
    495c:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    495e:	8b 3f       	cpi	r24, 0xFB	; 251
    4960:	21 f4       	brne	.+8      	; 0x496a <mousekey_on+0x5a>
    4962:	0e 94 4f 24 	call	0x489e	; 0x489e <wheel_unit>
    4966:	81 95       	neg	r24
    4968:	04 c0       	rjmp	.+8      	; 0x4972 <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    496a:	8c 3f       	cpi	r24, 0xFC	; 252
    496c:	29 f4       	brne	.+10     	; 0x4978 <mousekey_on+0x68>
    496e:	0e 94 4f 24 	call	0x489e	; 0x489e <wheel_unit>
    4972:	80 93 e5 01 	sts	0x01E5, r24
    4976:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    4978:	84 3f       	cpi	r24, 0xF4	; 244
    497a:	21 f4       	brne	.+8      	; 0x4984 <mousekey_on+0x74>
    497c:	80 91 e1 01 	lds	r24, 0x01E1
    4980:	81 60       	ori	r24, 0x01	; 1
    4982:	17 c0       	rjmp	.+46     	; 0x49b2 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    4984:	85 3f       	cpi	r24, 0xF5	; 245
    4986:	21 f4       	brne	.+8      	; 0x4990 <mousekey_on+0x80>
    4988:	80 91 e1 01 	lds	r24, 0x01E1
    498c:	82 60       	ori	r24, 0x02	; 2
    498e:	11 c0       	rjmp	.+34     	; 0x49b2 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    4990:	86 3f       	cpi	r24, 0xF6	; 246
    4992:	21 f4       	brne	.+8      	; 0x499c <mousekey_on+0x8c>
    4994:	80 91 e1 01 	lds	r24, 0x01E1
    4998:	84 60       	ori	r24, 0x04	; 4
    499a:	0b c0       	rjmp	.+22     	; 0x49b2 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    499c:	87 3f       	cpi	r24, 0xF7	; 247
    499e:	21 f4       	brne	.+8      	; 0x49a8 <mousekey_on+0x98>
    49a0:	80 91 e1 01 	lds	r24, 0x01E1
    49a4:	88 60       	ori	r24, 0x08	; 8
    49a6:	05 c0       	rjmp	.+10     	; 0x49b2 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    49a8:	88 3f       	cpi	r24, 0xF8	; 248
    49aa:	31 f4       	brne	.+12     	; 0x49b8 <mousekey_on+0xa8>
    49ac:	80 91 e1 01 	lds	r24, 0x01E1
    49b0:	80 61       	ori	r24, 0x10	; 16
    49b2:	80 93 e1 01 	sts	0x01E1, r24
    49b6:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    49b8:	8d 3f       	cpi	r24, 0xFD	; 253
    49ba:	21 f4       	brne	.+8      	; 0x49c4 <mousekey_on+0xb4>
    49bc:	80 91 df 01 	lds	r24, 0x01DF
    49c0:	81 60       	ori	r24, 0x01	; 1
    49c2:	0b c0       	rjmp	.+22     	; 0x49da <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    49c4:	8e 3f       	cpi	r24, 0xFE	; 254
    49c6:	21 f4       	brne	.+8      	; 0x49d0 <mousekey_on+0xc0>
    49c8:	80 91 df 01 	lds	r24, 0x01DF
    49cc:	82 60       	ori	r24, 0x02	; 2
    49ce:	05 c0       	rjmp	.+10     	; 0x49da <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    49d0:	8f 3f       	cpi	r24, 0xFF	; 255
    49d2:	29 f4       	brne	.+10     	; 0x49de <mousekey_on+0xce>
    49d4:	80 91 df 01 	lds	r24, 0x01DF
    49d8:	84 60       	ori	r24, 0x04	; 4
    49da:	80 93 df 01 	sts	0x01DF, r24
    49de:	08 95       	ret

000049e0 <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    49e0:	80 3f       	cpi	r24, 0xF0	; 240
    49e2:	39 f4       	brne	.+14     	; 0x49f2 <mousekey_off+0x12>
    49e4:	80 91 e3 01 	lds	r24, 0x01E3
    49e8:	87 ff       	sbrs	r24, 7
    49ea:	6c c0       	rjmp	.+216    	; 0x4ac4 <mousekey_off+0xe4>
    49ec:	10 92 e3 01 	sts	0x01E3, r1
    49f0:	69 c0       	rjmp	.+210    	; 0x4ac4 <mousekey_off+0xe4>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    49f2:	81 3f       	cpi	r24, 0xF1	; 241
    49f4:	29 f4       	brne	.+10     	; 0x4a00 <mousekey_off+0x20>
    49f6:	80 91 e3 01 	lds	r24, 0x01E3
    49fa:	18 16       	cp	r1, r24
    49fc:	bc f3       	brlt	.-18     	; 0x49ec <mousekey_off+0xc>
    49fe:	62 c0       	rjmp	.+196    	; 0x4ac4 <mousekey_off+0xe4>
    4a00:	90 91 e2 01 	lds	r25, 0x01E2
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    4a04:	82 3f       	cpi	r24, 0xF2	; 242
    4a06:	29 f4       	brne	.+10     	; 0x4a12 <mousekey_off+0x32>
    4a08:	97 ff       	sbrs	r25, 7
    4a0a:	5c c0       	rjmp	.+184    	; 0x4ac4 <mousekey_off+0xe4>
    4a0c:	10 92 e2 01 	sts	0x01E2, r1
    4a10:	59 c0       	rjmp	.+178    	; 0x4ac4 <mousekey_off+0xe4>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    4a12:	83 3f       	cpi	r24, 0xF3	; 243
    4a14:	19 f4       	brne	.+6      	; 0x4a1c <mousekey_off+0x3c>
    4a16:	19 16       	cp	r1, r25
    4a18:	cc f3       	brlt	.-14     	; 0x4a0c <mousekey_off+0x2c>
    4a1a:	54 c0       	rjmp	.+168    	; 0x4ac4 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    4a1c:	89 3f       	cpi	r24, 0xF9	; 249
    4a1e:	41 f4       	brne	.+16     	; 0x4a30 <mousekey_off+0x50>
    4a20:	80 91 e4 01 	lds	r24, 0x01E4
    4a24:	18 16       	cp	r1, r24
    4a26:	0c f0       	brlt	.+2      	; 0x4a2a <mousekey_off+0x4a>
    4a28:	4d c0       	rjmp	.+154    	; 0x4ac4 <mousekey_off+0xe4>
    4a2a:	10 92 e4 01 	sts	0x01E4, r1
    4a2e:	4a c0       	rjmp	.+148    	; 0x4ac4 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    4a30:	8a 3f       	cpi	r24, 0xFA	; 250
    4a32:	29 f4       	brne	.+10     	; 0x4a3e <mousekey_off+0x5e>
    4a34:	80 91 e4 01 	lds	r24, 0x01E4
    4a38:	87 ff       	sbrs	r24, 7
    4a3a:	44 c0       	rjmp	.+136    	; 0x4ac4 <mousekey_off+0xe4>
    4a3c:	f6 cf       	rjmp	.-20     	; 0x4a2a <mousekey_off+0x4a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    4a3e:	8b 3f       	cpi	r24, 0xFB	; 251
    4a40:	39 f4       	brne	.+14     	; 0x4a50 <mousekey_off+0x70>
    4a42:	80 91 e5 01 	lds	r24, 0x01E5
    4a46:	87 ff       	sbrs	r24, 7
    4a48:	3d c0       	rjmp	.+122    	; 0x4ac4 <mousekey_off+0xe4>
    4a4a:	10 92 e5 01 	sts	0x01E5, r1
    4a4e:	3a c0       	rjmp	.+116    	; 0x4ac4 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    4a50:	8c 3f       	cpi	r24, 0xFC	; 252
    4a52:	29 f4       	brne	.+10     	; 0x4a5e <mousekey_off+0x7e>
    4a54:	80 91 e5 01 	lds	r24, 0x01E5
    4a58:	18 16       	cp	r1, r24
    4a5a:	bc f3       	brlt	.-18     	; 0x4a4a <mousekey_off+0x6a>
    4a5c:	33 c0       	rjmp	.+102    	; 0x4ac4 <mousekey_off+0xe4>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    4a5e:	84 3f       	cpi	r24, 0xF4	; 244
    4a60:	21 f4       	brne	.+8      	; 0x4a6a <mousekey_off+0x8a>
    4a62:	80 91 e1 01 	lds	r24, 0x01E1
    4a66:	8e 7f       	andi	r24, 0xFE	; 254
    4a68:	17 c0       	rjmp	.+46     	; 0x4a98 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    4a6a:	85 3f       	cpi	r24, 0xF5	; 245
    4a6c:	21 f4       	brne	.+8      	; 0x4a76 <mousekey_off+0x96>
    4a6e:	80 91 e1 01 	lds	r24, 0x01E1
    4a72:	8d 7f       	andi	r24, 0xFD	; 253
    4a74:	11 c0       	rjmp	.+34     	; 0x4a98 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    4a76:	86 3f       	cpi	r24, 0xF6	; 246
    4a78:	21 f4       	brne	.+8      	; 0x4a82 <mousekey_off+0xa2>
    4a7a:	80 91 e1 01 	lds	r24, 0x01E1
    4a7e:	8b 7f       	andi	r24, 0xFB	; 251
    4a80:	0b c0       	rjmp	.+22     	; 0x4a98 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    4a82:	87 3f       	cpi	r24, 0xF7	; 247
    4a84:	21 f4       	brne	.+8      	; 0x4a8e <mousekey_off+0xae>
    4a86:	80 91 e1 01 	lds	r24, 0x01E1
    4a8a:	87 7f       	andi	r24, 0xF7	; 247
    4a8c:	05 c0       	rjmp	.+10     	; 0x4a98 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    4a8e:	88 3f       	cpi	r24, 0xF8	; 248
    4a90:	31 f4       	brne	.+12     	; 0x4a9e <mousekey_off+0xbe>
    4a92:	80 91 e1 01 	lds	r24, 0x01E1
    4a96:	8f 7e       	andi	r24, 0xEF	; 239
    4a98:	80 93 e1 01 	sts	0x01E1, r24
    4a9c:	13 c0       	rjmp	.+38     	; 0x4ac4 <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    4a9e:	8d 3f       	cpi	r24, 0xFD	; 253
    4aa0:	21 f4       	brne	.+8      	; 0x4aaa <mousekey_off+0xca>
    4aa2:	80 91 df 01 	lds	r24, 0x01DF
    4aa6:	8e 7f       	andi	r24, 0xFE	; 254
    4aa8:	0b c0       	rjmp	.+22     	; 0x4ac0 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    4aaa:	8e 3f       	cpi	r24, 0xFE	; 254
    4aac:	21 f4       	brne	.+8      	; 0x4ab6 <mousekey_off+0xd6>
    4aae:	80 91 df 01 	lds	r24, 0x01DF
    4ab2:	8d 7f       	andi	r24, 0xFD	; 253
    4ab4:	05 c0       	rjmp	.+10     	; 0x4ac0 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    4ab6:	8f 3f       	cpi	r24, 0xFF	; 255
    4ab8:	29 f4       	brne	.+10     	; 0x4ac4 <mousekey_off+0xe4>
    4aba:	80 91 df 01 	lds	r24, 0x01DF
    4abe:	8b 7f       	andi	r24, 0xFB	; 251
    4ac0:	80 93 df 01 	sts	0x01DF, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4ac4:	80 91 e2 01 	lds	r24, 0x01E2
    4ac8:	81 11       	cpse	r24, r1
    4aca:	0e c0       	rjmp	.+28     	; 0x4ae8 <mousekey_off+0x108>
    4acc:	80 91 e3 01 	lds	r24, 0x01E3
    4ad0:	81 11       	cpse	r24, r1
    4ad2:	0a c0       	rjmp	.+20     	; 0x4ae8 <mousekey_off+0x108>
    4ad4:	80 91 e4 01 	lds	r24, 0x01E4
    4ad8:	81 11       	cpse	r24, r1
    4ada:	06 c0       	rjmp	.+12     	; 0x4ae8 <mousekey_off+0x108>
    4adc:	80 91 e5 01 	lds	r24, 0x01E5
    4ae0:	81 11       	cpse	r24, r1
    4ae2:	02 c0       	rjmp	.+4      	; 0x4ae8 <mousekey_off+0x108>
        mousekey_repeat = 0;
    4ae4:	10 92 e0 01 	sts	0x01E0, r1
    4ae8:	08 95       	ret

00004aea <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    4aea:	80 91 d7 01 	lds	r24, 0x01D7
    4aee:	83 ff       	sbrs	r24, 3
    4af0:	7e c0       	rjmp	.+252    	; 0x4bee <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    4af2:	88 e3       	ldi	r24, 0x38	; 56
    4af4:	96 e0       	ldi	r25, 0x06	; 6
    4af6:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    phex(mouse_report.buttons); print("|");
    4afa:	80 91 e1 01 	lds	r24, 0x01E1
    4afe:	1f 92       	push	r1
    4b00:	8f 93       	push	r24
    4b02:	83 e3       	ldi	r24, 0x33	; 51
    4b04:	96 e0       	ldi	r25, 0x06	; 6
    4b06:	9f 93       	push	r25
    4b08:	8f 93       	push	r24
    4b0a:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    4b0e:	81 e3       	ldi	r24, 0x31	; 49
    4b10:	96 e0       	ldi	r25, 0x06	; 6
    4b12:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    print_decs(mouse_report.x); print(" ");
    4b16:	20 91 e2 01 	lds	r18, 0x01E2
    4b1a:	82 2f       	mov	r24, r18
    4b1c:	99 27       	eor	r25, r25
    4b1e:	87 fd       	sbrc	r24, 7
    4b20:	90 95       	com	r25
    4b22:	9f 93       	push	r25
    4b24:	2f 93       	push	r18
    4b26:	8e e2       	ldi	r24, 0x2E	; 46
    4b28:	96 e0       	ldi	r25, 0x06	; 6
    4b2a:	9f 93       	push	r25
    4b2c:	8f 93       	push	r24
    4b2e:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    4b32:	8c e2       	ldi	r24, 0x2C	; 44
    4b34:	96 e0       	ldi	r25, 0x06	; 6
    4b36:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    print_decs(mouse_report.y); print(" ");
    4b3a:	20 91 e3 01 	lds	r18, 0x01E3
    4b3e:	82 2f       	mov	r24, r18
    4b40:	99 27       	eor	r25, r25
    4b42:	87 fd       	sbrc	r24, 7
    4b44:	90 95       	com	r25
    4b46:	9f 93       	push	r25
    4b48:	2f 93       	push	r18
    4b4a:	89 e2       	ldi	r24, 0x29	; 41
    4b4c:	96 e0       	ldi	r25, 0x06	; 6
    4b4e:	9f 93       	push	r25
    4b50:	8f 93       	push	r24
    4b52:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    4b56:	87 e2       	ldi	r24, 0x27	; 39
    4b58:	96 e0       	ldi	r25, 0x06	; 6
    4b5a:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    print_decs(mouse_report.v); print(" ");
    4b5e:	20 91 e4 01 	lds	r18, 0x01E4
    4b62:	82 2f       	mov	r24, r18
    4b64:	99 27       	eor	r25, r25
    4b66:	87 fd       	sbrc	r24, 7
    4b68:	90 95       	com	r25
    4b6a:	9f 93       	push	r25
    4b6c:	2f 93       	push	r18
    4b6e:	84 e2       	ldi	r24, 0x24	; 36
    4b70:	96 e0       	ldi	r25, 0x06	; 6
    4b72:	9f 93       	push	r25
    4b74:	8f 93       	push	r24
    4b76:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    4b7a:	82 e2       	ldi	r24, 0x22	; 34
    4b7c:	96 e0       	ldi	r25, 0x06	; 6
    4b7e:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    print_decs(mouse_report.h); print("](");
    4b82:	20 91 e5 01 	lds	r18, 0x01E5
    4b86:	82 2f       	mov	r24, r18
    4b88:	99 27       	eor	r25, r25
    4b8a:	87 fd       	sbrc	r24, 7
    4b8c:	90 95       	com	r25
    4b8e:	9f 93       	push	r25
    4b90:	2f 93       	push	r18
    4b92:	8f e1       	ldi	r24, 0x1F	; 31
    4b94:	96 e0       	ldi	r25, 0x06	; 6
    4b96:	9f 93       	push	r25
    4b98:	8f 93       	push	r24
    4b9a:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    4b9e:	8c e1       	ldi	r24, 0x1C	; 28
    4ba0:	96 e0       	ldi	r25, 0x06	; 6
    4ba2:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    print_dec(mousekey_repeat); print("/");
    4ba6:	80 91 e0 01 	lds	r24, 0x01E0
    4baa:	1f 92       	push	r1
    4bac:	8f 93       	push	r24
    4bae:	89 e1       	ldi	r24, 0x19	; 25
    4bb0:	96 e0       	ldi	r25, 0x06	; 6
    4bb2:	9f 93       	push	r25
    4bb4:	8f 93       	push	r24
    4bb6:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    4bba:	87 e1       	ldi	r24, 0x17	; 23
    4bbc:	96 e0       	ldi	r25, 0x06	; 6
    4bbe:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    print_dec(mousekey_accel); print(")\n");
    4bc2:	80 91 df 01 	lds	r24, 0x01DF
    4bc6:	1f 92       	push	r1
    4bc8:	8f 93       	push	r24
    4bca:	84 e1       	ldi	r24, 0x14	; 20
    4bcc:	96 e0       	ldi	r25, 0x06	; 6
    4bce:	9f 93       	push	r25
    4bd0:	8f 93       	push	r24
    4bd2:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    4bd6:	81 e1       	ldi	r24, 0x11	; 17
    4bd8:	96 e0       	ldi	r25, 0x06	; 6
    4bda:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    4bde:	8d b7       	in	r24, 0x3d	; 61
    4be0:	9e b7       	in	r25, 0x3e	; 62
    4be2:	4c 96       	adiw	r24, 0x1c	; 28
    4be4:	0f b6       	in	r0, 0x3f	; 63
    4be6:	f8 94       	cli
    4be8:	9e bf       	out	0x3e, r25	; 62
    4bea:	0f be       	out	0x3f, r0	; 63
    4bec:	8d bf       	out	0x3d, r24	; 61
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    4bee:	81 ee       	ldi	r24, 0xE1	; 225
    4bf0:	91 e0       	ldi	r25, 0x01	; 1
    4bf2:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <host_mouse_send>
    last_timer = timer_read();
    4bf6:	0e 94 d7 21 	call	0x43ae	; 0x43ae <timer_read>
    4bfa:	90 93 de 01 	sts	0x01DE, r25
    4bfe:	80 93 dd 01 	sts	0x01DD, r24
    4c02:	08 95       	ret

00004c04 <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    4c04:	1f 93       	push	r17
    4c06:	cf 93       	push	r28
    4c08:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    4c0a:	80 91 dd 01 	lds	r24, 0x01DD
    4c0e:	90 91 de 01 	lds	r25, 0x01DE
    4c12:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <timer_elapsed>
    4c16:	40 91 e0 01 	lds	r20, 0x01E0
    4c1a:	44 23       	and	r20, r20
    4c1c:	21 f0       	breq	.+8      	; 0x4c26 <mousekey_task+0x22>
    4c1e:	20 91 14 01 	lds	r18, 0x0114
    4c22:	30 e0       	ldi	r19, 0x00	; 0
    4c24:	06 c0       	rjmp	.+12     	; 0x4c32 <mousekey_task+0x2e>
    4c26:	20 91 15 01 	lds	r18, 0x0115
    4c2a:	5a e0       	ldi	r21, 0x0A	; 10
    4c2c:	25 9f       	mul	r18, r21
    4c2e:	90 01       	movw	r18, r0
    4c30:	11 24       	eor	r1, r1
    4c32:	82 17       	cp	r24, r18
    4c34:	93 07       	cpc	r25, r19
    4c36:	08 f4       	brcc	.+2      	; 0x4c3a <mousekey_task+0x36>
    4c38:	82 c0       	rjmp	.+260    	; 0x4d3e <mousekey_task+0x13a>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4c3a:	80 91 e2 01 	lds	r24, 0x01E2
    4c3e:	10 91 e3 01 	lds	r17, 0x01E3
    4c42:	d0 91 e4 01 	lds	r29, 0x01E4
    4c46:	c0 91 e5 01 	lds	r28, 0x01E5
    4c4a:	81 11       	cpse	r24, r1
    4c4c:	07 c0       	rjmp	.+14     	; 0x4c5c <mousekey_task+0x58>
    4c4e:	11 11       	cpse	r17, r1
    4c50:	05 c0       	rjmp	.+10     	; 0x4c5c <mousekey_task+0x58>
    4c52:	d1 11       	cpse	r29, r1
    4c54:	03 c0       	rjmp	.+6      	; 0x4c5c <mousekey_task+0x58>
    4c56:	cc 23       	and	r28, r28
    4c58:	09 f4       	brne	.+2      	; 0x4c5c <mousekey_task+0x58>
    4c5a:	71 c0       	rjmp	.+226    	; 0x4d3e <mousekey_task+0x13a>
        return;

    if (mousekey_repeat != UINT8_MAX)
    4c5c:	4f 3f       	cpi	r20, 0xFF	; 255
    4c5e:	19 f0       	breq	.+6      	; 0x4c66 <mousekey_task+0x62>
        mousekey_repeat++;
    4c60:	4f 5f       	subi	r20, 0xFF	; 255
    4c62:	40 93 e0 01 	sts	0x01E0, r20


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    4c66:	18 16       	cp	r1, r24
    4c68:	24 f4       	brge	.+8      	; 0x4c72 <mousekey_task+0x6e>
    4c6a:	0e 94 07 24 	call	0x480e	; 0x480e <move_unit>
    4c6e:	80 93 e2 01 	sts	0x01E2, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    4c72:	80 91 e2 01 	lds	r24, 0x01E2
    4c76:	87 ff       	sbrs	r24, 7
    4c78:	05 c0       	rjmp	.+10     	; 0x4c84 <mousekey_task+0x80>
    4c7a:	0e 94 07 24 	call	0x480e	; 0x480e <move_unit>
    4c7e:	81 95       	neg	r24
    4c80:	80 93 e2 01 	sts	0x01E2, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    4c84:	11 16       	cp	r1, r17
    4c86:	24 f4       	brge	.+8      	; 0x4c90 <mousekey_task+0x8c>
    4c88:	0e 94 07 24 	call	0x480e	; 0x480e <move_unit>
    4c8c:	80 93 e3 01 	sts	0x01E3, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    4c90:	80 91 e3 01 	lds	r24, 0x01E3
    4c94:	87 ff       	sbrs	r24, 7
    4c96:	05 c0       	rjmp	.+10     	; 0x4ca2 <mousekey_task+0x9e>
    4c98:	0e 94 07 24 	call	0x480e	; 0x480e <move_unit>
    4c9c:	81 95       	neg	r24
    4c9e:	80 93 e3 01 	sts	0x01E3, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    4ca2:	60 91 e2 01 	lds	r22, 0x01E2
    4ca6:	66 23       	and	r22, r22
    4ca8:	39 f1       	breq	.+78     	; 0x4cf8 <mousekey_task+0xf4>
    4caa:	10 91 e3 01 	lds	r17, 0x01E3
    4cae:	11 23       	and	r17, r17
    4cb0:	19 f1       	breq	.+70     	; 0x4cf8 <mousekey_task+0xf4>
        mouse_report.x *= 0.7;
    4cb2:	77 27       	eor	r23, r23
    4cb4:	67 fd       	sbrc	r22, 7
    4cb6:	70 95       	com	r23
    4cb8:	87 2f       	mov	r24, r23
    4cba:	97 2f       	mov	r25, r23
    4cbc:	0e 94 77 2c 	call	0x58ee	; 0x58ee <__floatsisf>
    4cc0:	23 e3       	ldi	r18, 0x33	; 51
    4cc2:	33 e3       	ldi	r19, 0x33	; 51
    4cc4:	43 e3       	ldi	r20, 0x33	; 51
    4cc6:	5f e3       	ldi	r21, 0x3F	; 63
    4cc8:	0e 94 db 2c 	call	0x59b6	; 0x59b6 <__mulsf3>
    4ccc:	0e 94 44 2c 	call	0x5888	; 0x5888 <__fixsfsi>
    4cd0:	60 93 e2 01 	sts	0x01E2, r22
        mouse_report.y *= 0.7;
    4cd4:	61 2f       	mov	r22, r17
    4cd6:	77 27       	eor	r23, r23
    4cd8:	67 fd       	sbrc	r22, 7
    4cda:	70 95       	com	r23
    4cdc:	87 2f       	mov	r24, r23
    4cde:	97 2f       	mov	r25, r23
    4ce0:	0e 94 77 2c 	call	0x58ee	; 0x58ee <__floatsisf>
    4ce4:	23 e3       	ldi	r18, 0x33	; 51
    4ce6:	33 e3       	ldi	r19, 0x33	; 51
    4ce8:	43 e3       	ldi	r20, 0x33	; 51
    4cea:	5f e3       	ldi	r21, 0x3F	; 63
    4cec:	0e 94 db 2c 	call	0x59b6	; 0x59b6 <__mulsf3>
    4cf0:	0e 94 44 2c 	call	0x5888	; 0x5888 <__fixsfsi>
    4cf4:	60 93 e3 01 	sts	0x01E3, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    4cf8:	1d 16       	cp	r1, r29
    4cfa:	24 f4       	brge	.+8      	; 0x4d04 <mousekey_task+0x100>
    4cfc:	0e 94 4f 24 	call	0x489e	; 0x489e <wheel_unit>
    4d00:	80 93 e4 01 	sts	0x01E4, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    4d04:	80 91 e4 01 	lds	r24, 0x01E4
    4d08:	87 ff       	sbrs	r24, 7
    4d0a:	05 c0       	rjmp	.+10     	; 0x4d16 <mousekey_task+0x112>
    4d0c:	0e 94 4f 24 	call	0x489e	; 0x489e <wheel_unit>
    4d10:	81 95       	neg	r24
    4d12:	80 93 e4 01 	sts	0x01E4, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    4d16:	1c 16       	cp	r1, r28
    4d18:	24 f4       	brge	.+8      	; 0x4d22 <mousekey_task+0x11e>
    4d1a:	0e 94 4f 24 	call	0x489e	; 0x489e <wheel_unit>
    4d1e:	80 93 e5 01 	sts	0x01E5, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    4d22:	80 91 e5 01 	lds	r24, 0x01E5
    4d26:	87 ff       	sbrs	r24, 7
    4d28:	05 c0       	rjmp	.+10     	; 0x4d34 <mousekey_task+0x130>
    4d2a:	0e 94 4f 24 	call	0x489e	; 0x489e <wheel_unit>
    4d2e:	81 95       	neg	r24
    4d30:	80 93 e5 01 	sts	0x01E5, r24

    mousekey_send();
}
    4d34:	df 91       	pop	r29
    4d36:	cf 91       	pop	r28
    4d38:	1f 91       	pop	r17
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
    4d3a:	0c 94 75 25 	jmp	0x4aea	; 0x4aea <mousekey_send>
}
    4d3e:	df 91       	pop	r29
    4d40:	cf 91       	pop	r28
    4d42:	1f 91       	pop	r17
    4d44:	08 95       	ret

00004d46 <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    4d46:	e1 ee       	ldi	r30, 0xE1	; 225
    4d48:	f1 e0       	ldi	r31, 0x01	; 1
    4d4a:	85 e0       	ldi	r24, 0x05	; 5
    4d4c:	df 01       	movw	r26, r30
    4d4e:	1d 92       	st	X+, r1
    4d50:	8a 95       	dec	r24
    4d52:	e9 f7       	brne	.-6      	; 0x4d4e <mousekey_clear+0x8>
    mousekey_repeat = 0;
    4d54:	10 92 e0 01 	sts	0x01E0, r1
    mousekey_accel = 0;
    4d58:	10 92 df 01 	sts	0x01DF, r1
    4d5c:	08 95       	ret

00004d5e <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    4d5e:	8b e5       	ldi	r24, 0x5B	; 91
    4d60:	98 e0       	ldi	r25, 0x08	; 8
    4d62:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    4d66:	1f 92       	push	r1
    4d68:	81 e0       	ldi	r24, 0x01	; 1
    4d6a:	8f 93       	push	r24
    4d6c:	1f 92       	push	r1
    4d6e:	85 e0       	ldi	r24, 0x05	; 5
    4d70:	8f 93       	push	r24
    4d72:	8d e0       	ldi	r24, 0x0D	; 13
    4d74:	98 e0       	ldi	r25, 0x08	; 8
    4d76:	9f 93       	push	r25
    4d78:	8f 93       	push	r24
    4d7a:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    4d7e:	0f 90       	pop	r0
    4d80:	0f 90       	pop	r0
    4d82:	0f 90       	pop	r0
    4d84:	0f 90       	pop	r0
    4d86:	0f 90       	pop	r0
    4d88:	0f 90       	pop	r0
    4d8a:	08 95       	ret

00004d8c <mousekey_param_inc>:

//#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
#define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    4d8c:	83 30       	cpi	r24, 0x03	; 3
    4d8e:	e9 f1       	breq	.+122    	; 0x4e0a <mousekey_param_inc+0x7e>
    4d90:	28 f4       	brcc	.+10     	; 0x4d9c <mousekey_param_inc+0x10>
    4d92:	81 30       	cpi	r24, 0x01	; 1
    4d94:	61 f0       	breq	.+24     	; 0x4dae <mousekey_param_inc+0x22>
    4d96:	82 30       	cpi	r24, 0x02	; 2
    4d98:	09 f1       	breq	.+66     	; 0x4ddc <mousekey_param_inc+0x50>
    4d9a:	08 95       	ret
    4d9c:	85 30       	cpi	r24, 0x05	; 5
    4d9e:	09 f4       	brne	.+2      	; 0x4da2 <mousekey_param_inc+0x16>
    4da0:	62 c0       	rjmp	.+196    	; 0x4e66 <mousekey_param_inc+0xda>
    4da2:	08 f4       	brcc	.+2      	; 0x4da6 <mousekey_param_inc+0x1a>
    4da4:	49 c0       	rjmp	.+146    	; 0x4e38 <mousekey_param_inc+0xac>
    4da6:	86 30       	cpi	r24, 0x06	; 6
    4da8:	09 f4       	brne	.+2      	; 0x4dac <mousekey_param_inc+0x20>
    4daa:	74 c0       	rjmp	.+232    	; 0x4e94 <mousekey_param_inc+0x108>
    4dac:	08 95       	ret
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    4dae:	20 91 15 01 	lds	r18, 0x0115
    4db2:	86 2f       	mov	r24, r22
    4db4:	90 e0       	ldi	r25, 0x00	; 0
    4db6:	82 0f       	add	r24, r18
    4db8:	91 1d       	adc	r25, r1
    4dba:	8f 3f       	cpi	r24, 0xFF	; 255
    4dbc:	91 05       	cpc	r25, r1
    4dbe:	20 f4       	brcc	.+8      	; 0x4dc8 <mousekey_param_inc+0x3c>
                mk_delay += inc;
    4dc0:	62 0f       	add	r22, r18
    4dc2:	60 93 15 01 	sts	0x0115, r22
    4dc6:	03 c0       	rjmp	.+6      	; 0x4dce <mousekey_param_inc+0x42>
            else
                mk_delay = UINT8_MAX;
    4dc8:	8f ef       	ldi	r24, 0xFF	; 255
    4dca:	80 93 15 01 	sts	0x0115, r24
            PRINT_SET_VAL(mk_delay);
    4dce:	80 91 15 01 	lds	r24, 0x0115
    4dd2:	1f 92       	push	r1
    4dd4:	8f 93       	push	r24
    4dd6:	86 e4       	ldi	r24, 0x46	; 70
    4dd8:	97 e0       	ldi	r25, 0x07	; 7
    4dda:	72 c0       	rjmp	.+228    	; 0x4ec0 <mousekey_param_inc+0x134>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    4ddc:	20 91 14 01 	lds	r18, 0x0114
    4de0:	86 2f       	mov	r24, r22
    4de2:	90 e0       	ldi	r25, 0x00	; 0
    4de4:	82 0f       	add	r24, r18
    4de6:	91 1d       	adc	r25, r1
    4de8:	8f 3f       	cpi	r24, 0xFF	; 255
    4dea:	91 05       	cpc	r25, r1
    4dec:	20 f4       	brcc	.+8      	; 0x4df6 <mousekey_param_inc+0x6a>
                mk_interval += inc;
    4dee:	62 0f       	add	r22, r18
    4df0:	60 93 14 01 	sts	0x0114, r22
    4df4:	03 c0       	rjmp	.+6      	; 0x4dfc <mousekey_param_inc+0x70>
            else
                mk_interval = UINT8_MAX;
    4df6:	8f ef       	ldi	r24, 0xFF	; 255
    4df8:	80 93 14 01 	sts	0x0114, r24
            PRINT_SET_VAL(mk_interval);
    4dfc:	80 91 14 01 	lds	r24, 0x0114
    4e00:	1f 92       	push	r1
    4e02:	8f 93       	push	r24
    4e04:	84 e3       	ldi	r24, 0x34	; 52
    4e06:	97 e0       	ldi	r25, 0x07	; 7
    4e08:	5b c0       	rjmp	.+182    	; 0x4ec0 <mousekey_param_inc+0x134>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    4e0a:	20 91 13 01 	lds	r18, 0x0113
    4e0e:	86 2f       	mov	r24, r22
    4e10:	90 e0       	ldi	r25, 0x00	; 0
    4e12:	82 0f       	add	r24, r18
    4e14:	91 1d       	adc	r25, r1
    4e16:	8f 3f       	cpi	r24, 0xFF	; 255
    4e18:	91 05       	cpc	r25, r1
    4e1a:	20 f4       	brcc	.+8      	; 0x4e24 <mousekey_param_inc+0x98>
                mk_max_speed += inc;
    4e1c:	62 0f       	add	r22, r18
    4e1e:	60 93 13 01 	sts	0x0113, r22
    4e22:	03 c0       	rjmp	.+6      	; 0x4e2a <mousekey_param_inc+0x9e>
            else
                mk_max_speed = UINT8_MAX;
    4e24:	8f ef       	ldi	r24, 0xFF	; 255
    4e26:	80 93 13 01 	sts	0x0113, r24
            PRINT_SET_VAL(mk_max_speed);
    4e2a:	80 91 13 01 	lds	r24, 0x0113
    4e2e:	1f 92       	push	r1
    4e30:	8f 93       	push	r24
    4e32:	81 e2       	ldi	r24, 0x21	; 33
    4e34:	97 e0       	ldi	r25, 0x07	; 7
    4e36:	44 c0       	rjmp	.+136    	; 0x4ec0 <mousekey_param_inc+0x134>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    4e38:	20 91 12 01 	lds	r18, 0x0112
    4e3c:	86 2f       	mov	r24, r22
    4e3e:	90 e0       	ldi	r25, 0x00	; 0
    4e40:	82 0f       	add	r24, r18
    4e42:	91 1d       	adc	r25, r1
    4e44:	8f 3f       	cpi	r24, 0xFF	; 255
    4e46:	91 05       	cpc	r25, r1
    4e48:	20 f4       	brcc	.+8      	; 0x4e52 <mousekey_param_inc+0xc6>
                mk_time_to_max += inc;
    4e4a:	62 0f       	add	r22, r18
    4e4c:	60 93 12 01 	sts	0x0112, r22
    4e50:	03 c0       	rjmp	.+6      	; 0x4e58 <mousekey_param_inc+0xcc>
            else
                mk_time_to_max = UINT8_MAX;
    4e52:	8f ef       	ldi	r24, 0xFF	; 255
    4e54:	80 93 12 01 	sts	0x0112, r24
            PRINT_SET_VAL(mk_time_to_max);
    4e58:	80 91 12 01 	lds	r24, 0x0112
    4e5c:	1f 92       	push	r1
    4e5e:	8f 93       	push	r24
    4e60:	8c e0       	ldi	r24, 0x0C	; 12
    4e62:	97 e0       	ldi	r25, 0x07	; 7
    4e64:	2d c0       	rjmp	.+90     	; 0x4ec0 <mousekey_param_inc+0x134>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    4e66:	20 91 11 01 	lds	r18, 0x0111
    4e6a:	86 2f       	mov	r24, r22
    4e6c:	90 e0       	ldi	r25, 0x00	; 0
    4e6e:	82 0f       	add	r24, r18
    4e70:	91 1d       	adc	r25, r1
    4e72:	8f 3f       	cpi	r24, 0xFF	; 255
    4e74:	91 05       	cpc	r25, r1
    4e76:	20 f4       	brcc	.+8      	; 0x4e80 <mousekey_param_inc+0xf4>
                mk_wheel_max_speed += inc;
    4e78:	62 0f       	add	r22, r18
    4e7a:	60 93 11 01 	sts	0x0111, r22
    4e7e:	03 c0       	rjmp	.+6      	; 0x4e86 <mousekey_param_inc+0xfa>
            else
                mk_wheel_max_speed = UINT8_MAX;
    4e80:	8f ef       	ldi	r24, 0xFF	; 255
    4e82:	80 93 11 01 	sts	0x0111, r24
            PRINT_SET_VAL(mk_wheel_max_speed);
    4e86:	80 91 11 01 	lds	r24, 0x0111
    4e8a:	1f 92       	push	r1
    4e8c:	8f 93       	push	r24
    4e8e:	83 ef       	ldi	r24, 0xF3	; 243
    4e90:	96 e0       	ldi	r25, 0x06	; 6
    4e92:	16 c0       	rjmp	.+44     	; 0x4ec0 <mousekey_param_inc+0x134>
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    4e94:	20 91 10 01 	lds	r18, 0x0110
    4e98:	86 2f       	mov	r24, r22
    4e9a:	90 e0       	ldi	r25, 0x00	; 0
    4e9c:	82 0f       	add	r24, r18
    4e9e:	91 1d       	adc	r25, r1
    4ea0:	8f 3f       	cpi	r24, 0xFF	; 255
    4ea2:	91 05       	cpc	r25, r1
    4ea4:	20 f4       	brcc	.+8      	; 0x4eae <mousekey_param_inc+0x122>
                mk_wheel_time_to_max += inc;
    4ea6:	62 0f       	add	r22, r18
    4ea8:	60 93 10 01 	sts	0x0110, r22
    4eac:	03 c0       	rjmp	.+6      	; 0x4eb4 <mousekey_param_inc+0x128>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    4eae:	8f ef       	ldi	r24, 0xFF	; 255
    4eb0:	80 93 10 01 	sts	0x0110, r24
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4eb4:	80 91 10 01 	lds	r24, 0x0110
    4eb8:	1f 92       	push	r1
    4eba:	8f 93       	push	r24
    4ebc:	88 ed       	ldi	r24, 0xD8	; 216
    4ebe:	96 e0       	ldi	r25, 0x06	; 6
    4ec0:	9f 93       	push	r25
    4ec2:	8f 93       	push	r24
    4ec4:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
            break;
    4ec8:	0f 90       	pop	r0
    4eca:	0f 90       	pop	r0
    4ecc:	0f 90       	pop	r0
    4ece:	0f 90       	pop	r0
    4ed0:	08 95       	ret

00004ed2 <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    4ed2:	83 30       	cpi	r24, 0x03	; 3
    4ed4:	81 f1       	breq	.+96     	; 0x4f36 <mousekey_param_dec+0x64>
    4ed6:	28 f4       	brcc	.+10     	; 0x4ee2 <mousekey_param_dec+0x10>
    4ed8:	81 30       	cpi	r24, 0x01	; 1
    4eda:	59 f0       	breq	.+22     	; 0x4ef2 <mousekey_param_dec+0x20>
    4edc:	82 30       	cpi	r24, 0x02	; 2
    4ede:	d1 f0       	breq	.+52     	; 0x4f14 <mousekey_param_dec+0x42>
    4ee0:	08 95       	ret
    4ee2:	85 30       	cpi	r24, 0x05	; 5
    4ee4:	09 f4       	brne	.+2      	; 0x4ee8 <mousekey_param_dec+0x16>
    4ee6:	49 c0       	rjmp	.+146    	; 0x4f7a <mousekey_param_dec+0xa8>
    4ee8:	b8 f1       	brcs	.+110    	; 0x4f58 <mousekey_param_dec+0x86>
    4eea:	86 30       	cpi	r24, 0x06	; 6
    4eec:	09 f4       	brne	.+2      	; 0x4ef0 <mousekey_param_dec+0x1e>
    4eee:	56 c0       	rjmp	.+172    	; 0x4f9c <mousekey_param_dec+0xca>
    4ef0:	08 95       	ret
        case 1:
            if (mk_delay > dec)
    4ef2:	80 91 15 01 	lds	r24, 0x0115
    4ef6:	68 17       	cp	r22, r24
    4ef8:	20 f4       	brcc	.+8      	; 0x4f02 <mousekey_param_dec+0x30>
                mk_delay -= dec;
    4efa:	86 1b       	sub	r24, r22
    4efc:	80 93 15 01 	sts	0x0115, r24
    4f00:	02 c0       	rjmp	.+4      	; 0x4f06 <mousekey_param_dec+0x34>
            else
                mk_delay = 0;
    4f02:	10 92 15 01 	sts	0x0115, r1
            PRINT_SET_VAL(mk_delay);
    4f06:	80 91 15 01 	lds	r24, 0x0115
    4f0a:	1f 92       	push	r1
    4f0c:	8f 93       	push	r24
    4f0e:	89 ec       	ldi	r24, 0xC9	; 201
    4f10:	96 e0       	ldi	r25, 0x06	; 6
    4f12:	54 c0       	rjmp	.+168    	; 0x4fbc <mousekey_param_dec+0xea>
            break;
        case 2:
            if (mk_interval > dec)
    4f14:	80 91 14 01 	lds	r24, 0x0114
    4f18:	68 17       	cp	r22, r24
    4f1a:	20 f4       	brcc	.+8      	; 0x4f24 <mousekey_param_dec+0x52>
                mk_interval -= dec;
    4f1c:	86 1b       	sub	r24, r22
    4f1e:	80 93 14 01 	sts	0x0114, r24
    4f22:	02 c0       	rjmp	.+4      	; 0x4f28 <mousekey_param_dec+0x56>
            else
                mk_interval = 0;
    4f24:	10 92 14 01 	sts	0x0114, r1
            PRINT_SET_VAL(mk_interval);
    4f28:	80 91 14 01 	lds	r24, 0x0114
    4f2c:	1f 92       	push	r1
    4f2e:	8f 93       	push	r24
    4f30:	87 eb       	ldi	r24, 0xB7	; 183
    4f32:	96 e0       	ldi	r25, 0x06	; 6
    4f34:	43 c0       	rjmp	.+134    	; 0x4fbc <mousekey_param_dec+0xea>
            break;
        case 3:
            if (mk_max_speed > dec)
    4f36:	80 91 13 01 	lds	r24, 0x0113
    4f3a:	68 17       	cp	r22, r24
    4f3c:	20 f4       	brcc	.+8      	; 0x4f46 <mousekey_param_dec+0x74>
                mk_max_speed -= dec;
    4f3e:	86 1b       	sub	r24, r22
    4f40:	80 93 13 01 	sts	0x0113, r24
    4f44:	02 c0       	rjmp	.+4      	; 0x4f4a <mousekey_param_dec+0x78>
            else
                mk_max_speed = 0;
    4f46:	10 92 13 01 	sts	0x0113, r1
            PRINT_SET_VAL(mk_max_speed);
    4f4a:	80 91 13 01 	lds	r24, 0x0113
    4f4e:	1f 92       	push	r1
    4f50:	8f 93       	push	r24
    4f52:	84 ea       	ldi	r24, 0xA4	; 164
    4f54:	96 e0       	ldi	r25, 0x06	; 6
    4f56:	32 c0       	rjmp	.+100    	; 0x4fbc <mousekey_param_dec+0xea>
            break;
        case 4:
            if (mk_time_to_max > dec)
    4f58:	80 91 12 01 	lds	r24, 0x0112
    4f5c:	68 17       	cp	r22, r24
    4f5e:	20 f4       	brcc	.+8      	; 0x4f68 <mousekey_param_dec+0x96>
                mk_time_to_max -= dec;
    4f60:	86 1b       	sub	r24, r22
    4f62:	80 93 12 01 	sts	0x0112, r24
    4f66:	02 c0       	rjmp	.+4      	; 0x4f6c <mousekey_param_dec+0x9a>
            else
                mk_time_to_max = 0;
    4f68:	10 92 12 01 	sts	0x0112, r1
            PRINT_SET_VAL(mk_time_to_max);
    4f6c:	80 91 12 01 	lds	r24, 0x0112
    4f70:	1f 92       	push	r1
    4f72:	8f 93       	push	r24
    4f74:	8f e8       	ldi	r24, 0x8F	; 143
    4f76:	96 e0       	ldi	r25, 0x06	; 6
    4f78:	21 c0       	rjmp	.+66     	; 0x4fbc <mousekey_param_dec+0xea>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    4f7a:	80 91 11 01 	lds	r24, 0x0111
    4f7e:	68 17       	cp	r22, r24
    4f80:	20 f4       	brcc	.+8      	; 0x4f8a <mousekey_param_dec+0xb8>
                mk_wheel_max_speed -= dec;
    4f82:	86 1b       	sub	r24, r22
    4f84:	80 93 11 01 	sts	0x0111, r24
    4f88:	02 c0       	rjmp	.+4      	; 0x4f8e <mousekey_param_dec+0xbc>
            else
                mk_wheel_max_speed = 0;
    4f8a:	10 92 11 01 	sts	0x0111, r1
            PRINT_SET_VAL(mk_wheel_max_speed);
    4f8e:	80 91 11 01 	lds	r24, 0x0111
    4f92:	1f 92       	push	r1
    4f94:	8f 93       	push	r24
    4f96:	86 e7       	ldi	r24, 0x76	; 118
    4f98:	96 e0       	ldi	r25, 0x06	; 6
    4f9a:	10 c0       	rjmp	.+32     	; 0x4fbc <mousekey_param_dec+0xea>
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    4f9c:	80 91 10 01 	lds	r24, 0x0110
    4fa0:	68 17       	cp	r22, r24
    4fa2:	20 f4       	brcc	.+8      	; 0x4fac <mousekey_param_dec+0xda>
                mk_wheel_time_to_max -= dec;
    4fa4:	86 1b       	sub	r24, r22
    4fa6:	80 93 10 01 	sts	0x0110, r24
    4faa:	02 c0       	rjmp	.+4      	; 0x4fb0 <mousekey_param_dec+0xde>
            else
                mk_wheel_time_to_max = 0;
    4fac:	10 92 10 01 	sts	0x0110, r1
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4fb0:	80 91 10 01 	lds	r24, 0x0110
    4fb4:	1f 92       	push	r1
    4fb6:	8f 93       	push	r24
    4fb8:	8b e5       	ldi	r24, 0x5B	; 91
    4fba:	96 e0       	ldi	r25, 0x06	; 6
    4fbc:	9f 93       	push	r25
    4fbe:	8f 93       	push	r24
    4fc0:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
            break;
    4fc4:	0f 90       	pop	r0
    4fc6:	0f 90       	pop	r0
    4fc8:	0f 90       	pop	r0
    4fca:	0f 90       	pop	r0
    4fcc:	08 95       	ret

00004fce <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    4fce:	cf 93       	push	r28
    4fd0:	c8 2f       	mov	r28, r24
    xprintf("L%d\n", layer);
    4fd2:	1f 92       	push	r1
    4fd4:	8f 93       	push	r24
    4fd6:	20 e6       	ldi	r18, 0x60	; 96
    4fd8:	39 e0       	ldi	r19, 0x09	; 9
    4fda:	3f 93       	push	r19
    4fdc:	2f 93       	push	r18
    4fde:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    default_layer_set(1UL<<layer);
    4fe2:	61 e0       	ldi	r22, 0x01	; 1
    4fe4:	70 e0       	ldi	r23, 0x00	; 0
    4fe6:	80 e0       	ldi	r24, 0x00	; 0
    4fe8:	90 e0       	ldi	r25, 0x00	; 0
    4fea:	04 c0       	rjmp	.+8      	; 0x4ff4 <switch_default_layer+0x26>
    4fec:	66 0f       	add	r22, r22
    4fee:	77 1f       	adc	r23, r23
    4ff0:	88 1f       	adc	r24, r24
    4ff2:	99 1f       	adc	r25, r25
    4ff4:	ca 95       	dec	r28
    4ff6:	d2 f7       	brpl	.-12     	; 0x4fec <switch_default_layer+0x1e>
    4ff8:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <default_layer_set>
    clear_keyboard();
    4ffc:	0f 90       	pop	r0
    4ffe:	0f 90       	pop	r0
    5000:	0f 90       	pop	r0
    5002:	0f 90       	pop	r0
}
    5004:	cf 91       	pop	r28

static void switch_default_layer(uint8_t layer)
{
    xprintf("L%d\n", layer);
    default_layer_set(1UL<<layer);
    clear_keyboard();
    5006:	0c 94 a0 1a 	jmp	0x3540	; 0x3540 <clear_keyboard>

0000500a <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    500a:	cf 93       	push	r28
    static host_driver_t *host_driver = 0;
    switch (code) {
    500c:	8d 31       	cpi	r24, 0x1D	; 29
    500e:	09 f4       	brne	.+2      	; 0x5012 <command_common+0x8>
    5010:	65 c0       	rjmp	.+202    	; 0x50dc <command_common+0xd2>
    5012:	b0 f5       	brcc	.+108    	; 0x5080 <command_common+0x76>
    5014:	8e 30       	cpi	r24, 0x0E	; 14
    5016:	09 f4       	brne	.+2      	; 0x501a <command_common+0x10>
    5018:	cb c1       	rjmp	.+918    	; 0x53b0 <command_common+0x3a6>
    501a:	00 f5       	brcc	.+64     	; 0x505c <command_common+0x52>
    501c:	87 30       	cpi	r24, 0x07	; 7
    501e:	09 f4       	brne	.+2      	; 0x5022 <command_common+0x18>
    5020:	9b c1       	rjmp	.+822    	; 0x5358 <command_common+0x34e>
    5022:	a8 f4       	brcc	.+42     	; 0x504e <command_common+0x44>
    5024:	86 30       	cpi	r24, 0x06	; 6
    5026:	09 f0       	breq	.+2      	; 0x502a <command_common+0x20>
    5028:	6a c2       	rjmp	.+1236   	; 0x54fe <command_common+0x4f4>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    502a:	80 91 d7 01 	lds	r24, 0x01D7
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    502e:	81 7f       	andi	r24, 0xF1	; 241
    5030:	8e 7f       	andi	r24, 0xFE	; 254
    5032:	80 93 d7 01 	sts	0x01D7, r24
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    5036:	85 e6       	ldi	r24, 0x65	; 101
    5038:	99 e0       	ldi	r25, 0x09	; 9
    503a:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
            debug_matrix   = false;
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
            command_console_help();
            print("C> ");
    503e:	84 ea       	ldi	r24, 0xA4	; 164
    5040:	9d e0       	ldi	r25, 0x0D	; 13
    5042:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
            command_state = CONSOLE;
    5046:	81 e0       	ldi	r24, 0x01	; 1
    5048:	80 93 e7 01 	sts	0x01E7, r24
    504c:	80 c1       	rjmp	.+768    	; 0x534e <command_common+0x344>
#endif

static bool command_common(uint8_t code)
{
    static host_driver_t *host_driver = 0;
    switch (code) {
    504e:	88 30       	cpi	r24, 0x08	; 8
    5050:	09 f4       	brne	.+2      	; 0x5054 <command_common+0x4a>
    5052:	4f c0       	rjmp	.+158    	; 0x50f2 <command_common+0xe8>
    5054:	8b 30       	cpi	r24, 0x0B	; 11
    5056:	09 f4       	brne	.+2      	; 0x505a <command_common+0x50>
    5058:	7c c1       	rjmp	.+760    	; 0x5352 <command_common+0x348>
    505a:	51 c2       	rjmp	.+1186   	; 0x54fe <command_common+0x4f4>
    505c:	86 31       	cpi	r24, 0x16	; 22
    505e:	09 f4       	brne	.+2      	; 0x5062 <command_common+0x58>
    5060:	ed c1       	rjmp	.+986    	; 0x543c <command_common+0x432>
    5062:	38 f4       	brcc	.+14     	; 0x5072 <command_common+0x68>
    5064:	80 31       	cpi	r24, 0x10	; 16
    5066:	09 f4       	brne	.+2      	; 0x506a <command_common+0x60>
    5068:	b6 c1       	rjmp	.+876    	; 0x53d6 <command_common+0x3cc>
    506a:	81 31       	cpi	r24, 0x11	; 17
    506c:	09 f4       	brne	.+2      	; 0x5070 <command_common+0x66>
    506e:	2d c2       	rjmp	.+1114   	; 0x54ca <command_common+0x4c0>
    5070:	46 c2       	rjmp	.+1164   	; 0x54fe <command_common+0x4f4>
    5072:	89 31       	cpi	r24, 0x19	; 25
    5074:	09 f4       	brne	.+2      	; 0x5078 <command_common+0x6e>
    5076:	cb c1       	rjmp	.+918    	; 0x540e <command_common+0x404>
    5078:	8b 31       	cpi	r24, 0x1B	; 27
    507a:	09 f4       	brne	.+2      	; 0x507e <command_common+0x74>
    507c:	86 c1       	rjmp	.+780    	; 0x538a <command_common+0x380>
    507e:	3f c2       	rjmp	.+1150   	; 0x54fe <command_common+0x4f4>
    5080:	85 33       	cpi	r24, 0x35	; 53
    5082:	09 f4       	brne	.+2      	; 0x5086 <command_common+0x7c>
    5084:	34 c2       	rjmp	.+1128   	; 0x54ee <command_common+0x4e4>
    5086:	48 f4       	brcc	.+18     	; 0x509a <command_common+0x90>
    5088:	87 32       	cpi	r24, 0x27	; 39
    508a:	09 f4       	brne	.+2      	; 0x508e <command_common+0x84>
    508c:	30 c2       	rjmp	.+1120   	; 0x54ee <command_common+0x4e4>
    508e:	08 f4       	brcc	.+2      	; 0x5092 <command_common+0x88>
    5090:	30 c2       	rjmp	.+1120   	; 0x54f2 <command_common+0x4e8>
    5092:	89 32       	cpi	r24, 0x29	; 41
    5094:	09 f4       	brne	.+2      	; 0x5098 <command_common+0x8e>
    5096:	2b c2       	rjmp	.+1110   	; 0x54ee <command_common+0x4e4>
    5098:	32 c2       	rjmp	.+1124   	; 0x54fe <command_common+0x4f4>
    509a:	83 34       	cpi	r24, 0x43	; 67
    509c:	38 f4       	brcc	.+14     	; 0x50ac <command_common+0xa2>
    509e:	8a 33       	cpi	r24, 0x3A	; 58
    50a0:	08 f0       	brcs	.+2      	; 0x50a4 <command_common+0x9a>
    50a2:	29 c2       	rjmp	.+1106   	; 0x54f6 <command_common+0x4ec>
    50a4:	88 33       	cpi	r24, 0x38	; 56
    50a6:	09 f4       	brne	.+2      	; 0x50aa <command_common+0xa0>
    50a8:	54 c1       	rjmp	.+680    	; 0x5352 <command_common+0x348>
    50aa:	29 c2       	rjmp	.+1106   	; 0x54fe <command_common+0x4f4>
    50ac:	83 34       	cpi	r24, 0x43	; 67
    50ae:	09 f4       	brne	.+2      	; 0x50b2 <command_common+0xa8>
    50b0:	1e c2       	rjmp	.+1084   	; 0x54ee <command_common+0x4e4>
    50b2:	88 34       	cpi	r24, 0x48	; 72
    50b4:	09 f0       	breq	.+2      	; 0x50b8 <command_common+0xae>
    50b6:	23 c2       	rjmp	.+1094   	; 0x54fe <command_common+0x4f4>
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
            break;
        case KC_PAUSE:
            clear_keyboard();
    50b8:	0e 94 a0 1a 	call	0x3540	; 0x3540 <clear_keyboard>
            print("\n\nbootloader... ");
    50bc:	83 e9       	ldi	r24, 0x93	; 147
    50be:	9d e0       	ldi	r25, 0x0D	; 13
    50c0:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    50c4:	9f ef       	ldi	r25, 0xFF	; 255
    50c6:	23 ed       	ldi	r18, 0xD3	; 211
    50c8:	80 e3       	ldi	r24, 0x30	; 48
    50ca:	91 50       	subi	r25, 0x01	; 1
    50cc:	20 40       	sbci	r18, 0x00	; 0
    50ce:	80 40       	sbci	r24, 0x00	; 0
    50d0:	e1 f7       	brne	.-8      	; 0x50ca <command_common+0xc0>
    50d2:	00 c0       	rjmp	.+0      	; 0x50d4 <command_common+0xca>
    50d4:	00 00       	nop
            _delay_ms(1000);
            bootloader_jump(); // not return
    50d6:	0e 94 31 22 	call	0x4462	; 0x4462 <bootloader_jump>
    50da:	39 c1       	rjmp	.+626    	; 0x534e <command_common+0x344>
    static host_driver_t *host_driver = 0;
    switch (code) {
#ifdef SLEEP_LED_ENABLE
        case KC_Z:
            // test breathing sleep LED
            print("Sleep LED test\n");
    50dc:	83 eb       	ldi	r24, 0xB3	; 179
    50de:	9d e0       	ldi	r25, 0x0D	; 13
    50e0:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
            sleep_led_toggle();
    50e4:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <sleep_led_toggle>
            led_set(host_keyboard_leds());
    50e8:	0e 94 db 14 	call	0x29b6	; 0x29b6 <host_keyboard_leds>
    50ec:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <led_set>
    50f0:	2e c1       	rjmp	.+604    	; 0x534e <command_common+0x344>
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    50f2:	88 ea       	ldi	r24, 0xA8	; 168
    50f4:	9d e0       	ldi	r25, 0x0D	; 13
    50f6:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    50fa:	86 e7       	ldi	r24, 0x76	; 118
    50fc:	9b e0       	ldi	r25, 0x0B	; 11
    50fe:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    5102:	0e 94 f5 23 	call	0x47ea	; 0x47ea <eeconfig_read_default_layer>
    5106:	1f 92       	push	r1
    5108:	8f 93       	push	r24
    510a:	83 e7       	ldi	r24, 0x73	; 115
    510c:	9b e0       	ldi	r25, 0x0B	; 11
    510e:	9f 93       	push	r25
    5110:	8f 93       	push	r24
    5112:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    5116:	81 e7       	ldi	r24, 0x71	; 113
    5118:	9b e0       	ldi	r25, 0x0B	; 11
    511a:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    511e:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <eeconfig_read_debug>
    5122:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    5124:	8e e5       	ldi	r24, 0x5E	; 94
    5126:	9b e0       	ldi	r25, 0x0B	; 11
    5128:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    512c:	1f 92       	push	r1
    512e:	cf 93       	push	r28
    5130:	29 e5       	ldi	r18, 0x59	; 89
    5132:	3b e0       	ldi	r19, 0x0B	; 11
    5134:	3f 93       	push	r19
    5136:	2f 93       	push	r18
    5138:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    513c:	87 e5       	ldi	r24, 0x57	; 87
    513e:	9b e0       	ldi	r25, 0x0B	; 11
    5140:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    5144:	8d e4       	ldi	r24, 0x4D	; 77
    5146:	9b e0       	ldi	r25, 0x0B	; 11
    5148:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    514c:	8c 2f       	mov	r24, r28
    514e:	81 70       	andi	r24, 0x01	; 1
    5150:	1f 92       	push	r1
    5152:	8f 93       	push	r24
    5154:	2a e4       	ldi	r18, 0x4A	; 74
    5156:	3b e0       	ldi	r19, 0x0B	; 11
    5158:	3f 93       	push	r19
    515a:	2f 93       	push	r18
    515c:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    5160:	88 e4       	ldi	r24, 0x48	; 72
    5162:	9b e0       	ldi	r25, 0x0B	; 11
    5164:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    5168:	8e e3       	ldi	r24, 0x3E	; 62
    516a:	9b e0       	ldi	r25, 0x0B	; 11
    516c:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    5170:	c1 fb       	bst	r28, 1
    5172:	88 27       	eor	r24, r24
    5174:	80 f9       	bld	r24, 0
    5176:	1f 92       	push	r1
    5178:	8f 93       	push	r24
    517a:	2b e3       	ldi	r18, 0x3B	; 59
    517c:	3b e0       	ldi	r19, 0x0B	; 11
    517e:	3f 93       	push	r19
    5180:	2f 93       	push	r18
    5182:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    5186:	89 e3       	ldi	r24, 0x39	; 57
    5188:	9b e0       	ldi	r25, 0x0B	; 11
    518a:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    518e:	8d e2       	ldi	r24, 0x2D	; 45
    5190:	9b e0       	ldi	r25, 0x0B	; 11
    5192:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    5196:	c2 fb       	bst	r28, 2
    5198:	88 27       	eor	r24, r24
    519a:	80 f9       	bld	r24, 0
    519c:	1f 92       	push	r1
    519e:	8f 93       	push	r24
    51a0:	2a e2       	ldi	r18, 0x2A	; 42
    51a2:	3b e0       	ldi	r19, 0x0B	; 11
    51a4:	3f 93       	push	r19
    51a6:	2f 93       	push	r18
    51a8:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    51ac:	88 e2       	ldi	r24, 0x28	; 40
    51ae:	9b e0       	ldi	r25, 0x0B	; 11
    51b0:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    51b4:	8f e1       	ldi	r24, 0x1F	; 31
    51b6:	9b e0       	ldi	r25, 0x0B	; 11
    51b8:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    51bc:	c3 fb       	bst	r28, 3
    51be:	cc 27       	eor	r28, r28
    51c0:	c0 f9       	bld	r28, 0
    51c2:	1f 92       	push	r1
    51c4:	cf 93       	push	r28
    51c6:	8c e1       	ldi	r24, 0x1C	; 28
    51c8:	9b e0       	ldi	r25, 0x0B	; 11
    51ca:	9f 93       	push	r25
    51cc:	8f 93       	push	r24
    51ce:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    51d2:	8a e1       	ldi	r24, 0x1A	; 26
    51d4:	9b e0       	ldi	r25, 0x0B	; 11
    51d6:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    51da:	0e 94 fe 23 	call	0x47fc	; 0x47fc <eeconfig_read_keymap>
    51de:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    51e0:	86 e0       	ldi	r24, 0x06	; 6
    51e2:	9b e0       	ldi	r25, 0x0B	; 11
    51e4:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    51e8:	1f 92       	push	r1
    51ea:	cf 93       	push	r28
    51ec:	21 e0       	ldi	r18, 0x01	; 1
    51ee:	3b e0       	ldi	r19, 0x0B	; 11
    51f0:	3f 93       	push	r19
    51f2:	2f 93       	push	r18
    51f4:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    51f8:	8f ef       	ldi	r24, 0xFF	; 255
    51fa:	9a e0       	ldi	r25, 0x0A	; 10
    51fc:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    5200:	86 ee       	ldi	r24, 0xE6	; 230
    5202:	9a e0       	ldi	r25, 0x0A	; 10
    5204:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    5208:	8c 2f       	mov	r24, r28
    520a:	81 70       	andi	r24, 0x01	; 1
    520c:	1f 92       	push	r1
    520e:	8f 93       	push	r24
    5210:	23 ee       	ldi	r18, 0xE3	; 227
    5212:	3a e0       	ldi	r19, 0x0A	; 10
    5214:	3f 93       	push	r19
    5216:	2f 93       	push	r18
    5218:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    521c:	8d b7       	in	r24, 0x3d	; 61
    521e:	9e b7       	in	r25, 0x3e	; 62
    5220:	80 96       	adiw	r24, 0x20	; 32
    5222:	0f b6       	in	r0, 0x3f	; 63
    5224:	f8 94       	cli
    5226:	9e bf       	out	0x3e, r25	; 62
    5228:	0f be       	out	0x3f, r0	; 63
    522a:	8d bf       	out	0x3d, r24	; 61
    522c:	81 ee       	ldi	r24, 0xE1	; 225
    522e:	9a e0       	ldi	r25, 0x0A	; 10
    5230:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    5234:	8a ec       	ldi	r24, 0xCA	; 202
    5236:	9a e0       	ldi	r25, 0x0A	; 10
    5238:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    523c:	c1 fb       	bst	r28, 1
    523e:	88 27       	eor	r24, r24
    5240:	80 f9       	bld	r24, 0
    5242:	1f 92       	push	r1
    5244:	8f 93       	push	r24
    5246:	27 ec       	ldi	r18, 0xC7	; 199
    5248:	3a e0       	ldi	r19, 0x0A	; 10
    524a:	3f 93       	push	r19
    524c:	2f 93       	push	r18
    524e:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    5252:	85 ec       	ldi	r24, 0xC5	; 197
    5254:	9a e0       	ldi	r25, 0x0A	; 10
    5256:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    525a:	83 eb       	ldi	r24, 0xB3	; 179
    525c:	9a e0       	ldi	r25, 0x0A	; 10
    525e:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    5262:	c2 fb       	bst	r28, 2
    5264:	88 27       	eor	r24, r24
    5266:	80 f9       	bld	r24, 0
    5268:	1f 92       	push	r1
    526a:	8f 93       	push	r24
    526c:	20 eb       	ldi	r18, 0xB0	; 176
    526e:	3a e0       	ldi	r19, 0x0A	; 10
    5270:	3f 93       	push	r19
    5272:	2f 93       	push	r18
    5274:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    5278:	8e ea       	ldi	r24, 0xAE	; 174
    527a:	9a e0       	ldi	r25, 0x0A	; 10
    527c:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    5280:	8c e9       	ldi	r24, 0x9C	; 156
    5282:	9a e0       	ldi	r25, 0x0A	; 10
    5284:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    5288:	c3 fb       	bst	r28, 3
    528a:	88 27       	eor	r24, r24
    528c:	80 f9       	bld	r24, 0
    528e:	1f 92       	push	r1
    5290:	8f 93       	push	r24
    5292:	29 e9       	ldi	r18, 0x99	; 153
    5294:	3a e0       	ldi	r19, 0x0A	; 10
    5296:	3f 93       	push	r19
    5298:	2f 93       	push	r18
    529a:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    529e:	87 e9       	ldi	r24, 0x97	; 151
    52a0:	9a e0       	ldi	r25, 0x0A	; 10
    52a2:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    52a6:	8d e8       	ldi	r24, 0x8D	; 141
    52a8:	9a e0       	ldi	r25, 0x0A	; 10
    52aa:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    52ae:	c4 fb       	bst	r28, 4
    52b0:	88 27       	eor	r24, r24
    52b2:	80 f9       	bld	r24, 0
    52b4:	1f 92       	push	r1
    52b6:	8f 93       	push	r24
    52b8:	2a e8       	ldi	r18, 0x8A	; 138
    52ba:	3a e0       	ldi	r19, 0x0A	; 10
    52bc:	3f 93       	push	r19
    52be:	2f 93       	push	r18
    52c0:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    52c4:	88 e8       	ldi	r24, 0x88	; 136
    52c6:	9a e0       	ldi	r25, 0x0A	; 10
    52c8:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    52cc:	86 e7       	ldi	r24, 0x76	; 118
    52ce:	9a e0       	ldi	r25, 0x0A	; 10
    52d0:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    52d4:	c5 fb       	bst	r28, 5
    52d6:	88 27       	eor	r24, r24
    52d8:	80 f9       	bld	r24, 0
    52da:	1f 92       	push	r1
    52dc:	8f 93       	push	r24
    52de:	23 e7       	ldi	r18, 0x73	; 115
    52e0:	3a e0       	ldi	r19, 0x0A	; 10
    52e2:	3f 93       	push	r19
    52e4:	2f 93       	push	r18
    52e6:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    52ea:	81 e7       	ldi	r24, 0x71	; 113
    52ec:	9a e0       	ldi	r25, 0x0A	; 10
    52ee:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    52f2:	85 e5       	ldi	r24, 0x55	; 85
    52f4:	9a e0       	ldi	r25, 0x0A	; 10
    52f6:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    52fa:	c6 fb       	bst	r28, 6
    52fc:	88 27       	eor	r24, r24
    52fe:	80 f9       	bld	r24, 0
    5300:	1f 92       	push	r1
    5302:	8f 93       	push	r24
    5304:	22 e5       	ldi	r18, 0x52	; 82
    5306:	3a e0       	ldi	r19, 0x0A	; 10
    5308:	3f 93       	push	r19
    530a:	2f 93       	push	r18
    530c:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    5310:	80 e5       	ldi	r24, 0x50	; 80
    5312:	9a e0       	ldi	r25, 0x0A	; 10
    5314:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    5318:	88 e4       	ldi	r24, 0x48	; 72
    531a:	9a e0       	ldi	r25, 0x0A	; 10
    531c:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    5320:	c7 fb       	bst	r28, 7
    5322:	cc 27       	eor	r28, r28
    5324:	c0 f9       	bld	r28, 0
    5326:	1f 92       	push	r1
    5328:	cf 93       	push	r28
    532a:	85 e4       	ldi	r24, 0x45	; 69
    532c:	9a e0       	ldi	r25, 0x0A	; 10
    532e:	9f 93       	push	r25
    5330:	8f 93       	push	r24
    5332:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    5336:	83 e4       	ldi	r24, 0x43	; 67
    5338:	9a e0       	ldi	r25, 0x0A	; 10
    533a:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    533e:	8d b7       	in	r24, 0x3d	; 61
    5340:	9e b7       	in	r25, 0x3e	; 62
    5342:	4c 96       	adiw	r24, 0x1c	; 28
    5344:	0f b6       	in	r0, 0x3f	; 63
    5346:	f8 94       	cli
    5348:	9e bf       	out	0x3e, r25	; 62
    534a:	0f be       	out	0x3f, r0	; 63
    534c:	8d bf       	out	0x3d, r24	; 61
            break;
        default:
            print("?");
            return false;
    }
    return true;
    534e:	c1 e0       	ldi	r28, 0x01	; 1
    5350:	db c0       	rjmp	.+438    	; 0x5508 <command_common+0x4fe>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\t- Magic -\n"
    5352:	8c e8       	ldi	r24, 0x8C	; 140
    5354:	99 e0       	ldi	r25, 0x09	; 9
    5356:	58 c0       	rjmp	.+176    	; 0x5408 <command_common+0x3fe>
            print("\n\nbootloader... ");
            _delay_ms(1000);
            bootloader_jump(); // not return
            break;
        case KC_D:
            if (debug_enable) {
    5358:	80 91 d7 01 	lds	r24, 0x01D7
    535c:	c8 2f       	mov	r28, r24
    535e:	c1 70       	andi	r28, 0x01	; 1
    5360:	80 ff       	sbrs	r24, 0
    5362:	09 c0       	rjmp	.+18     	; 0x5376 <command_common+0x36c>
                print("\ndebug: off\n");
    5364:	86 e8       	ldi	r24, 0x86	; 134
    5366:	9d e0       	ldi	r25, 0x0D	; 13
    5368:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
                debug_matrix   = false;
    536c:	80 91 d7 01 	lds	r24, 0x01D7
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    5370:	81 7f       	andi	r24, 0xF1	; 241
    5372:	8e 7f       	andi	r24, 0xFE	; 254
    5374:	44 c0       	rjmp	.+136    	; 0x53fe <command_common+0x3f4>
            } else {
                print("\ndebug: on\n");
    5376:	8a e7       	ldi	r24, 0x7A	; 122
    5378:	9d e0       	ldi	r25, 0x0D	; 13
    537a:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
                debug_enable   = true;
    537e:	80 91 d7 01 	lds	r24, 0x01D7
    5382:	81 60       	ori	r24, 0x01	; 1
    5384:	80 93 d7 01 	sts	0x01D7, r24
    5388:	e2 cf       	rjmp	.-60     	; 0x534e <command_common+0x344>
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    538a:	80 91 d7 01 	lds	r24, 0x01D7
    538e:	81 fb       	bst	r24, 1
    5390:	cc 27       	eor	r28, r28
    5392:	c0 f9       	bld	r28, 0
    5394:	91 e0       	ldi	r25, 0x01	; 1
    5396:	c9 27       	eor	r28, r25
    5398:	c0 fb       	bst	r28, 0
    539a:	81 f9       	bld	r24, 1
    539c:	80 93 d7 01 	sts	0x01D7, r24
            if (debug_matrix) {
    53a0:	cc 23       	and	r28, r28
    53a2:	19 f0       	breq	.+6      	; 0x53aa <command_common+0x3a0>
                print("\nmatrix: on\n");
    53a4:	8d e6       	ldi	r24, 0x6D	; 109
    53a6:	9d e0       	ldi	r25, 0x0D	; 13
    53a8:	25 c0       	rjmp	.+74     	; 0x53f4 <command_common+0x3ea>
                debug_enable = true;
            } else {
                print("\nmatrix: off\n");
    53aa:	8f e5       	ldi	r24, 0x5F	; 95
    53ac:	9d e0       	ldi	r25, 0x0D	; 13
    53ae:	2c c0       	rjmp	.+88     	; 0x5408 <command_common+0x3fe>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    53b0:	80 91 d7 01 	lds	r24, 0x01D7
    53b4:	82 fb       	bst	r24, 2
    53b6:	cc 27       	eor	r28, r28
    53b8:	c0 f9       	bld	r28, 0
    53ba:	91 e0       	ldi	r25, 0x01	; 1
    53bc:	c9 27       	eor	r28, r25
    53be:	c0 fb       	bst	r28, 0
    53c0:	82 f9       	bld	r24, 2
    53c2:	80 93 d7 01 	sts	0x01D7, r24
            if (debug_keyboard) {
    53c6:	cc 23       	and	r28, r28
    53c8:	19 f0       	breq	.+6      	; 0x53d0 <command_common+0x3c6>
                print("\nkeyboard: on\n");
    53ca:	80 e5       	ldi	r24, 0x50	; 80
    53cc:	9d e0       	ldi	r25, 0x0D	; 13
    53ce:	12 c0       	rjmp	.+36     	; 0x53f4 <command_common+0x3ea>
                debug_enable = true;
            } else {
                print("\nkeyboard: off\n");
    53d0:	80 e4       	ldi	r24, 0x40	; 64
    53d2:	9d e0       	ldi	r25, 0x0D	; 13
    53d4:	19 c0       	rjmp	.+50     	; 0x5408 <command_common+0x3fe>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    53d6:	80 91 d7 01 	lds	r24, 0x01D7
    53da:	83 fb       	bst	r24, 3
    53dc:	cc 27       	eor	r28, r28
    53de:	c0 f9       	bld	r28, 0
    53e0:	91 e0       	ldi	r25, 0x01	; 1
    53e2:	c9 27       	eor	r28, r25
    53e4:	c0 fb       	bst	r28, 0
    53e6:	83 f9       	bld	r24, 3
    53e8:	80 93 d7 01 	sts	0x01D7, r24
            if (debug_mouse) {
    53ec:	cc 23       	and	r28, r28
    53ee:	51 f0       	breq	.+20     	; 0x5404 <command_common+0x3fa>
                print("\nmouse: on\n");
    53f0:	84 e3       	ldi	r24, 0x34	; 52
    53f2:	9d e0       	ldi	r25, 0x0D	; 13
    53f4:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
                debug_enable = true;
    53f8:	80 91 d7 01 	lds	r24, 0x01D7
    53fc:	81 60       	ori	r24, 0x01	; 1
    53fe:	80 93 d7 01 	sts	0x01D7, r24
    5402:	82 c0       	rjmp	.+260    	; 0x5508 <command_common+0x4fe>
            } else {
                print("\nmouse: off\n");
    5404:	87 e2       	ldi	r24, 0x27	; 39
    5406:	9d e0       	ldi	r25, 0x0D	; 13
    5408:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    540c:	a0 cf       	rjmp	.-192    	; 0x534e <command_common+0x344>
            }
            break;
        case KC_V: // print version & information
            print("\n\t- Version -\n");
    540e:	88 e1       	ldi	r24, 0x18	; 24
    5410:	9d e0       	ldi	r25, 0x0D	; 13
    5412:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    5416:	8c ee       	ldi	r24, 0xEC	; 236
    5418:	9c e0       	ldi	r25, 0x0C	; 12
    541a:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    541e:	8f ea       	ldi	r24, 0xAF	; 175
    5420:	9c e0       	ldi	r25, 0x0C	; 12
    5422:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    5426:	88 e8       	ldi	r24, 0x88	; 136
    5428:	9c e0       	ldi	r25, 0x0C	; 12
    542a:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
            /* build options */
            print("OPTIONS:"
    542e:	84 e4       	ldi	r24, 0x44	; 68
    5430:	9c e0       	ldi	r25, 0x0C	; 12
    5432:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    5436:	86 e1       	ldi	r24, 0x16	; 22
    5438:	9c e0       	ldi	r25, 0x0C	; 12
    543a:	e6 cf       	rjmp	.-52     	; 0x5408 <command_common+0x3fe>
                  " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
                  " AVR_ARCH: avr" STR(__AVR_ARCH__) "\n");
            break;
        case KC_S:
            print("\n\t- Status -\n");
    543c:	88 e0       	ldi	r24, 0x08	; 8
    543e:	9c e0       	ldi	r25, 0x0C	; 12
    5440:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
            print_val_hex8(host_keyboard_leds());
    5444:	0e 94 db 14 	call	0x29b6	; 0x29b6 <host_keyboard_leds>
    5448:	1f 92       	push	r1
    544a:	8f 93       	push	r24
    544c:	8e ee       	ldi	r24, 0xEE	; 238
    544e:	9b e0       	ldi	r25, 0x0B	; 11
    5450:	9f 93       	push	r25
    5452:	8f 93       	push	r24
    5454:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
            print_val_hex8(keyboard_protocol);
    5458:	80 91 0c 01 	lds	r24, 0x010C
    545c:	1f 92       	push	r1
    545e:	8f 93       	push	r24
    5460:	87 ed       	ldi	r24, 0xD7	; 215
    5462:	9b e0       	ldi	r25, 0x0B	; 11
    5464:	9f 93       	push	r25
    5466:	8f 93       	push	r24
    5468:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
            print_val_hex8(keyboard_idle);
    546c:	80 91 6e 01 	lds	r24, 0x016E
    5470:	1f 92       	push	r1
    5472:	8f 93       	push	r24
    5474:	84 ec       	ldi	r24, 0xC4	; 196
    5476:	9b e0       	ldi	r25, 0x0B	; 11
    5478:	9f 93       	push	r25
    547a:	8f 93       	push	r24
    547c:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
#ifdef NKRO_ENABLE
            print_val_hex8(keyboard_nkro);
    5480:	80 91 0d 01 	lds	r24, 0x010D
    5484:	1f 92       	push	r1
    5486:	8f 93       	push	r24
    5488:	81 eb       	ldi	r24, 0xB1	; 177
    548a:	9b e0       	ldi	r25, 0x0B	; 11
    548c:	9f 93       	push	r25
    548e:	8f 93       	push	r24
    5490:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
#endif
            print_val_hex32(timer_count);
    5494:	80 91 d9 01 	lds	r24, 0x01D9
    5498:	90 91 da 01 	lds	r25, 0x01DA
    549c:	a0 91 db 01 	lds	r26, 0x01DB
    54a0:	b0 91 dc 01 	lds	r27, 0x01DC
    54a4:	bf 93       	push	r27
    54a6:	af 93       	push	r26
    54a8:	9f 93       	push	r25
    54aa:	8f 93       	push	r24
    54ac:	8d e9       	ldi	r24, 0x9D	; 157
    54ae:	9b e0       	ldi	r25, 0x0B	; 11
    54b0:	9f 93       	push	r25
    54b2:	8f 93       	push	r24
    54b4:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    54b8:	8d b7       	in	r24, 0x3d	; 61
    54ba:	9e b7       	in	r25, 0x3e	; 62
    54bc:	46 96       	adiw	r24, 0x16	; 22
    54be:	0f b6       	in	r0, 0x3f	; 63
    54c0:	f8 94       	cli
    54c2:	9e bf       	out	0x3e, r25	; 62
    54c4:	0f be       	out	0x3f, r0	; 63
    54c6:	8d bf       	out	0x3d, r24	; 61
    54c8:	42 cf       	rjmp	.-380    	; 0x534e <command_common+0x344>
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
    54ca:	0e 94 a0 1a 	call	0x3540	; 0x3540 <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    54ce:	c0 91 0d 01 	lds	r28, 0x010D
    54d2:	81 e0       	ldi	r24, 0x01	; 1
    54d4:	c8 27       	eor	r28, r24
    54d6:	c0 93 0d 01 	sts	0x010D, r28
            if (keyboard_nkro)
    54da:	cc 23       	and	r28, r28
    54dc:	29 f0       	breq	.+10     	; 0x54e8 <command_common+0x4de>
                print("NKRO: on\n");
    54de:	83 e9       	ldi	r24, 0x93	; 147
    54e0:	9b e0       	ldi	r25, 0x0B	; 11
    54e2:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    54e6:	10 c0       	rjmp	.+32     	; 0x5508 <command_common+0x4fe>
            else
                print("NKRO: off\n");
    54e8:	88 e8       	ldi	r24, 0x88	; 136
    54ea:	9b e0       	ldi	r25, 0x0B	; 11
    54ec:	8d cf       	rjmp	.-230    	; 0x5408 <command_common+0x3fe>
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
    54ee:	80 e0       	ldi	r24, 0x00	; 0
    54f0:	03 c0       	rjmp	.+6      	; 0x54f8 <command_common+0x4ee>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    54f2:	8d 51       	subi	r24, 0x1D	; 29
    54f4:	01 c0       	rjmp	.+2      	; 0x54f8 <command_common+0x4ee>
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    54f6:	89 53       	subi	r24, 0x39	; 57
    54f8:	0e 94 e7 27 	call	0x4fce	; 0x4fce <switch_default_layer>
    54fc:	28 cf       	rjmp	.-432    	; 0x534e <command_common+0x344>
            break;
        default:
            print("?");
    54fe:	86 e8       	ldi	r24, 0x86	; 134
    5500:	9b e0       	ldi	r25, 0x0B	; 11
    5502:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
            return false;
    5506:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return true;
}
    5508:	8c 2f       	mov	r24, r28
    550a:	cf 91       	pop	r28
    550c:	08 95       	ret

0000550e <command_extra>:
/* This allows to define extra commands. return false when not processed. */
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    return false;
}
    550e:	80 e0       	ldi	r24, 0x00	; 0
    5510:	08 95       	ret

00005512 <command_console_extra>:

bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    return false;
}
    5512:	80 e0       	ldi	r24, 0x00	; 0
    5514:	08 95       	ret

00005516 <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    5516:	cf 93       	push	r28
    5518:	c8 2f       	mov	r28, r24
    switch (command_state) {
    551a:	80 91 e7 01 	lds	r24, 0x01E7
    551e:	81 30       	cpi	r24, 0x01	; 1
    5520:	81 f0       	breq	.+32     	; 0x5542 <command_proc+0x2c>
    5522:	20 f0       	brcs	.+8      	; 0x552c <command_proc+0x16>
    5524:	82 30       	cpi	r24, 0x02	; 2
    5526:	09 f4       	brne	.+2      	; 0x552a <command_proc+0x14>
    5528:	4c c0       	rjmp	.+152    	; 0x55c2 <command_proc+0xac>
    552a:	42 c1       	rjmp	.+644    	; 0x57b0 <command_proc+0x29a>
        case ONESHOT:
            if (!IS_COMMAND())
    552c:	a0 91 0e 01 	lds	r26, 0x010E
    5530:	b0 91 0f 01 	lds	r27, 0x010F
    5534:	8c 91       	ld	r24, X
    5536:	81 31       	cpi	r24, 0x11	; 17
    5538:	69 f0       	breq	.+26     	; 0x5554 <command_proc+0x3e>
    553a:	82 32       	cpi	r24, 0x22	; 34
    553c:	09 f0       	breq	.+2      	; 0x5540 <command_proc+0x2a>
    553e:	3a c1       	rjmp	.+628    	; 0x57b4 <command_proc+0x29e>
    5540:	09 c0       	rjmp	.+18     	; 0x5554 <command_proc+0x3e>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    5542:	a0 91 0e 01 	lds	r26, 0x010E
    5546:	b0 91 0f 01 	lds	r27, 0x010F
    554a:	8c 91       	ld	r24, X
    554c:	81 31       	cpi	r24, 0x11	; 17
    554e:	11 f0       	breq	.+4      	; 0x5554 <command_proc+0x3e>
    5550:	82 32       	cpi	r24, 0x22	; 34
    5552:	49 f4       	brne	.+18     	; 0x5566 <command_proc+0x50>
                return (command_extra(code) || command_common(code));
    5554:	8c 2f       	mov	r24, r28
    5556:	0e 94 87 2a 	call	0x550e	; 0x550e <command_extra>
    555a:	81 11       	cpse	r24, r1
    555c:	2f c0       	rjmp	.+94     	; 0x55bc <command_proc+0xa6>
    555e:	8c 2f       	mov	r24, r28
    5560:	0e 94 05 28 	call	0x500a	; 0x500a <command_common>
    5564:	2c c0       	rjmp	.+88     	; 0x55be <command_proc+0xa8>
            else
                return (command_console_extra(code) || command_console(code));
    5566:	8c 2f       	mov	r24, r28
    5568:	0e 94 89 2a 	call	0x5512	; 0x5512 <command_console_extra>
    556c:	81 11       	cpse	r24, r1
    556e:	26 c0       	rjmp	.+76     	; 0x55bc <command_proc+0xa6>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    5570:	c4 31       	cpi	r28, 0x14	; 20
    5572:	e1 f0       	breq	.+56     	; 0x55ac <command_proc+0x96>
    5574:	70 f4       	brcc	.+28     	; 0x5592 <command_proc+0x7c>
    5576:	cb 30       	cpi	r28, 0x0B	; 11
    5578:	81 f0       	breq	.+32     	; 0x559a <command_proc+0x84>
    557a:	c0 31       	cpi	r28, 0x10	; 16
    557c:	d1 f4       	brne	.+52     	; 0x55b2 <command_proc+0x9c>
        case KC_ESC:
            command_state = ONESHOT;
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    557e:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <mousekey_console_help>
            print("M> ");
    5582:	88 e5       	ldi	r24, 0x58	; 88
    5584:	99 e0       	ldi	r25, 0x09	; 9
    5586:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
            command_state = MOUSEKEY;
    558a:	82 e0       	ldi	r24, 0x02	; 2
    558c:	80 93 e7 01 	sts	0x01E7, r24
    5590:	15 c0       	rjmp	.+42     	; 0x55bc <command_proc+0xa6>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    5592:	c9 32       	cpi	r28, 0x29	; 41
    5594:	59 f0       	breq	.+22     	; 0x55ac <command_proc+0x96>
    5596:	c8 33       	cpi	r28, 0x38	; 56
    5598:	61 f4       	brne	.+24     	; 0x55b2 <command_proc+0x9c>
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    559a:	85 e6       	ldi	r24, 0x65	; 101
    559c:	99 e0       	ldi	r25, 0x09	; 9
    559e:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    55a2:	8c e5       	ldi	r24, 0x5C	; 92
    55a4:	99 e0       	ldi	r25, 0x09	; 9
    55a6:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    55aa:	08 c0       	rjmp	.+16     	; 0x55bc <command_proc+0xa6>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    55ac:	10 92 e7 01 	sts	0x01E7, r1
    55b0:	03 c1       	rjmp	.+518    	; 0x57b8 <command_proc+0x2a2>
            print("M> ");
            command_state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    55b2:	86 e5       	ldi	r24, 0x56	; 86
    55b4:	99 e0       	ldi	r25, 0x09	; 9
    55b6:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    55ba:	fe c0       	rjmp	.+508    	; 0x57b8 <command_proc+0x2a2>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    55bc:	81 e0       	ldi	r24, 0x01	; 1
    55be:	81 70       	andi	r24, 0x01	; 1
    55c0:	fd c0       	rjmp	.+506    	; 0x57bc <command_proc+0x2a6>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    55c2:	c4 32       	cpi	r28, 0x24	; 36
    55c4:	20 f5       	brcc	.+72     	; 0x560e <command_proc+0xf8>
    55c6:	ce 31       	cpi	r28, 0x1E	; 30
    55c8:	08 f0       	brcs	.+2      	; 0x55cc <command_proc+0xb6>
    55ca:	c0 c0       	rjmp	.+384    	; 0x574c <command_proc+0x236>
    55cc:	cb 30       	cpi	r28, 0x0B	; 11
    55ce:	99 f1       	breq	.+102    	; 0x5636 <command_proc+0x120>
    55d0:	c8 f4       	brcc	.+50     	; 0x5604 <command_proc+0xee>
    55d2:	c7 30       	cpi	r28, 0x07	; 7
    55d4:	09 f0       	breq	.+2      	; 0x55d8 <command_proc+0xc2>
    55d6:	d2 c0       	rjmp	.+420    	; 0x577c <command_proc+0x266>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    55d8:	8a e0       	ldi	r24, 0x0A	; 10
    55da:	80 93 15 01 	sts	0x0115, r24
            mk_interval = MOUSEKEY_INTERVAL;
    55de:	94 e1       	ldi	r25, 0x14	; 20
    55e0:	90 93 14 01 	sts	0x0114, r25
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    55e4:	93 e0       	ldi	r25, 0x03	; 3
    55e6:	90 93 13 01 	sts	0x0113, r25
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    55ea:	80 93 12 01 	sts	0x0112, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    55ee:	88 e0       	ldi	r24, 0x08	; 8
    55f0:	80 93 11 01 	sts	0x0111, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    55f4:	88 e2       	ldi	r24, 0x28	; 40
    55f6:	80 93 10 01 	sts	0x0110, r24
            print("set default\n");
    55fa:	8c ef       	ldi	r24, 0xFC	; 252
    55fc:	97 e0       	ldi	r25, 0x07	; 7
    55fe:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    5602:	bf c0       	rjmp	.+382    	; 0x5782 <command_proc+0x26c>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    5604:	c3 31       	cpi	r28, 0x13	; 19
    5606:	49 f1       	breq	.+82     	; 0x565a <command_proc+0x144>
    5608:	c4 31       	cpi	r28, 0x14	; 20
    560a:	c1 f0       	breq	.+48     	; 0x563c <command_proc+0x126>
    560c:	b7 c0       	rjmp	.+366    	; 0x577c <command_proc+0x266>
    560e:	cb 34       	cpi	r28, 0x4B	; 75
    5610:	09 f4       	brne	.+2      	; 0x5614 <command_proc+0xfe>
    5612:	a9 c0       	rjmp	.+338    	; 0x5766 <command_proc+0x250>
    5614:	28 f4       	brcc	.+10     	; 0x5620 <command_proc+0x10a>
    5616:	c9 32       	cpi	r28, 0x29	; 41
    5618:	89 f0       	breq	.+34     	; 0x563c <command_proc+0x126>
    561a:	c8 33       	cpi	r28, 0x38	; 56
    561c:	61 f0       	breq	.+24     	; 0x5636 <command_proc+0x120>
    561e:	ae c0       	rjmp	.+348    	; 0x577c <command_proc+0x266>
    5620:	c1 35       	cpi	r28, 0x51	; 81
    5622:	09 f4       	brne	.+2      	; 0x5626 <command_proc+0x110>
    5624:	9e c0       	rjmp	.+316    	; 0x5762 <command_proc+0x24c>
    5626:	c2 35       	cpi	r28, 0x52	; 82
    5628:	09 f4       	brne	.+2      	; 0x562c <command_proc+0x116>
    562a:	99 c0       	rjmp	.+306    	; 0x575e <command_proc+0x248>
    562c:	ce 34       	cpi	r28, 0x4E	; 78
    562e:	09 f0       	breq	.+2      	; 0x5632 <command_proc+0x11c>
    5630:	a5 c0       	rjmp	.+330    	; 0x577c <command_proc+0x266>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    5632:	6a e0       	ldi	r22, 0x0A	; 10
    5634:	9e c0       	rjmp	.+316    	; 0x5772 <command_proc+0x25c>
static bool mousekey_console(uint8_t code)
{
    switch (code) {
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    5636:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <mousekey_console_help>
    563a:	a3 c0       	rjmp	.+326    	; 0x5782 <command_proc+0x26c>
            break;
        case KC_Q:
        case KC_ESC:
            if (mousekey_param) {
    563c:	80 91 e6 01 	lds	r24, 0x01E6
    5640:	88 23       	and	r24, r24
    5642:	19 f0       	breq	.+6      	; 0x564a <command_proc+0x134>
                mousekey_param = 0;
    5644:	10 92 e6 01 	sts	0x01E6, r1
    5648:	9c c0       	rjmp	.+312    	; 0x5782 <command_proc+0x26c>
            } else {
                print("C> ");
    564a:	89 e0       	ldi	r24, 0x09	; 9
    564c:	98 e0       	ldi	r25, 0x08	; 8
    564e:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
                command_state = CONSOLE;
    5652:	81 e0       	ldi	r24, 0x01	; 1
    5654:	80 93 e7 01 	sts	0x01E7, r24
    5658:	b1 c0       	rjmp	.+354    	; 0x57bc <command_proc+0x2a6>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\t- Values -\n");
    565a:	83 ee       	ldi	r24, 0xE3	; 227
    565c:	97 e0       	ldi	r25, 0x07	; 7
    565e:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    5662:	81 ed       	ldi	r24, 0xD1	; 209
    5664:	97 e0       	ldi	r25, 0x07	; 7
    5666:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    566a:	80 91 15 01 	lds	r24, 0x0115
    566e:	1f 92       	push	r1
    5670:	8f 93       	push	r24
    5672:	8e ec       	ldi	r24, 0xCE	; 206
    5674:	97 e0       	ldi	r25, 0x07	; 7
    5676:	9f 93       	push	r25
    5678:	8f 93       	push	r24
    567a:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    567e:	8c ec       	ldi	r24, 0xCC	; 204
    5680:	97 e0       	ldi	r25, 0x07	; 7
    5682:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    5686:	8a eb       	ldi	r24, 0xBA	; 186
    5688:	97 e0       	ldi	r25, 0x07	; 7
    568a:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    568e:	80 91 14 01 	lds	r24, 0x0114
    5692:	1f 92       	push	r1
    5694:	8f 93       	push	r24
    5696:	87 eb       	ldi	r24, 0xB7	; 183
    5698:	97 e0       	ldi	r25, 0x07	; 7
    569a:	9f 93       	push	r25
    569c:	8f 93       	push	r24
    569e:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    56a2:	85 eb       	ldi	r24, 0xB5	; 181
    56a4:	97 e0       	ldi	r25, 0x07	; 7
    56a6:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    56aa:	86 ea       	ldi	r24, 0xA6	; 166
    56ac:	97 e0       	ldi	r25, 0x07	; 7
    56ae:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    56b2:	80 91 13 01 	lds	r24, 0x0113
    56b6:	1f 92       	push	r1
    56b8:	8f 93       	push	r24
    56ba:	83 ea       	ldi	r24, 0xA3	; 163
    56bc:	97 e0       	ldi	r25, 0x07	; 7
    56be:	9f 93       	push	r25
    56c0:	8f 93       	push	r24
    56c2:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    56c6:	81 ea       	ldi	r24, 0xA1	; 161
    56c8:	97 e0       	ldi	r25, 0x07	; 7
    56ca:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    56ce:	80 e9       	ldi	r24, 0x90	; 144
    56d0:	97 e0       	ldi	r25, 0x07	; 7
    56d2:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    56d6:	80 91 12 01 	lds	r24, 0x0112
    56da:	1f 92       	push	r1
    56dc:	8f 93       	push	r24
    56de:	8d e8       	ldi	r24, 0x8D	; 141
    56e0:	97 e0       	ldi	r25, 0x07	; 7
    56e2:	9f 93       	push	r25
    56e4:	8f 93       	push	r24
    56e6:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    56ea:	8b e8       	ldi	r24, 0x8B	; 139
    56ec:	97 e0       	ldi	r25, 0x07	; 7
    56ee:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    56f2:	86 e7       	ldi	r24, 0x76	; 118
    56f4:	97 e0       	ldi	r25, 0x07	; 7
    56f6:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    56fa:	80 91 11 01 	lds	r24, 0x0111
    56fe:	1f 92       	push	r1
    5700:	8f 93       	push	r24
    5702:	83 e7       	ldi	r24, 0x73	; 115
    5704:	97 e0       	ldi	r25, 0x07	; 7
    5706:	9f 93       	push	r25
    5708:	8f 93       	push	r24
    570a:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    570e:	81 e7       	ldi	r24, 0x71	; 113
    5710:	97 e0       	ldi	r25, 0x07	; 7
    5712:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    5716:	8a e5       	ldi	r24, 0x5A	; 90
    5718:	97 e0       	ldi	r25, 0x07	; 7
    571a:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    571e:	80 91 10 01 	lds	r24, 0x0110
    5722:	1f 92       	push	r1
    5724:	8f 93       	push	r24
    5726:	87 e5       	ldi	r24, 0x57	; 87
    5728:	97 e0       	ldi	r25, 0x07	; 7
    572a:	9f 93       	push	r25
    572c:	8f 93       	push	r24
    572e:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    5732:	85 e5       	ldi	r24, 0x55	; 85
    5734:	97 e0       	ldi	r25, 0x07	; 7
    5736:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
    573a:	8d b7       	in	r24, 0x3d	; 61
    573c:	9e b7       	in	r25, 0x3e	; 62
    573e:	48 96       	adiw	r24, 0x18	; 24
    5740:	0f b6       	in	r0, 0x3f	; 63
    5742:	f8 94       	cli
    5744:	9e bf       	out	0x3e, r25	; 62
    5746:	0f be       	out	0x3f, r0	; 63
    5748:	8d bf       	out	0x3d, r24	; 61
    574a:	1b c0       	rjmp	.+54     	; 0x5782 <command_proc+0x26c>
    574c:	ce 51       	subi	r28, 0x1E	; 30
    574e:	ec 2f       	mov	r30, r28
    5750:	f0 e0       	ldi	r31, 0x00	; 0
    5752:	e1 5d       	subi	r30, 0xD1	; 209
    5754:	fe 4f       	sbci	r31, 0xFE	; 254
        case KC_2:
        case KC_3:
        case KC_4:
        case KC_5:
        case KC_6:
            mousekey_param = numkey2num(code);
    5756:	80 81       	ld	r24, Z
    5758:	80 93 e6 01 	sts	0x01E6, r24
    575c:	12 c0       	rjmp	.+36     	; 0x5782 <command_proc+0x26c>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    575e:	61 e0       	ldi	r22, 0x01	; 1
    5760:	03 c0       	rjmp	.+6      	; 0x5768 <command_proc+0x252>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    5762:	61 e0       	ldi	r22, 0x01	; 1
    5764:	06 c0       	rjmp	.+12     	; 0x5772 <command_proc+0x25c>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    5766:	6a e0       	ldi	r22, 0x0A	; 10
    5768:	80 91 e6 01 	lds	r24, 0x01E6
    576c:	0e 94 c6 26 	call	0x4d8c	; 0x4d8c <mousekey_param_inc>
    5770:	08 c0       	rjmp	.+16     	; 0x5782 <command_proc+0x26c>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    5772:	80 91 e6 01 	lds	r24, 0x01E6
    5776:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <mousekey_param_dec>
    577a:	03 c0       	rjmp	.+6      	; 0x5782 <command_proc+0x26c>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
            print("set default\n");
            break;
        default:
            print("?");
    577c:	8a ef       	ldi	r24, 0xFA	; 250
    577e:	97 e0       	ldi	r25, 0x07	; 7
    5780:	13 c0       	rjmp	.+38     	; 0x57a8 <command_proc+0x292>
            return false;
    }
    if (mousekey_param)
    5782:	80 91 e6 01 	lds	r24, 0x01E6
    5786:	88 23       	and	r24, r24
    5788:	69 f0       	breq	.+26     	; 0x57a4 <command_proc+0x28e>
        xprintf("M%d> ", mousekey_param);
    578a:	1f 92       	push	r1
    578c:	8f 93       	push	r24
    578e:	84 ef       	ldi	r24, 0xF4	; 244
    5790:	97 e0       	ldi	r25, 0x07	; 7
    5792:	9f 93       	push	r25
    5794:	8f 93       	push	r24
    5796:	0e 94 ed 07 	call	0xfda	; 0xfda <__xprintf>
    579a:	0f 90       	pop	r0
    579c:	0f 90       	pop	r0
    579e:	0f 90       	pop	r0
    57a0:	0f 90       	pop	r0
    57a2:	04 c0       	rjmp	.+8      	; 0x57ac <command_proc+0x296>
    else
        print("M>" );
    57a4:	81 ef       	ldi	r24, 0xF1	; 241
    57a6:	97 e0       	ldi	r25, 0x07	; 7
    57a8:	0e 94 54 07 	call	0xea8	; 0xea8 <xputs>
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    57ac:	81 e0       	ldi	r24, 0x01	; 1
    57ae:	06 c0       	rjmp	.+12     	; 0x57bc <command_proc+0x2a6>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    57b0:	10 92 e7 01 	sts	0x01E7, r1
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    57b4:	80 e0       	ldi	r24, 0x00	; 0
    57b6:	02 c0       	rjmp	.+4      	; 0x57bc <command_proc+0x2a6>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    57b8:	80 e0       	ldi	r24, 0x00	; 0
    57ba:	01 cf       	rjmp	.-510    	; 0x55be <command_proc+0xa8>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    57bc:	cf 91       	pop	r28
    57be:	08 95       	ret

000057c0 <sleep_led_init>:

void sleep_led_init(void)
{
    /* Timer1 setup */
    /* CTC mode */
    TCCR1B |= _BV(WGM12);
    57c0:	e1 e8       	ldi	r30, 0x81	; 129
    57c2:	f0 e0       	ldi	r31, 0x00	; 0
    57c4:	80 81       	ld	r24, Z
    57c6:	88 60       	ori	r24, 0x08	; 8
    57c8:	80 83       	st	Z, r24
    /* Clock selelct: clk/1 */
    TCCR1B |= _BV(CS10);
    57ca:	80 81       	ld	r24, Z
    57cc:	81 60       	ori	r24, 0x01	; 1
    57ce:	80 83       	st	Z, r24
    /* Set TOP value */
    uint8_t sreg = SREG;
    57d0:	8f b7       	in	r24, 0x3f	; 63
    cli();
    57d2:	f8 94       	cli
    OCR1AH = (SLEEP_LED_TIMER_TOP>>8)&0xff;
    57d4:	93 e0       	ldi	r25, 0x03	; 3
    57d6:	90 93 89 00 	sts	0x0089, r25
    OCR1AL = SLEEP_LED_TIMER_TOP&0xff;
    57da:	90 ed       	ldi	r25, 0xD0	; 208
    57dc:	90 93 88 00 	sts	0x0088, r25
    SREG = sreg;
    57e0:	8f bf       	out	0x3f, r24	; 63
    57e2:	08 95       	ret

000057e4 <sleep_led_enable>:
}

void sleep_led_enable(void)
{
    /* Enable Compare Match Interrupt */
    TIMSK1 |= _BV(OCIE1A);
    57e4:	ef e6       	ldi	r30, 0x6F	; 111
    57e6:	f0 e0       	ldi	r31, 0x00	; 0
    57e8:	80 81       	ld	r24, Z
    57ea:	82 60       	ori	r24, 0x02	; 2
    57ec:	80 83       	st	Z, r24
    57ee:	08 95       	ret

000057f0 <sleep_led_disable>:
}

void sleep_led_disable(void)
{
    /* Disable Compare Match Interrupt */
    TIMSK1 &= ~_BV(OCIE1A);
    57f0:	ef e6       	ldi	r30, 0x6F	; 111
    57f2:	f0 e0       	ldi	r31, 0x00	; 0
    57f4:	80 81       	ld	r24, Z
    57f6:	8d 7f       	andi	r24, 0xFD	; 253
    57f8:	80 83       	st	Z, r24
    57fa:	08 95       	ret

000057fc <sleep_led_toggle>:
}

void sleep_led_toggle(void)
{
    /* Disable Compare Match Interrupt */
    TIMSK1 ^= _BV(OCIE1A);
    57fc:	ef e6       	ldi	r30, 0x6F	; 111
    57fe:	f0 e0       	ldi	r31, 0x00	; 0
    5800:	80 81       	ld	r24, Z
    5802:	92 e0       	ldi	r25, 0x02	; 2
    5804:	89 27       	eor	r24, r25
    5806:	80 83       	st	Z, r24
    5808:	08 95       	ret

0000580a <__vector_17>:
255, 252, 245, 233, 218, 199, 179, 157, 135, 113, 93, 74, 58, 44, 32, 23,
15, 10, 6, 4, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

ISR(TIMER1_COMPA_vect)
{
    580a:	1f 92       	push	r1
    580c:	0f 92       	push	r0
    580e:	0f b6       	in	r0, 0x3f	; 63
    5810:	0f 92       	push	r0
    5812:	11 24       	eor	r1, r1
    5814:	2f 93       	push	r18
    5816:	3f 93       	push	r19
    5818:	4f 93       	push	r20
    581a:	5f 93       	push	r21
    581c:	6f 93       	push	r22
    581e:	7f 93       	push	r23
    5820:	8f 93       	push	r24
    5822:	9f 93       	push	r25
    5824:	af 93       	push	r26
    5826:	bf 93       	push	r27
    5828:	ef 93       	push	r30
    582a:	ff 93       	push	r31
            uint8_t duration:2;
            uint8_t index:6;
        } pwm;
    } timer = { .row = 0 };

    timer.row++;
    582c:	80 91 e8 01 	lds	r24, 0x01E8
    5830:	90 91 e9 01 	lds	r25, 0x01E9
    5834:	01 96       	adiw	r24, 0x01	; 1
    5836:	90 93 e9 01 	sts	0x01E9, r25
    583a:	80 93 e8 01 	sts	0x01E8, r24
    
    // LED on
    if (timer.pwm.count == 0) {
    583e:	81 11       	cpse	r24, r1
    5840:	03 c0       	rjmp	.+6      	; 0x5848 <__vector_17+0x3e>
        led_set(1<<USB_LED_CAPS_LOCK);
    5842:	82 e0       	ldi	r24, 0x02	; 2
    5844:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <led_set>
    }
    // LED off
    if (timer.pwm.count == pgm_read_byte(&breathing_table[timer.pwm.index])) {
    5848:	e0 91 e9 01 	lds	r30, 0x01E9
    584c:	e6 95       	lsr	r30
    584e:	e6 95       	lsr	r30
    5850:	f0 e0       	ldi	r31, 0x00	; 0
    5852:	ed 53       	subi	r30, 0x3D	; 61
    5854:	f2 4f       	sbci	r31, 0xF2	; 242
    5856:	e4 91       	lpm	r30, Z
    5858:	80 91 e8 01 	lds	r24, 0x01E8
    585c:	8e 13       	cpse	r24, r30
    585e:	03 c0       	rjmp	.+6      	; 0x5866 <__vector_17+0x5c>
        led_set(0);
    5860:	80 e0       	ldi	r24, 0x00	; 0
    5862:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <led_set>
    }
}
    5866:	ff 91       	pop	r31
    5868:	ef 91       	pop	r30
    586a:	bf 91       	pop	r27
    586c:	af 91       	pop	r26
    586e:	9f 91       	pop	r25
    5870:	8f 91       	pop	r24
    5872:	7f 91       	pop	r23
    5874:	6f 91       	pop	r22
    5876:	5f 91       	pop	r21
    5878:	4f 91       	pop	r20
    587a:	3f 91       	pop	r19
    587c:	2f 91       	pop	r18
    587e:	0f 90       	pop	r0
    5880:	0f be       	out	0x3f, r0	; 63
    5882:	0f 90       	pop	r0
    5884:	1f 90       	pop	r1
    5886:	18 95       	reti

00005888 <__fixsfsi>:
    5888:	04 d0       	rcall	.+8      	; 0x5892 <__fixunssfsi>
    588a:	68 94       	set
    588c:	b1 11       	cpse	r27, r1
    588e:	8d c0       	rjmp	.+282    	; 0x59aa <__fp_szero>
    5890:	08 95       	ret

00005892 <__fixunssfsi>:
    5892:	70 d0       	rcall	.+224    	; 0x5974 <__fp_splitA>
    5894:	88 f0       	brcs	.+34     	; 0x58b8 <__fixunssfsi+0x26>
    5896:	9f 57       	subi	r25, 0x7F	; 127
    5898:	90 f0       	brcs	.+36     	; 0x58be <__fixunssfsi+0x2c>
    589a:	b9 2f       	mov	r27, r25
    589c:	99 27       	eor	r25, r25
    589e:	b7 51       	subi	r27, 0x17	; 23
    58a0:	a0 f0       	brcs	.+40     	; 0x58ca <__fixunssfsi+0x38>
    58a2:	d1 f0       	breq	.+52     	; 0x58d8 <__fixunssfsi+0x46>
    58a4:	66 0f       	add	r22, r22
    58a6:	77 1f       	adc	r23, r23
    58a8:	88 1f       	adc	r24, r24
    58aa:	99 1f       	adc	r25, r25
    58ac:	1a f0       	brmi	.+6      	; 0x58b4 <__fixunssfsi+0x22>
    58ae:	ba 95       	dec	r27
    58b0:	c9 f7       	brne	.-14     	; 0x58a4 <__fixunssfsi+0x12>
    58b2:	12 c0       	rjmp	.+36     	; 0x58d8 <__fixunssfsi+0x46>
    58b4:	b1 30       	cpi	r27, 0x01	; 1
    58b6:	81 f0       	breq	.+32     	; 0x58d8 <__fixunssfsi+0x46>
    58b8:	77 d0       	rcall	.+238    	; 0x59a8 <__fp_zero>
    58ba:	b1 e0       	ldi	r27, 0x01	; 1
    58bc:	08 95       	ret
    58be:	74 c0       	rjmp	.+232    	; 0x59a8 <__fp_zero>
    58c0:	67 2f       	mov	r22, r23
    58c2:	78 2f       	mov	r23, r24
    58c4:	88 27       	eor	r24, r24
    58c6:	b8 5f       	subi	r27, 0xF8	; 248
    58c8:	39 f0       	breq	.+14     	; 0x58d8 <__fixunssfsi+0x46>
    58ca:	b9 3f       	cpi	r27, 0xF9	; 249
    58cc:	cc f3       	brlt	.-14     	; 0x58c0 <__fixunssfsi+0x2e>
    58ce:	86 95       	lsr	r24
    58d0:	77 95       	ror	r23
    58d2:	67 95       	ror	r22
    58d4:	b3 95       	inc	r27
    58d6:	d9 f7       	brne	.-10     	; 0x58ce <__fixunssfsi+0x3c>
    58d8:	3e f4       	brtc	.+14     	; 0x58e8 <__fixunssfsi+0x56>
    58da:	90 95       	com	r25
    58dc:	80 95       	com	r24
    58de:	70 95       	com	r23
    58e0:	61 95       	neg	r22
    58e2:	7f 4f       	sbci	r23, 0xFF	; 255
    58e4:	8f 4f       	sbci	r24, 0xFF	; 255
    58e6:	9f 4f       	sbci	r25, 0xFF	; 255
    58e8:	08 95       	ret

000058ea <__floatunsisf>:
    58ea:	e8 94       	clt
    58ec:	09 c0       	rjmp	.+18     	; 0x5900 <__floatsisf+0x12>

000058ee <__floatsisf>:
    58ee:	97 fb       	bst	r25, 7
    58f0:	3e f4       	brtc	.+14     	; 0x5900 <__floatsisf+0x12>
    58f2:	90 95       	com	r25
    58f4:	80 95       	com	r24
    58f6:	70 95       	com	r23
    58f8:	61 95       	neg	r22
    58fa:	7f 4f       	sbci	r23, 0xFF	; 255
    58fc:	8f 4f       	sbci	r24, 0xFF	; 255
    58fe:	9f 4f       	sbci	r25, 0xFF	; 255
    5900:	99 23       	and	r25, r25
    5902:	a9 f0       	breq	.+42     	; 0x592e <__floatsisf+0x40>
    5904:	f9 2f       	mov	r31, r25
    5906:	96 e9       	ldi	r25, 0x96	; 150
    5908:	bb 27       	eor	r27, r27
    590a:	93 95       	inc	r25
    590c:	f6 95       	lsr	r31
    590e:	87 95       	ror	r24
    5910:	77 95       	ror	r23
    5912:	67 95       	ror	r22
    5914:	b7 95       	ror	r27
    5916:	f1 11       	cpse	r31, r1
    5918:	f8 cf       	rjmp	.-16     	; 0x590a <__floatsisf+0x1c>
    591a:	fa f4       	brpl	.+62     	; 0x595a <__floatsisf+0x6c>
    591c:	bb 0f       	add	r27, r27
    591e:	11 f4       	brne	.+4      	; 0x5924 <__floatsisf+0x36>
    5920:	60 ff       	sbrs	r22, 0
    5922:	1b c0       	rjmp	.+54     	; 0x595a <__floatsisf+0x6c>
    5924:	6f 5f       	subi	r22, 0xFF	; 255
    5926:	7f 4f       	sbci	r23, 0xFF	; 255
    5928:	8f 4f       	sbci	r24, 0xFF	; 255
    592a:	9f 4f       	sbci	r25, 0xFF	; 255
    592c:	16 c0       	rjmp	.+44     	; 0x595a <__floatsisf+0x6c>
    592e:	88 23       	and	r24, r24
    5930:	11 f0       	breq	.+4      	; 0x5936 <__floatsisf+0x48>
    5932:	96 e9       	ldi	r25, 0x96	; 150
    5934:	11 c0       	rjmp	.+34     	; 0x5958 <__floatsisf+0x6a>
    5936:	77 23       	and	r23, r23
    5938:	21 f0       	breq	.+8      	; 0x5942 <__floatsisf+0x54>
    593a:	9e e8       	ldi	r25, 0x8E	; 142
    593c:	87 2f       	mov	r24, r23
    593e:	76 2f       	mov	r23, r22
    5940:	05 c0       	rjmp	.+10     	; 0x594c <__floatsisf+0x5e>
    5942:	66 23       	and	r22, r22
    5944:	71 f0       	breq	.+28     	; 0x5962 <__floatsisf+0x74>
    5946:	96 e8       	ldi	r25, 0x86	; 134
    5948:	86 2f       	mov	r24, r22
    594a:	70 e0       	ldi	r23, 0x00	; 0
    594c:	60 e0       	ldi	r22, 0x00	; 0
    594e:	2a f0       	brmi	.+10     	; 0x595a <__floatsisf+0x6c>
    5950:	9a 95       	dec	r25
    5952:	66 0f       	add	r22, r22
    5954:	77 1f       	adc	r23, r23
    5956:	88 1f       	adc	r24, r24
    5958:	da f7       	brpl	.-10     	; 0x5950 <__floatsisf+0x62>
    595a:	88 0f       	add	r24, r24
    595c:	96 95       	lsr	r25
    595e:	87 95       	ror	r24
    5960:	97 f9       	bld	r25, 7
    5962:	08 95       	ret

00005964 <__fp_split3>:
    5964:	57 fd       	sbrc	r21, 7
    5966:	90 58       	subi	r25, 0x80	; 128
    5968:	44 0f       	add	r20, r20
    596a:	55 1f       	adc	r21, r21
    596c:	59 f0       	breq	.+22     	; 0x5984 <__fp_splitA+0x10>
    596e:	5f 3f       	cpi	r21, 0xFF	; 255
    5970:	71 f0       	breq	.+28     	; 0x598e <__fp_splitA+0x1a>
    5972:	47 95       	ror	r20

00005974 <__fp_splitA>:
    5974:	88 0f       	add	r24, r24
    5976:	97 fb       	bst	r25, 7
    5978:	99 1f       	adc	r25, r25
    597a:	61 f0       	breq	.+24     	; 0x5994 <__fp_splitA+0x20>
    597c:	9f 3f       	cpi	r25, 0xFF	; 255
    597e:	79 f0       	breq	.+30     	; 0x599e <__fp_splitA+0x2a>
    5980:	87 95       	ror	r24
    5982:	08 95       	ret
    5984:	12 16       	cp	r1, r18
    5986:	13 06       	cpc	r1, r19
    5988:	14 06       	cpc	r1, r20
    598a:	55 1f       	adc	r21, r21
    598c:	f2 cf       	rjmp	.-28     	; 0x5972 <__fp_split3+0xe>
    598e:	46 95       	lsr	r20
    5990:	f1 df       	rcall	.-30     	; 0x5974 <__fp_splitA>
    5992:	08 c0       	rjmp	.+16     	; 0x59a4 <__fp_splitA+0x30>
    5994:	16 16       	cp	r1, r22
    5996:	17 06       	cpc	r1, r23
    5998:	18 06       	cpc	r1, r24
    599a:	99 1f       	adc	r25, r25
    599c:	f1 cf       	rjmp	.-30     	; 0x5980 <__fp_splitA+0xc>
    599e:	86 95       	lsr	r24
    59a0:	71 05       	cpc	r23, r1
    59a2:	61 05       	cpc	r22, r1
    59a4:	08 94       	sec
    59a6:	08 95       	ret

000059a8 <__fp_zero>:
    59a8:	e8 94       	clt

000059aa <__fp_szero>:
    59aa:	bb 27       	eor	r27, r27
    59ac:	66 27       	eor	r22, r22
    59ae:	77 27       	eor	r23, r23
    59b0:	cb 01       	movw	r24, r22
    59b2:	97 f9       	bld	r25, 7
    59b4:	08 95       	ret

000059b6 <__mulsf3>:
    59b6:	0b d0       	rcall	.+22     	; 0x59ce <__mulsf3x>
    59b8:	78 c0       	rjmp	.+240    	; 0x5aaa <__fp_round>
    59ba:	69 d0       	rcall	.+210    	; 0x5a8e <__fp_pscA>
    59bc:	28 f0       	brcs	.+10     	; 0x59c8 <__mulsf3+0x12>
    59be:	6e d0       	rcall	.+220    	; 0x5a9c <__fp_pscB>
    59c0:	18 f0       	brcs	.+6      	; 0x59c8 <__mulsf3+0x12>
    59c2:	95 23       	and	r25, r21
    59c4:	09 f0       	breq	.+2      	; 0x59c8 <__mulsf3+0x12>
    59c6:	5a c0       	rjmp	.+180    	; 0x5a7c <__fp_inf>
    59c8:	5f c0       	rjmp	.+190    	; 0x5a88 <__fp_nan>
    59ca:	11 24       	eor	r1, r1
    59cc:	ee cf       	rjmp	.-36     	; 0x59aa <__fp_szero>

000059ce <__mulsf3x>:
    59ce:	ca df       	rcall	.-108    	; 0x5964 <__fp_split3>
    59d0:	a0 f3       	brcs	.-24     	; 0x59ba <__mulsf3+0x4>

000059d2 <__mulsf3_pse>:
    59d2:	95 9f       	mul	r25, r21
    59d4:	d1 f3       	breq	.-12     	; 0x59ca <__mulsf3+0x14>
    59d6:	95 0f       	add	r25, r21
    59d8:	50 e0       	ldi	r21, 0x00	; 0
    59da:	55 1f       	adc	r21, r21
    59dc:	62 9f       	mul	r22, r18
    59de:	f0 01       	movw	r30, r0
    59e0:	72 9f       	mul	r23, r18
    59e2:	bb 27       	eor	r27, r27
    59e4:	f0 0d       	add	r31, r0
    59e6:	b1 1d       	adc	r27, r1
    59e8:	63 9f       	mul	r22, r19
    59ea:	aa 27       	eor	r26, r26
    59ec:	f0 0d       	add	r31, r0
    59ee:	b1 1d       	adc	r27, r1
    59f0:	aa 1f       	adc	r26, r26
    59f2:	64 9f       	mul	r22, r20
    59f4:	66 27       	eor	r22, r22
    59f6:	b0 0d       	add	r27, r0
    59f8:	a1 1d       	adc	r26, r1
    59fa:	66 1f       	adc	r22, r22
    59fc:	82 9f       	mul	r24, r18
    59fe:	22 27       	eor	r18, r18
    5a00:	b0 0d       	add	r27, r0
    5a02:	a1 1d       	adc	r26, r1
    5a04:	62 1f       	adc	r22, r18
    5a06:	73 9f       	mul	r23, r19
    5a08:	b0 0d       	add	r27, r0
    5a0a:	a1 1d       	adc	r26, r1
    5a0c:	62 1f       	adc	r22, r18
    5a0e:	83 9f       	mul	r24, r19
    5a10:	a0 0d       	add	r26, r0
    5a12:	61 1d       	adc	r22, r1
    5a14:	22 1f       	adc	r18, r18
    5a16:	74 9f       	mul	r23, r20
    5a18:	33 27       	eor	r19, r19
    5a1a:	a0 0d       	add	r26, r0
    5a1c:	61 1d       	adc	r22, r1
    5a1e:	23 1f       	adc	r18, r19
    5a20:	84 9f       	mul	r24, r20
    5a22:	60 0d       	add	r22, r0
    5a24:	21 1d       	adc	r18, r1
    5a26:	82 2f       	mov	r24, r18
    5a28:	76 2f       	mov	r23, r22
    5a2a:	6a 2f       	mov	r22, r26
    5a2c:	11 24       	eor	r1, r1
    5a2e:	9f 57       	subi	r25, 0x7F	; 127
    5a30:	50 40       	sbci	r21, 0x00	; 0
    5a32:	8a f0       	brmi	.+34     	; 0x5a56 <__mulsf3_pse+0x84>
    5a34:	e1 f0       	breq	.+56     	; 0x5a6e <__mulsf3_pse+0x9c>
    5a36:	88 23       	and	r24, r24
    5a38:	4a f0       	brmi	.+18     	; 0x5a4c <__mulsf3_pse+0x7a>
    5a3a:	ee 0f       	add	r30, r30
    5a3c:	ff 1f       	adc	r31, r31
    5a3e:	bb 1f       	adc	r27, r27
    5a40:	66 1f       	adc	r22, r22
    5a42:	77 1f       	adc	r23, r23
    5a44:	88 1f       	adc	r24, r24
    5a46:	91 50       	subi	r25, 0x01	; 1
    5a48:	50 40       	sbci	r21, 0x00	; 0
    5a4a:	a9 f7       	brne	.-22     	; 0x5a36 <__mulsf3_pse+0x64>
    5a4c:	9e 3f       	cpi	r25, 0xFE	; 254
    5a4e:	51 05       	cpc	r21, r1
    5a50:	70 f0       	brcs	.+28     	; 0x5a6e <__mulsf3_pse+0x9c>
    5a52:	14 c0       	rjmp	.+40     	; 0x5a7c <__fp_inf>
    5a54:	aa cf       	rjmp	.-172    	; 0x59aa <__fp_szero>
    5a56:	5f 3f       	cpi	r21, 0xFF	; 255
    5a58:	ec f3       	brlt	.-6      	; 0x5a54 <__mulsf3_pse+0x82>
    5a5a:	98 3e       	cpi	r25, 0xE8	; 232
    5a5c:	dc f3       	brlt	.-10     	; 0x5a54 <__mulsf3_pse+0x82>
    5a5e:	86 95       	lsr	r24
    5a60:	77 95       	ror	r23
    5a62:	67 95       	ror	r22
    5a64:	b7 95       	ror	r27
    5a66:	f7 95       	ror	r31
    5a68:	e7 95       	ror	r30
    5a6a:	9f 5f       	subi	r25, 0xFF	; 255
    5a6c:	c1 f7       	brne	.-16     	; 0x5a5e <__mulsf3_pse+0x8c>
    5a6e:	fe 2b       	or	r31, r30
    5a70:	88 0f       	add	r24, r24
    5a72:	91 1d       	adc	r25, r1
    5a74:	96 95       	lsr	r25
    5a76:	87 95       	ror	r24
    5a78:	97 f9       	bld	r25, 7
    5a7a:	08 95       	ret

00005a7c <__fp_inf>:
    5a7c:	97 f9       	bld	r25, 7
    5a7e:	9f 67       	ori	r25, 0x7F	; 127
    5a80:	80 e8       	ldi	r24, 0x80	; 128
    5a82:	70 e0       	ldi	r23, 0x00	; 0
    5a84:	60 e0       	ldi	r22, 0x00	; 0
    5a86:	08 95       	ret

00005a88 <__fp_nan>:
    5a88:	9f ef       	ldi	r25, 0xFF	; 255
    5a8a:	80 ec       	ldi	r24, 0xC0	; 192
    5a8c:	08 95       	ret

00005a8e <__fp_pscA>:
    5a8e:	00 24       	eor	r0, r0
    5a90:	0a 94       	dec	r0
    5a92:	16 16       	cp	r1, r22
    5a94:	17 06       	cpc	r1, r23
    5a96:	18 06       	cpc	r1, r24
    5a98:	09 06       	cpc	r0, r25
    5a9a:	08 95       	ret

00005a9c <__fp_pscB>:
    5a9c:	00 24       	eor	r0, r0
    5a9e:	0a 94       	dec	r0
    5aa0:	12 16       	cp	r1, r18
    5aa2:	13 06       	cpc	r1, r19
    5aa4:	14 06       	cpc	r1, r20
    5aa6:	05 06       	cpc	r0, r21
    5aa8:	08 95       	ret

00005aaa <__fp_round>:
    5aaa:	09 2e       	mov	r0, r25
    5aac:	03 94       	inc	r0
    5aae:	00 0c       	add	r0, r0
    5ab0:	11 f4       	brne	.+4      	; 0x5ab6 <__fp_round+0xc>
    5ab2:	88 23       	and	r24, r24
    5ab4:	52 f0       	brmi	.+20     	; 0x5aca <__fp_round+0x20>
    5ab6:	bb 0f       	add	r27, r27
    5ab8:	40 f4       	brcc	.+16     	; 0x5aca <__fp_round+0x20>
    5aba:	bf 2b       	or	r27, r31
    5abc:	11 f4       	brne	.+4      	; 0x5ac2 <__fp_round+0x18>
    5abe:	60 ff       	sbrs	r22, 0
    5ac0:	04 c0       	rjmp	.+8      	; 0x5aca <__fp_round+0x20>
    5ac2:	6f 5f       	subi	r22, 0xFF	; 255
    5ac4:	7f 4f       	sbci	r23, 0xFF	; 255
    5ac6:	8f 4f       	sbci	r24, 0xFF	; 255
    5ac8:	9f 4f       	sbci	r25, 0xFF	; 255
    5aca:	08 95       	ret

00005acc <__udivmodqi4>:
    5acc:	99 1b       	sub	r25, r25
    5ace:	79 e0       	ldi	r23, 0x09	; 9
    5ad0:	04 c0       	rjmp	.+8      	; 0x5ada <__udivmodqi4_ep>

00005ad2 <__udivmodqi4_loop>:
    5ad2:	99 1f       	adc	r25, r25
    5ad4:	96 17       	cp	r25, r22
    5ad6:	08 f0       	brcs	.+2      	; 0x5ada <__udivmodqi4_ep>
    5ad8:	96 1b       	sub	r25, r22

00005ada <__udivmodqi4_ep>:
    5ada:	88 1f       	adc	r24, r24
    5adc:	7a 95       	dec	r23
    5ade:	c9 f7       	brne	.-14     	; 0x5ad2 <__udivmodqi4_loop>
    5ae0:	80 95       	com	r24
    5ae2:	08 95       	ret

00005ae4 <__divmodhi4>:
    5ae4:	97 fb       	bst	r25, 7
    5ae6:	07 2e       	mov	r0, r23
    5ae8:	16 f4       	brtc	.+4      	; 0x5aee <__divmodhi4+0xa>
    5aea:	00 94       	com	r0
    5aec:	07 d0       	rcall	.+14     	; 0x5afc <__divmodhi4_neg1>
    5aee:	77 fd       	sbrc	r23, 7
    5af0:	09 d0       	rcall	.+18     	; 0x5b04 <__divmodhi4_neg2>
    5af2:	0e 94 8c 2d 	call	0x5b18	; 0x5b18 <__udivmodhi4>
    5af6:	07 fc       	sbrc	r0, 7
    5af8:	05 d0       	rcall	.+10     	; 0x5b04 <__divmodhi4_neg2>
    5afa:	3e f4       	brtc	.+14     	; 0x5b0a <__divmodhi4_exit>

00005afc <__divmodhi4_neg1>:
    5afc:	90 95       	com	r25
    5afe:	81 95       	neg	r24
    5b00:	9f 4f       	sbci	r25, 0xFF	; 255
    5b02:	08 95       	ret

00005b04 <__divmodhi4_neg2>:
    5b04:	70 95       	com	r23
    5b06:	61 95       	neg	r22
    5b08:	7f 4f       	sbci	r23, 0xFF	; 255

00005b0a <__divmodhi4_exit>:
    5b0a:	08 95       	ret

00005b0c <__tablejump2__>:
    5b0c:	ee 0f       	add	r30, r30
    5b0e:	ff 1f       	adc	r31, r31

00005b10 <__tablejump__>:
    5b10:	05 90       	lpm	r0, Z+
    5b12:	f4 91       	lpm	r31, Z
    5b14:	e0 2d       	mov	r30, r0
    5b16:	09 94       	ijmp

00005b18 <__udivmodhi4>:
    5b18:	aa 1b       	sub	r26, r26
    5b1a:	bb 1b       	sub	r27, r27
    5b1c:	51 e1       	ldi	r21, 0x11	; 17
    5b1e:	07 c0       	rjmp	.+14     	; 0x5b2e <__udivmodhi4_ep>

00005b20 <__udivmodhi4_loop>:
    5b20:	aa 1f       	adc	r26, r26
    5b22:	bb 1f       	adc	r27, r27
    5b24:	a6 17       	cp	r26, r22
    5b26:	b7 07       	cpc	r27, r23
    5b28:	10 f0       	brcs	.+4      	; 0x5b2e <__udivmodhi4_ep>
    5b2a:	a6 1b       	sub	r26, r22
    5b2c:	b7 0b       	sbc	r27, r23

00005b2e <__udivmodhi4_ep>:
    5b2e:	88 1f       	adc	r24, r24
    5b30:	99 1f       	adc	r25, r25
    5b32:	5a 95       	dec	r21
    5b34:	a9 f7       	brne	.-22     	; 0x5b20 <__udivmodhi4_loop>
    5b36:	80 95       	com	r24
    5b38:	90 95       	com	r25
    5b3a:	bc 01       	movw	r22, r24
    5b3c:	cd 01       	movw	r24, r26
    5b3e:	08 95       	ret

00005b40 <__eerd_byte_m32u4>:
    5b40:	f9 99       	sbic	0x1f, 1	; 31
    5b42:	fe cf       	rjmp	.-4      	; 0x5b40 <__eerd_byte_m32u4>
    5b44:	92 bd       	out	0x22, r25	; 34
    5b46:	81 bd       	out	0x21, r24	; 33
    5b48:	f8 9a       	sbi	0x1f, 0	; 31
    5b4a:	99 27       	eor	r25, r25
    5b4c:	80 b5       	in	r24, 0x20	; 32
    5b4e:	08 95       	ret

00005b50 <__eerd_word_m32u4>:
    5b50:	a8 e1       	ldi	r26, 0x18	; 24
    5b52:	b0 e0       	ldi	r27, 0x00	; 0
    5b54:	42 e0       	ldi	r20, 0x02	; 2
    5b56:	50 e0       	ldi	r21, 0x00	; 0
    5b58:	0c 94 c3 2d 	jmp	0x5b86	; 0x5b86 <__eerd_blraw_m32u4>

00005b5c <__eewr_byte_m32u4>:
    5b5c:	26 2f       	mov	r18, r22

00005b5e <__eewr_r18_m32u4>:
    5b5e:	f9 99       	sbic	0x1f, 1	; 31
    5b60:	fe cf       	rjmp	.-4      	; 0x5b5e <__eewr_r18_m32u4>
    5b62:	1f ba       	out	0x1f, r1	; 31
    5b64:	92 bd       	out	0x22, r25	; 34
    5b66:	81 bd       	out	0x21, r24	; 33
    5b68:	20 bd       	out	0x20, r18	; 32
    5b6a:	0f b6       	in	r0, 0x3f	; 63
    5b6c:	f8 94       	cli
    5b6e:	fa 9a       	sbi	0x1f, 2	; 31
    5b70:	f9 9a       	sbi	0x1f, 1	; 31
    5b72:	0f be       	out	0x3f, r0	; 63
    5b74:	01 96       	adiw	r24, 0x01	; 1
    5b76:	08 95       	ret

00005b78 <__eewr_word_m32u4>:
    5b78:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__eewr_byte_m32u4>
    5b7c:	27 2f       	mov	r18, r23
    5b7e:	0c 94 af 2d 	jmp	0x5b5e	; 0x5b5e <__eewr_r18_m32u4>

00005b82 <__eerd_block_m32u4>:
    5b82:	dc 01       	movw	r26, r24
    5b84:	cb 01       	movw	r24, r22

00005b86 <__eerd_blraw_m32u4>:
    5b86:	fc 01       	movw	r30, r24
    5b88:	f9 99       	sbic	0x1f, 1	; 31
    5b8a:	fe cf       	rjmp	.-4      	; 0x5b88 <__eerd_blraw_m32u4+0x2>
    5b8c:	06 c0       	rjmp	.+12     	; 0x5b9a <__eerd_blraw_m32u4+0x14>
    5b8e:	f2 bd       	out	0x22, r31	; 34
    5b90:	e1 bd       	out	0x21, r30	; 33
    5b92:	f8 9a       	sbi	0x1f, 0	; 31
    5b94:	31 96       	adiw	r30, 0x01	; 1
    5b96:	00 b4       	in	r0, 0x20	; 32
    5b98:	0d 92       	st	X+, r0
    5b9a:	41 50       	subi	r20, 0x01	; 1
    5b9c:	50 40       	sbci	r21, 0x00	; 0
    5b9e:	b8 f7       	brcc	.-18     	; 0x5b8e <__eerd_blraw_m32u4+0x8>
    5ba0:	08 95       	ret

00005ba2 <_exit>:
    5ba2:	f8 94       	cli

00005ba4 <__stop_program>:
    5ba4:	ff cf       	rjmp	.-2      	; 0x5ba4 <__stop_program>
